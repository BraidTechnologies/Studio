{"version":3,"file":"content.pack.js","mappings":"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","sources":["./src/content.ts"],"sourcesContent":["\r\ndeclare var artoo: any;\r\ndeclare var chrome: any;\r\ndeclare var axios: any;\r\n\r\nlet haveStartedScrape = false;\r\n\r\n/**\r\n * Function to handle unhandled promise rejections by logging a warning message,\r\n * resetting a flag 'haveStartedScrape' to false, and sending error messages to the background script.\r\n * Also prevents the default handling of the rejection event.\r\n * \r\n * @param event - The PromiseRejectionEvent object containing information about the unhandled promise rejection.\r\n */\r\nfunction suppressUnhandledPromiseRejection (event: PromiseRejectionEvent) {\r\n   console.warn(`Unhandled promise rejection: ${event.reason}`); \r\n \r\n   haveStartedScrape = false;\r\n\r\n   chrome.runtime.sendMessage({type: \"Summary\", text: \"Sorry, we encountered an error reading this page.\"}); \r\n   chrome.runtime.sendMessage({type: \"Classification\", text: \"Sorry, we encountered an error reading this page.\"}); \r\n\r\n   // Prevent the default handling (such as outputting the\r\n   // error to the console)\r\n   event.preventDefault();\r\n}\r\n\r\n\r\n/**\r\n * Function that performs a series of actions to summarize and classify text content.\r\n * It periodically sends messages to the Chrome runtime for summarization and classification progress.\r\n * Retrieves text content from the webpage, summarizes it using an external API, and then classifies the summary.\r\n * Utilizes internal organization modules for scraping, summarization, and classification.\r\n * @param key - A string key used for internal operations.\r\n */\r\nfunction startScrape (key: string) : void {\r\n\r\n    let NN = 1024*100; // we only have an 8k buffer, 100k string is 12 calls to LLM then another to summarise that. \r\n    let haveSummary = false;\r\n    let baseSummaryText = \"Summarising ...\";\r\n    let haveClassification = false;\r\n    let baseClassificationText = \"Classifying ...\";\r\n    let allText = \"\";\r\n\r\n    // This interval loop sends progress messages \r\n    let interval = setInterval (() => {\r\n\r\n      if (!haveSummary || !haveClassification) {\r\n\r\n         if (!haveSummary) {\r\n            baseSummaryText = baseSummaryText + \".\";\r\n            chrome.runtime.sendMessage({type: \"Summary\", text: baseSummaryText});       \r\n         }\r\n\r\n         if (!haveClassification) {\r\n            baseClassificationText = baseClassificationText + \".\";\r\n            chrome.runtime.sendMessage({type: \"Classification\", text: baseClassificationText});       \r\n         }\r\n\r\n      }\r\n      else {\r\n         clearInterval (interval);\r\n      }\r\n    }, 1000);\r\n\r\n    // This timeout does the actual scrape  \r\n    setTimeout (() => {\r\n\r\n      try {\r\n         window.addEventListener(\"unhandledrejection\", suppressUnhandledPromiseRejection);\r\n\r\n         // First try to get all plain text, if that doesnt work, get the headers\r\n         // If that doesnt work, scarape all divs (like 'the guardian' website)\r\n         var scraped = artoo.scrape('p', 'text');\r\n         if (scraped.length === 0) {\r\n            for (var i = 0; i < 6; i++) {\r\n               scraped = scraped = artoo.scrape('h' + i.toString(), 'text');\r\n            }\r\n         }\r\n         if (scraped.length === 0) {\r\n            scraped = artoo.scrape('div', 'text');\r\n         }       \r\n      \r\n         allText = scraped.join(' \\n');\r\n\r\n         if (allText.length > NN) \r\n            allText = allText.substring(0, NN);\r\n\r\n         window.removeEventListener(\"unhandledrejection\", suppressUnhandledPromiseRejection);         \r\n      }\r\n      catch {\r\n         window.removeEventListener(\"unhandledrejection\", suppressUnhandledPromiseRejection);          \r\n         allText = \"\";\r\n      }\r\n\r\n      var summarizeQuery = 'https://braidapi.azurewebsites.net/api/summarize?session=49b65194-26e1-4041-ab11-4078229f478a';\r\n      var classifyQuery = 'https://braidapi.azurewebsites.net/api/classify?session=49b65194-26e1-4041-ab11-4078229f478a';\r\n\r\n      axios.post(summarizeQuery, {\r\n         data: {\r\n            text: allText\r\n         },\r\n         headers: {\r\n            'Content-Type': 'application/json'\r\n         }\r\n      }).then ((summaryRes: any) => {\r\n         haveSummary = true;          \r\n         if (summaryRes.status === 200) {\r\n            chrome.runtime.sendMessage({type: \"Summary\", text: summaryRes.data});\r\n            \r\n            axios.post(classifyQuery, {\r\n               data: {\r\n                  text: summaryRes.data\r\n               },\r\n               headers: {\r\n                  'Content-Type': 'application/json'\r\n               }\r\n            }).then ((classifyRes: any) => {\r\n               haveClassification = true;          \r\n               if (classifyRes.status === 200) {\r\n                  chrome.runtime.sendMessage({type: \"Classification\", text: classifyRes.data});\r\n               } \r\n               else {\r\n                  chrome.runtime.sendMessage({type: \"Classification\", text: \"Sorry, could not fetch a classification from the Waterfall server.\"}); \r\n               }\r\n               // whenever we finish scraping - either successfully or a fail - we allow the user to start another one\r\n               haveStartedScrape = false;\r\n            })\r\n            .catch ((e : any) => {     \r\n               haveClassification = true;  \r\n               console.error (e);   \r\n               chrome.runtime.sendMessage({type: \"Classification\", text: \"Sorry, could not fetch a classification from the Waterfall server.\"});  \r\n               // whenever we finish scraping - either successfully or a fail - we allow the user to start another one\r\n               haveStartedScrape = false;\r\n\r\n            });        \r\n         } \r\n         else {\r\n            haveSummary = true;  \r\n            haveClassification = true;   \r\n            chrome.runtime.sendMessage({type: \"Summary\", text: \"Sorry, could not fetch a summary from the Waterfall server.\"}); \r\n            chrome.runtime.sendMessage({type: \"Classification\", text: \"Sorry, could not fetch a classification from the Waterfall server.\"}); \r\n            // whenever we finish scraping - either successfully or a fail - we allow the user to start another one\r\n            haveStartedScrape = false;\r\n\r\n         }\r\n      })\r\n      .catch ((e: any) => {     \r\n         haveSummary = true;  \r\n         haveClassification = true;\r\n         console.error (e);   \r\n         chrome.runtime.sendMessage({type: \"Summary\", text: \"Sorry, could not fetch a summary from the Waterfall server.\"});                 \r\n         chrome.runtime.sendMessage({type: \"Classification\", text: \"Sorry, could not fetch a classification from the Waterfall server.\"}); \r\n         // whenever we finish scraping - either successfully or a fail - we allow the user to start another one\r\n         haveStartedScrape = false;\r\n\r\n      });   \r\n\r\n    }, 500);\r\n\r\n}\r\n\r\n\r\n// Listen to messages from the popup.js script \r\nchrome.runtime.onMessage.addListener(function (message: any) {\r\n\t\r\n   console.log (\"Got message\");   \r\n\r\n   if (message.type === \"Key\" && !haveStartedScrape) {\r\n      console.log (\"Starting scrape\");\r\n      haveStartedScrape = true;\r\n      startScrape (message.text);\r\n   }\r\n});    \r\n\r\nconsole.log (\"Content script loaded\");\r\n\r\n//startScrape (\"49b65194-26e1-4041-ab11-4078229f478a\");"],"names":[],"sourceRoot":""}