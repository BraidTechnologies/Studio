{"version":3,"file":"popup.pack.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,mCAAmC,mCAAmC;AACtE,gEAAgE,wCAAwC;AACxG;AACA;AACA,iCAAiC;AACjC,iCAAiC,GAAG;AACpC,gBAAgB;AAChB,aAAa;AACb;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,C","sources":["./src/popup.js"],"sourcesContent":["var haveQueuedCall = false;\r\nvar mostRecent = \"\";\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n\r\n   var inputElement = document.getElementById('key');\r\n\r\n   // Add an event listener for the 'change' event\r\n   inputElement.addEventListener('input', function() {\r\n     console.log('Input value changed to: ' + inputElement.value);\r\n\r\n     changeHandler (inputElement.value);\r\n   });\r\n\r\n   // Add an event listener for the 'paste' event\r\n   inputElement.addEventListener('paste', function() {\r\n      // Your script to run when the input value changes\r\n      console.log('Input value pasted to: ' + inputElement.value);\r\n    \r\n      changeHandler (inputElement.value);\r\n   });\r\n\r\n  }, false)\r\n\r\nfunction attemptSummary (key) {\r\n\r\n   // Only try if it looks like a GUID\r\n   if (key.length !== 36) {\r\n      haveQueuedCall = false;\r\n      return;\r\n   }\r\n\r\n   var sessionQuery = 'https://braidapi.azurewebsites.net/api/checksession?session=' + mostRecent;\r\n\r\n   axios.post(sessionQuery, {\r\n      headers: {\r\n         'Content-Type': 'application/json'\r\n      }\r\n   }).then (async (checkSessionRes) => {\r\n      haveQueuedCall = false;\r\n      if (checkSessionRes.status === 200) {   \r\n\r\n         // This test allows us to run this page by opening it in broswer, which helps debugging.         \r\n         if (chrome?.tabs) {\r\n\r\n            // Broadcast a message to all tabs with they key - query the active tab does not seem to alays work\r\n            chrome.tabs.query({}, tabs => {\r\n\r\n               chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {                  \r\n                  result = chrome.tabs.sendMessage(tabs[0].id, {type: \"Key\", text: checkSessionRes.data});\r\n\r\n                  result\r\n                  .then (() => {})\r\n                  .catch (()=> {}); // swallow the exception case where there is no recieved               \r\n               });\r\n            });\r\n         };            \r\n      }\r\n   })\r\n   .catch ((e) => {\r\n      haveQueuedCall = false;\r\n      console.error (e);\r\n   });\r\n}\r\n\r\nfunction changeHandler(value) {\r\n   \r\n   console.log (value);\r\n   mostRecent = value;\r\n\r\n   if (!haveQueuedCall) {\r\n\r\n      haveQueuedCall = true;\r\n\r\n      setTimeout (() => {\r\n\r\n         attemptSummary (mostRecent);  \r\n   \r\n      }, 500);\r\n   } \r\n}\r\n\r\n// Inject the content.js script into the current tab after the popout has loaded\r\nwindow.addEventListener('load', function (evt) {\r\n});\r\n\r\n// Listen to messages from the payload.js script and write to popup.html\r\n// This test allows us to run this page by opening it in broswer, which helps debugging. \r\nif (chrome?.extension) {\r\n\r\n   chrome.runtime.onMessage.addListener(function (message) {\r\n\t\r\n      if (message.type === \"Summary\")\r\n\t      document.getElementById('summarytext').innerHTML = message.text;\r\n      if (message.type === \"Classification\")\r\n\t      document.getElementById('classificationtext').innerHTML = message.text;\r\n\r\n   });\r\n}"],"names":[],"sourceRoot":""}