# Generated by ts2python version 0.7.5 on 2024-11-05 13:56:28.905808
# pylint: disable=invalid-name
"""
Defines several class structures for storing and querying
data related to embeddings and text renderings.

Classes:
    IStoredEmbedding: representing an embedding with a model ID
        and a list of float values.
    IStoredTextRendering: representing a text rendering with a
        model ID and text content.
    IStoredChunk: Inherits from IStorable, representing a chunk of data with
        additional attributes for functional key, parent chunk ID, original
        text, and related stored embeddings and text renderings.
    IStoredChunkQuerySpec: specifying query parameters for
        stored chunks, including a functional key.
"""

from typing import Union, List
from .type_utilities import safe_cast
from .storable_types import IStorable


class IStoredEmbedding:
    """
    A TypedDict representing a stored embedding.

    Attributes:
       modelId (str): The identifier for the model associated with the embedding.
       embedding (List[float]): A list of float values representing the embedding.
    """
    modelId: str
    embedding: List[float]

    def __init__(self, other=None):
        if other:
            self.modelId = other.modelId
            self.embedding = other.embedding
        else:
            self.modelId = None
            self.embedding = None


class IStoredTextRendering:
    """
    A TypedDict representing a text rendering.

    Attributes:
       modelId (str): The identifier for the model associated with the text rendering.
       text (str): The content of the text rendering.
    """
    modelId: str
    text: str

    def __init__(self, other=None):
        if other:
            self.modelId = other.modelId
            self.text = other.text
        else:
            self.modelId = None
            self.text = None


def create_text_rendering(text: str, model: str) -> IStoredTextRendering:
    ''' Utility function to create a text rendering '''
    rendering: IStoredTextRendering = IStoredTextRendering()
    rendering.text = text
    rendering.modelId = model

    return rendering

def create_embedding(embedding: list[float], model: str) -> IStoredEmbedding:
    ''' Utility function to create an embedding '''
    stored_embedding: IStoredEmbedding = IStoredEmbedding()
    stored_embedding.embedding = embedding
    stored_embedding.modelId = model

    return stored_embedding


class IStoredChunk(IStorable):
    """
    Represents a stored chunk of data with various attributes.

    Attributes:
    parentChunkId (Union[str, None]): The ID of the parent chunk, if any.
    originalText (Union[str, None]): The original text content of the chunk.
    storedEmbedding (Union[IStoredEmbedding, None]): An optional stored embedding associated with the chunk.
    storedSummary (Union[IStoredTextRendering, None]): An optional stored summary text rendering.
    storedTitle (Union[IStoredTextRendering, None]): An optional stored title text rendering.
    url (Union[str, None]): web location
    relatedChunks (Union[List[str], None]): A list of IDs of related chunks, if any.
    """
    parentChunkId: Union[str, None]
    originalText: Union[str, None]
    storedEmbedding: Union[IStoredEmbedding, None]
    storedSummary: Union[IStoredTextRendering, None]
    storedTitle: Union[IStoredTextRendering, None]
    url: Union[str, None]
    relatedChunks: Union[List[str], None]

    def __init__(self, other=None):
        super().__init__(other)

        if other:
            self.parentChunkId = other.parentChunkId
            self.originalText = other.originalText
            self.storedEmbedding = safe_cast(
                other.storedEmbedding, IStoredEmbedding)
            self.storedSummary = safe_cast(
                other.storedSummary, IStoredTextRendering)
            self.storedTitle = safe_cast(
                other.storedTitle, IStoredTextRendering)
            if other.relatedChunks:
                self.relatedChunks = other.relatedChunks[:]
            else:
                self.relatedChunks = None
            self.url = other.url
        else:
            self.parentChunkId = None
            self.originalText = None
            self.storedEmbedding = None
            self.storedSummary = None
            self.storedTitle = None
            self.relatedChunks = None
            self.url = None
