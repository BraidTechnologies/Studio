****************************************
Boxer\coverage\IAdminRepository.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for IAdminRepository.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> IAdminRepository.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">87.5% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>7/8</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>0/0</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">66.66% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>2/3</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">87.5% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>7/8</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
&nbsp;
import { Persona} from "./Persona";
import { EConfigStrings } from "./ConfigStrings";
&nbsp;
export interface IAdminRepository {
&nbsp;
   isAdmin (persona : Persona) : Promise&lt;boolean&gt;; 
}
&nbsp;
export function <span class="fstat-no" title="function not covered" >getDetaultAdminRepository(</span>): IAdminRepository {
<span class="cstat-no" title="statement not covered" >   return new DefaultAdminRepository();</span>
}
&nbsp;
// THis is a local implementation of IAdminRepository that just searches strigs for a well know name
// If it is present, user can be an admin. 
export class DefaultAdminRepository implements IAdminRepository {
&nbsp;
   isAdmin (persona : Persona) : Promise&lt;boolean&gt; {
      
      let done = new Promise&lt;boolean&gt;(function(resolve, reject) {
&nbsp;
         let isAdmin = (EConfigStrings.kAdminUserNames.includes (persona.name));
&nbsp;
         resolve (isAdmin);
      });
&nbsp;
      return done;
   }
}</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\Icons.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for Icons.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> Icons.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>6/6</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>2/2</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>1/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>6/6</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
&nbsp;
export enum EIcon {
&nbsp;
   kPersonPersona = "kPersonPersona", 
   kLLMPersona = "kLLMPersona", 
   kBotPersona = "kBotPersona",   // For backwards compatibility 
   kUnknownPersona = "kUnknownPersona",
   kFromBcd = "kFromBcd"
   
};
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\IEmbeddingRepository.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for IEmbeddingRepository.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> IEmbeddingRepository.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>2/2</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>0/0</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>0/0</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>2/2</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
&nbsp;
// Internal import
import { EmbeddingMatchAccumulator } from "./Embedding";
import { Message } from "./Message";
&nbsp;
export const kDefaultSearchChunkCount: number = 2;
export const kDefaultMinimumCosineSimilarity = 0.825;
&nbsp;
export interface IEmbeddingRepository  {
&nbsp;
   /**
    * lookupMostSimilar 
    * look to see of we have similar content 
    */      
   lookupMostSimilar (embedding: Array&lt;number&gt;, url: string | undefined, 
      similarityThresholdLo: number, howMany: number) : Promise&lt;EmbeddingMatchAccumulator&gt;;
&nbsp;
   /**
    * lookUpSimilarfromUrl 
    * look to see of we have similar content from other sources
    */   
   lookupSimilarfromUrl (url: string, similarityThresholdLo: number, howMany: number) : Promise&lt;EmbeddingMatchAccumulator&gt;;
&nbsp;
   /**
    * lookForSuggestedContent 
    * look to see of we have similar content from other sources
    */   
   lookForRelatedContent (url_: string | undefined, messageText: string) : Promise&lt;Message | undefined&gt;;
&nbsp;
   /**
    * lookupUrlSummary 
    * looks for summary given a URL
    */   
   lookupUrlSummary (url_: string) : Promise&lt;string | undefined&gt;;      
}
&nbsp;
&nbsp;
&nbsp;
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\IEmbeddingRepositoryFactory.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for IEmbeddingRepositoryFactory.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> IEmbeddingRepositoryFactory.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>3/3</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>0/0</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>1/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>3/3</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">13x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
&nbsp;
// Internal imports
import { SessionKey } from "./Keys";
import { IEmbeddingRepository } from "./IEmbeddingRepository";
import { EmbeddingRepositoryFile } from "./EmbeddingRepositoryFile";
&nbsp;
export function getEmbeddingRepository (sessionKey_: SessionKey) : IEmbeddingRepository {
   return new EmbeddingRepositoryFile();   
}
&nbsp;
&nbsp;
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\IKeyGeneratorFactory.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for IKeyGeneratorFactory.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> IKeyGeneratorFactory.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>3/3</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>0/0</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>1/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>3/3</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">27x</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
&nbsp;
import { IKeyGenerator } from './IKeyGenerator';
import { UuidKeyGenerator } from './UuidKeyGenerator';
&nbsp;
/// &lt;summary&gt;
/// getDefaultKeyGenerator - returns the key generator
/// &lt;/summary&gt;
&nbsp;
export function getDefaultKeyGenerator(): IKeyGenerator {
   return new UuidKeyGenerator();
}</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\index.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for All files</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1>All files</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">88.52% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>1667/1883</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">76.2% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>522/685</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">88.48% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>369/417</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">88.52% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>1636/1848</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <div class="pad1">
<table class="coverage-summary">
<thead>
<tr>
   <th data-col="file" data-fmt="html" data-html="true" class="file">File</th>
   <th data-col="pic" data-type="number" data-fmt="html" data-html="true" class="pic"></th>
   <th data-col="statements" data-type="number" data-fmt="pct" class="pct">Statements</th>
   <th data-col="statements_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="branches" data-type="number" data-fmt="pct" class="pct">Branches</th>
   <th data-col="branches_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="functions" data-type="number" data-fmt="pct" class="pct">Functions</th>
   <th data-col="functions_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="lines" data-type="number" data-fmt="pct" class="pct">Lines</th>
   <th data-col="lines_raw" data-type="number" data-fmt="html" class="abs"></th>
</tr>
</thead>
<tbody><tr>
	<td class="file high" data-value="AIConnection.ts"><a href="AIConnection.ts.html">AIConnection.ts</a></td>
	<td data-value="83.54" class="pic high">
	<div class="chart"><div class="cover-fill" style="width: 83%"></div><div class="cover-empty" style="width: 17%"></div></div>
	</td>
	<td data-value="83.54" class="pct high">83.54%</td>
	<td data-value="231" class="abs high">193/231</td>
	<td data-value="79.41" class="pct medium">79.41%</td>
	<td data-value="68" class="abs medium">54/68</td>
	<td data-value="77.41" class="pct medium">77.41%</td>
	<td data-value="31" class="abs medium">24/31</td>
	<td data-value="83.48" class="pct high">83.48%</td>
	<td data-value="224" class="abs high">187/224</td>
	</tr>

<tr>
	<td class="file high" data-value="ActivityRecord.ts"><a href="ActivityRecord.ts.html">ActivityRecord.ts</a></td>
	<td data-value="96.2" class="pic high">
	<div class="chart"><div class="cover-fill" style="width: 96%"></div><div class="cover-empty" style="width: 4%"></div></div>
	</td>
	<td data-value="96.2" class="pct high">96.2%</td>
	<td data-value="79" class="abs high">76/79</td>
	<td data-value="90" class="pct high">90%</td>
	<td data-value="40" class="abs high">36/40</td>
	<td data-value="95" class="pct high">95%</td>
	<td data-value="20" class="abs high">19/20</td>
	<td data-value="96.2" class="pct high">96.2%</td>
	<td data-value="79" class="abs high">76/79</td>
	</tr>

<tr>
	<td class="file high" data-value="ActivityRecordLikeUnlike.ts"><a href="ActivityRecordLikeUnlike.ts.html">ActivityRecordLikeUnlike.ts</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="27" class="abs high">27/27</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="6" class="abs high">6/6</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="10" class="abs high">10/10</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="27" class="abs high">27/27</td>
	</tr>

<tr>
	<td class="file high" data-value="ActivityRecordUrl.ts"><a href="ActivityRecordUrl.ts.html">ActivityRecordUrl.ts</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="35" class="abs high">35/35</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="12" class="abs high">12/12</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="11" class="abs high">11/11</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="35" class="abs high">35/35</td>
	</tr>

<tr>
	<td class="file high" data-value="ActivityRepositoryCosmos.ts"><a href="ActivityRepositoryCosmos.ts.html">ActivityRepositoryCosmos.ts</a></td>
	<td data-value="81.81" class="pic high">
	<div class="chart"><div class="cover-fill" style="width: 81%"></div><div class="cover-empty" style="width: 19%"></div></div>
	</td>
	<td data-value="81.81" class="pct high">81.81%</td>
	<td data-value="88" class="abs high">72/88</td>
	<td data-value="47.36" class="pct low">47.36%</td>
	<td data-value="19" class="abs low">9/19</td>
	<td data-value="68.18" class="pct medium">68.18%</td>
	<td data-value="22" class="abs medium">15/22</td>
	<td data-value="81.6" class="pct high">81.6%</td>
	<td data-value="87" class="abs high">71/87</td>
	</tr>

<tr>
	<td class="file medium" data-value="ActivityRepositoryMongo.ts"><a href="ActivityRepositoryMongo.ts.html">ActivityRepositoryMongo.ts</a></td>
	<td data-value="79.41" class="pic medium">
	<div class="chart"><div class="cover-fill" style="width: 79%"></div><div class="cover-empty" style="width: 21%"></div></div>
	</td>
	<td data-value="79.41" class="pct medium">79.41%</td>
	<td data-value="68" class="abs medium">54/68</td>
	<td data-value="57.14" class="pct medium">57.14%</td>
	<td data-value="14" class="abs medium">8/14</td>
	<td data-value="66.66" class="pct medium">66.66%</td>
	<td data-value="18" class="abs medium">12/18</td>
	<td data-value="79.1" class="pct medium">79.1%</td>
	<td data-value="67" class="abs medium">53/67</td>
	</tr>

<tr>
	<td class="file medium" data-value="Asserts.ts"><a href="Asserts.ts.html">Asserts.ts</a></td>
	<td data-value="77.77" class="pic medium">
	<div class="chart"><div class="cover-fill" style="width: 77%"></div><div class="cover-empty" style="width: 23%"></div></div>
	</td>
	<td data-value="77.77" class="pct medium">77.77%</td>
	<td data-value="9" class="abs medium">7/9</td>
	<td data-value="50" class="pct medium">50%</td>
	<td data-value="4" class="abs medium">2/4</td>
	<td data-value="50" class="pct medium">50%</td>
	<td data-value="2" class="abs medium">1/2</td>
	<td data-value="80" class="pct high">80%</td>
	<td data-value="5" class="abs high">4/5</td>
	</tr>

<tr>
	<td class="file medium" data-value="BraidFluidConnection.ts"><a href="BraidFluidConnection.ts.html">BraidFluidConnection.ts</a></td>
	<td data-value="65.75" class="pic medium">
	<div class="chart"><div class="cover-fill" style="width: 65%"></div><div class="cover-empty" style="width: 35%"></div></div>
	</td>
	<td data-value="65.75" class="pct medium">65.75%</td>
	<td data-value="73" class="abs medium">48/73</td>
	<td data-value="33.33" class="pct low">33.33%</td>
	<td data-value="24" class="abs low">8/24</td>
	<td data-value="76.92" class="pct medium">76.92%</td>
	<td data-value="13" class="abs medium">10/13</td>
	<td data-value="65.71" class="pct medium">65.71%</td>
	<td data-value="70" class="abs medium">46/70</td>
	</tr>

<tr>
	<td class="file medium" data-value="CaucusFramework.ts"><a href="CaucusFramework.ts.html">CaucusFramework.ts</a></td>
	<td data-value="75.92" class="pic medium">
	<div class="chart"><div class="cover-fill" style="width: 75%"></div><div class="cover-empty" style="width: 25%"></div></div>
	</td>
	<td data-value="75.92" class="pct medium">75.92%</td>
	<td data-value="108" class="abs medium">82/108</td>
	<td data-value="48.48" class="pct low">48.48%</td>
	<td data-value="33" class="abs low">16/33</td>
	<td data-value="95.23" class="pct high">95.23%</td>
	<td data-value="21" class="abs high">20/21</td>
	<td data-value="75.92" class="pct medium">75.92%</td>
	<td data-value="108" class="abs medium">82/108</td>
	</tr>

<tr>
	<td class="file high" data-value="ConfigStrings.ts"><a href="ConfigStrings.ts.html">ConfigStrings.ts</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="77" class="abs high">77/77</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="4" class="abs high">4/4</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="2" class="abs high">2/2</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="77" class="abs high">77/77</td>
	</tr>

<tr>
	<td class="file high" data-value="Debounce.ts"><a href="Debounce.ts.html">Debounce.ts</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="9" class="abs high">9/9</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="2" class="abs high">2/2</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="3" class="abs high">3/3</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="9" class="abs high">9/9</td>
	</tr>

<tr>
	<td class="file high" data-value="Embedding.ts"><a href="Embedding.ts.html">Embedding.ts</a></td>
	<td data-value="92.24" class="pic high">
	<div class="chart"><div class="cover-fill" style="width: 92%"></div><div class="cover-empty" style="width: 8%"></div></div>
	</td>
	<td data-value="92.24" class="pct high">92.24%</td>
	<td data-value="129" class="abs high">119/129</td>
	<td data-value="81.52" class="pct high">81.52%</td>
	<td data-value="92" class="abs high">75/92</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="26" class="abs high">26/26</td>
	<td data-value="92.06" class="pct high">92.06%</td>
	<td data-value="126" class="abs high">116/126</td>
	</tr>

<tr>
	<td class="file high" data-value="EmbeddingRepositoryFile.ts"><a href="EmbeddingRepositoryFile.ts.html">EmbeddingRepositoryFile.ts</a></td>
	<td data-value="87.87" class="pic high">
	<div class="chart"><div class="cover-fill" style="width: 87%"></div><div class="cover-empty" style="width: 13%"></div></div>
	</td>
	<td data-value="87.87" class="pct high">87.87%</td>
	<td data-value="99" class="abs high">87/99</td>
	<td data-value="61.53" class="pct medium">61.53%</td>
	<td data-value="26" class="abs medium">16/26</td>
	<td data-value="87.5" class="pct high">87.5%</td>
	<td data-value="16" class="abs high">14/16</td>
	<td data-value="87.23" class="pct high">87.23%</td>
	<td data-value="94" class="abs high">82/94</td>
	</tr>

<tr>
	<td class="file high" data-value="Environment.ts"><a href="Environment.ts.html">Environment.ts</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="10" class="abs high">10/10</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="2" class="abs high">2/2</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="3" class="abs high">3/3</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="10" class="abs high">10/10</td>
	</tr>

<tr>
	<td class="file high" data-value="Errors.ts"><a href="Errors.ts.html">Errors.ts</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="31" class="abs high">31/31</td>
	<td data-value="50" class="pct medium">50%</td>
	<td data-value="24" class="abs medium">12/24</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="6" class="abs high">6/6</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="31" class="abs high">31/31</td>
	</tr>

<tr>
	<td class="file medium" data-value="FluidConnection.ts"><a href="FluidConnection.ts.html">FluidConnection.ts</a></td>
	<td data-value="69.64" class="pic medium">
	<div class="chart"><div class="cover-fill" style="width: 69%"></div><div class="cover-empty" style="width: 31%"></div></div>
	</td>
	<td data-value="69.64" class="pct medium">69.64%</td>
	<td data-value="56" class="abs medium">39/56</td>
	<td data-value="35.71" class="pct low">35.71%</td>
	<td data-value="14" class="abs low">5/14</td>
	<td data-value="72.72" class="pct medium">72.72%</td>
	<td data-value="11" class="abs medium">8/11</td>
	<td data-value="69.64" class="pct medium">69.64%</td>
	<td data-value="56" class="abs medium">39/56</td>
	</tr>

<tr>
	<td class="file medium" data-value="FluidConnectionProps.ts"><a href="FluidConnectionProps.ts.html">FluidConnectionProps.ts</a></td>
	<td data-value="69.56" class="pic medium">
	<div class="chart"><div class="cover-fill" style="width: 69%"></div><div class="cover-empty" style="width: 31%"></div></div>
	</td>
	<td data-value="69.56" class="pct medium">69.56%</td>
	<td data-value="23" class="abs medium">16/23</td>
	<td data-value="50" class="pct medium">50%</td>
	<td data-value="2" class="abs medium">1/2</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="3" class="abs high">3/3</td>
	<td data-value="69.56" class="pct medium">69.56%</td>
	<td data-value="23" class="abs medium">16/23</td>
	</tr>

<tr>
	<td class="file high" data-value="IActivityRepositoryFactory.ts"><a href="IActivityRepositoryFactory.ts.html">IActivityRepositoryFactory.ts</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="3" class="abs high">3/3</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="0" class="abs high">0/0</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="1" class="abs high">1/1</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="3" class="abs high">3/3</td>
	</tr>

<tr>
	<td class="file high" data-value="IAdminRepository.ts"><a href="IAdminRepository.ts.html">IAdminRepository.ts</a></td>
	<td data-value="87.5" class="pic high">
	<div class="chart"><div class="cover-fill" style="width: 87%"></div><div class="cover-empty" style="width: 13%"></div></div>
	</td>
	<td data-value="87.5" class="pct high">87.5%</td>
	<td data-value="8" class="abs high">7/8</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="0" class="abs high">0/0</td>
	<td data-value="66.66" class="pct medium">66.66%</td>
	<td data-value="3" class="abs medium">2/3</td>
	<td data-value="87.5" class="pct high">87.5%</td>
	<td data-value="8" class="abs high">7/8</td>
	</tr>

<tr>
	<td class="file high" data-value="IEmbeddingRepository.ts"><a href="IEmbeddingRepository.ts.html">IEmbeddingRepository.ts</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="2" class="abs high">2/2</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="0" class="abs high">0/0</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="0" class="abs high">0/0</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="2" class="abs high">2/2</td>
	</tr>

<tr>
	<td class="file high" data-value="IEmbeddingRepositoryFactory.ts"><a href="IEmbeddingRepositoryFactory.ts.html">IEmbeddingRepositoryFactory.ts</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="3" class="abs high">3/3</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="0" class="abs high">0/0</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="1" class="abs high">1/1</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="3" class="abs high">3/3</td>
	</tr>

<tr>
	<td class="file high" data-value="IKeyGeneratorFactory.ts"><a href="IKeyGeneratorFactory.ts.html">IKeyGeneratorFactory.ts</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="3" class="abs high">3/3</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="0" class="abs high">0/0</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="1" class="abs high">1/1</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="3" class="abs high">3/3</td>
	</tr>

<tr>
	<td class="file high" data-value="Icons.ts"><a href="Icons.ts.html">Icons.ts</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="6" class="abs high">6/6</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="2" class="abs high">2/2</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="1" class="abs high">1/1</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="6" class="abs high">6/6</td>
	</tr>

<tr>
	<td class="file high" data-value="JoinDetails.ts"><a href="JoinDetails.ts.html">JoinDetails.ts</a></td>
	<td data-value="82.75" class="pic high">
	<div class="chart"><div class="cover-fill" style="width: 82%"></div><div class="cover-empty" style="width: 18%"></div></div>
	</td>
	<td data-value="82.75" class="pct high">82.75%</td>
	<td data-value="29" class="abs high">24/29</td>
	<td data-value="94.73" class="pct high">94.73%</td>
	<td data-value="19" class="abs high">18/19</td>
	<td data-value="50" class="pct medium">50%</td>
	<td data-value="10" class="abs medium">5/10</td>
	<td data-value="82.75" class="pct high">82.75%</td>
	<td data-value="29" class="abs high">24/29</td>
	</tr>

<tr>
	<td class="file high" data-value="JoinPageValidator.ts"><a href="JoinPageValidator.ts.html">JoinPageValidator.ts</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="4" class="abs high">4/4</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="0" class="abs high">0/0</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="2" class="abs high">2/2</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="4" class="abs high">4/4</td>
	</tr>

<tr>
	<td class="file high" data-value="KeyRetriever.ts"><a href="KeyRetriever.ts.html">KeyRetriever.ts</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="16" class="abs high">16/16</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="4" class="abs high">4/4</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="3" class="abs high">3/3</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="16" class="abs high">16/16</td>
	</tr>

<tr>
	<td class="file high" data-value="Keys.ts"><a href="Keys.ts.html">Keys.ts</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="11" class="abs high">11/11</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="0" class="abs high">0/0</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="6" class="abs high">6/6</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="11" class="abs high">11/11</td>
	</tr>

<tr>
	<td class="file high" data-value="Like.ts"><a href="Like.ts.html">Like.ts</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="23" class="abs high">23/23</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="6" class="abs high">6/6</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="9" class="abs high">9/9</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="23" class="abs high">23/23</td>
	</tr>

<tr>
	<td class="file medium" data-value="Logging.ts"><a href="Logging.ts.html">Logging.ts</a></td>
	<td data-value="72.22" class="pic medium">
	<div class="chart"><div class="cover-fill" style="width: 72%"></div><div class="cover-empty" style="width: 28%"></div></div>
	</td>
	<td data-value="72.22" class="pct medium">72.22%</td>
	<td data-value="18" class="abs medium">13/18</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="0" class="abs high">0/0</td>
	<td data-value="50" class="pct medium">50%</td>
	<td data-value="10" class="abs medium">5/10</td>
	<td data-value="72.22" class="pct medium">72.22%</td>
	<td data-value="18" class="abs medium">13/18</td>
	</tr>

<tr>
	<td class="file high" data-value="Message.ts"><a href="Message.ts.html">Message.ts</a></td>
	<td data-value="95.58" class="pic high">
	<div class="chart"><div class="cover-fill" style="width: 95%"></div><div class="cover-empty" style="width: 5%"></div></div>
	</td>
	<td data-value="95.58" class="pct high">95.58%</td>
	<td data-value="136" class="abs high">130/136</td>
	<td data-value="82.5" class="pct high">82.5%</td>
	<td data-value="40" class="abs high">33/40</td>
	<td data-value="96.77" class="pct high">96.77%</td>
	<td data-value="31" class="abs high">30/31</td>
	<td data-value="95.52" class="pct high">95.52%</td>
	<td data-value="134" class="abs high">128/134</td>
	</tr>

<tr>
	<td class="file high" data-value="MessageActivityRecord.ts"><a href="MessageActivityRecord.ts.html">MessageActivityRecord.ts</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="35" class="abs high">35/35</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="12" class="abs high">12/12</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="11" class="abs high">11/11</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="35" class="abs high">35/35</td>
	</tr>

<tr>
	<td class="file high" data-value="NotificationFramework.ts"><a href="NotificationFramework.ts.html">NotificationFramework.ts</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="104" class="abs high">104/104</td>
	<td data-value="89.13" class="pct high">89.13%</td>
	<td data-value="46" class="abs high">41/46</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="37" class="abs high">37/37</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="103" class="abs high">103/103</td>
	</tr>

<tr>
	<td class="file high" data-value="Persona.ts"><a href="Persona.ts.html">Persona.ts</a></td>
	<td data-value="95.27" class="pic high">
	<div class="chart"><div class="cover-fill" style="width: 95%"></div><div class="cover-empty" style="width: 5%"></div></div>
	</td>
	<td data-value="95.27" class="pct high">95.27%</td>
	<td data-value="127" class="abs high">121/127</td>
	<td data-value="91.17" class="pct high">91.17%</td>
	<td data-value="68" class="abs high">62/68</td>
	<td data-value="96.77" class="pct high">96.77%</td>
	<td data-value="31" class="abs high">30/31</td>
	<td data-value="95.23" class="pct high">95.23%</td>
	<td data-value="126" class="abs high">120/126</td>
	</tr>

<tr>
	<td class="file medium" data-value="Queue.ts"><a href="Queue.ts.html">Queue.ts</a></td>
	<td data-value="78.57" class="pic medium">
	<div class="chart"><div class="cover-fill" style="width: 78%"></div><div class="cover-empty" style="width: 22%"></div></div>
	</td>
	<td data-value="78.57" class="pct medium">78.57%</td>
	<td data-value="14" class="abs medium">11/14</td>
	<td data-value="66.66" class="pct medium">66.66%</td>
	<td data-value="6" class="abs medium">4/6</td>
	<td data-value="66.66" class="pct medium">66.66%</td>
	<td data-value="6" class="abs medium">4/6</td>
	<td data-value="84.61" class="pct high">84.61%</td>
	<td data-value="13" class="abs high">11/13</td>
	</tr>

<tr>
	<td class="file high" data-value="SharedEmbedding.ts"><a href="SharedEmbedding.ts.html">SharedEmbedding.ts</a></td>
	<td data-value="94" class="pic high">
	<div class="chart"><div class="cover-fill" style="width: 94%"></div><div class="cover-empty" style="width: 6%"></div></div>
	</td>
	<td data-value="94" class="pct high">94%</td>
	<td data-value="100" class="abs high">94/100</td>
	<td data-value="82.6" class="pct high">82.6%</td>
	<td data-value="46" class="abs high">38/46</td>
	<td data-value="90.47" class="pct high">90.47%</td>
	<td data-value="21" class="abs high">19/21</td>
	<td data-value="93.75" class="pct high">93.75%</td>
	<td data-value="96" class="abs high">90/96</td>
	</tr>

<tr>
	<td class="file high" data-value="StreamingFramework.ts"><a href="StreamingFramework.ts.html">StreamingFramework.ts</a></td>
	<td data-value="96.15" class="pic high">
	<div class="chart"><div class="cover-fill" style="width: 96%"></div><div class="cover-empty" style="width: 4%"></div></div>
	</td>
	<td data-value="96.15" class="pct high">96.15%</td>
	<td data-value="26" class="abs high">25/26</td>
	<td data-value="83.33" class="pct high">83.33%</td>
	<td data-value="6" class="abs high">5/6</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="6" class="abs high">6/6</td>
	<td data-value="96.15" class="pct high">96.15%</td>
	<td data-value="26" class="abs high">25/26</td>
	</tr>

<tr>
	<td class="file medium" data-value="Utilities.ts"><a href="Utilities.ts.html">Utilities.ts</a></td>
	<td data-value="75.86" class="pic medium">
	<div class="chart"><div class="cover-fill" style="width: 75%"></div><div class="cover-empty" style="width: 25%"></div></div>
	</td>
	<td data-value="75.86" class="pct medium">75.86%</td>
	<td data-value="29" class="abs medium">22/29</td>
	<td data-value="63.63" class="pct medium">63.63%</td>
	<td data-value="22" class="abs medium">14/22</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="3" class="abs high">3/3</td>
	<td data-value="74.07" class="pct medium">74.07%</td>
	<td data-value="27" class="abs medium">20/27</td>
	</tr>

<tr>
	<td class="file high" data-value="UuidKeyGenerator.ts"><a href="UuidKeyGenerator.ts.html">UuidKeyGenerator.ts</a></td>
	<td data-value="82.35" class="pic high">
	<div class="chart"><div class="cover-fill" style="width: 82%"></div><div class="cover-empty" style="width: 18%"></div></div>
	</td>
	<td data-value="82.35" class="pct high">82.35%</td>
	<td data-value="34" class="abs high">28/34</td>
	<td data-value="68.18" class="pct medium">68.18%</td>
	<td data-value="22" class="abs medium">15/22</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="6" class="abs high">6/6</td>
	<td data-value="82.35" class="pct high">82.35%</td>
	<td data-value="34" class="abs high">28/34</td>
	</tr>

</tbody>
</table>
</div>
                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\JoinDetails.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for JoinDetails.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> JoinDetails.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">82.75% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>24/29</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">94.73% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>18/19</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">50% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>5/10</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">82.75% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>24/29</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">8x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
import { EConfigStrings } from "./ConfigStrings";
import { SessionKey, ConversationKey } from "./Keys";
import { Environment, EEnvironment } from './Environment';
&nbsp;
var qs = require('qs');
&nbsp;
function validateEmail(email_: string) : boolean {
   if (!email_)
      return false;
&nbsp;
   const res = /^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/;
   return res.test(String(email_).toLowerCase());
 }
&nbsp;
export class JoinDetails {
&nbsp;
   private _email: string;
   private _name: string;
   private _session: SessionKey;
   private _conversation: ConversationKey;   
&nbsp;
   /**
    * Create a JoinDetails object. A join details is in the format 'email=xxx@yyy.com&amp;session=guid&amp;conversation=guid' . The email is used to uniquely identify the joiner, the session 
    * specifies a key to use for basic security, conversation is a Fluid UUID
    * It can be valid with a string that looks like an email address, and a session and conversation keys that look like UUIDs
    */
   constructor(trialInput_: string) {
   
      this._session = new SessionKey("");
      this._conversation = new ConversationKey("");      
      this._email = "";
      this._name = "";
&nbsp;
      let parsed = qs.parse (trialInput_); 
&nbsp;
      this._email = parsed.email ? parsed.email : "";
      this._name = parsed.name ? parsed.name: "";
      this._session = parsed.session ? new SessionKey (parsed.session) : new SessionKey ("");
      this._conversation = parsed.conversation ? new ConversationKey (parsed.conversation) : new ConversationKey ("");  
   }   
   
   /**
   * set of 'getters' for private variables
   */
<span class="fstat-no" title="function not covered" >   get e</span>mail(): string  {
<span class="cstat-no" title="statement not covered" >      return this._email;</span>
   }
<span class="fstat-no" title="function not covered" >   get n</span>ame(): string  {
<span class="cstat-no" title="statement not covered" >      return this._name;</span>
   }   
<span class="fstat-no" title="function not covered" >   get s</span>ession(): SessionKey  {
<span class="cstat-no" title="statement not covered" >      return this._session;</span>
   }
<span class="fstat-no" title="function not covered" >   get c</span>onversation(): ConversationKey  {
<span class="cstat-no" title="statement not covered" >      return this._conversation;</span>
   }   
<span class="fstat-no" title="function not covered" >   toString(</span>): string  {
<span class="cstat-no" title="statement not covered" >      return JoinDetails.toString (this._email, this._name, this._session, this._conversation);</span>
   }
&nbsp;
   isValid(): boolean {
      let environment = Environment.environment();
&nbsp;
      // If we are running locally, allow empty conversation key -&gt; this creates a new conversation
      if ((environment === EEnvironment.kLocal) &amp;&amp; this._conversation.toString().length === 0)
         return this._session.looksValidSessionKey() &amp;&amp; <span class="branch-1 cbranch-no" title="branch not covered" >validateEmail (this._email);</span>
&nbsp;
      return (this._session.looksValidSessionKey() &amp;&amp; this._conversation.looksValidConversationKey() &amp;&amp; validateEmail (this._email));          
   } 
&nbsp;
   static toString (email_: string, name_: string, session_: SessionKey, conversation_: ConversationKey) : string {
      return '&amp;' + EConfigStrings.kEmailParamName + '=' +  email_ 
         + '&amp;' + EConfigStrings.kNameParamName + '=' +  name_ 
         + '&amp;' + EConfigStrings.kSessionParamName + '=' + session_.toString() 
         + '&amp;' + EConfigStrings.kConversationParamName + '=' + conversation_.toString();
   }
&nbsp;
   static makeFromParts (email_: string, name_: string, session_: SessionKey, conversation_: ConversationKey) {
&nbsp;
      return new JoinDetails (JoinDetails.toString (email_, name_, session_, conversation_));
   }
  
}</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\JoinKey.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for JoinKey.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> JoinKey.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">96.96% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>32/33</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">92.85% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>13/14</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">90% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>9/10</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">96.96% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>32/33</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">7x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
import axios from "axios";
&nbsp;
import { IKeyGenerator } from './KeyGenerator';
import { UuidKeyGenerator } from './UuidKeyGenerator';
&nbsp;
export class JoinKey {
&nbsp;
   private _isValid: boolean;
   private _isSinglePart: boolean;
   private _isTwoPart: boolean;
   private _firstPart: string;
   private _secondPart: string;
&nbsp;
   /**
    * Create a JoinKey object. A join key is in the format 'UUID/Optional Container GUID'. 
    * It can be valid with just the first part, which is then a join key and the container must be created new, or if there is a second part, it must be in a valid format. 
    */
   constructor(trialInput_: string) {
&nbsp;
      this._isValid = false;        
      this._isSinglePart = false;   
      this._isTwoPart = false;
      this._firstPart = "";
      this._secondPart = "";
&nbsp;
      let split = trialInput_.split('/');
&nbsp;
      if (split.length === 1) {
         if (this.isValidPart1 (split[0])) {
            this._isValid = true;
            this._isSinglePart = true;
            this._firstPart = split[0];
         }
      }
      else
      <span class="missing-if-branch" title="else path not taken" >E</span>if (split.length === 2) {
         if (this.isValidPart1 (split[0]) &amp;&amp; this.isValidPart2 (split[1])) {
            this._isValid = true;
            this._isTwoPart = true;
            this._firstPart = split[0];
            this._secondPart = split[1];
         }
      }      
   }   
   
   /**
   * set of 'getters' for private variables
   */
   get isValid(): boolean {
      return this._isValid;
   }
   get isSinglePart(): boolean {
      return this._isSinglePart;
   }
   get isTwoPart(): boolean {
      return this._isTwoPart;
   }   
   get firstPart(): string  {
      return this._firstPart;
   }
   get secondPart(): string  {
      return this._secondPart;
   }
   get asString(): string  {
      return this._firstPart + '/' + this._secondPart;
   }
&nbsp;
<span class="fstat-no" title="function not covered" >   static </span>makeFromTwoParts (part1_: string, part2_: string) {
&nbsp;
<span class="cstat-no" title="statement not covered" >      return new JoinKey (part1_ + '/' + part2_);</span>
   }
&nbsp;
   // Looks at the key provided, and returns true if it looks like a GUID, else false.
   private isValidPart1  (trialInput_: string) : boolean {
&nbsp;
      let keyGenerator : IKeyGenerator = new UuidKeyGenerator();
&nbsp;
      if (!keyGenerator.couldBeAKey (trialInput_))
         return false;
&nbsp;
      return true;
   }
&nbsp;
   // Looks at the key provided, and returns true if it looks like a container ID, else false.
   private isValidPart2  (trialInput_: string) : boolean {
&nbsp;
      if (trialInput_.length === 0)
         return false;
&nbsp;
      return true;
   }   
}</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-02-06T20:50:44.930Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\JoinPageValidator.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for JoinPageValidator.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> JoinPageValidator.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>4/4</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>0/0</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>2/2</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>4/4</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
import { SessionKey, ConversationKey } from "./Keys";
import { JoinDetails } from "./JoinDetails";
&nbsp;
export class JoinPageValidator {
&nbsp;
   /**
    * Create an empty JoinPageValidator object 
    */
   constructor() {
   }   
&nbsp;
   // Looks at the name and keys provided, and returns true if the data looks ready to join a conversation, else false.
   isJoinAttemptReady  (email_: string, name_: string, session_: SessionKey, conversation_: ConversationKey) : boolean {
&nbsp;
      let details = JoinDetails.makeFromParts (email_, name_, session_, conversation_);    
&nbsp;
      return details.isValid();
   }
}</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\KeyRetriever.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for KeyRetriever.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> KeyRetriever.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>16/16</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>4/4</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>3/3</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>16/16</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">19x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">16x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
&nbsp;
import axios from "axios";
&nbsp;
// Local
import { logApiError } from "./Logging";
import { EConfigStrings } from './ConfigStrings';
import { ConnectionError } from "./Errors";
import { Environment } from "./Environment";
import { SessionKey } from "./Keys";
&nbsp;
export class KeyRetriever {
&nbsp;
   private activeCallCount: number;
&nbsp;
   /**
    * Create an empty KeyRetriever object 
    */
   constructor() {
      this.activeCallCount = 0;
   }   
&nbsp;
   // Makes an Axios call to request the key
   // If running locally, looks for an environment variable
   async requestKey  (apiUrl_: string, paramName_: string, sessionKey_: SessionKey) : Promise&lt;string&gt; {
     
      /*  Now we use a localhost server bcs it can access environment variables
      // If we are running locally directly in the browser (not via a web server on localhost:)
      // use the stub values - no Production secrets are really stored locally 
      let environment = Environment.environment();
      if (environment === EEnvironment.kLocal) {
         type KStubEnvironmentVariableKey = keyof typeof KStubEnvironmentVariables;
         let memberKeyAsStr: KStubEnvironmentVariableKey = paramName_ as any;
         let checked = KStubEnvironmentVariables[memberKeyAsStr];
         throwIfUndefined(checked);
         return checked;
      }
      */
&nbsp;
      this.activeCallCount++;
&nbsp;
      var response;
&nbsp;
      try {
         response = await axios.get(apiUrl_, {
            params: {
               [paramName_]: sessionKey_.toString()
            },
            withCredentials: false
         });
         this.activeCallCount--; 
&nbsp;
      } catch (e) {
         
         this.activeCallCount--;
   
         logApiError (EConfigStrings.kErrorConnectingToKeyAPI + ":" + apiUrl_, e?.response?.data);           
      }
&nbsp;
      if (!response || !response.data)
         throw new ConnectionError(EConfigStrings.kErrorConnectingToKeyAPI + ":" + apiUrl_);      
      
      return response.data as string;
   }    
&nbsp;
   isBusy () {
      return this.activeCallCount !== 0;
   }
}</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\Keys.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for Keys.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> Keys.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>11/11</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>0/0</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>6/6</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>11/11</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">52x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">26x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">32x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
import { IKeyGenerator } from './IKeyGenerator';
import { getDefaultKeyGenerator } from './IKeyGeneratorFactory';
&nbsp;
export class SessionKey {
&nbsp;
   private _sessionId: string;
&nbsp;
   /**
    * Create a SessionKey object. A join key is a GUID - this class just makes a type wrapper round a string. 
    */
   constructor(trialInput_: string) {
&nbsp;
      this._sessionId = trialInput_;      
   }   
   
   /**
   * Does this look like a valid UUID
   */
   looksValidSessionKey(): boolean {
      let keyGenerator : IKeyGenerator = getDefaultKeyGenerator();
&nbsp;
      return keyGenerator.couldBeAKey (this._sessionId);
   }
&nbsp;
   /**
    * Return a string representation
    */
   toString(): string {
      return this._sessionId;
   }   
}
&nbsp;
export class ConversationKey {
&nbsp;
   private _conversationId: string;
&nbsp;
   /**
    * Create a ConversationKey object. A ConversationKey is a GUID - this class just makes a type wrapper round a string. 
    */
   constructor(trialInput_: string) {
&nbsp;
      this._conversationId = trialInput_;      
   }   
   
   /**
   * Does this look like a valid UUID
   */
   looksValidConversationKey(): boolean {
&nbsp;
      let keyGenerator : IKeyGenerator = getDefaultKeyGenerator();
&nbsp;
      return keyGenerator.couldBeAKey (this._conversationId);
   }
&nbsp;
   /**
    * Return a string representation
    */
   toString(): string {
      return this._conversationId;
   }    
   
}
&nbsp;
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\Like.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for Like.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> Like.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>23/23</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>6/6</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>9/9</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>23/23</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a>
<a name='L94'></a><a href='#L94'>94</a>
<a name='L95'></a><a href='#L95'>95</a>
<a name='L96'></a><a href='#L96'>96</a>
<a name='L97'></a><a href='#L97'>97</a>
<a name='L98'></a><a href='#L98'>98</a>
<a name='L99'></a><a href='#L99'>99</a>
<a name='L100'></a><a href='#L100'>100</a>
<a name='L101'></a><a href='#L101'>101</a>
<a name='L102'></a><a href='#L102'>102</a>
<a name='L103'></a><a href='#L103'>103</a>
<a name='L104'></a><a href='#L104'>104</a>
<a name='L105'></a><a href='#L105'>105</a>
<a name='L106'></a><a href='#L106'>106</a>
<a name='L107'></a><a href='#L107'>107</a>
<a name='L108'></a><a href='#L108'>108</a>
<a name='L109'></a><a href='#L109'>109</a>
<a name='L110'></a><a href='#L110'>110</a>
<a name='L111'></a><a href='#L111'>111</a>
<a name='L112'></a><a href='#L112'>112</a>
<a name='L113'></a><a href='#L113'>113</a>
<a name='L114'></a><a href='#L114'>114</a>
<a name='L115'></a><a href='#L115'>115</a>
<a name='L116'></a><a href='#L116'>116</a>
<a name='L117'></a><a href='#L117'>117</a>
<a name='L118'></a><a href='#L118'>118</a>
<a name='L119'></a><a href='#L119'>119</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">13x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">7x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
 
&nbsp;
/**
 * Embeddeding object
 * @param url - link to source on the web.
 * @param summary - text summary (50 words)
 * @param ada_v2: embedding value array. Note this is copied by value to avoid duplicating large arrays.
 * @param timeStamp - when the item is dated from - can be undefined if not known
 * @param relevance - cosine relevance score to a query - can be undefined if the source reference has not been compared yet
 */
export class Like  {
   private _name: string;
   private _when: Date;
&nbsp;
   /**
    * Create an empty Like object
    */
   public constructor();
&nbsp;
   /**
    * Create a Like object
    * @param name_ - link to source on the web.
    * @param when_ - text summary (50 words)
    */
   public constructor(name_: string, when_: Date);
&nbsp;
   /**
    * Create a Like object
    * @param source - object to copy from - should work for JSON format and for real constructed objects
    */
   public constructor(source: Like);
&nbsp;
   public constructor(...arr: any[])
   {
&nbsp;
      if (arr.length === 0) {
         this._name = ""; 
         this._when = new Date();        
         return;
      }
&nbsp;
      var localName: string;
      var localwhen: Date;
&nbsp;
      if (arr.length === 1) {
         localName = arr[0]._name;
         localwhen = arr[0]._when;        
      }
      else { 
         localName = arr[0];
         localwhen = arr[1];           
      }
&nbsp;
      this._name = localName;
      this._when = localwhen;
   }
&nbsp;
   streamOut(): string {
&nbsp;
      return JSON.stringify({ name: this._name, when: this._when});
   }
&nbsp;
   streamIn(stream: string): void {
&nbsp;
      const obj = JSON.parse(stream);
&nbsp;
      this.assign(new Like (obj.name, obj.when));   
   }
&nbsp;
   /**
   * set of 'getters' for private variables
   */
   get name(): string {
      return this._name;
   }
   get when(): Date {
      return this._when;
   }
&nbsp;
   /**
   * set of 'setters' for private variables
   */
   set name(name_: string) {
&nbsp;
      this._name = name_;
   }
&nbsp;
   set when(when_: Date) {
&nbsp;
      this._when = when_;
   }
&nbsp;
&nbsp;
   /**
    * test for equality - checks all fields are the same. 
    * Uses field values, not identity bcs if objects are streamed to/from JSON, field identities will be different. 
    * @param rhs - the object to compare this one to.  
    */
   equals(rhs: Like): boolean {
&nbsp;
      return ((this._name === rhs._name) &amp;&amp;   
         (this._when.getTime() === rhs._when.getTime()));
   }
&nbsp;
   /**
    * assignment operator 
    * @param rhs - the object to assign this one from.  
    */
   assign(rhs: Like): Like {
&nbsp;
      this._name = rhs._name;
      this._when = new Date (rhs._when);
&nbsp;
      return this;
   }
}
&nbsp;
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\Logging.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for Logging.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> Logging.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">72.22% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>13/18</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>0/0</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">50% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>5/10</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">72.22% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>13/18</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line medium'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">39x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">32x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">7x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
&nbsp;
import { log, LogLevel, tag } from 'missionlog';
import { EConfigStrings } from './ConfigStrings';
&nbsp;
&nbsp;
 // Logging handler
 const logger = {
   [LogLevel.ERROR]: (tag, msg, params) =&gt; console.error(msg, ...params),
   [LogLevel.WARN]: <span class="fstat-no" title="function not covered" >(t</span>ag, msg, params) =&gt; <span class="cstat-no" title="statement not covered" >console.warn(msg, ...params),</span>
   [LogLevel.INFO]: (tag, msg, params) =&gt; console.log(msg, ...params),
   [LogLevel.TRACE]: <span class="fstat-no" title="function not covered" >(t</span>ag, msg, params) =&gt; <span class="cstat-no" title="statement not covered" >console.log(msg, ...params),</span>
   [LogLevel.DEBUG]: <span class="fstat-no" title="function not covered" >(t</span>ag, msg, params) =&gt; <span class="cstat-no" title="statement not covered" >console.log(msg, ...params),</span>
} as Record&lt;LogLevel, (tag: string, msg: unknown, params: unknown[]) =&gt; void&gt;;
&nbsp;
// Initialise logging
log.init({ application: 'DEBUG', notification: 'DEBUG' }, <span class="fstat-no" title="function not covered" >(l</span>evel, tag, msg, params) =&gt; {
<span class="cstat-no" title="statement not covered" >   logger[level as keyof typeof logger](tag, msg, params);</span>
});
&nbsp;
&nbsp;
export function logCoreError (description: string, details: any) : void {
&nbsp;
   logger.ERROR (EConfigStrings.kCoreLogCategory, description, [details]);
}
&nbsp;
export function <span class="fstat-no" title="function not covered" >logDbError </span>(description: string, details: any) : void {
&nbsp;
<span class="cstat-no" title="statement not covered" >   logger.ERROR (EConfigStrings.kDbLogCategory, description, [details]);</span>
}
&nbsp;
export function logApiError (description: string, details: any) : void {
&nbsp;
   logger.ERROR (EConfigStrings.kApiLogCategory, description, [details]);
}
&nbsp;
export function logApiInfo (description: string, details: any) : void {
&nbsp;
   logger.INFO (EConfigStrings.kApiLogCategory, description, [details]);
}</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\Message.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for Message.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> Message.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">95.58% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>130/136</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">82.5% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>33/40</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">96.77% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>30/31</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">95.52% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>128/134</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a>
<a name='L94'></a><a href='#L94'>94</a>
<a name='L95'></a><a href='#L95'>95</a>
<a name='L96'></a><a href='#L96'>96</a>
<a name='L97'></a><a href='#L97'>97</a>
<a name='L98'></a><a href='#L98'>98</a>
<a name='L99'></a><a href='#L99'>99</a>
<a name='L100'></a><a href='#L100'>100</a>
<a name='L101'></a><a href='#L101'>101</a>
<a name='L102'></a><a href='#L102'>102</a>
<a name='L103'></a><a href='#L103'>103</a>
<a name='L104'></a><a href='#L104'>104</a>
<a name='L105'></a><a href='#L105'>105</a>
<a name='L106'></a><a href='#L106'>106</a>
<a name='L107'></a><a href='#L107'>107</a>
<a name='L108'></a><a href='#L108'>108</a>
<a name='L109'></a><a href='#L109'>109</a>
<a name='L110'></a><a href='#L110'>110</a>
<a name='L111'></a><a href='#L111'>111</a>
<a name='L112'></a><a href='#L112'>112</a>
<a name='L113'></a><a href='#L113'>113</a>
<a name='L114'></a><a href='#L114'>114</a>
<a name='L115'></a><a href='#L115'>115</a>
<a name='L116'></a><a href='#L116'>116</a>
<a name='L117'></a><a href='#L117'>117</a>
<a name='L118'></a><a href='#L118'>118</a>
<a name='L119'></a><a href='#L119'>119</a>
<a name='L120'></a><a href='#L120'>120</a>
<a name='L121'></a><a href='#L121'>121</a>
<a name='L122'></a><a href='#L122'>122</a>
<a name='L123'></a><a href='#L123'>123</a>
<a name='L124'></a><a href='#L124'>124</a>
<a name='L125'></a><a href='#L125'>125</a>
<a name='L126'></a><a href='#L126'>126</a>
<a name='L127'></a><a href='#L127'>127</a>
<a name='L128'></a><a href='#L128'>128</a>
<a name='L129'></a><a href='#L129'>129</a>
<a name='L130'></a><a href='#L130'>130</a>
<a name='L131'></a><a href='#L131'>131</a>
<a name='L132'></a><a href='#L132'>132</a>
<a name='L133'></a><a href='#L133'>133</a>
<a name='L134'></a><a href='#L134'>134</a>
<a name='L135'></a><a href='#L135'>135</a>
<a name='L136'></a><a href='#L136'>136</a>
<a name='L137'></a><a href='#L137'>137</a>
<a name='L138'></a><a href='#L138'>138</a>
<a name='L139'></a><a href='#L139'>139</a>
<a name='L140'></a><a href='#L140'>140</a>
<a name='L141'></a><a href='#L141'>141</a>
<a name='L142'></a><a href='#L142'>142</a>
<a name='L143'></a><a href='#L143'>143</a>
<a name='L144'></a><a href='#L144'>144</a>
<a name='L145'></a><a href='#L145'>145</a>
<a name='L146'></a><a href='#L146'>146</a>
<a name='L147'></a><a href='#L147'>147</a>
<a name='L148'></a><a href='#L148'>148</a>
<a name='L149'></a><a href='#L149'>149</a>
<a name='L150'></a><a href='#L150'>150</a>
<a name='L151'></a><a href='#L151'>151</a>
<a name='L152'></a><a href='#L152'>152</a>
<a name='L153'></a><a href='#L153'>153</a>
<a name='L154'></a><a href='#L154'>154</a>
<a name='L155'></a><a href='#L155'>155</a>
<a name='L156'></a><a href='#L156'>156</a>
<a name='L157'></a><a href='#L157'>157</a>
<a name='L158'></a><a href='#L158'>158</a>
<a name='L159'></a><a href='#L159'>159</a>
<a name='L160'></a><a href='#L160'>160</a>
<a name='L161'></a><a href='#L161'>161</a>
<a name='L162'></a><a href='#L162'>162</a>
<a name='L163'></a><a href='#L163'>163</a>
<a name='L164'></a><a href='#L164'>164</a>
<a name='L165'></a><a href='#L165'>165</a>
<a name='L166'></a><a href='#L166'>166</a>
<a name='L167'></a><a href='#L167'>167</a>
<a name='L168'></a><a href='#L168'>168</a>
<a name='L169'></a><a href='#L169'>169</a>
<a name='L170'></a><a href='#L170'>170</a>
<a name='L171'></a><a href='#L171'>171</a>
<a name='L172'></a><a href='#L172'>172</a>
<a name='L173'></a><a href='#L173'>173</a>
<a name='L174'></a><a href='#L174'>174</a>
<a name='L175'></a><a href='#L175'>175</a>
<a name='L176'></a><a href='#L176'>176</a>
<a name='L177'></a><a href='#L177'>177</a>
<a name='L178'></a><a href='#L178'>178</a>
<a name='L179'></a><a href='#L179'>179</a>
<a name='L180'></a><a href='#L180'>180</a>
<a name='L181'></a><a href='#L181'>181</a>
<a name='L182'></a><a href='#L182'>182</a>
<a name='L183'></a><a href='#L183'>183</a>
<a name='L184'></a><a href='#L184'>184</a>
<a name='L185'></a><a href='#L185'>185</a>
<a name='L186'></a><a href='#L186'>186</a>
<a name='L187'></a><a href='#L187'>187</a>
<a name='L188'></a><a href='#L188'>188</a>
<a name='L189'></a><a href='#L189'>189</a>
<a name='L190'></a><a href='#L190'>190</a>
<a name='L191'></a><a href='#L191'>191</a>
<a name='L192'></a><a href='#L192'>192</a>
<a name='L193'></a><a href='#L193'>193</a>
<a name='L194'></a><a href='#L194'>194</a>
<a name='L195'></a><a href='#L195'>195</a>
<a name='L196'></a><a href='#L196'>196</a>
<a name='L197'></a><a href='#L197'>197</a>
<a name='L198'></a><a href='#L198'>198</a>
<a name='L199'></a><a href='#L199'>199</a>
<a name='L200'></a><a href='#L200'>200</a>
<a name='L201'></a><a href='#L201'>201</a>
<a name='L202'></a><a href='#L202'>202</a>
<a name='L203'></a><a href='#L203'>203</a>
<a name='L204'></a><a href='#L204'>204</a>
<a name='L205'></a><a href='#L205'>205</a>
<a name='L206'></a><a href='#L206'>206</a>
<a name='L207'></a><a href='#L207'>207</a>
<a name='L208'></a><a href='#L208'>208</a>
<a name='L209'></a><a href='#L209'>209</a>
<a name='L210'></a><a href='#L210'>210</a>
<a name='L211'></a><a href='#L211'>211</a>
<a name='L212'></a><a href='#L212'>212</a>
<a name='L213'></a><a href='#L213'>213</a>
<a name='L214'></a><a href='#L214'>214</a>
<a name='L215'></a><a href='#L215'>215</a>
<a name='L216'></a><a href='#L216'>216</a>
<a name='L217'></a><a href='#L217'>217</a>
<a name='L218'></a><a href='#L218'>218</a>
<a name='L219'></a><a href='#L219'>219</a>
<a name='L220'></a><a href='#L220'>220</a>
<a name='L221'></a><a href='#L221'>221</a>
<a name='L222'></a><a href='#L222'>222</a>
<a name='L223'></a><a href='#L223'>223</a>
<a name='L224'></a><a href='#L224'>224</a>
<a name='L225'></a><a href='#L225'>225</a>
<a name='L226'></a><a href='#L226'>226</a>
<a name='L227'></a><a href='#L227'>227</a>
<a name='L228'></a><a href='#L228'>228</a>
<a name='L229'></a><a href='#L229'>229</a>
<a name='L230'></a><a href='#L230'>230</a>
<a name='L231'></a><a href='#L231'>231</a>
<a name='L232'></a><a href='#L232'>232</a>
<a name='L233'></a><a href='#L233'>233</a>
<a name='L234'></a><a href='#L234'>234</a>
<a name='L235'></a><a href='#L235'>235</a>
<a name='L236'></a><a href='#L236'>236</a>
<a name='L237'></a><a href='#L237'>237</a>
<a name='L238'></a><a href='#L238'>238</a>
<a name='L239'></a><a href='#L239'>239</a>
<a name='L240'></a><a href='#L240'>240</a>
<a name='L241'></a><a href='#L241'>241</a>
<a name='L242'></a><a href='#L242'>242</a>
<a name='L243'></a><a href='#L243'>243</a>
<a name='L244'></a><a href='#L244'>244</a>
<a name='L245'></a><a href='#L245'>245</a>
<a name='L246'></a><a href='#L246'>246</a>
<a name='L247'></a><a href='#L247'>247</a>
<a name='L248'></a><a href='#L248'>248</a>
<a name='L249'></a><a href='#L249'>249</a>
<a name='L250'></a><a href='#L250'>250</a>
<a name='L251'></a><a href='#L251'>251</a>
<a name='L252'></a><a href='#L252'>252</a>
<a name='L253'></a><a href='#L253'>253</a>
<a name='L254'></a><a href='#L254'>254</a>
<a name='L255'></a><a href='#L255'>255</a>
<a name='L256'></a><a href='#L256'>256</a>
<a name='L257'></a><a href='#L257'>257</a>
<a name='L258'></a><a href='#L258'>258</a>
<a name='L259'></a><a href='#L259'>259</a>
<a name='L260'></a><a href='#L260'>260</a>
<a name='L261'></a><a href='#L261'>261</a>
<a name='L262'></a><a href='#L262'>262</a>
<a name='L263'></a><a href='#L263'>263</a>
<a name='L264'></a><a href='#L264'>264</a>
<a name='L265'></a><a href='#L265'>265</a>
<a name='L266'></a><a href='#L266'>266</a>
<a name='L267'></a><a href='#L267'>267</a>
<a name='L268'></a><a href='#L268'>268</a>
<a name='L269'></a><a href='#L269'>269</a>
<a name='L270'></a><a href='#L270'>270</a>
<a name='L271'></a><a href='#L271'>271</a>
<a name='L272'></a><a href='#L272'>272</a>
<a name='L273'></a><a href='#L273'>273</a>
<a name='L274'></a><a href='#L274'>274</a>
<a name='L275'></a><a href='#L275'>275</a>
<a name='L276'></a><a href='#L276'>276</a>
<a name='L277'></a><a href='#L277'>277</a>
<a name='L278'></a><a href='#L278'>278</a>
<a name='L279'></a><a href='#L279'>279</a>
<a name='L280'></a><a href='#L280'>280</a>
<a name='L281'></a><a href='#L281'>281</a>
<a name='L282'></a><a href='#L282'>282</a>
<a name='L283'></a><a href='#L283'>283</a>
<a name='L284'></a><a href='#L284'>284</a>
<a name='L285'></a><a href='#L285'>285</a>
<a name='L286'></a><a href='#L286'>286</a>
<a name='L287'></a><a href='#L287'>287</a>
<a name='L288'></a><a href='#L288'>288</a>
<a name='L289'></a><a href='#L289'>289</a>
<a name='L290'></a><a href='#L290'>290</a>
<a name='L291'></a><a href='#L291'>291</a>
<a name='L292'></a><a href='#L292'>292</a>
<a name='L293'></a><a href='#L293'>293</a>
<a name='L294'></a><a href='#L294'>294</a>
<a name='L295'></a><a href='#L295'>295</a>
<a name='L296'></a><a href='#L296'>296</a>
<a name='L297'></a><a href='#L297'>297</a>
<a name='L298'></a><a href='#L298'>298</a>
<a name='L299'></a><a href='#L299'>299</a>
<a name='L300'></a><a href='#L300'>300</a>
<a name='L301'></a><a href='#L301'>301</a>
<a name='L302'></a><a href='#L302'>302</a>
<a name='L303'></a><a href='#L303'>303</a>
<a name='L304'></a><a href='#L304'>304</a>
<a name='L305'></a><a href='#L305'>305</a>
<a name='L306'></a><a href='#L306'>306</a>
<a name='L307'></a><a href='#L307'>307</a>
<a name='L308'></a><a href='#L308'>308</a>
<a name='L309'></a><a href='#L309'>309</a>
<a name='L310'></a><a href='#L310'>310</a>
<a name='L311'></a><a href='#L311'>311</a>
<a name='L312'></a><a href='#L312'>312</a>
<a name='L313'></a><a href='#L313'>313</a>
<a name='L314'></a><a href='#L314'>314</a>
<a name='L315'></a><a href='#L315'>315</a>
<a name='L316'></a><a href='#L316'>316</a>
<a name='L317'></a><a href='#L317'>317</a>
<a name='L318'></a><a href='#L318'>318</a>
<a name='L319'></a><a href='#L319'>319</a>
<a name='L320'></a><a href='#L320'>320</a>
<a name='L321'></a><a href='#L321'>321</a>
<a name='L322'></a><a href='#L322'>322</a>
<a name='L323'></a><a href='#L323'>323</a>
<a name='L324'></a><a href='#L324'>324</a>
<a name='L325'></a><a href='#L325'>325</a>
<a name='L326'></a><a href='#L326'>326</a>
<a name='L327'></a><a href='#L327'>327</a>
<a name='L328'></a><a href='#L328'>328</a>
<a name='L329'></a><a href='#L329'>329</a>
<a name='L330'></a><a href='#L330'>330</a>
<a name='L331'></a><a href='#L331'>331</a>
<a name='L332'></a><a href='#L332'>332</a>
<a name='L333'></a><a href='#L333'>333</a>
<a name='L334'></a><a href='#L334'>334</a>
<a name='L335'></a><a href='#L335'>335</a>
<a name='L336'></a><a href='#L336'>336</a>
<a name='L337'></a><a href='#L337'>337</a>
<a name='L338'></a><a href='#L338'>338</a>
<a name='L339'></a><a href='#L339'>339</a>
<a name='L340'></a><a href='#L340'>340</a>
<a name='L341'></a><a href='#L341'>341</a>
<a name='L342'></a><a href='#L342'>342</a>
<a name='L343'></a><a href='#L343'>343</a>
<a name='L344'></a><a href='#L344'>344</a>
<a name='L345'></a><a href='#L345'>345</a>
<a name='L346'></a><a href='#L346'>346</a>
<a name='L347'></a><a href='#L347'>347</a>
<a name='L348'></a><a href='#L348'>348</a>
<a name='L349'></a><a href='#L349'>349</a>
<a name='L350'></a><a href='#L350'>350</a>
<a name='L351'></a><a href='#L351'>351</a>
<a name='L352'></a><a href='#L352'>352</a>
<a name='L353'></a><a href='#L353'>353</a>
<a name='L354'></a><a href='#L354'>354</a>
<a name='L355'></a><a href='#L355'>355</a>
<a name='L356'></a><a href='#L356'>356</a>
<a name='L357'></a><a href='#L357'>357</a>
<a name='L358'></a><a href='#L358'>358</a>
<a name='L359'></a><a href='#L359'>359</a>
<a name='L360'></a><a href='#L360'>360</a>
<a name='L361'></a><a href='#L361'>361</a>
<a name='L362'></a><a href='#L362'>362</a>
<a name='L363'></a><a href='#L363'>363</a>
<a name='L364'></a><a href='#L364'>364</a>
<a name='L365'></a><a href='#L365'>365</a>
<a name='L366'></a><a href='#L366'>366</a>
<a name='L367'></a><a href='#L367'>367</a>
<a name='L368'></a><a href='#L368'>368</a>
<a name='L369'></a><a href='#L369'>369</a>
<a name='L370'></a><a href='#L370'>370</a>
<a name='L371'></a><a href='#L371'>371</a>
<a name='L372'></a><a href='#L372'>372</a>
<a name='L373'></a><a href='#L373'>373</a>
<a name='L374'></a><a href='#L374'>374</a>
<a name='L375'></a><a href='#L375'>375</a>
<a name='L376'></a><a href='#L376'>376</a>
<a name='L377'></a><a href='#L377'>377</a>
<a name='L378'></a><a href='#L378'>378</a>
<a name='L379'></a><a href='#L379'>379</a>
<a name='L380'></a><a href='#L380'>380</a>
<a name='L381'></a><a href='#L381'>381</a>
<a name='L382'></a><a href='#L382'>382</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1002051x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1002051x</span>
<span class="cline-any cline-yes">501522x</span>
<span class="cline-any cline-yes">501522x</span>
<span class="cline-any cline-yes">501522x</span>
<span class="cline-any cline-yes">501522x</span>
<span class="cline-any cline-yes">501522x</span>
<span class="cline-any cline-yes">501522x</span>
<span class="cline-any cline-yes">501522x</span>
<span class="cline-any cline-yes">501522x</span>
<span class="cline-any cline-yes">501522x</span>
<span class="cline-any cline-yes">501522x</span>
<span class="cline-any cline-yes">501522x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">500529x</span>
<span class="cline-any cline-yes">7x</span>
<span class="cline-any cline-yes">7x</span>
<span class="cline-any cline-yes">7x</span>
<span class="cline-any cline-yes">7x</span>
<span class="cline-any cline-yes">7x</span>
<span class="cline-any cline-yes">7x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">500522x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">500510x</span>
<span class="cline-any cline-yes">500510x</span>
<span class="cline-any cline-yes">500510x</span>
<span class="cline-any cline-yes">500510x</span>
<span class="cline-any cline-yes">500510x</span>
<span class="cline-any cline-yes">500510x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">500529x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">500528x</span>
<span class="cline-any cline-yes">500528x</span>
<span class="cline-any cline-yes">500528x</span>
<span class="cline-any cline-yes">500528x</span>
<span class="cline-any cline-yes">500528x</span>
<span class="cline-any cline-yes">500528x</span>
<span class="cline-any cline-yes">500528x</span>
<span class="cline-any cline-yes">500528x</span>
<span class="cline-any cline-yes">500528x</span>
<span class="cline-any cline-yes">500528x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1008x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">500508x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1010x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">500510x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">500510x</span>
<span class="cline-any cline-yes">500510x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">500510x</span>
<span class="cline-any cline-yes">500510x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">500510x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">500510x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">500510x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">500510x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">500510x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1012x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">42x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">7x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">268x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">999013x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-yes">8x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">8x</span>
<span class="cline-any cline-yes">8x</span>
<span class="cline-any cline-yes">7x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">8x</span>
<span class="cline-any cline-yes">8x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">116x</span>
<span class="cline-any cline-yes">116x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">8x</span>
<span class="cline-any cline-yes">8x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">110x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">110x</span>
<span class="cline-any cline-yes">53x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">110x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">500510x</span>
<span class="cline-any cline-yes">500510x</span>
<span class="cline-any cline-yes">500510x</span>
<span class="cline-any cline-yes">500510x</span>
<span class="cline-any cline-yes">500510x</span>
<span class="cline-any cline-yes">500510x</span>
<span class="cline-any cline-yes">500510x</span>
<span class="cline-any cline-yes">500510x</span>
<span class="cline-any cline-yes">500510x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">500510x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">500531x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">500530x</span>
<span class="cline-any cline-yes">500528x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
&nbsp;
import GPT4Tokenizer from 'gpt4-tokenizer';
&nbsp;
import { InvalidParameterError } from './Errors';
import { throwIfUndefined } from './Asserts'; 
import { IKeyGenerator } from './IKeyGenerator';
import { getDefaultKeyGenerator } from './IKeyGeneratorFactory';
import { MDynamicStreamable, DynamicStreamableFactory } from "./StreamingFramework";
import { areSameDate, areSameDeepArray } from './Utilities';
import { Embedding } from './Embedding';
&nbsp;
const keyGenerator: IKeyGenerator = getDefaultKeyGenerator();
const tokenizer = new GPT4Tokenizer({ type: 'gpt3' }); 
&nbsp;
const className = "Message";
&nbsp;
export type MessageStreamingHandler = (message: Message, more: boolean) =&gt; void;
&nbsp;
// Message - text, plus IDs for the message itself, if its a reply, the person who sent it, and a date-time stamp
export class Message extends MDynamicStreamable {
   private _id: string;
   private _authorId: string;
   private _responseToId: string | undefined;   
   private _text: string;
   private _sentAt: Date;
   private _chunks: Array&lt;Embedding&gt;;
   private _tokens: number;
   private _isTokenCacheDirty: boolean;
   private _isStreaming: boolean;   
   private _streamHandler: MessageStreamingHandler | undefined;
&nbsp;
   /**
    * Create an empty Message object - required for particiation in serialisation framework
    */
   public constructor();
&nbsp;
   /**
    * Create a Message object
    * @param id_ - id to use to generate uniqueness 
    * @param authorId_ - Id of the person who sent it
    * @param responseToId_ - id of the message to which it is a response, can be undefined
    * @param text_ - the message body
    * @param sentAt - timestamp for last interaction seen by the framework
    */
   public constructor(id_: string | undefined, authorId_: string | undefined, responseToId_: string | undefined, text_: string, sentAt: Date);
&nbsp;
   /**
    * Create a Message object
    * @param id_ - id to use to generate uniqueness 
    * @param authorId_ - Id of the person who sent it
    * @param responseToId_ - id of the message to which it is a response, can be undefined
    * @param text_ - the message body
    * @param sentAt - timestamp for last interaction seen by the framework
    * @param chunks_ - relevent knowledge sources that help understand / provide context for the message. 
    */
   public constructor(id_: string | undefined, authorId_: string | undefined, responseToId_: string | undefined, text_: string, sentAt: Date,
                      chunks_: Array&lt;Embedding&gt;);
&nbsp;
   /**
    * Create a Message object
    * @param message - object to copy from - should work for JSON format and for real constructed objects
    */
   public constructor(message: Message);
&nbsp;
   public constructor(...arr: any[])
   {
&nbsp;
      super();
&nbsp;
      if (arr.length === 0) {
         this._id = keyGenerator.generateKey(); // An new Message has a key
         this._authorId = "";                       // But not an author
         this._responseToId = undefined;
         this._text = "";         
         this._sentAt = new Date();
         this._chunks = new Array&lt;Embedding&gt; ();
         this._tokens = 0;
         this._isTokenCacheDirty = true;
         this._isStreaming = false;     
         this._streamHandler = undefined;
         return;
      }
&nbsp;
      var localId: string;
      var localAuthorId: string;
      var localResponseToId: string;
      var localText: string;
      var localSentAt: Date;
      var localChunks: Array&lt;Embedding&gt;;
&nbsp;
      if (arr.length === 1) {
         localId = arr[0]._id
         localAuthorId = arr[0]._authorId;
         localResponseToId = arr[0]._responseToId;
         localText = arr[0]._text;         
         localSentAt = new Date(arr[0]._sentAt);
         localChunks = arr[0]._chunks;
      }
      else if (arr.length === 5) {
         localId = arr[0];
         localAuthorId = arr[1];      
         localResponseToId = arr[2];
         localText = arr[3];           
         localSentAt = new Date (arr[4]); 
         localChunks = new Array&lt;Embedding&gt;();         
      }
      else { 
         localId = arr[0];
         localAuthorId = arr[1];      
         localResponseToId = arr[2];
         localText = arr[3];           
         localSentAt = new Date (arr[4]);         
         localChunks = arr[5];
      }
&nbsp;
      if (!Message.isValidId(localId)) {
         throw new InvalidParameterError("Id:" + localId + '.');
      }
&nbsp;
      this._id = localId;
      this._authorId = localAuthorId;
      this._responseToId = localResponseToId;      
      this._text = localText;
      this._sentAt = localSentAt;
      this._chunks = localChunks;
      this._tokens = 0;
      this._isTokenCacheDirty = true;   
      this._isStreaming = false;        
      this._streamHandler = undefined;      
   }
&nbsp;
   /**
    * Dynamic creation for Streaming framework
    */
   className(): string {
&nbsp;
      return className;
   }
&nbsp;
   static createDynamicInstance(): MDynamicStreamable {
      return new Message();
   }
&nbsp;
   static _dynamicStreamableFactory: DynamicStreamableFactory = new DynamicStreamableFactory(className, Message.createDynamicInstance);
   streamOut(): string {
&nbsp;
      return JSON.stringify({ id: this._id, authorId: this._authorId, 
                            responseToId: this._responseToId, 
                            text: this._text, sentAt: this._sentAt,
                            chunks: this._chunks,
                            tokens: this._tokens,
                            isStreaming: this._isStreaming});
   }
&nbsp;
   streamIn(stream: string): void {
&nbsp;
      const obj = JSON.parse(stream);
&nbsp;
      let chunks = new Array&lt;Embedding&gt; (); 
      let objChunks = obj.chunks;
&nbsp;
      <span class="missing-if-branch" title="else path not taken" >E</span>if (objChunks) {
         for (let i = 0; i &lt; objChunks.length; i++) {
            let newSource = new Embedding (objChunks[i]);
            chunks.push (newSource);
         }      
      }
      this.assign(new Message (obj.id, obj.authorId, obj.responseToId, obj.text, new Date(obj.sentAt), chunks));
      
      this._isTokenCacheDirty = true; 
&nbsp;
      <span class="missing-if-branch" title="if path not taken" >I</span>if (obj.tokens &amp;&amp; <span class="branch-1 cbranch-no" title="branch not covered" >obj.tokens !== 0)</span> {
<span class="cstat-no" title="statement not covered" >         this._tokens = obj.tokens;</span>
<span class="cstat-no" title="statement not covered" >         this._isTokenCacheDirty = false;          </span>
      }       
&nbsp;
      // This is for backwards compatibility - the 'streaming' concept was introduced after
      // the set of Fluid containers were set up, so it is not stored on many messages. 
      // So we have to check if the attribute exists
      <span class="missing-if-branch" title="if path not taken" >I</span>if (typeof  obj.isStreaming === "undefined")
<span class="cstat-no" title="statement not covered" >         this._isStreaming = false;</span>
      else
         this._isStreaming = obj.isStreaming;               
   }
&nbsp;
   /**
   * set of 'getters' for private variables
   */
   get id(): string {
      return this._id;
   }
   get authorId(): string {
      return this._authorId;
   }
   get responseToId(): string | undefined {
      return this._responseToId;
   }
   get text(): string {
      return this._text;
   }
   get sentAt(): Date {
      return this._sentAt;
   }
   get chunks(): Array&lt;Embedding&gt; {
      return this._chunks;
   }
   get isDirty(): boolean {
      return this._isTokenCacheDirty;
   }   
   get tokens(): number {
      if (this._isTokenCacheDirty) {
         let estimatedTokens = tokenizer.estimateTokenCount(this._text);
&nbsp;
         <span class="missing-if-branch" title="else path not taken" >E</span>if (this._chunks) {
            for (let i = 0; i &lt; this._chunks.length; i++) {
               estimatedTokens += tokenizer.estimateTokenCount(this._chunks[i].summary);
            }
         }
         this._tokens = estimatedTokens;
         this._isTokenCacheDirty = false;
      }
      return this._tokens;
   }    
   get checkedResponseToId(): string {
      throwIfUndefined (this._responseToId);        
<span class="cstat-no" title="statement not covered" >      return this._responseToId;</span>
   }
   get isStreaming (): boolean {
      return this._isStreaming;
   }          
&nbsp;
   /**
   * set of 'setters' for private variables
   */
   set id(id_: string) {
      if (!Message.isValidId(id_)) {
         throw new InvalidParameterError("Id:" + id_ + '.');
      }
&nbsp;
      this._id = id_;
   }
&nbsp;
   set authorId(authorId_: string) {
&nbsp;
      this._authorId = authorId_;
   }
&nbsp;
   set text (text_: string) {
&nbsp;
      this._text = text_;
      this._isTokenCacheDirty = true;
   }
&nbsp;
   set responseToId(responseToId_: string) {
&nbsp;
      this._responseToId = responseToId_;
   }
&nbsp;
   set sentAt (sentAt_: Date) {
&nbsp;
      this._sentAt = new Date(sentAt_);
   }
&nbsp;
   set chunks (chunks_: Array&lt;Embedding&gt;) {
      this._chunks = chunks_;
      this._isTokenCacheDirty = true;      
   }
   set isStreaming (isStreaming: boolean) {
&nbsp;
      this._isStreaming = isStreaming;
   } 
&nbsp;
   /**
    * is this message unprompted i.e. not a reply.  
    */ 
   isUnPrompted () : boolean {
      return (typeof (this._responseToId) === "undefined") ;
   }
&nbsp;
   /**
    * force token calculation
    */ 
<span class="fstat-no" title="function not covered" >   calculateTokens </span>() : number {
&nbsp;
<span class="cstat-no" title="statement not covered" >      return this.tokens;</span>
   }
&nbsp;
   /**
    * Use this when live streaming text from server into a message
    */ 
   hookLiveAppend (handler: MessageStreamingHandler) : void {
         
      this._isStreaming = true;
      this._streamHandler = handler;
   }
   
   /**
    * Use this when live streaming text from server into a message
    */ 
   unhookLiveAppend () : void {
         
      this._isStreaming = false;
      this._streamHandler = undefined;
   }
&nbsp;
   /**
    * Use this when live streaming text from server into a message
    */ 
   liveAppendText (append: string, more: boolean) : string {
         
      this.text = this.text.concat (append);
&nbsp;
      if (this._streamHandler) {
         this._streamHandler (this, more);
      }
&nbsp;
      return this.text;
   }
&nbsp;
  /**
    * Use this when live streaming chunks from server into a message
    */ 
      liveAppendChunks (chunks: Array&lt;Embedding&gt;, more: boolean) : string {
         
         this._chunks = chunks;
   
         <span class="missing-if-branch" title="if path not taken" >I</span>if (this._streamHandler) {
<span class="cstat-no" title="statement not covered" >            this._streamHandler (this, more);</span>
         }
   
         return this.text;
      }
&nbsp;
   /**
    * test for equality - checks all fields are the same. 
    * Uses field values, not identity bcs if objects are streamed to/from JSON, field identities will be different. 
    * @param rhs - the object to compare this one to.  
    */
   equals(rhs: Message): boolean {
&nbsp;
      return ((this._id === rhs._id) &amp;&amp;
         (this._authorId === rhs._authorId) &amp;&amp;
         ((this._responseToId === undefined &amp;&amp; <span class="branch-3 cbranch-no" title="branch not covered" >rhs._responseToId === undefined)</span> || (this._responseToId === rhs._responseToId)) &amp;&amp;         
         (this._text === rhs._text) &amp;&amp;         
         (areSameDate (this._sentAt, rhs._sentAt)) &amp;&amp;
         areSameDeepArray (this._chunks, rhs._chunks));
   }
&nbsp;
   /**
    * assignment operator 
    * @param rhs - the object to assign this one from.  
    */
   assign(rhs: Message): Message {
      this._id = rhs._id;
      this._authorId = rhs._authorId;
      this._responseToId = rhs._responseToId;      
      this._text = rhs._text;
      this._sentAt = new Date (rhs._sentAt);
      this._chunks = rhs._chunks;
      this._tokens = 0;
      this._isTokenCacheDirty = true;    
      this._isStreaming = false;  
&nbsp;
      return this;
   }
&nbsp;
   /**
    * test for valid id 
    * @param id - the string to test
    */
   static isValidId(id_: string): boolean {
      if (!id_) // undefined keys are allowed if user object has not been originated from or saved anywhere persistent
         return true;
&nbsp;
      if (id_ &amp;&amp; id_.length &gt; 0) // if the id exists, must be &gt; zero length
         return true;
&nbsp;
      return (false);
   }
}
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\MessageActivityRecord.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for MessageActivityRecord.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> MessageActivityRecord.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>35/35</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>12/12</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>11/11</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>35/35</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a>
<a name='L94'></a><a href='#L94'>94</a>
<a name='L95'></a><a href='#L95'>95</a>
<a name='L96'></a><a href='#L96'>96</a>
<a name='L97'></a><a href='#L97'>97</a>
<a name='L98'></a><a href='#L98'>98</a>
<a name='L99'></a><a href='#L99'>99</a>
<a name='L100'></a><a href='#L100'>100</a>
<a name='L101'></a><a href='#L101'>101</a>
<a name='L102'></a><a href='#L102'>102</a>
<a name='L103'></a><a href='#L103'>103</a>
<a name='L104'></a><a href='#L104'>104</a>
<a name='L105'></a><a href='#L105'>105</a>
<a name='L106'></a><a href='#L106'>106</a>
<a name='L107'></a><a href='#L107'>107</a>
<a name='L108'></a><a href='#L108'>108</a>
<a name='L109'></a><a href='#L109'>109</a>
<a name='L110'></a><a href='#L110'>110</a>
<a name='L111'></a><a href='#L111'>111</a>
<a name='L112'></a><a href='#L112'>112</a>
<a name='L113'></a><a href='#L113'>113</a>
<a name='L114'></a><a href='#L114'>114</a>
<a name='L115'></a><a href='#L115'>115</a>
<a name='L116'></a><a href='#L116'>116</a>
<a name='L117'></a><a href='#L117'>117</a>
<a name='L118'></a><a href='#L118'>118</a>
<a name='L119'></a><a href='#L119'>119</a>
<a name='L120'></a><a href='#L120'>120</a>
<a name='L121'></a><a href='#L121'>121</a>
<a name='L122'></a><a href='#L122'>122</a>
<a name='L123'></a><a href='#L123'>123</a>
<a name='L124'></a><a href='#L124'>124</a>
<a name='L125'></a><a href='#L125'>125</a>
<a name='L126'></a><a href='#L126'>126</a>
<a name='L127'></a><a href='#L127'>127</a>
<a name='L128'></a><a href='#L128'>128</a>
<a name='L129'></a><a href='#L129'>129</a>
<a name='L130'></a><a href='#L130'>130</a>
<a name='L131'></a><a href='#L131'>131</a>
<a name='L132'></a><a href='#L132'>132</a>
<a name='L133'></a><a href='#L133'>133</a>
<a name='L134'></a><a href='#L134'>134</a>
<a name='L135'></a><a href='#L135'>135</a>
<a name='L136'></a><a href='#L136'>136</a>
<a name='L137'></a><a href='#L137'>137</a>
<a name='L138'></a><a href='#L138'>138</a>
<a name='L139'></a><a href='#L139'>139</a>
<a name='L140'></a><a href='#L140'>140</a>
<a name='L141'></a><a href='#L141'>141</a>
<a name='L142'></a><a href='#L142'>142</a>
<a name='L143'></a><a href='#L143'>143</a>
<a name='L144'></a><a href='#L144'>144</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">8x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">14x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
&nbsp;
import { InvalidParameterError } from './Errors';
import { MDynamicStreamable, DynamicStreamableFactory } from "./StreamingFramework";
import { ActivityRecord} from './ActivityRecord';
&nbsp;
const messageRecordClassName = "MessageActivityRecord";
&nbsp;
// MessageActivityRecord - activity details plus the text of a message. 
export class MessageActivityRecord extends ActivityRecord {
   private _message: string;
&nbsp;
   /**
    * Create an empty MessageActivityRecord object - required for particiation in serialisation framework
    */
   public constructor();
&nbsp;
   /**
    * Create a MessageActivityRecord object
    * @param id_ - id to use to generate uniqueness 
    * @param conversationId_ - ID of the conversation in which the event occurred
    * @param email_ - plain text email.
    * @param happenedAt_ - timestamp for last interaction seen by the framework
    * @param message_ - the URL that was interacted with
    */
   public constructor(id_: string | undefined, conversationId_: string | undefined, email_: string, happenedAt_: Date, message_: string);
&nbsp;
   /**
    * Create a MessageActivityRecord object
    * @param messageActivityRecord - object to copy from - should work for JSON format and for real constructed objects
    */
   public constructor(messageActivityRecord: MessageActivityRecord);
&nbsp;
   public constructor(...arr: any[])
   {
&nbsp;
      if (arr.length === 0) {
         super();         
         this._message = "";     // null URL is OK
         return;
      }
&nbsp;
      var localMessage: string;
&nbsp;
      if (arr.length === 1) {         
         super(arr[0]);
         localMessage = arr[0].message;
      }
      else { 
         super(arr[0], arr[1], arr[2], arr[3]);         
         localMessage = arr[4];
      }
&nbsp;
      if (!MessageActivityRecord.isValidMessage(localMessage)) {
         throw new InvalidParameterError("Url:" + localMessage + '.');
      }
&nbsp;
      this._message = localMessage;
   }
&nbsp;
   /**
    * Dynamic creation for Streaming framework
    */
   className(): string {
&nbsp;
      return messageRecordClassName;
   }
&nbsp;
   static className(): string {
&nbsp;
      return messageRecordClassName;
   }
&nbsp;
   static createDynamicInstance(): MDynamicStreamable {
      return new MessageActivityRecord();
   }
&nbsp;
   static _dynamicStreamableFactory: DynamicStreamableFactory = new DynamicStreamableFactory(messageRecordClassName, MessageActivityRecord.createDynamicInstance);
   streamOut(): string {
&nbsp;
      return JSON.stringify({ id: this.id, conversationId: this.conversationId, email: this.email, happenedAt: this.happenedAt, message: this._message});
   }
&nbsp;
   streamIn(stream: string): void {
&nbsp;
      const obj = JSON.parse(stream);
&nbsp;
      this.assign(new MessageActivityRecord (obj.id, obj.conversationId, obj.email, new Date(obj.happenedAt), obj.message));
   }
&nbsp;
   /**
   * set of 'getters' for private variables
   */
   get message(): string {
      return this._message;
   }
&nbsp;
   /**
   * set of 'setters' for private variables
   */
&nbsp;
   set message (message: string) {
      if (!MessageActivityRecord.isValidMessage(message)) {
         throw new InvalidParameterError("message:" + message + '.');
      }
&nbsp;
      this._message = message;
   }
&nbsp;
   /**
    * test for equality - checks all fields are the same. 
    * Uses field values, not identity bcs if objects are streamed to/from JSON, field identities will be different. 
    * @param rhs - the object to compare this one to.  
    */
   equals(rhs: MessageActivityRecord): boolean {
      return (super.equals (rhs) &amp;&amp; 
         (this._message === rhs._message));
   }
&nbsp;
&nbsp;
   /**
    * assignment operator 
    * @param rhs - the object to assign this one from.  
    */
   assign(rhs: MessageActivityRecord): MessageActivityRecord {
      super.assign (rhs);
      this._message = rhs._message;
&nbsp;
      return this;
   }
&nbsp;
   /**
    * test for valid message 
    * @param message_ - the string to test
    */
   static isValidMessage(message_: string): boolean {
&nbsp;
      if (message_ == undefined)
         return false;
&nbsp;
      return true; // Currently allow anything, even empty string. 
   }
}
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\MessageBotFluidConnection.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for MessageBotFluidConnection.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> MessageBotFluidConnection.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>20/20</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>0/0</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>6/6</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>20/20</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
&nbsp;
import { SharedMap } from "fluid-framework";import { Persona } from './Persona';
import { Message } from './Message';
import { IConnectionProps, FluidConnection } from './FluidConnection';
import { CaucusOf } from './CaucusFramework';
import { throwIfUndefined } from './Asserts'; 
&nbsp;
const containerSchema = {
   initialObjects: {
      participantMap: SharedMap,
      messageMap: SharedMap
   }
};
&nbsp;
// MessageBotFluidConnection - concrete derived class of FluidConnection
// connects the fluid connection to two local caucuses - one for participants, another for messages
export class MessageBotFluidConnection extends FluidConnection {
&nbsp;
   _localUser: Persona;
   _participantCaucus: CaucusOf&lt;Persona&gt; | undefined;
   _messageCaucus: CaucusOf&lt;Message&gt; | undefined;
&nbsp;
   constructor(props: IConnectionProps, localUser_: Persona) {
&nbsp;
      super(props);
&nbsp;
      this._participantCaucus = undefined;
      this._messageCaucus = undefined;   
      this._localUser = localUser_;   
   }
&nbsp;
   schema() : any {
      return containerSchema;
   }
&nbsp;
   // This menas the list of Messages is ordered by send time ascending
   compareFn (a: Message, b: Message) : number {
      return a.sentAt.getTime() - b.sentAt.getTime();
   }
&nbsp;
   setupLocalCaucuses (initialObjects: any) : void {
      // Create caucuses so they exist when observers are notified of connection
      this._participantCaucus = new CaucusOf&lt;Persona&gt;(initialObjects.participantMap as SharedMap, );
      this._messageCaucus = new CaucusOf&lt;Message&gt;(initialObjects.messageMap as SharedMap, this.compareFn);  
      
      // Connect our own user ID to the participant caucus
      var storedVal: string = this._localUser.flatten();
      (initialObjects.participantMap as SharedMap).set(this._localUser.id, storedVal);      
   }
&nbsp;
   participantCaucus(): CaucusOf&lt;Persona&gt; {
      throwIfUndefined (this._participantCaucus);
      return this._participantCaucus;
   }
&nbsp;
   messageCaucus(): CaucusOf&lt;Message&gt; {
      throwIfUndefined (this._messageCaucus);
      return this._messageCaucus;
   }      
}
&nbsp;
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-02-06T20:50:44.930Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\NotificationFramework.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for NotificationFramework.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> NotificationFramework.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>104/104</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">89.13% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>41/46</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>37/37</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>103/103</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a>
<a name='L94'></a><a href='#L94'>94</a>
<a name='L95'></a><a href='#L95'>95</a>
<a name='L96'></a><a href='#L96'>96</a>
<a name='L97'></a><a href='#L97'>97</a>
<a name='L98'></a><a href='#L98'>98</a>
<a name='L99'></a><a href='#L99'>99</a>
<a name='L100'></a><a href='#L100'>100</a>
<a name='L101'></a><a href='#L101'>101</a>
<a name='L102'></a><a href='#L102'>102</a>
<a name='L103'></a><a href='#L103'>103</a>
<a name='L104'></a><a href='#L104'>104</a>
<a name='L105'></a><a href='#L105'>105</a>
<a name='L106'></a><a href='#L106'>106</a>
<a name='L107'></a><a href='#L107'>107</a>
<a name='L108'></a><a href='#L108'>108</a>
<a name='L109'></a><a href='#L109'>109</a>
<a name='L110'></a><a href='#L110'>110</a>
<a name='L111'></a><a href='#L111'>111</a>
<a name='L112'></a><a href='#L112'>112</a>
<a name='L113'></a><a href='#L113'>113</a>
<a name='L114'></a><a href='#L114'>114</a>
<a name='L115'></a><a href='#L115'>115</a>
<a name='L116'></a><a href='#L116'>116</a>
<a name='L117'></a><a href='#L117'>117</a>
<a name='L118'></a><a href='#L118'>118</a>
<a name='L119'></a><a href='#L119'>119</a>
<a name='L120'></a><a href='#L120'>120</a>
<a name='L121'></a><a href='#L121'>121</a>
<a name='L122'></a><a href='#L122'>122</a>
<a name='L123'></a><a href='#L123'>123</a>
<a name='L124'></a><a href='#L124'>124</a>
<a name='L125'></a><a href='#L125'>125</a>
<a name='L126'></a><a href='#L126'>126</a>
<a name='L127'></a><a href='#L127'>127</a>
<a name='L128'></a><a href='#L128'>128</a>
<a name='L129'></a><a href='#L129'>129</a>
<a name='L130'></a><a href='#L130'>130</a>
<a name='L131'></a><a href='#L131'>131</a>
<a name='L132'></a><a href='#L132'>132</a>
<a name='L133'></a><a href='#L133'>133</a>
<a name='L134'></a><a href='#L134'>134</a>
<a name='L135'></a><a href='#L135'>135</a>
<a name='L136'></a><a href='#L136'>136</a>
<a name='L137'></a><a href='#L137'>137</a>
<a name='L138'></a><a href='#L138'>138</a>
<a name='L139'></a><a href='#L139'>139</a>
<a name='L140'></a><a href='#L140'>140</a>
<a name='L141'></a><a href='#L141'>141</a>
<a name='L142'></a><a href='#L142'>142</a>
<a name='L143'></a><a href='#L143'>143</a>
<a name='L144'></a><a href='#L144'>144</a>
<a name='L145'></a><a href='#L145'>145</a>
<a name='L146'></a><a href='#L146'>146</a>
<a name='L147'></a><a href='#L147'>147</a>
<a name='L148'></a><a href='#L148'>148</a>
<a name='L149'></a><a href='#L149'>149</a>
<a name='L150'></a><a href='#L150'>150</a>
<a name='L151'></a><a href='#L151'>151</a>
<a name='L152'></a><a href='#L152'>152</a>
<a name='L153'></a><a href='#L153'>153</a>
<a name='L154'></a><a href='#L154'>154</a>
<a name='L155'></a><a href='#L155'>155</a>
<a name='L156'></a><a href='#L156'>156</a>
<a name='L157'></a><a href='#L157'>157</a>
<a name='L158'></a><a href='#L158'>158</a>
<a name='L159'></a><a href='#L159'>159</a>
<a name='L160'></a><a href='#L160'>160</a>
<a name='L161'></a><a href='#L161'>161</a>
<a name='L162'></a><a href='#L162'>162</a>
<a name='L163'></a><a href='#L163'>163</a>
<a name='L164'></a><a href='#L164'>164</a>
<a name='L165'></a><a href='#L165'>165</a>
<a name='L166'></a><a href='#L166'>166</a>
<a name='L167'></a><a href='#L167'>167</a>
<a name='L168'></a><a href='#L168'>168</a>
<a name='L169'></a><a href='#L169'>169</a>
<a name='L170'></a><a href='#L170'>170</a>
<a name='L171'></a><a href='#L171'>171</a>
<a name='L172'></a><a href='#L172'>172</a>
<a name='L173'></a><a href='#L173'>173</a>
<a name='L174'></a><a href='#L174'>174</a>
<a name='L175'></a><a href='#L175'>175</a>
<a name='L176'></a><a href='#L176'>176</a>
<a name='L177'></a><a href='#L177'>177</a>
<a name='L178'></a><a href='#L178'>178</a>
<a name='L179'></a><a href='#L179'>179</a>
<a name='L180'></a><a href='#L180'>180</a>
<a name='L181'></a><a href='#L181'>181</a>
<a name='L182'></a><a href='#L182'>182</a>
<a name='L183'></a><a href='#L183'>183</a>
<a name='L184'></a><a href='#L184'>184</a>
<a name='L185'></a><a href='#L185'>185</a>
<a name='L186'></a><a href='#L186'>186</a>
<a name='L187'></a><a href='#L187'>187</a>
<a name='L188'></a><a href='#L188'>188</a>
<a name='L189'></a><a href='#L189'>189</a>
<a name='L190'></a><a href='#L190'>190</a>
<a name='L191'></a><a href='#L191'>191</a>
<a name='L192'></a><a href='#L192'>192</a>
<a name='L193'></a><a href='#L193'>193</a>
<a name='L194'></a><a href='#L194'>194</a>
<a name='L195'></a><a href='#L195'>195</a>
<a name='L196'></a><a href='#L196'>196</a>
<a name='L197'></a><a href='#L197'>197</a>
<a name='L198'></a><a href='#L198'>198</a>
<a name='L199'></a><a href='#L199'>199</a>
<a name='L200'></a><a href='#L200'>200</a>
<a name='L201'></a><a href='#L201'>201</a>
<a name='L202'></a><a href='#L202'>202</a>
<a name='L203'></a><a href='#L203'>203</a>
<a name='L204'></a><a href='#L204'>204</a>
<a name='L205'></a><a href='#L205'>205</a>
<a name='L206'></a><a href='#L206'>206</a>
<a name='L207'></a><a href='#L207'>207</a>
<a name='L208'></a><a href='#L208'>208</a>
<a name='L209'></a><a href='#L209'>209</a>
<a name='L210'></a><a href='#L210'>210</a>
<a name='L211'></a><a href='#L211'>211</a>
<a name='L212'></a><a href='#L212'>212</a>
<a name='L213'></a><a href='#L213'>213</a>
<a name='L214'></a><a href='#L214'>214</a>
<a name='L215'></a><a href='#L215'>215</a>
<a name='L216'></a><a href='#L216'>216</a>
<a name='L217'></a><a href='#L217'>217</a>
<a name='L218'></a><a href='#L218'>218</a>
<a name='L219'></a><a href='#L219'>219</a>
<a name='L220'></a><a href='#L220'>220</a>
<a name='L221'></a><a href='#L221'>221</a>
<a name='L222'></a><a href='#L222'>222</a>
<a name='L223'></a><a href='#L223'>223</a>
<a name='L224'></a><a href='#L224'>224</a>
<a name='L225'></a><a href='#L225'>225</a>
<a name='L226'></a><a href='#L226'>226</a>
<a name='L227'></a><a href='#L227'>227</a>
<a name='L228'></a><a href='#L228'>228</a>
<a name='L229'></a><a href='#L229'>229</a>
<a name='L230'></a><a href='#L230'>230</a>
<a name='L231'></a><a href='#L231'>231</a>
<a name='L232'></a><a href='#L232'>232</a>
<a name='L233'></a><a href='#L233'>233</a>
<a name='L234'></a><a href='#L234'>234</a>
<a name='L235'></a><a href='#L235'>235</a>
<a name='L236'></a><a href='#L236'>236</a>
<a name='L237'></a><a href='#L237'>237</a>
<a name='L238'></a><a href='#L238'>238</a>
<a name='L239'></a><a href='#L239'>239</a>
<a name='L240'></a><a href='#L240'>240</a>
<a name='L241'></a><a href='#L241'>241</a>
<a name='L242'></a><a href='#L242'>242</a>
<a name='L243'></a><a href='#L243'>243</a>
<a name='L244'></a><a href='#L244'>244</a>
<a name='L245'></a><a href='#L245'>245</a>
<a name='L246'></a><a href='#L246'>246</a>
<a name='L247'></a><a href='#L247'>247</a>
<a name='L248'></a><a href='#L248'>248</a>
<a name='L249'></a><a href='#L249'>249</a>
<a name='L250'></a><a href='#L250'>250</a>
<a name='L251'></a><a href='#L251'>251</a>
<a name='L252'></a><a href='#L252'>252</a>
<a name='L253'></a><a href='#L253'>253</a>
<a name='L254'></a><a href='#L254'>254</a>
<a name='L255'></a><a href='#L255'>255</a>
<a name='L256'></a><a href='#L256'>256</a>
<a name='L257'></a><a href='#L257'>257</a>
<a name='L258'></a><a href='#L258'>258</a>
<a name='L259'></a><a href='#L259'>259</a>
<a name='L260'></a><a href='#L260'>260</a>
<a name='L261'></a><a href='#L261'>261</a>
<a name='L262'></a><a href='#L262'>262</a>
<a name='L263'></a><a href='#L263'>263</a>
<a name='L264'></a><a href='#L264'>264</a>
<a name='L265'></a><a href='#L265'>265</a>
<a name='L266'></a><a href='#L266'>266</a>
<a name='L267'></a><a href='#L267'>267</a>
<a name='L268'></a><a href='#L268'>268</a>
<a name='L269'></a><a href='#L269'>269</a>
<a name='L270'></a><a href='#L270'>270</a>
<a name='L271'></a><a href='#L271'>271</a>
<a name='L272'></a><a href='#L272'>272</a>
<a name='L273'></a><a href='#L273'>273</a>
<a name='L274'></a><a href='#L274'>274</a>
<a name='L275'></a><a href='#L275'>275</a>
<a name='L276'></a><a href='#L276'>276</a>
<a name='L277'></a><a href='#L277'>277</a>
<a name='L278'></a><a href='#L278'>278</a>
<a name='L279'></a><a href='#L279'>279</a>
<a name='L280'></a><a href='#L280'>280</a>
<a name='L281'></a><a href='#L281'>281</a>
<a name='L282'></a><a href='#L282'>282</a>
<a name='L283'></a><a href='#L283'>283</a>
<a name='L284'></a><a href='#L284'>284</a>
<a name='L285'></a><a href='#L285'>285</a>
<a name='L286'></a><a href='#L286'>286</a>
<a name='L287'></a><a href='#L287'>287</a>
<a name='L288'></a><a href='#L288'>288</a>
<a name='L289'></a><a href='#L289'>289</a>
<a name='L290'></a><a href='#L290'>290</a>
<a name='L291'></a><a href='#L291'>291</a>
<a name='L292'></a><a href='#L292'>292</a>
<a name='L293'></a><a href='#L293'>293</a>
<a name='L294'></a><a href='#L294'>294</a>
<a name='L295'></a><a href='#L295'>295</a>
<a name='L296'></a><a href='#L296'>296</a>
<a name='L297'></a><a href='#L297'>297</a>
<a name='L298'></a><a href='#L298'>298</a>
<a name='L299'></a><a href='#L299'>299</a>
<a name='L300'></a><a href='#L300'>300</a>
<a name='L301'></a><a href='#L301'>301</a>
<a name='L302'></a><a href='#L302'>302</a>
<a name='L303'></a><a href='#L303'>303</a>
<a name='L304'></a><a href='#L304'>304</a>
<a name='L305'></a><a href='#L305'>305</a>
<a name='L306'></a><a href='#L306'>306</a>
<a name='L307'></a><a href='#L307'>307</a>
<a name='L308'></a><a href='#L308'>308</a>
<a name='L309'></a><a href='#L309'>309</a>
<a name='L310'></a><a href='#L310'>310</a>
<a name='L311'></a><a href='#L311'>311</a>
<a name='L312'></a><a href='#L312'>312</a>
<a name='L313'></a><a href='#L313'>313</a>
<a name='L314'></a><a href='#L314'>314</a>
<a name='L315'></a><a href='#L315'>315</a>
<a name='L316'></a><a href='#L316'>316</a>
<a name='L317'></a><a href='#L317'>317</a>
<a name='L318'></a><a href='#L318'>318</a>
<a name='L319'></a><a href='#L319'>319</a>
<a name='L320'></a><a href='#L320'>320</a>
<a name='L321'></a><a href='#L321'>321</a>
<a name='L322'></a><a href='#L322'>322</a>
<a name='L323'></a><a href='#L323'>323</a>
<a name='L324'></a><a href='#L324'>324</a>
<a name='L325'></a><a href='#L325'>325</a>
<a name='L326'></a><a href='#L326'>326</a>
<a name='L327'></a><a href='#L327'>327</a>
<a name='L328'></a><a href='#L328'>328</a>
<a name='L329'></a><a href='#L329'>329</a>
<a name='L330'></a><a href='#L330'>330</a>
<a name='L331'></a><a href='#L331'>331</a>
<a name='L332'></a><a href='#L332'>332</a>
<a name='L333'></a><a href='#L333'>333</a>
<a name='L334'></a><a href='#L334'>334</a>
<a name='L335'></a><a href='#L335'>335</a>
<a name='L336'></a><a href='#L336'>336</a>
<a name='L337'></a><a href='#L337'>337</a>
<a name='L338'></a><a href='#L338'>338</a>
<a name='L339'></a><a href='#L339'>339</a>
<a name='L340'></a><a href='#L340'>340</a>
<a name='L341'></a><a href='#L341'>341</a>
<a name='L342'></a><a href='#L342'>342</a>
<a name='L343'></a><a href='#L343'>343</a>
<a name='L344'></a><a href='#L344'>344</a>
<a name='L345'></a><a href='#L345'>345</a>
<a name='L346'></a><a href='#L346'>346</a>
<a name='L347'></a><a href='#L347'>347</a>
<a name='L348'></a><a href='#L348'>348</a>
<a name='L349'></a><a href='#L349'>349</a>
<a name='L350'></a><a href='#L350'>350</a>
<a name='L351'></a><a href='#L351'>351</a>
<a name='L352'></a><a href='#L352'>352</a>
<a name='L353'></a><a href='#L353'>353</a>
<a name='L354'></a><a href='#L354'>354</a>
<a name='L355'></a><a href='#L355'>355</a>
<a name='L356'></a><a href='#L356'>356</a>
<a name='L357'></a><a href='#L357'>357</a>
<a name='L358'></a><a href='#L358'>358</a>
<a name='L359'></a><a href='#L359'>359</a>
<a name='L360'></a><a href='#L360'>360</a>
<a name='L361'></a><a href='#L361'>361</a>
<a name='L362'></a><a href='#L362'>362</a>
<a name='L363'></a><a href='#L363'>363</a>
<a name='L364'></a><a href='#L364'>364</a>
<a name='L365'></a><a href='#L365'>365</a>
<a name='L366'></a><a href='#L366'>366</a>
<a name='L367'></a><a href='#L367'>367</a>
<a name='L368'></a><a href='#L368'>368</a>
<a name='L369'></a><a href='#L369'>369</a>
<a name='L370'></a><a href='#L370'>370</a>
<a name='L371'></a><a href='#L371'>371</a>
<a name='L372'></a><a href='#L372'>372</a>
<a name='L373'></a><a href='#L373'>373</a>
<a name='L374'></a><a href='#L374'>374</a>
<a name='L375'></a><a href='#L375'>375</a>
<a name='L376'></a><a href='#L376'>376</a>
<a name='L377'></a><a href='#L377'>377</a>
<a name='L378'></a><a href='#L378'>378</a>
<a name='L379'></a><a href='#L379'>379</a>
<a name='L380'></a><a href='#L380'>380</a>
<a name='L381'></a><a href='#L381'>381</a>
<a name='L382'></a><a href='#L382'>382</a>
<a name='L383'></a><a href='#L383'>383</a>
<a name='L384'></a><a href='#L384'>384</a>
<a name='L385'></a><a href='#L385'>385</a>
<a name='L386'></a><a href='#L386'>386</a>
<a name='L387'></a><a href='#L387'>387</a>
<a name='L388'></a><a href='#L388'>388</a>
<a name='L389'></a><a href='#L389'>389</a>
<a name='L390'></a><a href='#L390'>390</a>
<a name='L391'></a><a href='#L391'>391</a>
<a name='L392'></a><a href='#L392'>392</a>
<a name='L393'></a><a href='#L393'>393</a>
<a name='L394'></a><a href='#L394'>394</a>
<a name='L395'></a><a href='#L395'>395</a>
<a name='L396'></a><a href='#L396'>396</a>
<a name='L397'></a><a href='#L397'>397</a>
<a name='L398'></a><a href='#L398'>398</a>
<a name='L399'></a><a href='#L399'>399</a>
<a name='L400'></a><a href='#L400'>400</a>
<a name='L401'></a><a href='#L401'>401</a>
<a name='L402'></a><a href='#L402'>402</a>
<a name='L403'></a><a href='#L403'>403</a>
<a name='L404'></a><a href='#L404'>404</a>
<a name='L405'></a><a href='#L405'>405</a>
<a name='L406'></a><a href='#L406'>406</a>
<a name='L407'></a><a href='#L407'>407</a>
<a name='L408'></a><a href='#L408'>408</a>
<a name='L409'></a><a href='#L409'>409</a>
<a name='L410'></a><a href='#L410'>410</a>
<a name='L411'></a><a href='#L411'>411</a>
<a name='L412'></a><a href='#L412'>412</a>
<a name='L413'></a><a href='#L413'>413</a>
<a name='L414'></a><a href='#L414'>414</a>
<a name='L415'></a><a href='#L415'>415</a>
<a name='L416'></a><a href='#L416'>416</a>
<a name='L417'></a><a href='#L417'>417</a>
<a name='L418'></a><a href='#L418'>418</a>
<a name='L419'></a><a href='#L419'>419</a>
<a name='L420'></a><a href='#L420'>420</a>
<a name='L421'></a><a href='#L421'>421</a>
<a name='L422'></a><a href='#L422'>422</a>
<a name='L423'></a><a href='#L423'>423</a>
<a name='L424'></a><a href='#L424'>424</a>
<a name='L425'></a><a href='#L425'>425</a>
<a name='L426'></a><a href='#L426'>426</a>
<a name='L427'></a><a href='#L427'>427</a>
<a name='L428'></a><a href='#L428'>428</a>
<a name='L429'></a><a href='#L429'>429</a>
<a name='L430'></a><a href='#L430'>430</a>
<a name='L431'></a><a href='#L431'>431</a>
<a name='L432'></a><a href='#L432'>432</a>
<a name='L433'></a><a href='#L433'>433</a>
<a name='L434'></a><a href='#L434'>434</a>
<a name='L435'></a><a href='#L435'>435</a>
<a name='L436'></a><a href='#L436'>436</a>
<a name='L437'></a><a href='#L437'>437</a>
<a name='L438'></a><a href='#L438'>438</a>
<a name='L439'></a><a href='#L439'>439</a>
<a name='L440'></a><a href='#L440'>440</a>
<a name='L441'></a><a href='#L441'>441</a>
<a name='L442'></a><a href='#L442'>442</a>
<a name='L443'></a><a href='#L443'>443</a>
<a name='L444'></a><a href='#L444'>444</a>
<a name='L445'></a><a href='#L445'>445</a>
<a name='L446'></a><a href='#L446'>446</a>
<a name='L447'></a><a href='#L447'>447</a>
<a name='L448'></a><a href='#L448'>448</a>
<a name='L449'></a><a href='#L449'>449</a>
<a name='L450'></a><a href='#L450'>450</a>
<a name='L451'></a><a href='#L451'>451</a>
<a name='L452'></a><a href='#L452'>452</a>
<a name='L453'></a><a href='#L453'>453</a>
<a name='L454'></a><a href='#L454'>454</a>
<a name='L455'></a><a href='#L455'>455</a>
<a name='L456'></a><a href='#L456'>456</a>
<a name='L457'></a><a href='#L457'>457</a>
<a name='L458'></a><a href='#L458'>458</a>
<a name='L459'></a><a href='#L459'>459</a>
<a name='L460'></a><a href='#L460'>460</a>
<a name='L461'></a><a href='#L461'>461</a>
<a name='L462'></a><a href='#L462'>462</a>
<a name='L463'></a><a href='#L463'>463</a>
<a name='L464'></a><a href='#L464'>464</a>
<a name='L465'></a><a href='#L465'>465</a>
<a name='L466'></a><a href='#L466'>466</a>
<a name='L467'></a><a href='#L467'>467</a>
<a name='L468'></a><a href='#L468'>468</a>
<a name='L469'></a><a href='#L469'>469</a>
<a name='L470'></a><a href='#L470'>470</a>
<a name='L471'></a><a href='#L471'>471</a>
<a name='L472'></a><a href='#L472'>472</a>
<a name='L473'></a><a href='#L473'>473</a>
<a name='L474'></a><a href='#L474'>474</a>
<a name='L475'></a><a href='#L475'>475</a>
<a name='L476'></a><a href='#L476'>476</a>
<a name='L477'></a><a href='#L477'>477</a>
<a name='L478'></a><a href='#L478'>478</a>
<a name='L479'></a><a href='#L479'>479</a>
<a name='L480'></a><a href='#L480'>480</a>
<a name='L481'></a><a href='#L481'>481</a>
<a name='L482'></a><a href='#L482'>482</a>
<a name='L483'></a><a href='#L483'>483</a>
<a name='L484'></a><a href='#L484'>484</a>
<a name='L485'></a><a href='#L485'>485</a>
<a name='L486'></a><a href='#L486'>486</a>
<a name='L487'></a><a href='#L487'>487</a>
<a name='L488'></a><a href='#L488'>488</a>
<a name='L489'></a><a href='#L489'>489</a>
<a name='L490'></a><a href='#L490'>490</a>
<a name='L491'></a><a href='#L491'>491</a>
<a name='L492'></a><a href='#L492'>492</a>
<a name='L493'></a><a href='#L493'>493</a>
<a name='L494'></a><a href='#L494'>494</a>
<a name='L495'></a><a href='#L495'>495</a>
<a name='L496'></a><a href='#L496'>496</a>
<a name='L497'></a><a href='#L497'>497</a>
<a name='L498'></a><a href='#L498'>498</a>
<a name='L499'></a><a href='#L499'>499</a>
<a name='L500'></a><a href='#L500'>500</a>
<a name='L501'></a><a href='#L501'>501</a>
<a name='L502'></a><a href='#L502'>502</a>
<a name='L503'></a><a href='#L503'>503</a>
<a name='L504'></a><a href='#L504'>504</a>
<a name='L505'></a><a href='#L505'>505</a>
<a name='L506'></a><a href='#L506'>506</a>
<a name='L507'></a><a href='#L507'>507</a>
<a name='L508'></a><a href='#L508'>508</a>
<a name='L509'></a><a href='#L509'>509</a>
<a name='L510'></a><a href='#L510'>510</a>
<a name='L511'></a><a href='#L511'>511</a>
<a name='L512'></a><a href='#L512'>512</a>
<a name='L513'></a><a href='#L513'>513</a>
<a name='L514'></a><a href='#L514'>514</a>
<a name='L515'></a><a href='#L515'>515</a>
<a name='L516'></a><a href='#L516'>516</a>
<a name='L517'></a><a href='#L517'>517</a>
<a name='L518'></a><a href='#L518'>518</a>
<a name='L519'></a><a href='#L519'>519</a>
<a name='L520'></a><a href='#L520'>520</a>
<a name='L521'></a><a href='#L521'>521</a>
<a name='L522'></a><a href='#L522'>522</a>
<a name='L523'></a><a href='#L523'>523</a>
<a name='L524'></a><a href='#L524'>524</a>
<a name='L525'></a><a href='#L525'>525</a>
<a name='L526'></a><a href='#L526'>526</a>
<a name='L527'></a><a href='#L527'>527</a>
<a name='L528'></a><a href='#L528'>528</a>
<a name='L529'></a><a href='#L529'>529</a>
<a name='L530'></a><a href='#L530'>530</a>
<a name='L531'></a><a href='#L531'>531</a>
<a name='L532'></a><a href='#L532'>532</a>
<a name='L533'></a><a href='#L533'>533</a>
<a name='L534'></a><a href='#L534'>534</a>
<a name='L535'></a><a href='#L535'>535</a>
<a name='L536'></a><a href='#L536'>536</a>
<a name='L537'></a><a href='#L537'>537</a>
<a name='L538'></a><a href='#L538'>538</a>
<a name='L539'></a><a href='#L539'>539</a>
<a name='L540'></a><a href='#L540'>540</a>
<a name='L541'></a><a href='#L541'>541</a>
<a name='L542'></a><a href='#L542'>542</a>
<a name='L543'></a><a href='#L543'>543</a>
<a name='L544'></a><a href='#L544'>544</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">62x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">61x</span>
<span class="cline-any cline-yes">41x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">20x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">61x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">27x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">35x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">32x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">29x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">32x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">41x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">19x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">25x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">24x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">23x</span>
<span class="cline-any cline-yes">23x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">7x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">8x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">7x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">7x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">19x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">23x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// NotificationFramework
// Copyright (c) 2024 Braid Technologies Ltd
/////////////////////////////////////////
&nbsp;
&nbsp;
/// &lt;summary&gt;
/// Interest -  encapsulates what is being observed - a specific notificationId.
/// &lt;/summary&gt;
export class Interest { 
&nbsp;
   private _notificationId: string;
   private static noInterest : string  = "nullInterest";
&nbsp;
   /**
    * Create a Interest object
    * @param notificationId_ - id of the notification 
    */
   constructor(notificationId_: string);
&nbsp;
   /**
    * Create a Interest object
    * @param interest_ - object to copy from - should work for JSON format and for real constructed objects
    */
   public constructor(interest_: Interest);
&nbsp;
   /**
    * Create an empty Interest object - required for particiation in serialisation framework
    */
   constructor ();
&nbsp;
   constructor(...arr: any[]) { 
      if (arr.length === 0) { // Empty Constructor
         this._notificationId = Interest.noInterest;
         return;
      }
      else {
         if (this.isMyType(arr[0])) { // Copy Constructor
            this._notificationId = arr[0]._notificationId;
         }
         else { // Individual arguments
            this._notificationId = arr[0];
         }
      }
   }
&nbsp;
   private isMyType(rhs_: Interest): boolean {
      return rhs_.hasOwnProperty('_notificationId');
   }
&nbsp;
   /**
   * set of 'getters' for private variables
   */
   get notificationId(): string  {
      return this._notificationId;
   }
&nbsp;
   /**
    * test for equality - checks all fields are the same. 
    * NB must use field values, not identity bcs if objects are streamed to/from JSON, identities will be different. 
    * @param rhs_ - the object to compare this one to.  
    */
   equals(rhs_: Interest): boolean {
      
      return (this._notificationId === rhs_._notificationId);
   }
&nbsp;
   /**
    * assignment operator 
    * @param rhs_ - the object to assign this one from.  
    */
   assign(rhs_: Interest): Interest {
      this._notificationId = rhs_._notificationId;
&nbsp;
      return this;
   }
&nbsp;
   public static createNullInterest () : Interest {
      return new Interest (Interest.noInterest);
&nbsp;
   }
}
&nbsp;
/// &lt;summary&gt;
/// Notification -  base class for all events. Base carries references to the notifcationId. derived classes add a data package via template class below.
/// Value class - just holds reference to the data, is expected to exist only for the synchronous life of the notification.
/// &lt;/summary&gt;
export class Notification {
&nbsp;
   private _interest: Interest;
&nbsp;
   /**
    * Create a Notification object
    * @param interest_ - the Interest to identify the notification 
    */
   constructor(interest_: Interest);
&nbsp;
   /**
    * Create a Notification object
    * @param notification_ - object to copy from - should work for JSON format and for real constructed objects
    */
   public constructor(notification_: Notification);
&nbsp;
   /**
    * Create an empty Interest object - required for particiation in serialisation framework
    */
   constructor();
&nbsp;
   constructor(...arr: any[]) {
      if (arr.length === 0) { // Empty Contrutructor
         this._interest = Interest.createNullInterest();
         return;
      }
      else {
         if (this.isMyType(arr[0])) { // Copy Contrutructor
            this._interest = new Interest (arr[0]._interest);
         }
         else { // Individual arguments
            this._interest = new Interest (arr[0]);
         }
      }
   }
&nbsp;
   private isMyType(rhs_: Notification): boolean {
      return rhs_.hasOwnProperty('_interest');
   }
&nbsp;
   /**
   * set of 'getters' for private variables
   */
   get interest (): Interest {
      return this._interest;
   }
&nbsp;
   /**
    * test for equality - checks all fields are the same. 
    * Shallow check.
    * @param rhs_ - the object to compare this one to.  
    */
   equals(rhs_: Notification): boolean {
&nbsp;
      return (this.interest === rhs_.interest) ||
         (this._interest.equals(rhs_._interest));
   }
&nbsp;
   /**
    * assignment operator 
    * @param rhs_ - the object to assign this one from.  
    */
   assign(rhs_: Notification): Notification {
      this._interest = rhs_._interest;
&nbsp;
      return this;
   }
&nbsp;
}
&nbsp;
/// &lt;summary&gt;
/// NotificationFor -  template to specialse Notification by adding an NotificationData class. 
/// Value class - just holds reference to the data, is expected to exist only for the synchronous life of the notification. 
/// If you want data to last longer, add a reference type and the observer will have to save it. 
/// &lt;/summary&gt;
export class NotificationFor&lt;EventData&gt; extends Notification
{
   private _eventData: EventData | undefined;
&nbsp;
&nbsp;
   /**
    * Create an empty NotificationFor&lt;NotificationData&gt;  object - required for particiation in serialisation framework
    */
   constructor();
&nbsp;
   /**
    * Create a NotificationFor&lt;NotificationData&gt; object
    * @param notification_ - object to copy from - should work for JSON format and for real constructed objects
    */
   public constructor(notification_: NotificationFor&lt;EventData&gt;);
&nbsp;
   /**
    * Create a Notification object
    * @param interest_ - id of the notification 
    * @param eventData_ - the data payload to send with it
    */
   constructor(interest_: Interest, eventData_: EventData) 
&nbsp;
   constructor(...arr: any[]) {
      if (arr.length === 0) { // Construct empty
         super();
         this._eventData = undefined;
         return;
      }
      else 
      if (arr.length === 1) { // Copy constructor
         super (arr[0])
         this._eventData = arr[0]._eventData;
      }
      else { // Individual arguments
         super (arr[0])
         this._eventData = arr[1];
      }
   }
&nbsp;
   /**
   * set of 'getters' for private variables
   */
   get eventData(): EventData | undefined {
      return this._eventData;
   }
&nbsp;
   /**
    * test for equality - checks all fields are the same. 
    * Is a shallow compare if the payload is an object
    * @param rhs_ - the object to compare this one to.  
    */
   equals(rhs_: NotificationFor&lt;EventData&gt;): boolean {
&nbsp;
      return (super.equals(rhs_) &amp;&amp;
         (this._eventData === rhs_._eventData));
   }
&nbsp;
   /**
    * assignment operator 
    * @param rhs_ - the object to assign this one from.  
    */
   assign(rhs_: NotificationFor&lt;EventData&gt;): NotificationFor&lt;EventData&gt; {
      super.assign(rhs_);
      this._eventData = rhs_._eventData;
&nbsp;
      return this;
   }
}
&nbsp;
/// &lt;summary&gt;
/// ObserverInterest -  an IObserver plus an Interest . Used by Notifieres to hold a list of things that observers are interested in so it can notify them. 
/// &lt;/summary&gt;
export class ObserverInterest {
&nbsp;
   private _observer: IObserver | undefined;
   private _interest: Interest;
&nbsp;
   /**
    * Create a Interest object
    * @param observer_ - reference to the observer 
    * @param interest_ - the thing it is interested in 
    */
   constructor(observer_: IObserver, interest_: Interest);
&nbsp;
   /**
    * Create a ObserverInterest object
    * @param observerInterest_ - object to copy from - should work for JSON format and for real constructed objects
    */
   public constructor(observerInterest_ : ObserverInterest);
&nbsp;
   /**
    * Create an empty Interest object - required for particiation in serialisation framework
    */
   constructor();
&nbsp;
   constructor(...arr: any[]) {
      if (arr.length === 0) { // Empty constructor
         this._observer = undefined;
         this._interest = Interest.createNullInterest();
         return;
      }
      if (arr.length === 1) { // Copy constructor
         this._observer = arr[0]._observer;
         this._interest = new Interest (arr[0]._interest);
      }
      else { // Indivual arguments
         this._observer = arr[0];
         this._interest = new Interest (arr[1]);
      }
   }
&nbsp;
   /**
   * set of 'getters' for private variables
   */
   get observer(): IObserver | undefined {
      return this._observer;
   }
   get interest(): Interest {
      return this._interest;
   }
&nbsp;
   /**
    * test for equality - checks all fields are the same. 
    * Shallow compare
    * @param rhs_ - the object to compare this one to.  
    */
   equals(rhs_: ObserverInterest): boolean {
&nbsp;
      return ((this._observer === rhs_._observer) &amp;&amp; 
         ( (this.interest === rhs_.interest) ||
           (rhs_.interest !== undefined) &amp;&amp; (this._interest.equals(rhs_._interest))));
   }
&nbsp;
   /**
    * assignment operator 
    * @param rhs_ - the object to assign this one from.  
    */
   assign(rhs_: ObserverInterest): ObserverInterest {
      this._observer = rhs_._observer;
      this._interest = new Interest(rhs_._interest);
&nbsp;
      return this;
   }
&nbsp;
}
&nbsp;
/// &lt;summary&gt;
/// NotificationRouter -  template to act as an intermediary, type-safe router that connects a specific function signature for the method that is called in a notification
/// &lt;/summary&gt;
/// 
type FunctionForNotification = (interest: Interest, data: Notification) =&gt; void;
&nbsp;
export class NotificationRouter implements IObserver {
   private _function: FunctionForNotification | undefined;
&nbsp;
   /**
    * Create empty NotificationRouterFor object
    */
   constructor();
&nbsp;
   /**
    * Create a NotificationRouter object
    * @param function_ - function to call on notification 
    */
   constructor(function_: FunctionForNotification);
&nbsp;
   /**
    * Create a NotificationRouter  object
    * @param notificationRouter_ - object to copy from - should work for JSON format and for real constructed objects
    */
   public constructor(notificationRouter_: NotificationRouter);
&nbsp;
   constructor(...arr: any[]) {
      if (arr.length === 0) { // Construct empty
         this._function = undefined;
         return;
      }
      else {
         if (this.isMyType(arr[0])) { // Copy constructor
            this._function = arr[0]._function;
         }
         else { // Individual arguments
            this._function = arr[0];
         }
      }
   }
&nbsp;
   private isMyType(rhs_: FunctionForNotification): boolean {
      return rhs_.hasOwnProperty('_function');
   }
&nbsp;
   /**
   * set of 'getters' for private variables
   */
   get function(): FunctionForNotification | undefined {
      return this._function;
   }
&nbsp;
   /**
    * test for equality - checks all fields are the same. 
    * Shallow compare
    * @param rhs_ - the object to compare this one to.  
    */
   equals(rhs_: NotificationRouter): boolean {
&nbsp;
      return (this._function === rhs_._function);
   }
&nbsp;
   /**
    * assignment operator 
    * @param rhs_ - the object to assign this one from.  
    */
   assign(rhs_: NotificationRouter): NotificationRouter {
      this._function = rhs_._function;
&nbsp;
      return this;
   }
&nbsp;
   notify(interest_: Interest, notification_: Notification): void {
&nbsp;
      // pass on to the required method
      <span class="missing-if-branch" title="else path not taken" >E</span>if (this._function)
         this._function(interest_, notification_);
   }
}
&nbsp;
&nbsp;
/// &lt;summary&gt;
/// NotificationRouterFor -  template to act as an intermediary, type-safe router that connects a specific function signature for the method that is called in a notification
/// &lt;/summary&gt;
/// 
type FunctionFor&lt;NotificationData&gt; = (interest: Interest, data: NotificationFor&lt;NotificationData&gt;) =&gt; void;
&nbsp;
export class NotificationRouterFor&lt;NotificationData&gt; implements IObserver
{
   private _function: FunctionFor&lt;NotificationData&gt; | undefined;
&nbsp;
   /**
    * Create empty NotificationRouterFor object
    */
   constructor();
&nbsp;
   /**
    * Create a NotificationRouterFor object
    * @param function_ - function to call on notification 
    */
   constructor(function_: FunctionFor&lt;NotificationData&gt;);
&nbsp;
   /**
    * Create a NotificationRouterFor&lt;NotificationData&gt;  object
    * @param observerRouter - object to copy from - should work for JSON format and for real constructed objects
    */
   public constructor(observerRouter: NotificationRouterFor&lt;NotificationData&gt;);
&nbsp;
   constructor(...arr: any[]) {
      if (arr.length === 0) { // Construct empty
         this._function = undefined;
         return;
      }
      else {
         if (this.isMyType (arr[0])) { // Copy constructor
            this._function = arr[0]._function;
         }
         else { // Individual arguments
            this._function = arr[0];
         }
      }
   }
&nbsp;
   private isMyType(rhs_: FunctionFor&lt;NotificationData&gt;): boolean {
      return rhs_.hasOwnProperty('_function');
   }
&nbsp;
   /**
   * set of 'getters' for private variables
   */
   get function(): FunctionFor&lt;NotificationData&gt; | undefined {
      return this._function;
   }
&nbsp;
   /**
    * test for equality - checks all fields are the same. 
    * Shallow compare
    * @param rhs_ - the object to compare this one to.  
    */
   equals(rhs_: NotificationRouterFor&lt;NotificationData&gt;): boolean {
&nbsp;
      return (this._function === rhs_._function);
   }
&nbsp;
   /**
    * assignment operator 
    * @param rhs_ - the object to assign this one from.  
    */
   assign(rhs_: NotificationRouterFor&lt;NotificationData&gt;): NotificationRouterFor&lt;NotificationData&gt; {
      this._function = rhs_._function;
&nbsp;
      return this;
   }
&nbsp;
   notify(interest_: Interest, notification_: NotificationFor&lt;NotificationData&gt;): void {
&nbsp;
      // pass on to the required method
      <span class="missing-if-branch" title="else path not taken" >E</span>if (this._function)
         this._function(interest_, notification_);
   }
}
&nbsp;
export interface IObserver {
   notify(interest_: Interest, notification_: Notification): void;
}
&nbsp;
export interface INotifier {
   addObserver(observerInterest_: ObserverInterest): void;
   removeObserver(observerInterest_: ObserverInterest): boolean;
   removeAllObservers(): void;
}
&nbsp;
/// &lt;summary&gt;
/// Notifier -  class that sends notifications when things change
/// &lt;/summary&gt;
export class Notifier implements INotifier {
&nbsp;
   private _observerInterests : Array&lt;ObserverInterest&gt;;
&nbsp;
   /**
    * Create an empty Notifier object - required for particiation in serialisation framework
    */
   constructor() {
      this._observerInterests = new Array&lt;ObserverInterest&gt;();
   }
&nbsp;
   // Operations
   notifyObservers(interest_: Interest, notificationData_: Notification): void {
&nbsp;
      //log.debug(tag.notification, "Notification:" + interest_.notificationId + ": " + JSON.stringify (notificationData_));
&nbsp;
      for (var i = 0; i &lt; this._observerInterests.length; i++) {
&nbsp;
         let interest = this._observerInterests[i].interest;
         let observer = this._observerInterests[i].observer;
&nbsp;
         <span class="missing-if-branch" title="else path not taken" >E</span>if (interest) {
            if (interest.equals (interest_)) {
               <span class="missing-if-branch" title="else path not taken" >E</span>if (observer)
                  observer.notify(interest, notificationData_);
            }
         }
       }
    }
&nbsp;
   // Add the supplied observer to the list of observers associated with
   // the supplied interest. 
   addObserver(observerInterest_: ObserverInterest): void {
&nbsp;
      const index = this._observerInterests.indexOf(observerInterest_);
      <span class="missing-if-branch" title="else path not taken" >E</span>if (index === -1) {
         this._observerInterests.push(observerInterest_);
      }
   }
&nbsp;
   // Remove the supplied observer from the list of observers associated
   // with the supplied interest.
   // returns TRUE if it was correctly found
   removeObserver(observerInterest_: ObserverInterest): boolean {
&nbsp;
      const index = this._observerInterests.indexOf(observerInterest_);
      if (index &gt; -1) {
         this._observerInterests.splice(index, 1);
         return true;
      }
      return false;
   }
&nbsp;
   removeAllObservers(): void {
      this._observerInterests.length = 0
   }
&nbsp;
};  //Notifier
&nbsp;
&nbsp;
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\OpenAiAPi.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for OpenAiAPi.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> OpenAiAPi.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>21/21</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>6/6</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>3/3</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>21/21</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">7x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">7x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
&nbsp;
import { Message } from './Message';
import { Persona } from './Persona';
import { EIcon } from './Icons';
import { EConfigStrings } from './ConfigStrings';
import { throwIfUndefined } from './Asserts';
&nbsp;
export class OpenAiAPi {
&nbsp;
   static makeOpenAiQuery (messages: Array&lt;Message&gt;, authors: Map&lt;string, Persona&gt;): Array&lt;Object&gt; {
&nbsp;
      let builtQuery = new Array&lt;Object&gt; ();
&nbsp;
      let prompt = { role: 'system', content: EConfigStrings.kOpenAiPersonaPrompt };
      builtQuery.push (prompt);      
&nbsp;
      for (const message of messages) {
         if (OpenAiAPi.isBotRequest(message, authors)) {
            let entry = { role: 'user', content: message.text };
            builtQuery.push (entry);
         }
&nbsp;
         if (OpenAiAPi.isBotMessage(message, authors)) {
            let entry = { role: 'assistant', content: message.text };
            builtQuery.push (entry);
         }         
&nbsp;
      }
      return builtQuery; 
   }
&nbsp;
   static isBotMessage (message: Message, authors: Map&lt;string, Persona&gt;) : boolean {
&nbsp;
      let author = authors.get (message.authorId);
&nbsp;
      throwIfUndefined (author);
&nbsp;
      return (author.icon === EIcon.kBotPersona);
   }
&nbsp;
 static isBotRequest (message: Message, authors: Map&lt;string, Persona&gt;) : boolean {
&nbsp;
    let author = authors.get (message.authorId);
&nbsp;
    throwIfUndefined (author);
&nbsp;
    return (author.icon === EIcon.kPersonPersona) &amp;&amp; (message.text.includes (EConfigStrings.kBotRequestSignature));
 }
&nbsp;
}</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-02-06T20:50:44.930Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\Persona.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for Persona.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> Persona.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">95.27% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>121/127</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">91.17% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>62/68</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">96.77% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>30/31</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">95.23% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>120/126</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a>
<a name='L94'></a><a href='#L94'>94</a>
<a name='L95'></a><a href='#L95'>95</a>
<a name='L96'></a><a href='#L96'>96</a>
<a name='L97'></a><a href='#L97'>97</a>
<a name='L98'></a><a href='#L98'>98</a>
<a name='L99'></a><a href='#L99'>99</a>
<a name='L100'></a><a href='#L100'>100</a>
<a name='L101'></a><a href='#L101'>101</a>
<a name='L102'></a><a href='#L102'>102</a>
<a name='L103'></a><a href='#L103'>103</a>
<a name='L104'></a><a href='#L104'>104</a>
<a name='L105'></a><a href='#L105'>105</a>
<a name='L106'></a><a href='#L106'>106</a>
<a name='L107'></a><a href='#L107'>107</a>
<a name='L108'></a><a href='#L108'>108</a>
<a name='L109'></a><a href='#L109'>109</a>
<a name='L110'></a><a href='#L110'>110</a>
<a name='L111'></a><a href='#L111'>111</a>
<a name='L112'></a><a href='#L112'>112</a>
<a name='L113'></a><a href='#L113'>113</a>
<a name='L114'></a><a href='#L114'>114</a>
<a name='L115'></a><a href='#L115'>115</a>
<a name='L116'></a><a href='#L116'>116</a>
<a name='L117'></a><a href='#L117'>117</a>
<a name='L118'></a><a href='#L118'>118</a>
<a name='L119'></a><a href='#L119'>119</a>
<a name='L120'></a><a href='#L120'>120</a>
<a name='L121'></a><a href='#L121'>121</a>
<a name='L122'></a><a href='#L122'>122</a>
<a name='L123'></a><a href='#L123'>123</a>
<a name='L124'></a><a href='#L124'>124</a>
<a name='L125'></a><a href='#L125'>125</a>
<a name='L126'></a><a href='#L126'>126</a>
<a name='L127'></a><a href='#L127'>127</a>
<a name='L128'></a><a href='#L128'>128</a>
<a name='L129'></a><a href='#L129'>129</a>
<a name='L130'></a><a href='#L130'>130</a>
<a name='L131'></a><a href='#L131'>131</a>
<a name='L132'></a><a href='#L132'>132</a>
<a name='L133'></a><a href='#L133'>133</a>
<a name='L134'></a><a href='#L134'>134</a>
<a name='L135'></a><a href='#L135'>135</a>
<a name='L136'></a><a href='#L136'>136</a>
<a name='L137'></a><a href='#L137'>137</a>
<a name='L138'></a><a href='#L138'>138</a>
<a name='L139'></a><a href='#L139'>139</a>
<a name='L140'></a><a href='#L140'>140</a>
<a name='L141'></a><a href='#L141'>141</a>
<a name='L142'></a><a href='#L142'>142</a>
<a name='L143'></a><a href='#L143'>143</a>
<a name='L144'></a><a href='#L144'>144</a>
<a name='L145'></a><a href='#L145'>145</a>
<a name='L146'></a><a href='#L146'>146</a>
<a name='L147'></a><a href='#L147'>147</a>
<a name='L148'></a><a href='#L148'>148</a>
<a name='L149'></a><a href='#L149'>149</a>
<a name='L150'></a><a href='#L150'>150</a>
<a name='L151'></a><a href='#L151'>151</a>
<a name='L152'></a><a href='#L152'>152</a>
<a name='L153'></a><a href='#L153'>153</a>
<a name='L154'></a><a href='#L154'>154</a>
<a name='L155'></a><a href='#L155'>155</a>
<a name='L156'></a><a href='#L156'>156</a>
<a name='L157'></a><a href='#L157'>157</a>
<a name='L158'></a><a href='#L158'>158</a>
<a name='L159'></a><a href='#L159'>159</a>
<a name='L160'></a><a href='#L160'>160</a>
<a name='L161'></a><a href='#L161'>161</a>
<a name='L162'></a><a href='#L162'>162</a>
<a name='L163'></a><a href='#L163'>163</a>
<a name='L164'></a><a href='#L164'>164</a>
<a name='L165'></a><a href='#L165'>165</a>
<a name='L166'></a><a href='#L166'>166</a>
<a name='L167'></a><a href='#L167'>167</a>
<a name='L168'></a><a href='#L168'>168</a>
<a name='L169'></a><a href='#L169'>169</a>
<a name='L170'></a><a href='#L170'>170</a>
<a name='L171'></a><a href='#L171'>171</a>
<a name='L172'></a><a href='#L172'>172</a>
<a name='L173'></a><a href='#L173'>173</a>
<a name='L174'></a><a href='#L174'>174</a>
<a name='L175'></a><a href='#L175'>175</a>
<a name='L176'></a><a href='#L176'>176</a>
<a name='L177'></a><a href='#L177'>177</a>
<a name='L178'></a><a href='#L178'>178</a>
<a name='L179'></a><a href='#L179'>179</a>
<a name='L180'></a><a href='#L180'>180</a>
<a name='L181'></a><a href='#L181'>181</a>
<a name='L182'></a><a href='#L182'>182</a>
<a name='L183'></a><a href='#L183'>183</a>
<a name='L184'></a><a href='#L184'>184</a>
<a name='L185'></a><a href='#L185'>185</a>
<a name='L186'></a><a href='#L186'>186</a>
<a name='L187'></a><a href='#L187'>187</a>
<a name='L188'></a><a href='#L188'>188</a>
<a name='L189'></a><a href='#L189'>189</a>
<a name='L190'></a><a href='#L190'>190</a>
<a name='L191'></a><a href='#L191'>191</a>
<a name='L192'></a><a href='#L192'>192</a>
<a name='L193'></a><a href='#L193'>193</a>
<a name='L194'></a><a href='#L194'>194</a>
<a name='L195'></a><a href='#L195'>195</a>
<a name='L196'></a><a href='#L196'>196</a>
<a name='L197'></a><a href='#L197'>197</a>
<a name='L198'></a><a href='#L198'>198</a>
<a name='L199'></a><a href='#L199'>199</a>
<a name='L200'></a><a href='#L200'>200</a>
<a name='L201'></a><a href='#L201'>201</a>
<a name='L202'></a><a href='#L202'>202</a>
<a name='L203'></a><a href='#L203'>203</a>
<a name='L204'></a><a href='#L204'>204</a>
<a name='L205'></a><a href='#L205'>205</a>
<a name='L206'></a><a href='#L206'>206</a>
<a name='L207'></a><a href='#L207'>207</a>
<a name='L208'></a><a href='#L208'>208</a>
<a name='L209'></a><a href='#L209'>209</a>
<a name='L210'></a><a href='#L210'>210</a>
<a name='L211'></a><a href='#L211'>211</a>
<a name='L212'></a><a href='#L212'>212</a>
<a name='L213'></a><a href='#L213'>213</a>
<a name='L214'></a><a href='#L214'>214</a>
<a name='L215'></a><a href='#L215'>215</a>
<a name='L216'></a><a href='#L216'>216</a>
<a name='L217'></a><a href='#L217'>217</a>
<a name='L218'></a><a href='#L218'>218</a>
<a name='L219'></a><a href='#L219'>219</a>
<a name='L220'></a><a href='#L220'>220</a>
<a name='L221'></a><a href='#L221'>221</a>
<a name='L222'></a><a href='#L222'>222</a>
<a name='L223'></a><a href='#L223'>223</a>
<a name='L224'></a><a href='#L224'>224</a>
<a name='L225'></a><a href='#L225'>225</a>
<a name='L226'></a><a href='#L226'>226</a>
<a name='L227'></a><a href='#L227'>227</a>
<a name='L228'></a><a href='#L228'>228</a>
<a name='L229'></a><a href='#L229'>229</a>
<a name='L230'></a><a href='#L230'>230</a>
<a name='L231'></a><a href='#L231'>231</a>
<a name='L232'></a><a href='#L232'>232</a>
<a name='L233'></a><a href='#L233'>233</a>
<a name='L234'></a><a href='#L234'>234</a>
<a name='L235'></a><a href='#L235'>235</a>
<a name='L236'></a><a href='#L236'>236</a>
<a name='L237'></a><a href='#L237'>237</a>
<a name='L238'></a><a href='#L238'>238</a>
<a name='L239'></a><a href='#L239'>239</a>
<a name='L240'></a><a href='#L240'>240</a>
<a name='L241'></a><a href='#L241'>241</a>
<a name='L242'></a><a href='#L242'>242</a>
<a name='L243'></a><a href='#L243'>243</a>
<a name='L244'></a><a href='#L244'>244</a>
<a name='L245'></a><a href='#L245'>245</a>
<a name='L246'></a><a href='#L246'>246</a>
<a name='L247'></a><a href='#L247'>247</a>
<a name='L248'></a><a href='#L248'>248</a>
<a name='L249'></a><a href='#L249'>249</a>
<a name='L250'></a><a href='#L250'>250</a>
<a name='L251'></a><a href='#L251'>251</a>
<a name='L252'></a><a href='#L252'>252</a>
<a name='L253'></a><a href='#L253'>253</a>
<a name='L254'></a><a href='#L254'>254</a>
<a name='L255'></a><a href='#L255'>255</a>
<a name='L256'></a><a href='#L256'>256</a>
<a name='L257'></a><a href='#L257'>257</a>
<a name='L258'></a><a href='#L258'>258</a>
<a name='L259'></a><a href='#L259'>259</a>
<a name='L260'></a><a href='#L260'>260</a>
<a name='L261'></a><a href='#L261'>261</a>
<a name='L262'></a><a href='#L262'>262</a>
<a name='L263'></a><a href='#L263'>263</a>
<a name='L264'></a><a href='#L264'>264</a>
<a name='L265'></a><a href='#L265'>265</a>
<a name='L266'></a><a href='#L266'>266</a>
<a name='L267'></a><a href='#L267'>267</a>
<a name='L268'></a><a href='#L268'>268</a>
<a name='L269'></a><a href='#L269'>269</a>
<a name='L270'></a><a href='#L270'>270</a>
<a name='L271'></a><a href='#L271'>271</a>
<a name='L272'></a><a href='#L272'>272</a>
<a name='L273'></a><a href='#L273'>273</a>
<a name='L274'></a><a href='#L274'>274</a>
<a name='L275'></a><a href='#L275'>275</a>
<a name='L276'></a><a href='#L276'>276</a>
<a name='L277'></a><a href='#L277'>277</a>
<a name='L278'></a><a href='#L278'>278</a>
<a name='L279'></a><a href='#L279'>279</a>
<a name='L280'></a><a href='#L280'>280</a>
<a name='L281'></a><a href='#L281'>281</a>
<a name='L282'></a><a href='#L282'>282</a>
<a name='L283'></a><a href='#L283'>283</a>
<a name='L284'></a><a href='#L284'>284</a>
<a name='L285'></a><a href='#L285'>285</a>
<a name='L286'></a><a href='#L286'>286</a>
<a name='L287'></a><a href='#L287'>287</a>
<a name='L288'></a><a href='#L288'>288</a>
<a name='L289'></a><a href='#L289'>289</a>
<a name='L290'></a><a href='#L290'>290</a>
<a name='L291'></a><a href='#L291'>291</a>
<a name='L292'></a><a href='#L292'>292</a>
<a name='L293'></a><a href='#L293'>293</a>
<a name='L294'></a><a href='#L294'>294</a>
<a name='L295'></a><a href='#L295'>295</a>
<a name='L296'></a><a href='#L296'>296</a>
<a name='L297'></a><a href='#L297'>297</a>
<a name='L298'></a><a href='#L298'>298</a>
<a name='L299'></a><a href='#L299'>299</a>
<a name='L300'></a><a href='#L300'>300</a>
<a name='L301'></a><a href='#L301'>301</a>
<a name='L302'></a><a href='#L302'>302</a>
<a name='L303'></a><a href='#L303'>303</a>
<a name='L304'></a><a href='#L304'>304</a>
<a name='L305'></a><a href='#L305'>305</a>
<a name='L306'></a><a href='#L306'>306</a>
<a name='L307'></a><a href='#L307'>307</a>
<a name='L308'></a><a href='#L308'>308</a>
<a name='L309'></a><a href='#L309'>309</a>
<a name='L310'></a><a href='#L310'>310</a>
<a name='L311'></a><a href='#L311'>311</a>
<a name='L312'></a><a href='#L312'>312</a>
<a name='L313'></a><a href='#L313'>313</a>
<a name='L314'></a><a href='#L314'>314</a>
<a name='L315'></a><a href='#L315'>315</a>
<a name='L316'></a><a href='#L316'>316</a>
<a name='L317'></a><a href='#L317'>317</a>
<a name='L318'></a><a href='#L318'>318</a>
<a name='L319'></a><a href='#L319'>319</a>
<a name='L320'></a><a href='#L320'>320</a>
<a name='L321'></a><a href='#L321'>321</a>
<a name='L322'></a><a href='#L322'>322</a>
<a name='L323'></a><a href='#L323'>323</a>
<a name='L324'></a><a href='#L324'>324</a>
<a name='L325'></a><a href='#L325'>325</a>
<a name='L326'></a><a href='#L326'>326</a>
<a name='L327'></a><a href='#L327'>327</a>
<a name='L328'></a><a href='#L328'>328</a>
<a name='L329'></a><a href='#L329'>329</a>
<a name='L330'></a><a href='#L330'>330</a>
<a name='L331'></a><a href='#L331'>331</a>
<a name='L332'></a><a href='#L332'>332</a>
<a name='L333'></a><a href='#L333'>333</a>
<a name='L334'></a><a href='#L334'>334</a>
<a name='L335'></a><a href='#L335'>335</a>
<a name='L336'></a><a href='#L336'>336</a>
<a name='L337'></a><a href='#L337'>337</a>
<a name='L338'></a><a href='#L338'>338</a>
<a name='L339'></a><a href='#L339'>339</a>
<a name='L340'></a><a href='#L340'>340</a>
<a name='L341'></a><a href='#L341'>341</a>
<a name='L342'></a><a href='#L342'>342</a>
<a name='L343'></a><a href='#L343'>343</a>
<a name='L344'></a><a href='#L344'>344</a>
<a name='L345'></a><a href='#L345'>345</a>
<a name='L346'></a><a href='#L346'>346</a>
<a name='L347'></a><a href='#L347'>347</a>
<a name='L348'></a><a href='#L348'>348</a>
<a name='L349'></a><a href='#L349'>349</a>
<a name='L350'></a><a href='#L350'>350</a>
<a name='L351'></a><a href='#L351'>351</a>
<a name='L352'></a><a href='#L352'>352</a>
<a name='L353'></a><a href='#L353'>353</a>
<a name='L354'></a><a href='#L354'>354</a>
<a name='L355'></a><a href='#L355'>355</a>
<a name='L356'></a><a href='#L356'>356</a>
<a name='L357'></a><a href='#L357'>357</a>
<a name='L358'></a><a href='#L358'>358</a>
<a name='L359'></a><a href='#L359'>359</a>
<a name='L360'></a><a href='#L360'>360</a>
<a name='L361'></a><a href='#L361'>361</a>
<a name='L362'></a><a href='#L362'>362</a>
<a name='L363'></a><a href='#L363'>363</a>
<a name='L364'></a><a href='#L364'>364</a>
<a name='L365'></a><a href='#L365'>365</a>
<a name='L366'></a><a href='#L366'>366</a>
<a name='L367'></a><a href='#L367'>367</a>
<a name='L368'></a><a href='#L368'>368</a>
<a name='L369'></a><a href='#L369'>369</a>
<a name='L370'></a><a href='#L370'>370</a>
<a name='L371'></a><a href='#L371'>371</a>
<a name='L372'></a><a href='#L372'>372</a>
<a name='L373'></a><a href='#L373'>373</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">35x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">34x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">69x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">69x</span>
<span class="cline-any cline-yes">19x</span>
<span class="cline-any cline-yes">19x</span>
<span class="cline-any cline-yes">19x</span>
<span class="cline-any cline-yes">19x</span>
<span class="cline-any cline-yes">19x</span>
<span class="cline-any cline-yes">19x</span>
<span class="cline-any cline-yes">19x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">50x</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">45x</span>
<span class="cline-any cline-yes">45x</span>
<span class="cline-any cline-yes">45x</span>
<span class="cline-any cline-yes">45x</span>
<span class="cline-any cline-yes">45x</span>
<span class="cline-any cline-yes">45x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">50x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">49x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">48x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">48x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">47x</span>
<span class="cline-any cline-yes">47x</span>
<span class="cline-any cline-yes">47x</span>
<span class="cline-any cline-yes">47x</span>
<span class="cline-any cline-yes">47x</span>
<span class="cline-any cline-yes">47x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">22x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">16x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">23x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">41x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">7x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">39x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">13x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">52x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">51x</span>
<span class="cline-any cline-yes">49x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">53x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">51x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">50x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">49x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">53x</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">38x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">35x</span>
<span class="cline-any cline-yes">35x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">34x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-yes">35x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
&nbsp;
import { InvalidParameterError } from './Errors';
import { EIcon } from './Icons';
import { throwIfUndefined } from './Asserts'; 
import { getDefaultKeyGenerator } from './IKeyGeneratorFactory';
import { MDynamicStreamable, DynamicStreamableFactory } from "./StreamingFramework";
&nbsp;
const keyGenerator = getDefaultKeyGenerator();
&nbsp;
const unknownUuid: string = "88a77968-2525-4b83-b396-352ca83d1680";
&nbsp;
const className = "Persona";
&nbsp;
// atob works in a browser, implement a fallback if we are in node. 
function callAtob(data_: string, forceShim: boolean): string {
&nbsp;
   if (!atob || forceShim) {
      const atob = (data: string) =&gt; Buffer.from(data, 'base64').toString('binary');
      return atob(data_);
   }
   return atob(data_);
}
&nbsp;
// Persona - aggregates name, icon type, &amp; timestamp of last time we saw them
// excludes email and other PII so can be passed to client even when describing an individual.
export class Persona extends MDynamicStreamable {
   private _id: string;
   private _name: string;
   private _email: string;
   private _icon: EIcon;
   private _thumbnailB64: string | undefined;
   private _lastSeenAt: Date;
&nbsp;
   /**
    * Create an empty Persona object - required for particiation in serialisation framework
    */
   public constructor();
&nbsp;
   /**
    * Create a Persona object
    * @param id_ - id to use to generate uniqueness 
    * @param name_ - plain text user name.
    * @param amail_ - email address (unique)
    * @param icon_ - icon to use, from the enum list
    * @param thumbNailB64_ - encoded thumbnail image, can be undefined
    * @param lastSeenAt_ - timestamp for last interaction seen by the framework
    */
   public constructor(id_: string | undefined, name_: string | undefined, email_: string | undefined, icon: EIcon, thumbNailB64_: string | undefined, lastSeenAt_: Date);
&nbsp;
   /**
    * Create a Persona object
    * @param persona - object to copy from - should work for JSON format and for real constructed objects
    */
   public constructor(persona: Persona);
&nbsp;
   public constructor(...arr: any[])
   {
&nbsp;
      super();
&nbsp;
      if (arr.length === 0) {
         this._id = keyGenerator.generateKey(); // An new Person has a key
         this._name = "";                       // But not a name or email address
         this._email = "";
         this._icon = EIcon.kUnknownPersona;
         this._thumbnailB64 = undefined;
         this._lastSeenAt = new Date();
         return;
      }
&nbsp;
      var localId: string;
      var localName: string;
      var localEmail: string;      
      var localIcon: EIcon;
      var localThumbNailB64: string;
      var localLastSeenAt: Date;
&nbsp;
      if (arr.length === 1) {
         localId = arr[0]._id
         localName = arr[0]._name;
         localEmail = arr[0]._email;         
         localIcon = arr[0]._icon;
         localThumbNailB64 = arr[0]._thumbnailB64;
         localLastSeenAt = new Date(arr[0]._lastSeenAt);
      }
      else { 
         localId = arr[0];
         localName = arr[1];
         localEmail = arr[2]
         localIcon = arr[3];         
         localThumbNailB64 = arr[4];
         localLastSeenAt = new Date (arr[5]);
      }
&nbsp;
      if (!Persona.isValidId(localId)) {
         throw new InvalidParameterError("Id:" + localId + '.');
      }
      if (!Persona.isValidName(localName)) {
         throw new InvalidParameterError("Name:" + localName + '.');
      }
      <span class="missing-if-branch" title="if path not taken" >I</span>if (!Persona.isValidEmail(localEmail)) {
<span class="cstat-no" title="statement not covered" >         throw new InvalidParameterError("Email:" + localEmail + '.');</span>
      }
      if (!Persona.isValidThumbnailB64(localThumbNailB64)) {
         throw new InvalidParameterError("Thumbnail:" + localThumbNailB64 + '.');
      }
&nbsp;
      this._id = localId;
      this._name = localName;
      this._email = localEmail;
      this._icon = localIcon;
      this._thumbnailB64 = localThumbNailB64;
      this._lastSeenAt = localLastSeenAt;
   }
&nbsp;
   /**
    * Dynamic creation for Streaming framework
    */
   className(): string {
&nbsp;
      return className;
   }
&nbsp;
   static createDynamicInstance(): MDynamicStreamable {
      return new Persona();
   }
&nbsp;
   static _dynamicStreamableFactory: DynamicStreamableFactory = new DynamicStreamableFactory(className, Persona.createDynamicInstance);
   streamOut(): string {
&nbsp;
      return JSON.stringify({ id: this._id, name: this._name, email: this._email, icon: this._icon, thumbnailB64: this._thumbnailB64, lastSeenAt: this._lastSeenAt });
   }
&nbsp;
   streamIn(stream: string): void {
&nbsp;
      const obj = JSON.parse(stream);
&nbsp;
      let icon: EIcon = ((EIcon as any)[obj.icon]);
&nbsp;
      // Backwards compatibility from when we use the case 'Bot' for the LLM
      <span class="missing-if-branch" title="if path not taken" >I</span>if (icon === EIcon.kBotPersona) 
<span class="cstat-no" title="statement not covered" >         icon = EIcon.kLLMPersona;</span>
&nbsp;
      <span class="missing-if-branch" title="if path not taken" >I</span>if (icon === undefined)
<span class="cstat-no" title="statement not covered" >         throw new InvalidParameterError("Icon:" + obj.icon + '.');</span>
&nbsp;
      let name = obj.name;
      let email = obj.email;
&nbsp;
      // Backwards compatibility from when we used the email from LinkedIn in the name attribute
      <span class="missing-if-branch" title="if path not taken" >I</span>if (name &amp;&amp; ((! email) || (email.length === 0))) { 
<span class="cstat-no" title="statement not covered" >         email = name;</span>
<span class="cstat-no" title="statement not covered" >         name = "";</span>
      }
&nbsp;
      this.assign(new Persona (obj.id, name, email, icon, obj.thumbnailB64, new Date(obj.lastSeenAt)));
   }
&nbsp;
   /**
   * set of 'getters' for private variables
   */
   get id(): string {
      return this._id;
   }
   get name(): string {
      return this._name;
   }
   get email(): string {
      return this._email;
   }   
   get icon(): EIcon {
      return this._icon;
   }
   get thumbnailB64(): string | undefined {
      return this._thumbnailB64;
   }
   get lastSeenAt(): Date {
      return this._lastSeenAt;
   }
   get checkedThumbnailB64(): string {
      throwIfUndefined (this._thumbnailB64);        
      return this._thumbnailB64;
   }
&nbsp;
   /**
   * set of 'setters' for private variables
   */
   set id(id_: string) {
      if (!Persona.isValidId(id_)) {
         throw new InvalidParameterError("Id:" + id_ + '.');
      }
&nbsp;
      this._id = id_;
   }
&nbsp;
   set name(name_: string) {
      if (!Persona.isValidName(name_)) {
         throw new InvalidParameterError("Name:" + name_ + '.');
      }
&nbsp;
      this._name = name_;
   }
&nbsp;
   set email(email_: string) {
      if (!Persona.isValidEmail(email_)) {
         throw new InvalidParameterError("Email:" + email_ + '.');
      }
&nbsp;
      this._email = email_;
   }
&nbsp;
<span class="fstat-no" title="function not covered" >   set i</span>con (icon_: EIcon) {
&nbsp;
<span class="cstat-no" title="statement not covered" >      this._icon = icon_;</span>
   }
&nbsp;
   set thumbnailB64(thumbNailB64_: string) {
&nbsp;
      this.setThumbnailB64(thumbNailB64_);
   }
&nbsp;
   set lastSeenAt(lastSeenAt_: Date) {
&nbsp;
      this._lastSeenAt = new Date(lastSeenAt_);
   }
&nbsp;
   /**
    * test for equality - checks all fields are the same. 
    * Uses field values, not identity bcs if objects are streamed to/from JSON, field identities will be different. 
    * @param rhs - the object to compare this one to.  
    */
   equals(rhs: Persona): boolean {
      Persona
      return ((this._id === rhs._id) &amp;&amp;
         ((this._name === undefined &amp;&amp; <span class="branch-2 cbranch-no" title="branch not covered" >rhs._name == undefined)</span> || (this._name === rhs._name)) &amp;&amp;
         ((this._email === undefined &amp;&amp; <span class="branch-5 cbranch-no" title="branch not covered" >rhs._email == undefined)</span> || (this._email === rhs._email)) &amp;&amp;         
         (this._icon === rhs._icon) &amp;&amp;         
         ((this._thumbnailB64 === undefined &amp;&amp; rhs._thumbnailB64 == undefined) || (this._thumbnailB64 === rhs._thumbnailB64)) &amp;&amp;
         (this.areSameDate (this._lastSeenAt, rhs._lastSeenAt)));
   }
&nbsp;
   areSameDate (lhs: Date, rhs : Date) : boolean {
      if (lhs.getTime() === rhs.getTime()) {
         return true;
      }
      return false;
   }
&nbsp;
   /**
    * assignment operator 
    * @param rhs - the object to assign this one from.  
    */
   assign(rhs: Persona): Persona {
      this._id = rhs._id;
      this._name = rhs._name;
      this._email = rhs._email;
      this._icon = rhs._icon;
      this._thumbnailB64 = rhs._thumbnailB64;
      this._lastSeenAt = new Date (rhs._lastSeenAt);
&nbsp;
      return this;
   }
&nbsp;
   /**
    * Set thumbnail with an option to force use of browser shim for B64 encoding 
    */
   setThumbnailB64(thumbNailB64_: string, forceShim_: boolean = false) : void {
&nbsp;
      if (!Persona.isValidThumbnailB64(thumbNailB64_, forceShim_)) {
         throw new InvalidParameterError("Thumbnail:" + thumbNailB64_ + '.');
      }
&nbsp;
      this._thumbnailB64 = thumbNailB64_;
   }
&nbsp;
   /**
    * test for valid id 
    * @param id - the string to test
    */
   static isValidId(id_: string): boolean {
      if (!id_) // undefined keys are allowed if user object has not been originated from or saved anywhere persistent
         return true;
&nbsp;
      if (id_ &amp;&amp; id_.length &gt; 0) // if the id exists, must be &gt; zero length
         return true;
&nbsp;
      return (false);
   }
&nbsp;
   /**
    * test for valid name 
    * @param name - the string to test
    */
   static isValidName(name_: string): boolean {
&nbsp;
      if (name_ == undefined)
         return false;
&nbsp;
      return true; // Currently allow anything for a name, even empty string. 
   }
&nbsp;
   /**
    * test for valid email 
    * @param email - the string to test
    */
      static isValidEmail(email_: string): boolean {
&nbsp;
         if (email_ == undefined)
            return false;
   
         return true; // Currently allow anything for email, even empty string. 
      }
   /**
    * test for valid thumbnail string 
    * @param thumbnail - the string to test
    */
   static isValidThumbnailB64(thumbNailB64_: string, forceShim_: boolean = false): boolean {
&nbsp;
&nbsp;
      if (thumbNailB64_ == undefined) // Thumbnail can be undefined it its a predefined ICON
         return true;
&nbsp;
      // else must be a valid encoded string
      if (thumbNailB64_.length &gt; 0) { 
&nbsp;
         var decoded : string;
&nbsp;
         try {
            decoded = callAtob(thumbNailB64_, forceShim_);
         } catch (e) {
            return false;   
         }
&nbsp;
         return true;
      }
&nbsp;
      return (false);
   }
&nbsp;
   private static _unknown: Persona = new Persona(unknownUuid, "Unknown", "", EIcon.kUnknownPersona, undefined, new Date(0));
&nbsp;
   /**
    * return persona details for 'unknown'
    */
   static unknown(): Persona {
      return Persona._unknown;
   }
&nbsp;
&nbsp;
   /**
    * return unknown if the persona cannot be found in the map
    */
      static safeAuthorLookup (audience: Map&lt;string, Persona&gt;, authorId: string) : Persona {
   
      let initial = audience.get (authorId);
   
      if (initial)
         return initial;
      else
         return Persona.unknown()
   }
&nbsp;
   /**
    * test if the persona details are the status 'unknown'
    * @param persona - the persona to test 
    */
   static isUnknown(persona: Persona): boolean {
      return (persona === Persona._unknown) ||
         (persona &amp;&amp; persona.equals(Persona._unknown));
   }
}
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\prettify.css
****************************************
.pln{color:#000}@media screen{.str{color:#080}.kwd{color:#008}.com{color:#800}.typ{color:#606}.lit{color:#066}.pun,.opn,.clo{color:#660}.tag{color:#008}.atn{color:#606}.atv{color:#080}.dec,.var{color:#606}.fun{color:red}}@media print,projection{.str{color:#060}.kwd{color:#006;font-weight:bold}.com{color:#600;font-style:italic}.typ{color:#404;font-weight:bold}.lit{color:#044}.pun,.opn,.clo{color:#440}.tag{color:#006;font-weight:bold}.atn{color:#404}.atv{color:#060}}pre.prettyprint{padding:2px;border:1px solid #888}ol.linenums{margin-top:0;margin-bottom:0}li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style-type:none}li.L1,li.L3,li.L5,li.L7,li.L9{background:#eee}
****************************************

****************************************
Boxer\coverage\Queue.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for Queue.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> Queue.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">78.57% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>11/14</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">66.66% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>4/6</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">66.66% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>4/6</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">84.61% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>11/13</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line medium'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">/*! Copyright Braid Technologies 2022 */
&nbsp;
&nbsp;
//==============================//
// Queue class
//==============================//
&nbsp;
export class Queue&lt;T&gt; {
&nbsp;
      // initialise the queue and offset
   queue: Array&lt;T&gt;;
   offset: number; 
&nbsp;
   /**
    * Creates a Queue
    */
   constructor() {
      this.offset = 0
      this.queue = new Array&lt;T&gt;();
   }
&nbsp;
   // Returns the length of the queue.
<span class="fstat-no" title="function not covered" >   getLength </span>() : number {
<span class="cstat-no" title="statement not covered" >      return (this.queue.length - this.offset);</span>
   }
&nbsp;
   // Returns true if the queue is empty, and false otherwise.
<span class="fstat-no" title="function not covered" >   isEmpty </span>() : boolean {
<span class="cstat-no" title="statement not covered" >      return (this.queue.length == 0);</span>
   }
&nbsp;
   /* Enqueues the specified item. The parameter is:
    *
    * item - the item to enqueue
    */
   enqueue (item: T) {
      this.queue.push(item);
   }
&nbsp;
   /* Dequeues an item and returns it. If the queue is empty, the value
    * 'undefined' is returned.
    */
   dequeue (): T | undefined {
&nbsp;
      // if the queue is empty, return immediately
      <span class="missing-if-branch" title="if path not taken" >I</span>if (this.queue.length == 0) <span class="cstat-no" title="statement not covered" >return undefined;</span>
&nbsp;
      // store the item at the front of the queue
      let item = this.queue[this.offset];
&nbsp;
      // increment the offset and remove the free space if necessary
      <span class="missing-if-branch" title="else path not taken" >E</span>if (++(this.offset) * 2 &gt;= this.queue.length) {
         this.queue = this.queue.slice(this.offset);
         this.offset = 0;
      }
&nbsp;
      // return the dequeued item
      return item;
&nbsp;
   }
&nbsp;
   /* Returns the item at the front of the queue (without dequeuing it). If the
    * queue is empty then undefined is returned.
    */
   peek(): T | undefined {
      return (this.queue.length &gt; 0 ? this.queue[this.offset] : undefined);
   }
}
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\SharedEmbedding.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for SharedEmbedding.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> SharedEmbedding.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">94% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>94/100</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">82.6% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>38/46</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">90.47% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>19/21</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">93.75% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>90/96</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a>
<a name='L94'></a><a href='#L94'>94</a>
<a name='L95'></a><a href='#L95'>95</a>
<a name='L96'></a><a href='#L96'>96</a>
<a name='L97'></a><a href='#L97'>97</a>
<a name='L98'></a><a href='#L98'>98</a>
<a name='L99'></a><a href='#L99'>99</a>
<a name='L100'></a><a href='#L100'>100</a>
<a name='L101'></a><a href='#L101'>101</a>
<a name='L102'></a><a href='#L102'>102</a>
<a name='L103'></a><a href='#L103'>103</a>
<a name='L104'></a><a href='#L104'>104</a>
<a name='L105'></a><a href='#L105'>105</a>
<a name='L106'></a><a href='#L106'>106</a>
<a name='L107'></a><a href='#L107'>107</a>
<a name='L108'></a><a href='#L108'>108</a>
<a name='L109'></a><a href='#L109'>109</a>
<a name='L110'></a><a href='#L110'>110</a>
<a name='L111'></a><a href='#L111'>111</a>
<a name='L112'></a><a href='#L112'>112</a>
<a name='L113'></a><a href='#L113'>113</a>
<a name='L114'></a><a href='#L114'>114</a>
<a name='L115'></a><a href='#L115'>115</a>
<a name='L116'></a><a href='#L116'>116</a>
<a name='L117'></a><a href='#L117'>117</a>
<a name='L118'></a><a href='#L118'>118</a>
<a name='L119'></a><a href='#L119'>119</a>
<a name='L120'></a><a href='#L120'>120</a>
<a name='L121'></a><a href='#L121'>121</a>
<a name='L122'></a><a href='#L122'>122</a>
<a name='L123'></a><a href='#L123'>123</a>
<a name='L124'></a><a href='#L124'>124</a>
<a name='L125'></a><a href='#L125'>125</a>
<a name='L126'></a><a href='#L126'>126</a>
<a name='L127'></a><a href='#L127'>127</a>
<a name='L128'></a><a href='#L128'>128</a>
<a name='L129'></a><a href='#L129'>129</a>
<a name='L130'></a><a href='#L130'>130</a>
<a name='L131'></a><a href='#L131'>131</a>
<a name='L132'></a><a href='#L132'>132</a>
<a name='L133'></a><a href='#L133'>133</a>
<a name='L134'></a><a href='#L134'>134</a>
<a name='L135'></a><a href='#L135'>135</a>
<a name='L136'></a><a href='#L136'>136</a>
<a name='L137'></a><a href='#L137'>137</a>
<a name='L138'></a><a href='#L138'>138</a>
<a name='L139'></a><a href='#L139'>139</a>
<a name='L140'></a><a href='#L140'>140</a>
<a name='L141'></a><a href='#L141'>141</a>
<a name='L142'></a><a href='#L142'>142</a>
<a name='L143'></a><a href='#L143'>143</a>
<a name='L144'></a><a href='#L144'>144</a>
<a name='L145'></a><a href='#L145'>145</a>
<a name='L146'></a><a href='#L146'>146</a>
<a name='L147'></a><a href='#L147'>147</a>
<a name='L148'></a><a href='#L148'>148</a>
<a name='L149'></a><a href='#L149'>149</a>
<a name='L150'></a><a href='#L150'>150</a>
<a name='L151'></a><a href='#L151'>151</a>
<a name='L152'></a><a href='#L152'>152</a>
<a name='L153'></a><a href='#L153'>153</a>
<a name='L154'></a><a href='#L154'>154</a>
<a name='L155'></a><a href='#L155'>155</a>
<a name='L156'></a><a href='#L156'>156</a>
<a name='L157'></a><a href='#L157'>157</a>
<a name='L158'></a><a href='#L158'>158</a>
<a name='L159'></a><a href='#L159'>159</a>
<a name='L160'></a><a href='#L160'>160</a>
<a name='L161'></a><a href='#L161'>161</a>
<a name='L162'></a><a href='#L162'>162</a>
<a name='L163'></a><a href='#L163'>163</a>
<a name='L164'></a><a href='#L164'>164</a>
<a name='L165'></a><a href='#L165'>165</a>
<a name='L166'></a><a href='#L166'>166</a>
<a name='L167'></a><a href='#L167'>167</a>
<a name='L168'></a><a href='#L168'>168</a>
<a name='L169'></a><a href='#L169'>169</a>
<a name='L170'></a><a href='#L170'>170</a>
<a name='L171'></a><a href='#L171'>171</a>
<a name='L172'></a><a href='#L172'>172</a>
<a name='L173'></a><a href='#L173'>173</a>
<a name='L174'></a><a href='#L174'>174</a>
<a name='L175'></a><a href='#L175'>175</a>
<a name='L176'></a><a href='#L176'>176</a>
<a name='L177'></a><a href='#L177'>177</a>
<a name='L178'></a><a href='#L178'>178</a>
<a name='L179'></a><a href='#L179'>179</a>
<a name='L180'></a><a href='#L180'>180</a>
<a name='L181'></a><a href='#L181'>181</a>
<a name='L182'></a><a href='#L182'>182</a>
<a name='L183'></a><a href='#L183'>183</a>
<a name='L184'></a><a href='#L184'>184</a>
<a name='L185'></a><a href='#L185'>185</a>
<a name='L186'></a><a href='#L186'>186</a>
<a name='L187'></a><a href='#L187'>187</a>
<a name='L188'></a><a href='#L188'>188</a>
<a name='L189'></a><a href='#L189'>189</a>
<a name='L190'></a><a href='#L190'>190</a>
<a name='L191'></a><a href='#L191'>191</a>
<a name='L192'></a><a href='#L192'>192</a>
<a name='L193'></a><a href='#L193'>193</a>
<a name='L194'></a><a href='#L194'>194</a>
<a name='L195'></a><a href='#L195'>195</a>
<a name='L196'></a><a href='#L196'>196</a>
<a name='L197'></a><a href='#L197'>197</a>
<a name='L198'></a><a href='#L198'>198</a>
<a name='L199'></a><a href='#L199'>199</a>
<a name='L200'></a><a href='#L200'>200</a>
<a name='L201'></a><a href='#L201'>201</a>
<a name='L202'></a><a href='#L202'>202</a>
<a name='L203'></a><a href='#L203'>203</a>
<a name='L204'></a><a href='#L204'>204</a>
<a name='L205'></a><a href='#L205'>205</a>
<a name='L206'></a><a href='#L206'>206</a>
<a name='L207'></a><a href='#L207'>207</a>
<a name='L208'></a><a href='#L208'>208</a>
<a name='L209'></a><a href='#L209'>209</a>
<a name='L210'></a><a href='#L210'>210</a>
<a name='L211'></a><a href='#L211'>211</a>
<a name='L212'></a><a href='#L212'>212</a>
<a name='L213'></a><a href='#L213'>213</a>
<a name='L214'></a><a href='#L214'>214</a>
<a name='L215'></a><a href='#L215'>215</a>
<a name='L216'></a><a href='#L216'>216</a>
<a name='L217'></a><a href='#L217'>217</a>
<a name='L218'></a><a href='#L218'>218</a>
<a name='L219'></a><a href='#L219'>219</a>
<a name='L220'></a><a href='#L220'>220</a>
<a name='L221'></a><a href='#L221'>221</a>
<a name='L222'></a><a href='#L222'>222</a>
<a name='L223'></a><a href='#L223'>223</a>
<a name='L224'></a><a href='#L224'>224</a>
<a name='L225'></a><a href='#L225'>225</a>
<a name='L226'></a><a href='#L226'>226</a>
<a name='L227'></a><a href='#L227'>227</a>
<a name='L228'></a><a href='#L228'>228</a>
<a name='L229'></a><a href='#L229'>229</a>
<a name='L230'></a><a href='#L230'>230</a>
<a name='L231'></a><a href='#L231'>231</a>
<a name='L232'></a><a href='#L232'>232</a>
<a name='L233'></a><a href='#L233'>233</a>
<a name='L234'></a><a href='#L234'>234</a>
<a name='L235'></a><a href='#L235'>235</a>
<a name='L236'></a><a href='#L236'>236</a>
<a name='L237'></a><a href='#L237'>237</a>
<a name='L238'></a><a href='#L238'>238</a>
<a name='L239'></a><a href='#L239'>239</a>
<a name='L240'></a><a href='#L240'>240</a>
<a name='L241'></a><a href='#L241'>241</a>
<a name='L242'></a><a href='#L242'>242</a>
<a name='L243'></a><a href='#L243'>243</a>
<a name='L244'></a><a href='#L244'>244</a>
<a name='L245'></a><a href='#L245'>245</a>
<a name='L246'></a><a href='#L246'>246</a>
<a name='L247'></a><a href='#L247'>247</a>
<a name='L248'></a><a href='#L248'>248</a>
<a name='L249'></a><a href='#L249'>249</a>
<a name='L250'></a><a href='#L250'>250</a>
<a name='L251'></a><a href='#L251'>251</a>
<a name='L252'></a><a href='#L252'>252</a>
<a name='L253'></a><a href='#L253'>253</a>
<a name='L254'></a><a href='#L254'>254</a>
<a name='L255'></a><a href='#L255'>255</a>
<a name='L256'></a><a href='#L256'>256</a>
<a name='L257'></a><a href='#L257'>257</a>
<a name='L258'></a><a href='#L258'>258</a>
<a name='L259'></a><a href='#L259'>259</a>
<a name='L260'></a><a href='#L260'>260</a>
<a name='L261'></a><a href='#L261'>261</a>
<a name='L262'></a><a href='#L262'>262</a>
<a name='L263'></a><a href='#L263'>263</a>
<a name='L264'></a><a href='#L264'>264</a>
<a name='L265'></a><a href='#L265'>265</a>
<a name='L266'></a><a href='#L266'>266</a>
<a name='L267'></a><a href='#L267'>267</a>
<a name='L268'></a><a href='#L268'>268</a>
<a name='L269'></a><a href='#L269'>269</a>
<a name='L270'></a><a href='#L270'>270</a>
<a name='L271'></a><a href='#L271'>271</a>
<a name='L272'></a><a href='#L272'>272</a>
<a name='L273'></a><a href='#L273'>273</a>
<a name='L274'></a><a href='#L274'>274</a>
<a name='L275'></a><a href='#L275'>275</a>
<a name='L276'></a><a href='#L276'>276</a>
<a name='L277'></a><a href='#L277'>277</a>
<a name='L278'></a><a href='#L278'>278</a>
<a name='L279'></a><a href='#L279'>279</a>
<a name='L280'></a><a href='#L280'>280</a>
<a name='L281'></a><a href='#L281'>281</a>
<a name='L282'></a><a href='#L282'>282</a>
<a name='L283'></a><a href='#L283'>283</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">19x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">19x</span>
<span class="cline-any cline-yes">19x</span>
<span class="cline-any cline-yes">19x</span>
<span class="cline-any cline-yes">19x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">19x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">19x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">8x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">21x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">20x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
&nbsp;
import { InvalidParameterError } from './Errors';
import { throwIfUndefined } from './Asserts'; 
import { IKeyGenerator } from './IKeyGenerator';
import { getDefaultKeyGenerator } from './IKeyGeneratorFactory';
import { MDynamicStreamable, DynamicStreamableFactory } from "./StreamingFramework";
import { areSameShallowArray } from './Utilities';
import { Like } from './Like';
&nbsp;
var keyGenerator: IKeyGenerator = getDefaultKeyGenerator();
&nbsp;
const className = "SharedEmbedding";
&nbsp;
// SharedEmbedding - URL, conversation, net like count, emails of who has liked it, emails of who has disliked it. 
export class SharedEmbedding extends MDynamicStreamable {
   private _id: string; 
   private _url: string | undefined;
   private _conversationId: string | undefined;
   private _likes: Array&lt;Like&gt;;
&nbsp;
   /**
    * Create an empty Message object - required for particiation in serialisation framework
    */
   public constructor();
&nbsp;
   /**
    * Create a SharedEmbedding object
    * @param id_ - id to use to generate uniqueness 
    * @param url_ - URL
    * @param conversationId_ - in which conversation id the 'like' happen
    * @param likes_ - array of names of people that have liked it. 
    */
   public constructor(id_: string | undefined, url_: string | undefined, conversationId_: string | undefined,  
                      likes_: Array&lt;Like&gt; | undefined);
&nbsp;
   /**
    * Create a SharedEmbedding object
    * @param sharedEmbedding_ - object to copy from - should work for JSON format and for real constructed objects
    */
   public constructor(sharedEmbedding_: SharedEmbedding);
&nbsp;
   public constructor(...arr: any[])
   {
      super();
&nbsp;
      var localId: string = "";
      var localUrl: string | undefined = undefined;
      var localConversationId : string | undefined = undefined;
      var localLikes: Array&lt;Like&gt; = new Array&lt;Like&gt; ();        
&nbsp;
      if (arr.length === 0) {
&nbsp;
         localId = keyGenerator.generateKey(); // A new SharedEmbedding has a key                                     
      }
      else 
      if (arr.length === 1) {
&nbsp;
         localId = arr[0]._id
         localUrl = arr[0]._url;
         localConversationId = arr[0]._conversationId;         
         localLikes = arr[0]._likes.slice(0);         
      }
      else <span class="missing-if-branch" title="else path not taken" >E</span>if (arr.length === 4) {
         localId = arr[0];
         localUrl = arr[1]; 
         localConversationId = arr[2];     
         if (arr[3])      
            localLikes = arr[3].slice(0);     
      }
&nbsp;
      if (!SharedEmbedding.isValidId(localId)) {
         throw new InvalidParameterError("Id:" + localId + '.');
      }
&nbsp;
      this._id = localId;    
      this._url = localUrl;
      this._conversationId = localConversationId;
      this._likes = localLikes;           
   }
&nbsp;
   /**
    * Dynamic creation for Streaming framework
    */
   className(): string {
&nbsp;
      return className;
   }
&nbsp;
   static createDynamicInstance(): MDynamicStreamable {
      return new SharedEmbedding();
   }
&nbsp;
   static _dynamicStreamableFactory: DynamicStreamableFactory = new DynamicStreamableFactory(className, SharedEmbedding.createDynamicInstance);
&nbsp;
   streamOut(): string {
&nbsp;
      return JSON.stringify({ id: this._id, url: this._url, conversationId: this._conversationId,
                            likes: this._likes});
   }
&nbsp;
   streamIn(stream: string): void {
&nbsp;
      const obj = JSON.parse(stream);
&nbsp;
      let likes = new Array&lt;Like&gt; (); 
&nbsp;
      let objLikes = obj.likes;
&nbsp;
      <span class="missing-if-branch" title="else path not taken" >E</span>if (objLikes) {
         for (let i = 0; i &lt; objLikes.length; i++) {
<span class="cstat-no" title="statement not covered" >            likes.push (new Like (objLikes[i]));</span>
         }      
      }     
&nbsp;
&nbsp;
      this.assign(new SharedEmbedding (obj.id, obj.url, obj.conversationId, likes));
   }
&nbsp;
   /**
   * set of 'getters' for private variables
   */
   get id(): string {
      return this._id;
   }
   get url(): string | undefined {
      return this._url;
   }
   get conversationId(): string | undefined {
      return this._conversationId;
   }   
   get netLikeCount(): number {
      return this._likes.length;
   }
   get likes(): Array&lt;Like&gt; {
      return this._likes;
   }     
&nbsp;
   /**
   * set of 'setters' for private variables
   */
   set id(id_: string) {
      if (!SharedEmbedding.isValidId(id_)) {
         throw new InvalidParameterError("Id:" + id_ + '.');
      }
&nbsp;
      this._id = id_;
   }
&nbsp;
   set url(url_: string | undefined) {
&nbsp;
      this._url = url_;
   }
&nbsp;
   set conversationId(conversationId_: string | undefined) {
&nbsp;
      this._conversationId = conversationId_;
   }   
&nbsp;
<span class="fstat-no" title="function not covered" >   set l</span>ikes (likedBy_: Array&lt;Like&gt;) {
<span class="cstat-no" title="statement not covered" >      this._likes = likedBy_.slice(0);     </span>
   }
&nbsp;
&nbsp;
   /**
    * add a like 
    * @param name - the name of the person who has liked it.  
    */
   like(name: string): void {
&nbsp;
      throwIfUndefined (this._url);
&nbsp;
      let foundLike = false;
      let likeIndex = -1;
&nbsp;
      for (let i = 0; i &lt; this._likes.length &amp;&amp; !foundLike; i++) {
&nbsp;
         <span class="missing-if-branch" title="else path not taken" >E</span>if (this._likes[i].name === name) {
            foundLike = true;
            likeIndex = i;
         }
      }   
&nbsp;
      if (foundLike)
         return;
      
      this._likes.push (new Like (name, new Date()))  
   }
&nbsp;
   /**
    * remove a like 
    * @param name - the name of the person who has a like.  
    */
   unlike(name: string): void {
&nbsp;
      throwIfUndefined (this._url);
&nbsp;
      let foundLike = false;
      let likeIndex = -1;
&nbsp;
      for (let i = 0; i &lt; this._likes.length &amp;&amp; !foundLike; i++) {
&nbsp;
         <span class="missing-if-branch" title="else path not taken" >E</span>if (this._likes[i].name === name) {
            foundLike = true;
            likeIndex = i;
         }
      }
      
      if (foundLike)
         this._likes.splice(likeIndex, 1);      
   }   
&nbsp;
   /*
    * test for a like 
    * @param name - the name of the person who has liked it.  
    */
   isLikedBy (name: string): boolean {
&nbsp;
      throwIfUndefined (this._url);
&nbsp;
      let foundLike = false;
&nbsp;
      for (let i = 0; i &lt; this._likes.length &amp;&amp; !foundLike; i++) {
&nbsp;
         if (this._likes[i].name === name) {
            foundLike = true;
         }
      }   
&nbsp;
      return foundLike;
   }
&nbsp;
   /**
    * test for equality - checks all fields are the same. 
    * Uses field values, not identity bcs if objects are streamed to/from JSON, field identities will be different. 
    * @param rhs - the object to compare this one to.  
    */
   equals(rhs: SharedEmbedding): boolean {
&nbsp;
      return ((this._id === rhs._id) &amp;&amp;
         ((this._url === undefined &amp;&amp; <span class="branch-2 cbranch-no" title="branch not covered" >rhs._url === undefined)</span> || (this._url === rhs._url)) &amp;&amp;    
         ((this._conversationId === undefined &amp;&amp; <span class="branch-5 cbranch-no" title="branch not covered" >rhs._conversationId === undefined)</span> || (this._conversationId === rhs._conversationId)) &amp;&amp;                        
         areSameShallowArray (this._likes, rhs._likes));
   }
&nbsp;
   /**
    * assignment operator 
    * @param rhs - the object to assign this one from.  
    */
   assign(rhs: SharedEmbedding): SharedEmbedding {
&nbsp;
      this._id = rhs._id;   
      this._url = rhs._url;
      this._conversationId = rhs._conversationId;
      this._likes = rhs._likes.slice(0);      
&nbsp;
      return this;
   }
&nbsp;
   /**
    * test for valid id 
    * @param id - the string to test
    */
   static isValidId(id_: string): boolean {
      if (!id_) // undefined keys are allowed if user object has not been originated from or saved anywhere persistent
         return true;
&nbsp;
      if (id_ &amp;&amp; id_.length &gt; 0) // if the id exists, must be &gt; zero length
         return true;
&nbsp;
      return (false);
   }
}
&nbsp;
export function <span class="fstat-no" title="function not covered" >findInMap </span>(url: string, map: Map&lt;string, SharedEmbedding&gt;) : SharedEmbedding | undefined {
&nbsp;
<span class="cstat-no" title="statement not covered" >   for (const [key, value] of map) {</span>
<span class="cstat-no" title="statement not covered" >      if (value.url === url)</span>
<span class="cstat-no" title="statement not covered" >         return value;</span>
   }
<span class="cstat-no" title="statement not covered" >   return undefined;</span>
}
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\StreamingFramework.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for StreamingFramework.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> StreamingFramework.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">96.15% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>25/26</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">83.33% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>5/6</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>6/6</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">96.15% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>25/26</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1002204x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1038x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">500529x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">500529x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">500529x</span>
<span class="cline-any cline-yes">500529x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">500529x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">7x</span>
<span class="cline-any cline-yes">7x</span>
<span class="cline-any cline-yes">7x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">7x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">500529x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">500529x</span>
<span class="cline-any cline-yes">3003145x</span>
<span class="cline-any cline-yes">500529x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2502616x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">/////////////////////////////////////////
// StreamingFramework
// Copyright (c) 2024 Braid Technologies Ltd
/////////////////////////////////////////
&nbsp;
&nbsp;
/// &lt;summary&gt;
/// MStreamable - root class for all derived types that can stream to and from JSON 
/// &lt;/summary&gt;
export abstract class MStreamable {
&nbsp;
   constructor() {
   }
&nbsp;
   abstract streamOut(): string;
   abstract streamIn(stream: string): void;
}
&nbsp;
/// &lt;summary&gt;
/// MDynamicStreamable - root class for all derived types that can stream to and from JSON with dynamic creation based on className stored in the stream
/// &lt;/summary&gt;
export abstract class MDynamicStreamable extends MStreamable {
&nbsp;
   constructor() {
      super();
   }
&nbsp;
   abstract className(): string;
&nbsp;
   flatten (): string {
&nbsp;
      return JSON.stringify({ className: this.className(), data: this.streamOut() });
   }
&nbsp;
   static resurrect(stream: string): MDynamicStreamable | undefined {
&nbsp;
      const parsed = JSON.parse(stream);
&nbsp;
      let obj = DynamicStreamableFactory.create(parsed.className);
&nbsp;
      <span class="missing-if-branch" title="else path not taken" >E</span>if (obj)
         obj.streamIn(parsed.data);
&nbsp;
      return obj;
   }
}
&nbsp;
// Signature for the factory function 
type FactoryFunctionFor&lt;MDynamicStreamable&gt; = () =&gt; MDynamicStreamable;
&nbsp;
var firstDynamicStreamableFactory: DynamicStreamableFactory | undefined = undefined;
&nbsp;
export class DynamicStreamableFactory {
&nbsp;
   _className: string;
   _factoryMethod: FactoryFunctionFor&lt;MDynamicStreamable&gt;;
   _nextFactory: DynamicStreamableFactory | undefined;
&nbsp;
   constructor(className_: string, factoryMethod_: FactoryFunctionFor&lt;MDynamicStreamable&gt;) {
      this._className = className_;
      this._factoryMethod = factoryMethod_;
      this._nextFactory = undefined;
&nbsp;
      if (firstDynamicStreamableFactory === undefined) {
         firstDynamicStreamableFactory = this;
      } else {
         var nextFactory: DynamicStreamableFactory = firstDynamicStreamableFactory;
&nbsp;
         while (nextFactory._nextFactory) {
            nextFactory = nextFactory._nextFactory;
         }
         nextFactory._nextFactory = this;
      }
   }
&nbsp;
   static create(className: string): MDynamicStreamable | undefined {
      var nextFactory: DynamicStreamableFactory | undefined = firstDynamicStreamableFactory;
&nbsp;
      while (nextFactory) {
         if (nextFactory._className === className) {
            return nextFactory._factoryMethod();
         }
         nextFactory = nextFactory._nextFactory;
      }
<span class="cstat-no" title="statement not covered" >      return undefined;</span>
   }
}
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\Utilities.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for Utilities.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> Utilities.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">75.86% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>22/29</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">63.63% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>14/22</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>3/3</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">74.07% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>20/27</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line medium'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-yes">13x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">14x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">14x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">14x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
&nbsp;
import { throwIfUndefined } from './Asserts';
&nbsp;
export function areSameDate (lhs: Date | undefined, rhs : Date | undefined) : boolean {
&nbsp;
   if (typeof lhs === 'undefined' &amp;&amp; typeof rhs === 'undefined') {
      return true;
   }
   <span class="missing-if-branch" title="if path not taken" >I</span>if (typeof lhs === 'undefined' &amp;&amp; <span class="branch-1 cbranch-no" title="branch not covered" >typeof rhs !== 'undefined')</span> {
<span class="cstat-no" title="statement not covered" >      return false;</span>
   } 
   <span class="missing-if-branch" title="if path not taken" >I</span>if (typeof lhs !== 'undefined' &amp;&amp; typeof rhs === 'undefined') {
<span class="cstat-no" title="statement not covered" >      return false;</span>
   }        
   throwIfUndefined (lhs);
   throwIfUndefined (rhs);
   if (lhs.getTime() === rhs.getTime()) {
      return true;
   }
   return false;
}
&nbsp;
export function areSameShallowArray&lt;T&gt; (lhs: Array&lt;T&gt;, rhs : Array&lt;T&gt;) : boolean {
&nbsp;
   <span class="missing-if-branch" title="if path not taken" >I</span>if (lhs.length !== rhs.length) {
<span class="cstat-no" title="statement not covered" >      return false;</span>
   }        
&nbsp;
   for (let i = 0; i &lt; lhs.length; i++) {
<span class="cstat-no" title="statement not covered" >      if (lhs[i] !== rhs[i])</span>
<span class="cstat-no" title="statement not covered" >         return false;</span>
   }
&nbsp;
   return true;
}
&nbsp;
&nbsp;
export interface Comparable&lt;T&gt; {
   equals (rhs: T) : boolean;
}
&nbsp;
export function areSameDeepArray&lt;T extends Comparable&lt;T&gt;&gt; (lhs: Array&lt;T&gt;, rhs : Array&lt;T&gt;) : boolean {
&nbsp;
   <span class="missing-if-branch" title="if path not taken" >I</span>if (lhs.length !== rhs.length) {
<span class="cstat-no" title="statement not covered" >      return false;</span>
   }        
&nbsp;
   for (let i = 0; i &lt; lhs.length; i++) {
      <span class="missing-if-branch" title="if path not taken" >I</span>if (! (lhs[i].equals (rhs[i])))
<span class="cstat-no" title="statement not covered" >         return false;</span>
   }
&nbsp;
   return true;
}</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\Uuid.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for Uuid.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> Uuid.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">80.64% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>25/31</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">68.18% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>15/22</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>4/4</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">80.64% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>25/31</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">62x</span>
<span class="cline-any cline-yes">62x</span>
<span class="cline-any cline-yes">22x</span>
<span class="cline-any cline-yes">22x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">40x</span>
<span class="cline-any cline-yes">40x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">62x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2023 TXPCo Ltd
import { EnvironmentError } from './Errors';
&nbsp;
function generateUUID() { // Public Domain/MIT
    var d = new Date().getTime();//Timestamp
    var d2 = ((typeof performance !== 'undefined') &amp;&amp; performance.now &amp;&amp; (performance.now()*1000)) || <span class="branch-3 cbranch-no" title="branch not covered" >0;</span>//Time in microseconds since page-load or 0 if unsupported
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random() * 16;//random number between 0 and 16
        if(d &gt; 0){//Use timestamp until depleted
            r = (d + r)%16 | 0;
            d = Math.floor(d/16);
        } else {//Use microseconds since page-load if supported
            r = (d2 + r)%16 | 0;
            d2 = Math.floor(d2/16);
        }
        return (c === 'x' ? r : (r &amp; 0x3 | 0x8)).toString(16);
    });
}
&nbsp;
export function uuid(): string {
&nbsp;
   var newUuid: string = null;
   
   // Check if Blob is supported in Browser as it is not supported in some Safari versions
   if (typeof Blob !== "undefined") {
&nbsp;
      let url = URL.createObjectURL(new Blob());
      URL.revokeObjectURL(url);
&nbsp;
      <span class="missing-if-branch" title="else path not taken" >E</span>if (typeof window === 'undefined') {
         newUuid = url.split(":")[2];
      }
      else {
<span class="cstat-no" title="statement not covered" >         switch (window.location.protocol) {</span>
            case 'file:':
<span class="cstat-no" title="statement not covered" >               newUuid = url.split("/")[1];</span>
<span class="cstat-no" title="statement not covered" >               break;</span>
            case 'http:':
            case 'https:':
            default:
<span class="cstat-no" title="statement not covered" >               newUuid = url.split("/")[3];</span>
<span class="cstat-no" title="statement not covered" >               break;</span>
         }
      }
   }
   else {
&nbsp;
      newUuid = generateUUID();
   }
   <span class="missing-if-branch" title="if path not taken" >I</span>if (!newUuid)
<span class="cstat-no" title="statement not covered" >      throw new EnvironmentError("Error creating UUID.");</span>
&nbsp;
   return newUuid;
}
&nbsp;
export function looksLikeUuid(uuid: string): boolean {
&nbsp;
   if ((uuid.length === 36) &amp;&amp; uuid.split('-').length === 5) {
      return true;
   }
&nbsp;
   return false;
}</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-01-11T17:10:58.200Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\UuidKeyGenerator.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for UuidKeyGenerator.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> UuidKeyGenerator.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">82.35% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>28/34</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">68.18% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>15/22</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>6/6</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">82.35% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>28/34</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">501587x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">24x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">62x</span>
<span class="cline-any cline-yes">62x</span>
<span class="cline-any cline-yes">22x</span>
<span class="cline-any cline-yes">22x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">40x</span>
<span class="cline-any cline-yes">40x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">62x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">501587x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">501587x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">501585x</span>
<span class="cline-any cline-yes">501585x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">501585x</span>
<span class="cline-any cline-yes">501585x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">501587x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">501587x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">24x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">24x</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
import { EnvironmentError } from './Errors';
import { IKeyGenerator } from './IKeyGenerator';
&nbsp;
export class UuidKeyGenerator implements IKeyGenerator {
&nbsp;
   generateKey (): string {
      return uuid();
   }
&nbsp;
   couldBeAKey(key: string): boolean {
      return looksLikeUuid (key);
   }
&nbsp;
}
&nbsp;
function generateUUID() { // Public Domain/MIT
&nbsp;
    var d = new Date().getTime();//Timestamp
    var d2 = ((typeof performance !== 'undefined') &amp;&amp; performance.now &amp;&amp; (performance.now()*1000)) || <span class="branch-3 cbranch-no" title="branch not covered" >0;</span>//Time in microseconds since page-load or 0 if unsupported
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random() * 16;//random number between 0 and 16
        if(d &gt; 0){//Use timestamp until depleted
            r = (d + r)%16 | 0;
            d = Math.floor(d/16);
        } else {//Use microseconds since page-load if supported
            r = (d2 + r)%16 | 0;
            d2 = Math.floor(d2/16);
        }
        return (c === 'x' ? r : (r &amp; 0x3 | 0x8)).toString(16);
    });
}
&nbsp;
function uuid(): string {
&nbsp;
   var newUuid: string = "";
   
   // Check if Blob is supported in Browser as it is not supported in some Safari versions
   if (typeof Blob !== "undefined") {
&nbsp;
      let url = URL.createObjectURL(new Blob());
      URL.revokeObjectURL(url);
&nbsp;
      <span class="missing-if-branch" title="else path not taken" >E</span>if (typeof window === 'undefined') {
         newUuid = url.split(":")[2];
      }
      else {
<span class="cstat-no" title="statement not covered" >         switch (window.location.protocol) {</span>
            case 'file:':
<span class="cstat-no" title="statement not covered" >               newUuid = url.split("/")[1];</span>
<span class="cstat-no" title="statement not covered" >               break;</span>
            case 'http:':
            case 'https:':
            default:
<span class="cstat-no" title="statement not covered" >               newUuid = url.split("/")[3];</span>
<span class="cstat-no" title="statement not covered" >               break;</span>
         }
      }
   }
   else {
&nbsp;
      newUuid = generateUUID();
   }
   
   <span class="missing-if-branch" title="if path not taken" >I</span>if (newUuid.length == 0)
<span class="cstat-no" title="statement not covered" >      throw new EnvironmentError("Error creating UUID.");</span>
&nbsp;
   return newUuid;
}
&nbsp;
export function looksLikeUuid(uuid: string): boolean {
&nbsp;
   let split = uuid.split('-');
&nbsp;
   if ((uuid.length == 36) &amp;&amp; (split.length == 5)) {
      return true;
   }
&nbsp;
   return false;
}</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\scripts\eval_pipeline.py
****************************************
# Copyright (c) 2024 Braid Technologies Ltd

# Importing Local Modules
from common.ApiConfiguration import ApiConfiguration
from test.test_utility import run_tests

import os

TEST_DESTINATION_DIR = os.path.join("data", "test")
CHUNK_SOURCE_DIR = "data"

config = ApiConfiguration()

off_topic_questions = [
"What is the capital of France?",
"Who wrote 'To Kill a Mockingbird'?",
"What is the largest planet in our solar system?",
"How many continents are there on Earth?",
"What is the chemical symbol for gold?",
"Who painted the Mona Lisa?",
"What year did the Titanic sink?",
"What is the main ingredient in guacamole?",
"How many bones are in the adult human body?",
"What is the hardest natural substance on Earth?",
"Who was the first person to walk on the moon?",
"What is the currency of Japan?",
"Which element has the atomic number 1?",
"What is the longest river in the world?",
"Who directed the movie Jurassic Park?",
"What is the name of the largest ocean on Earth?",
"In what year did World War II end?",
"What is the square root of 64?",
"Who is known as the 'Father of Computers'?",
"What is the fastest land animal?",
"What is the main language spoken in Brazil?",
"Who discovered penicillin?",
"What is the smallest country in the world by area?",
"What sport is known as 'the beautiful game'?",
"How many states are there in the United States?"];

questions = [
"What is a Large Language Model (LLM)?",
"How do Large Language Models (LLMs) work?",
"What are some common use cases for Large Language Models (LLMs) in applications?",
"How are Large Language Models (LLMs) different from traditional AI models?",
"What are the key components of a Large Language Model (LLM)?",
"How do Large Language Models (LLMs) process and generate text?",
"What is natural language processing (NLP)?",
"How does NLP relate to Large Language Models (LLMs)?",
"What is the difference between supervised, unsupervised, and reinforcement learning?",
"How are Large Language Models (LLMs) trained?",

"What factors should I consider when choosing a Large Language Model (LLM) for my application?",
"How do I determine the size of the model I need?"
"What are the trade-offs between smaller and larger models?",
"How do I evaluate the performance of different Large Language Models (LLMs)?",
"What are the most popular Large Language Models (LLMs) available today (eg GPT-4, BERT, T5)?",
"How does OpenAI's GPT-4 compare to other models like Google's BERT?",
"What is transfer learning and how does it apply to Large Language Models (LLMs)?",
"Can I use pre-trained models or do I need to train my own from scratch?",

"How do I integrate a Large Language Model (LLM) into my Python application?",
"What libraries or frameworks are available for working with Large Language Models (LLMs) in Python?",
"How do I use Hugging Face's Transformers library?",
"What is the process for deploying a Large Language Model (LLM)-based application?",
"How do I handle API rate limits when using a hosted Large Language Model (LLM) service?",
"How can I optimize the response time of a Large Language Model (LLM) in my application?",
"What are the best practices for managing API keys and authentication?",

"How can Large Language Models (LLMs) be used for chatbots?",
"What are the steps to create a question-answering system with a Large Language Model (LLM)?",
"How can I use a Large Language Model (LLM) to summarize text?",
"What are the methods for implementing sentiment analysis using Large Language Models (LLMs)?",
"How can Large Language Models (LLMs) be used for content generation, such as blog posts or articles?",
"What are the considerations for using Large Language Models (LLMs) in voice assistants?",
"How can Large Language Models (LLMs) assist in language translation applications?",
"What is the role of Large Language Models (LLMs) in automated code generation?",
"How can Large Language Models (LLMs) be used for data extraction from unstructured text?",

"How do I fine-tune a pre-trained Large Language Model (LLM) on my own dataset?",
"What datasets are commonly used for training Large Language Models (LLMs)?",
"How much data do I need to train or fine-tune a Large Language Model (LLM) effectively?",
"What are the computational requirements for training a Large Language Model (LLM)?",
"How do I handle bias in training data?",
"What techniques can I use to improve the accuracy of my Large Language Model (LLM)?",

"What are the ethical considerations when using Large Language Models (LLMs) in applications?",
"How can I ensure that my Large Language Model (LLM) is not producing biased or harmful content?",
"What are the privacy concerns when using Large Language Models (LLMs)?",
"How do I manage user data responsibly in a Large Language Model (LLM)-based application?",
"What are the legal implications of using Large Language Models (LLMs) in different industries?",

"How can I optimize the performance of a Large Language Model (LLM) in production?",
"What are some common performance bottlenecks when using Large Language Models (LLMs)?",
"How can I reduce the latency of Large Language Model (LLM) responses?",
"What caching strategies can I use to improve Large Language Model (LLM) response times?",
"How do I monitor and maintain a Large Language Model (LLM)-based application in production?",

"How do I estimate the cost of using a Large Language Model (LLM) in my application?",
"What are the cost considerations when choosing between different Large Language Model (LLM) providers?",
"How can I minimize the cost of API usage for Large Language Models (LLMs)?",
"What are the pricing models for popular Large Language Model (LLM) services like OpenAI's GPT?",

"How do I scale a Large Language Model (LLM)-based application to handle increased traffic?",
"What are the best practices for scaling Large Language Model (LLM) infrastructure?",
"How can I use load balancing with Large Language Models (LLMs)?",
"What cloud services are recommended for hosting Large Language Model (LLM)-based applications?",

"What security measures should I implement when using Large Language Models (LLMs)?",
"How do I protect my Large Language Model (LLM) from adversarial attacks?",
"How can I ensure secure communication between my application and the Large Language Model (LLM) API?",
"What are the risks of using Large Language Models (LLMs) and how can I mitigate them?",

"How can I customize the behavior of a Large Language Model (LLM) to better fit my application?",
"What are prompt engineering techniques and how do they work?",
"How can I use Large Language Models (LLMs) for specific domain applications, like medical or legal?",
"How do I implement contextual understanding in my Large Language Model (LLM)-based application?",
"What are the techniques for chaining Large Language Model (LLM) responses for complex tasks?",

"How do I debug issues with Large Language Model (LLM)-generated content?",
"What are the common issues faced when integrating Large Language Models (LLMs)?",
"How can I track and fix inaccuracies in Large Language Model (LLM) responses?",

"What are the latest advancements in Large Language Model (LLM) technology?",
"How do emerging models like GPT-4.5 or GPT-5 compare to GPT-4?",
"What future applications and improvements are expected for Large Language Models (LLMs)?",
"How is the field of Large Language Models (LLMs) expected to evolve over the next 5 years?",

"What online communities and forums are best for learning about Large Language Models (LLMs)?",
"What are the best courses or tutorials for learning to use Large Language Models (LLMs)?",
"How can I contribute to the development of open-source Large Language Model (LLM) projects?",

"How are Large Language Models (LLMs) used in the healthcare industry?",
"What are the applications of Large Language Models (LLMs) in finance?",
"How can Large Language Models (LLMs) benefit the education sector?",
"What are the uses of Large Language Models (LLMs) in customer service?",
"How do Large Language Models (LLMs) apply to the entertainment and media industry?",

"What are some successful case studies of Large Language Model (LLM) integration?",
"How have other developers solved common problems with Large Language Models (LLMs)?",

"What metrics should I use to evaluate the performance of my Large Language Model (LLM)?",
"How do I measure the quality of the generated text?",
"What are the methods to evaluate the relevance of Large Language Model (LLM) responses?",

"How often should I update or retrain my Large Language Model (LLM)?",
"What are the signs that my Large Language Model (LLM) needs retraining?",
"How do I manage version control for my Large Language Model (LLM) models?",

"What are the best tools for annotating and preparing training data?",
"How do I use TensorFlow or PyTorch with Large Language Models (LLMs)?",
"What is the role of the Hugging Face Model Hub in working with Large Language Models (LLMs)?",
"How can I use Docker to deploy Large Language Model (LLM)-based applications?",

"What are the GDPR implications of using Large Language Models (LLMs)?",
"How can I ensure my use of Large Language Models (LLMs) complies with industry regulations?",
"What are the copyright considerations for content generated by Large Language Models (LLMs)?",

"How can I personalize Large Language Model (LLM) interactions for individual users?",
"What strategies can I use to make Large Language Model (LLM) responses more engaging?",
"How do I gather and use user feedback to improve my Large Language Model (LLM)-based application?"]

tech_questions = [
"What are some common use cases for generative AI?",
"How can Python be used to interact with an LLM?",
"What is the purpose of tokenization in LLMs?",
"Explain the difference between static and dynamic tokenization.",
"How do you handle out-of-vocabulary words in tokenization?",
"What are embeddings in the context of NLP?",
"How do you load a pre-trained LLM in Python using Hugging Face Transformers?",
"Describe the process of fine-tuning an LLM.",
"What are the benefits of fine-tuning a pre-trained model?",
"How can you generate text using GPT-3 in Python?",
"What is the role of the `generate` function in text generation?",
"How do you control the length of generated text in an LLM?",
"Explain the concept of 'temperature' in text generation.",
"What is top-k sampling in the context of LLMs?",
"How does nucleus sampling (top-p) work in text generation?",
"Describe beam search as a decoding strategy.",
"What are the trade-offs between beam search and greedy decoding?",
"How can you evaluate the quality of generated text?",
"What are common metrics for evaluating generative models?",
"How do you prevent an LLM from generating inappropriate content?",
"What is the purpose of prompt engineering?",
"How can you improve the coherence of generated text?",
"What is zero-shot learning in LLMs?",
"How does few-shot learning differ from zero-shot learning?",
"Describe the role of context in text generation.",
"How do you manage large-scale LLMs in a production environment?",
"What are the computational challenges of training an LLM?",
"Explain the concept of model parallelism.",
"How can you reduce the inference time of an LLM?",
"What is model distillation in the context of LLMs?",
"Describe how to use the `transformers` library to implement a chatbot.",
"What is the role of an API in interacting with an LLM?",
"How do you secure an API endpoint for an LLM?",
"What ethical considerations should be taken when using generative AI?",
"How can you detect and mitigate biases in LLMs?",
"What is the impact of training data on the performance of an LLM?",
"How do you perform hyperparameter tuning for an LLM?",
"Explain the role of learning rate schedules in training LLMs.",
"How can you use Python to preprocess text data for LLM training?",
"What are some techniques for data augmentation in NLP?",
"How do you implement a feedback loop for improving an LLM?",
"Describe a real-world application of generative AI.",
"What is the significance of multilingual capabilities in LLMs?",
"How can transfer learning benefit the deployment of LLMs in different domains?"
]

if not os.path.exists(TEST_DESTINATION_DIR):
    os.makedirs(TEST_DESTINATION_DIR)

run_tests (config, TEST_DESTINATION_DIR, CHUNK_SOURCE_DIR, off_topic_questions)
****************************************

****************************************
Boxer\scripts\github_pipeline.py
****************************************
# Copyright (c) 2024 Braid Technologies Ltd
import os

# Local Modules
from common.ApiConfiguration import ApiConfiguration
from common.Urls import gitHubUrls, countUrlHits
from common.common_functions import ensure_directory_exists
from github.download_markdown import download_markdown
from text.enrich_text_chunks import enrich_text_chunks
from text.enrich_text_summaries import enrich_text_summaries
from text.enrich_text_embeddings import enrich_text_embeddings
from text.enrich_lite import enrich_lite

MARKDOWN_DESTINATION_DIR = os.path.join("data", "github")
ensure_directory_exists(MARKDOWN_DESTINATION_DIR)

config = ApiConfiguration()

for item in gitHubUrls:
   download_markdown (item[2], item[1], MARKDOWN_DESTINATION_DIR)

enrich_text_chunks(config,MARKDOWN_DESTINATION_DIR) 
enrich_text_summaries(config, MARKDOWN_DESTINATION_DIR)
enrich_text_embeddings(config, MARKDOWN_DESTINATION_DIR)
enrich_lite(MARKDOWN_DESTINATION_DIR)

output_dir = os.path.join(MARKDOWN_DESTINATION_DIR, "output") 
countUrlHits (output_dir, gitHubUrls, "master_text.json", "hit_test_results.json")
****************************************

****************************************
Boxer\scripts\make_api_embeddings.ts
****************************************
'use strict';
// Copyright Braid technologies ltd, 2024

import { expect } from 'expect';
import { describe, it } from 'mocha';
import fs from 'node:fs/promises';

import youTubeEmbeddingsFile from '../data/youtube/output/master_enriched.json';
import markdownEmbeddingsFile from '../data/github/output/master_enriched.json';
import htmlEmbeddingsFile from '../data/web/output/master_enriched.json';
import { FullEmbedding, MakeEmbeddingUrlFnFull, 
   makeYouTubeUrlFromFullEmbedding, makeGithubUrlFromFullEmbedding, makeHtmlUrlfromFullEmbedding} from '../core/EmbeddingFormats';

import { IEnrichedChunk } from '../../CommonTs/src/EnrichedChunk';   

describe("API Embeddings", function () {
 
   async function makeLite (chunks: Array<IEnrichedChunk>, embeddingsFull : Array<FullEmbedding>, fn: MakeEmbeddingUrlFnFull) {

      for (let i = 0; i < embeddingsFull.length; i++) {

         chunks.push ({id: "", embedding: embeddingsFull[i].ada_v2, 
                      url: fn (embeddingsFull[i]), 
                      text: "",  
                      summary: embeddingsFull[i].summary})
      }
   }

   it("Needs to build consolidated embeddings file", async function () {
      
      let embeddings = new Array<FullEmbedding>();
      let chunks = new Array<IEnrichedChunk> (); 

      embeddings = htmlEmbeddingsFile as Array<FullEmbedding>; 
      let result = await makeLite (chunks, embeddings, makeHtmlUrlfromFullEmbedding);

      embeddings = markdownEmbeddingsFile as Array<FullEmbedding>;      
      result = await makeLite (chunks, embeddings, makeGithubUrlFromFullEmbedding);   
  
      embeddings = youTubeEmbeddingsFile as Array<FullEmbedding>;      
      result = await makeLite (chunks, embeddings, makeYouTubeUrlFromFullEmbedding);        

      var jsonContent = JSON.stringify(chunks);
       
      let caught = false;

      try {
         let result = await fs.writeFile('data/api_embeddings_lite.json', jsonContent, 'utf8');
      }
      catch (e: any) {
         caught = true;
         console.log (e);
      }

      expect (caught).toBe(false);
      return !caught;

   }).timeout (30000);
});
****************************************

****************************************
Boxer\scripts\make_new_container.ts
****************************************
'use strict';
// Copyright Braid technologies ltd, 2024

import { expect } from 'expect';
import { describe, it } from 'mocha';

import { SessionKey } from '../core/Keys';
import { Persona } from '../core/Persona';
import { BraidFluidConnection } from '../core/BoxerFluidConnection';
import { throwIfUndefined } from '../core/Asserts';

describe("Make new container", function () {
 

   it("Needs to create new container", async function () {
     
      let local = Persona.unknown();

      let fluidMessagesConnection = new BraidFluidConnection(local);

      throwIfUndefined(process.env.SessionKey);
      fluidMessagesConnection.createNew (new SessionKey (process.env.SessionKey), true).then (conversationKey_ => {
        
         console.log ("Created conversation:" + conversationKey_);

      }).catch ((e : any) => {
      
         console.error ("Error creating conversation:" + e.toString());
      })

      expect (true).toBe (true);
   });         
});
****************************************

****************************************
Boxer\scripts\web_pipeline.py
****************************************
# Copyright (c) 2024 Braid Technologies Ltd

# Standard Library Imports
import os

# Local Modules
from common.ApiConfiguration import ApiConfiguration
from common.Urls import webUrls, countUrlHits
from web.download_html import download_html
from common.common_functions import ensure_directory_exists
from text.enrich_text_chunks import enrich_text_chunks
from text.enrich_text_summaries import enrich_text_summaries
from text.enrich_text_embeddings import enrich_text_embeddings
from text.enrich_lite import enrich_lite


# Set HTML destination directory
HTML_DESTINATION_DIR = os.path.join("data", "web")
ensure_directory_exists(HTML_DESTINATION_DIR)

config = ApiConfiguration()

# For debugging purposes, you might want to comment out the following block
for item in webUrls:
    download_html(item[1], item[2], HTML_DESTINATION_DIR, config.discardIfBelow)

# Keep this comment as example of how to just process one file for debugging
#download_html("https://www.interaction-design.org/literature/topics/design-thinking", 
#              True, HTML_DESTINATION_DIR, 150)

# Enrich the text chunks, summaries, embeddings, and run lite enrichment
enrich_text_chunks(config, HTML_DESTINATION_DIR) 
enrich_text_summaries(config, HTML_DESTINATION_DIR)
enrich_text_embeddings(config, HTML_DESTINATION_DIR)
enrich_lite(HTML_DESTINATION_DIR)

ENRICHMENT_OUTPUT_DIR = os.path.join(HTML_DESTINATION_DIR, "output")

# Count URL hits 
countUrlHits(ENRICHMENT_OUTPUT_DIR, webUrls, "master_text.json", "hit_test_results_web.json")
****************************************

****************************************
Boxer\scripts\youtube_pipeline.py
****************************************
# Copyright (c) 2024 Braid Technologies Ltd

# Standard Library Imports
import os
import logging

# Local Modules
from common.ApiConfiguration import ApiConfiguration
from common.Urls import youTubeUrls, countUrlHits
from common.common_functions import ensure_directory_exists
from youtube.download_transcripts import download_transcripts
from youtube.enrich_transcript_chunks import enrich_transcript_chunks
from youtube.enrich_transcript_summaries import enrich_transcript_summaries
from youtube.enrich_transcript_embeddings import enrich_transcript_embeddings
from text.enrich_lite import enrich_lite

# Configure logging
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

logger = logging.getLogger(__name__)

logger.info("Script started.")

# Set transcript destination directory
TRANSCRIPT_DESTINATION_DIR = os.path.join("data", "youtube")
ensure_directory_exists(TRANSCRIPT_DESTINATION_DIR)

config = ApiConfiguration()

for item in youTubeUrls:
   logger.debug(f"Downloading transcripts for URL: {item[1]}")
   download_transcripts(item[1], TRANSCRIPT_DESTINATION_DIR)

# Keep this comment as example of how to just process one file for debugging   
#download_transcripts ("PL1T8fO7ArWleyIqOy37OVXsP4hFXymdOZ", TRANSCRIPT_DESTINATION_DIR)
#download_transcripts ("PLFnkruiXQop4Robpmim_3FMZbv_1lAwBu", TRANSCRIPT_DESTINATION_DIR)

logger.info("Enriching transcript chunks...")
enrich_transcript_chunks(config, TRANSCRIPT_DESTINATION_DIR)

logger.info("Enriching transcript summaries...")
enrich_transcript_summaries(config, TRANSCRIPT_DESTINATION_DIR)

logger.info("Enriching transcript embeddings...")
enrich_transcript_embeddings(config, TRANSCRIPT_DESTINATION_DIR)

logger.info("Enriching transcripts with lite enrichment...")
enrich_lite(TRANSCRIPT_DESTINATION_DIR)

logger.info("Counting URL hits...")
output_dir = os.path.join(TRANSCRIPT_DESTINATION_DIR, "output") 
countUrlHits(output_dir, youTubeUrls, "master_transcriptions.json","hit_test_results.json")

logger.info("Script finished.")
****************************************

****************************************
Boxer\scripts\__init__.py
****************************************

****************************************

****************************************
Boxer\test\activityrecord.test.ts
****************************************
'use strict';
// Copyright Braid technologies ltd, 2024
import {  IStoredUrlActivity, IStoredLikeUrlActivity, IStoredMessageActivity, 
   urlActivityRecordClassName, urlLikeActivityRecordClassName, messageActivityRecordClassName,
   urlActivityRecordSchemaNumber, urlLikeActivityRecordSchemaNumber, messageActivityRecordSchemaNumber } from '../core/ActivityRecord';
import { EStorableApplicationIds } from '../../CommonTs/src/IStorable';
import { SessionKey } from '../core/Keys';
import { getRecordRepository } from '../core/IActivityRepositoryFactory';
import { getDefaultKeyGenerator } from '../core/IKeyGeneratorFactory';

import { expect } from 'expect';
import { describe, it } from 'mocha';
import { throwIfUndefined } from '../core/Asserts';

const keyGenerator = getDefaultKeyGenerator();

describe("ActivityRepository", function () {

   this.timeout(10000);

   beforeEach(async () => {

      this.timeout(10000);
   });
      
   let sessionKey = process.env.SessionKey;
   throwIfUndefined (sessionKey);
   let repository = getRecordRepository(new SessionKey (sessionKey));

   it("Needs to save a URL record", async function () {

      var activity : IStoredUrlActivity= {
         id : keyGenerator.generateKey(),
         applicationId: EStorableApplicationIds.kBoxer,
         contextId: "madeupconversationKey",
         userId: "madeupname@hotmail.com",
         created: new Date().toUTCString(),
         amended: new Date().toUTCString(),  
         functionalSearchKey: undefined,  
         className: urlActivityRecordClassName,
         schemaVersion: urlActivityRecordSchemaNumber, 
         url: "https://test.cosmos"
      };

      let saved = await repository.save (activity);

      expect(saved).toEqual(true);     
   });

   it("Needs to save a LikeDislike record", async function () {

      var activity : IStoredLikeUrlActivity= {
         id : keyGenerator.generateKey(),
         applicationId: EStorableApplicationIds.kBoxer,
         contextId: "madeupconversationKey",
         userId: "madeupname@hotmail.com",
         created: new Date().toUTCString(),
         amended: new Date().toUTCString(),  
         functionalSearchKey: undefined,  
         className: urlLikeActivityRecordClassName,
         schemaVersion: urlLikeActivityRecordSchemaNumber, 
         url: "https://test.cosmos",
         like: true
      };

      let saved = await repository.save (activity);

      expect(saved).toEqual(true);     
   });   

   it("Needs to save a Message record", async function () {

      let activity : IStoredMessageActivity = {
         id : keyGenerator.generateKey(), 
         applicationId: EStorableApplicationIds.kBoxer,
         contextId: "madeupconversationKey",
         userId: "madeupname@hotmail.com",
         created: new Date().toUTCString(),
         amended: new Date().toUTCString(),  
         functionalSearchKey: undefined,  
         className: messageActivityRecordClassName,
         schemaVersion: messageActivityRecordSchemaNumber, 
         message: "Test message"
      };
      let saved = await repository.save (activity);

      expect(saved).toEqual(true);     
   });   

   it("Needs to load a record", async function () {

      var activity : IStoredLikeUrlActivity= {
         id : keyGenerator.generateKey(),
         applicationId: EStorableApplicationIds.kBoxer,
         contextId: "madeupconversationKey",
         userId: "madeupname@hotmail.com",
         created: new Date().toUTCString(),
         amended: new Date().toUTCString(),  
         functionalSearchKey: undefined,  
         className: urlLikeActivityRecordClassName,
         schemaVersion: urlLikeActivityRecordSchemaNumber, 
         url: "https://test.cosmos",
         like: true
      };

      let saved = await repository.save (activity);      
      let loaded = await repository.loadRecentUrlActivity (3);

      expect(loaded.length > 0).toEqual(true);     
   });  

   it("Needs to remove a Message record", async function () {

      let messageId = keyGenerator.generateKey();
      let activity : IStoredMessageActivity = {
         id : messageId, 
         applicationId: EStorableApplicationIds.kBoxer,
         contextId: "madeupconversationKey",
         userId: "madeupname@hotmail.com",
         created: new Date().toUTCString(),
         amended: new Date().toUTCString(),  
         functionalSearchKey: undefined,  
         className: messageActivityRecordClassName,
         schemaVersion: messageActivityRecordSchemaNumber, 
         message: "Test message"
      };

      let saved = await repository.save (activity);

      let removed = await repository.removeMessageRecord (messageId);

      expect(removed).toEqual(true);     
   }); 
});
****************************************

****************************************
Boxer\test\adminrespository.test.ts
****************************************
'use strict';
// Copyright Braid technologies ltd, 2024
import { expect } from 'expect';
import { describe, it } from 'mocha';

import { DefaultAdminRepository } from '../core/IAdminRepository';
import { Persona } from '../core/Persona';
import { EIcon } from '../core/Icons';

describe("AdminRespository", function () {

   var count: number = 0;

   function doSomethingAsync () {
      count++;
   }

   it("Needs to say JV is an adminstrator", async function () {

      let repository = new DefaultAdminRepository();
      let persona1 = new Persona("1", "Jon Verrier", "whatever", EIcon.kPersonPersona, undefined, new Date());

      let isAdmin = await repository.isAdmin(persona1);

      expect(isAdmin).toEqual(true);
   });

   it("Needs to say names other than JV are not an adminstrator", async function () {

      let repository = new DefaultAdminRepository();
      let persona1 = new Persona("1", "Jon Verrier2", "whatever", EIcon.kPersonPersona, undefined, new Date());

      let isAdmin = await repository.isAdmin(persona1);

      expect(isAdmin).toEqual(false);
   });

});
****************************************

****************************************
Boxer\test\aiconnection.test.ts
****************************************
'use strict';
// Copyright Braid Technologies ltd, 2024
import { throwIfUndefined } from '../core/Asserts';
import { Message} from '../core/Message';
import { Persona} from '../core/Persona';
import { EIcon } from '../core/Icons';
import { SessionKey } from '../core/Keys';
import { KStubEnvironmentVariables} from '../core/ConfigStrings'; 
import { AIConnection } from '../core/AIConnection';
import { makeSummaryCall } from '../core/ApiCalls';

import { IRelevantEnrichedChunk } from '../../CommonTs/src/EnrichedChunk';

import { expect } from 'expect';
import { describe, it } from 'mocha';

let myMessageId: string = "1234";
let myAuthorId: string = "Jon";
let myText = "Boxer What is back propagation?";
let mySentAt = new Date();

let botMessageId: string = "5678";
let botAuthorId: string = "Bot";
let botText = "Back propogation is a technique used to train nueral networks.";
var botSentAt = new Date(0);

let myBotRequestId: string = "12345";
let myBotRequestText = "Hello @Boxer What is back propagation?";

async function sleep(msec: number) {
   return new Promise(resolve => setTimeout(resolve, msec));
}

describe("AIConnection", async function () {

   let authors = new Map<string, Persona> ();
   let person = new Persona (myAuthorId, myAuthorId, "", EIcon.kPersonPersona, undefined, new Date());   
   let bot = new Persona (botAuthorId, botAuthorId, "", EIcon.kLLMPersona, undefined, new Date());
   authors.set (person.id, person);
   authors.set (bot.id, bot);

   let personMessage = new Message(myMessageId, myAuthorId, undefined, myText, mySentAt);
   let botMessage = new Message(botMessageId, botAuthorId, undefined, botText, botSentAt);
   let botRequest = new Message(myBotRequestId, myAuthorId, undefined, myBotRequestText, mySentAt); 
   this.timeout(20000);

   beforeEach(async () => {

      this.timeout(20000);           
   });

   it("Needs to detect Bot message type", function () {

      var messageEmpty = new Message();

      expect(AIConnection.isFromLLM(botMessage, authors)).toEqual(true);
      expect(AIConnection.isFromLLM(personMessage, authors)).toEqual(false); 
      expect(AIConnection.isFromLLM(botRequest, authors)).toEqual(false);           
   });

   it("Needs to detect Bot request type", function () {

      expect(AIConnection.isRequestForLLM(personMessage, authors)).toEqual(false);   
      expect(AIConnection.isRequestForLLM(botMessage, authors)).toEqual(false);     
      expect(AIConnection.isRequestForLLM(botRequest, authors)).toEqual(true);          
   });   

   it("Needs to detect near-miss Bot request type", function () {

      expect(AIConnection.mightBeMissTypedRequestForLLM (personMessage, authors)).toEqual(true);   
      expect(AIConnection.mightBeMissTypedRequestForLLM(botMessage, authors)).toEqual(false);
      expect(AIConnection.mightBeMissTypedRequestForLLM(botRequest, authors)).toEqual(false);                 
   });   

   it("Needs to allow reference errors & return false", function () {

      var newMessage = new Message(personMessage);
      newMessage.authorId = "Banana";
  
      let caught = false;
      let answer = false;

      try {
         answer = AIConnection.isFromLLM(newMessage, authors);
      }
      catch (e) {
         caught = true;
      }
      expect(caught).toEqual(false);      
      expect(answer).toEqual(false);          
   });   

   it("Needs to build request object", async function () {

      let messages = new Array<Message>();
      messages.length = 3;
      messages[0] = personMessage;
      messages[1] = botRequest;
      messages[2] = botMessage;

      throwIfUndefined(process);
      throwIfUndefined(process.env);
      throwIfUndefined(process.env.SessionKey);        

      let query = AIConnection.buildEnrichmentQuery (messages, authors);

      expect(query.history.length).toEqual(2);         
   });       

   it("Needs to generate valid response from Open AI web endpoint using streaming API", async function () {

      let messages = new Array<Message>();
      messages.length = 2;
      messages[0] = personMessage;
      messages[1] = botRequest;

      throwIfUndefined(process);
      throwIfUndefined(process.env);
      throwIfUndefined(process.env.SessionKey);        

      let caller = new AIConnection (new SessionKey (process.env.SessionKey));                
      let fullQuery = AIConnection.buildEnrichmentQuery (messages, authors);
      let message = new Message();

      let called = false;
      function handler (text: Message, more: boolean) {
         called = true;
      }

      message.hookLiveAppend (handler);

      let result = await caller.makeEnrichedCall (message, fullQuery);

      await sleep (10000);

      message.unhookLiveAppend ();

      expect (message.text.length > 0).toBe(true);    
      expect (message.isStreaming).toBe(false);    
      expect (called).toBe(true);    

   }).timeout(20000); 

   it("Needs to generate valid response from Open AI web endpoint using basic API", async function () {

      let messages = new Array<Message>();
      messages.length = 2;
      messages[0] = personMessage;
      messages[1] = botRequest;
     
      throwIfUndefined(process);
      throwIfUndefined(process.env);
      throwIfUndefined(process.env.SessionKey); 

      let caller = new AIConnection (new SessionKey (process.env.SessionKey));             
      let message = new Message();

      let result = await caller.makeFollowUpCall ("This article explains how Transformers work.");

      expect (result && result.text.length > 0).toBe(true);    
      expect (result && result.isStreaming).toBe(false);              
   }).timeout(20000); 

   function makeLongMessage (startingMessage: Message, segmentCount: number) : Message {

      let segments = new Array<IRelevantEnrichedChunk>();      

      // Make a list of knowledge sources, each with > 1000 tokens
      for (var i = 0; i < segmentCount; i++) {
         
         let accumulatedText = "Hi";

         for (var j = 0; j < 500; j++) {
            accumulatedText = accumulatedText.concat (" token");
         }
         let ks1 = {
            chunk: {
               url: "https://test", 
               summary: accumulatedText,
               text: accumulatedText
            },
            relevance: 0.8
         };
         segments.push (ks1);
      }
      
      let newBotRequest = new Message (startingMessage);
      newBotRequest.chunks = segments;

      return newBotRequest;
   }
   it("Needs to detect when token limit is OK", async function () {

      let messages = new Array<Message>();

      messages.length = 4;
      messages[0] = personMessage;
      messages[1] = botRequest;
      messages[2] = makeLongMessage (botMessage, 2); // This ends up as two mesages as we have a long message and a long chunk. 
      messages[3] = botRequest;

      throwIfUndefined(process);
      throwIfUndefined(process.env);
      throwIfUndefined(process.env.SessionKey);        

      let query = AIConnection.buildEnrichmentQuery (messages, authors);

      expect(query.history.length).toEqual(4);         
   });    

   it("Needs to detect when token limit overflows", async function () {

      let messages = new Array<Message>();

      messages.length = 4;
      messages[0] = personMessage;
      messages[1] = botRequest;
      messages[2] = makeLongMessage (botMessage, 20);
      messages[3] = botRequest;      

      throwIfUndefined(process);
      throwIfUndefined(process.env);
      throwIfUndefined(process.env.SessionKey);        

      let query = AIConnection.buildEnrichmentQuery (messages, authors);

      expect(query.history.length).toEqual(0);         
   });      
});


describe("APIs", function () {

   it("Needs to call summariser", async function () {

      let caught = false;
      let session = new SessionKey(KStubEnvironmentVariables.SessionKey);
      let text = "OpenAI have released a new model called OpenAI-O, where the O stands for omni channel. They have also released a small version of this."
      let summary : string | undefined = "";

      try {
         summary = await makeSummaryCall (session, text);
      }
      catch (e) {
         caught = true;
      }
      expect(caught).toEqual(false);      
      expect(summary && summary.length > 0).toEqual(true);              
   }).timeout(20000);       
   
});
****************************************

****************************************
Boxer\test\caucus.test.ts
****************************************
// Copyright Braid technologies ltd, 2024
import { expect } from 'expect';
import { describe, it } from 'mocha';

import { throwIfUndefined } from '../core/Asserts';
import { Persona } from '../core/Persona';
import { Message } from '../core/Message';
import { Interest, NotificationFor } from '../core/NotificationFramework';
import { BraidFluidConnection } from '../core/BoxerFluidConnection';
import { EIcon } from '../core/Icons';
import { SessionKey, ConversationKey } from '../core/Keys';

var myId: string = "1234";
var myName = "";
var myEmail: string = "jon@a.com";
var myThumbnail: string = "abcd";
var myLastSeenAt = new Date();

class MockLocation { // Just create the fields we use in the Mock
   protocol: string;
   host: string;
   hostname: string;
   hash: string;

   constructor() {
      this.protocol = "";
      this.host = "";
      this.hostname = "";
      this.hash = "";
   }   
}

var mockLocation = new MockLocation();

async function wait() {
   await new Promise(resolve => setTimeout(resolve, 500));
}

function onAdd(interest_: Interest, notification_: NotificationFor<string>) : void {

}

function onChange(interest_: Interest, notification_: NotificationFor<string>): void {

}

function onRemove(interest_: Interest, notification_: NotificationFor<string>): void {

}

describe("Caucus", function () {

   this.timeout(10000);

   var newConnection: BraidFluidConnection;
   var persona: Persona;
   var id: ConversationKey; 

   var oldLocation: any = global.location;

   beforeEach(async () => {

      (global.location as any) = mockLocation;

      this.timeout(10000);
      persona = new Persona(myId, myName, myEmail, EIcon.kPersonPersona, myThumbnail, myLastSeenAt);

      newConnection = new BraidFluidConnection(persona);

      let checked = process.env.SessionKey;
      throwIfUndefined(checked);
      id = await newConnection.createNew(new SessionKey (checked), false);

      await wait();
   });

   afterEach(async () => {

      await wait();
      await newConnection.disconnect();
  
      (global.location as any) = oldLocation;
   });

   it("Can create a valid caucus", async function () {

      var workingPersona: Persona = new Persona(persona);

      let caucus = newConnection.participantCaucus();

      caucus.add(workingPersona.id, workingPersona);
      expect(caucus.has(workingPersona.id)).toEqual(true);
      expect(caucus.get(workingPersona.id).equals(workingPersona)).toEqual(true);
      expect(caucus.current().size).toEqual(2); // The Bot persona is added manually - size is alays >= 1

      workingPersona.name = "Joe";
      caucus.amend(workingPersona.id, workingPersona);
      expect(caucus.get(workingPersona.id).equals(workingPersona)).toEqual(true)

      caucus.remove(workingPersona.id);
      expect(caucus.has(workingPersona.id)).toEqual(false);
      expect(caucus.current().size).toEqual(1); // The Bot persona is added manually - size is alays >= 1
    });

    it("Can detect invalid operations", async function () {

      var workingPersona: Persona = new Persona(persona);

      let caucus = newConnection.participantCaucus();

      caucus.add(workingPersona.id, workingPersona);

      let caught = false;
      try {
         caucus.get("banana");
      }
      catch {
         caught = true;            
      }

      expect(caught).toEqual(true);
    });

   it("Can synchronise", async function () {

      var workingPersona: Persona = new Persona(persona);

      let caucus = newConnection.participantCaucus();

      var synchMap: Map<string, Persona> = new Map<string, Persona>();

      // Sync down to no elements
      caucus.synchFrom(synchMap);
      expect(caucus.current().size === 0).toEqual(true);

      // Sync in a new element
      synchMap.set(workingPersona.id, workingPersona);
      caucus.synchFrom(synchMap);
      expect(caucus.current().size === 1).toEqual(true);
      expect(caucus.get(workingPersona.id).equals(workingPersona)).toEqual(true);

      // Sync in a changed element
      workingPersona.name = "Joe 2";
      caucus.synchFrom(synchMap);
      expect(caucus.current().size === 1).toEqual(true);
      expect(caucus.get(workingPersona.id).equals(workingPersona)).toEqual(true);
   });

   it("Can remove all", async function () {

      var workingPersona: Persona = new Persona(persona);

      let caucus = newConnection.participantCaucus();

      var synchMap: Map<string, Persona> = new Map<string, Persona>();

      // Sync down to no elements
      caucus.synchFrom(synchMap);
      expect(caucus.current().size === 0).toEqual(true);

      // Sync in a new element
      synchMap.set(workingPersona.id, workingPersona);
      caucus.synchFrom(synchMap);
      expect(caucus.current().size === 1).toEqual(true);
      expect(caucus.get(workingPersona.id).equals(workingPersona)).toEqual(true);

      // Remove all elements
      caucus.removeAll ();
      expect(caucus.current().size === 0).toEqual(true);
   });

   it("Can return an ordered array", async function () {

      // Create three Message objects
      var workingMessage: Message = new Message();
      var workingMessage2: Message = new Message();    
      var workingMessage3: Message = new Message(); 
      
      // Space them out a second apart
      let now = new Date();
      workingMessage2.sentAt = new Date(now.getTime() + 1000);
      workingMessage3.sentAt = new Date(now.getTime() + 2000);

      let caucus = newConnection.messageCaucus();

      var synchMap: Map<string, Message> = new Map<string, Message>();
      synchMap.set (workingMessage.id, workingMessage);
      synchMap.set (workingMessage2.id, workingMessage2);
      synchMap.set (workingMessage3.id, workingMessage3);

      // Sync in 3 elements     
      caucus.synchFrom(synchMap);
      expect(caucus.current().size === 3).toEqual(true);

      let tempArray = caucus.currentAsArray();

      expect(tempArray.length === 3).toEqual(true);
      expect(tempArray[0].sentAt.getTime() <= tempArray[1].sentAt.getTime()).toEqual(true);
      expect(tempArray[1].sentAt.getTime() <= tempArray[2].sentAt.getTime()).toEqual(true);
   });   

   it("Can manage a large volume of members", async function () {

      let caucus = newConnection.messageCaucus();
      let count = 1000;

      let start = new Date();
      
      for (let i = 0; i < count; i++) {
         var workingMessage: Message = new Message();         
         caucus.add (workingMessage.id, workingMessage);
         let ordered = caucus.currentAsArray();
      }
      
      let middle = new Date();

      for (let i = 0; i < count; i++) {
         let ordered = caucus.currentAsArray();
      }
      
      let end = new Date();

      console.log ('Loading phase:' + (middle.getTime() - start.getTime()).toString() + '\n', 
                   'Reading phase:' + (end.getTime() - middle.getTime()).toString() + '\n');

      expect(caucus.currentAsArray().length).toEqual(1000);
   }).timeout (30000);    
});
****************************************

****************************************
Boxer\test\debounce.test.ts
****************************************
'use strict';
// Copyright Braid technologies ltd, 2024
import { expect } from 'expect';
import { describe, it } from 'mocha';

import { debounce} from '../core/Debounce';

async function wait() {
   await new Promise(resolve => setTimeout(resolve, 1000));
}

describe("Debounce", function () {

   var count: number = 0;

   function doSomethingAsync () {
      count++;
   }

   it("Needs to function asynchronously", async function () {

      const debounced = debounce(doSomethingAsync, 0);

      debounced();

      await wait();

      expect(count > 0).toEqual(true);
   });

   it("Needs to function called > once", async function () {

      const debounced = debounce(doSomethingAsync, 0);

      debounced();
      debounced();

      await wait();

      expect(count > 0).toEqual(true);
   });
});
****************************************

****************************************
Boxer\test\embedding.test.ts
****************************************
'use strict';
// Copyright Braid technologies ltd, 2024

import { expect } from 'expect';
import { describe, it } from 'mocha';

import { KStubEnvironmentVariables } from "../core/ConfigStrings";

import { getEnvironment } from '../../CommonTs/src/IEnvironmentFactory';
import { EEnvironment } from '../../CommonTs/src/IEnvironment';
import { FindEnrichedChunkApi } from '../../CommonTs/src/FindEnrichedChunkApi';
import { EChunkRepository } from '../../CommonTs/src/EnrichedChunk';

describe("Embedding", async function () {

   let api = new FindEnrichedChunkApi(getEnvironment (EEnvironment.kLocal), KStubEnvironmentVariables.SessionKey);


   it("Needs to find closest match for an existing YouTube document", async function () {

      let query = {
         repositoryId: EChunkRepository.kBoxer,
         url: "https://www.youtube.com/watch?v=l5mG4z343qg&t=00m",
         maxCount: 1,
         similarityThreshold : 0.4

      }
      let response = await api.findRelevantChunksFromUrl (query);

      expect(response.length).toEqual(1);       

   }).timeout (20000);

   it("Needs to find closest match for an existing Html document", async function () {

      let query = {
         repositoryId: EChunkRepository.kBoxer,
         url: "https://karpathy.medium.com/software-2-0-a64152b37c35",
         maxCount: 1,
         similarityThreshold : 0.4
      }
      let response = await api.findRelevantChunksFromUrl (query);
   
      expect(response.length).toEqual(1); 

   }).timeout (20000);

   it("Needs to find closest match for a simple query", async function () {
      
      let query = {
         repositoryId: EChunkRepository.kBoxer,
         summary: "Trolly chicken dilemma chicks",
         maxCount: 1,
         similarityThreshold : 0.1 // set low so we get a match
      }
      let response = await api.findRelevantChunksFromSummary (query);
   
      expect(response.length).toEqual(1);    

   }).timeout (10000);   

   it("Needs to find closest match for an irrelevant query", async function () {
      
      let query = {
         repositoryId: EChunkRepository.kBoxer,
         summary: "Human baby animals cute cats dogs",
         maxCount: 1,
         similarityThreshold : 0.1 // set low so we get a match
      }
      let response = await api.findRelevantChunksFromSummary (query);
   
      expect(response.length).toEqual(1);    

   }).timeout (10000);     

   it("Needs to find closest match for a Markdown query", async function () {
      
      let query = {
         repositoryId: EChunkRepository.kBoxer,
         summary: "User experience is a very important aspect of building apps. Users need to be able to use your app in an efficient way to perform tasks. Being efficient is one thing but you also need to design apps so that they can be used by everyone, to make them accessible. This chapter will focus on this area so you hopefully end up designing an app that people can and want to use. Introduction User experience is how a user interacts with and uses a specific product or service be it a system, tool",
         maxCount: 1,
         similarityThreshold : 0.4 
      }
      let response = await api.findRelevantChunksFromSummary (query);
   
      expect(response.length).toEqual(1);   

   }).timeout (10000);      
});
****************************************

****************************************
Boxer\test\errors.test.ts
****************************************
'use strict';
// Copyright Braid technologies ltd, 2024
import { expect } from 'expect';
import { describe, it } from 'mocha';

import { InvalidParameterError, InvalidOperationError, ConnectionError, EnvironmentError, InvalidStateError } from '../core/Errors';

var message = "What";

describe("Errors", function () {

   it("Needs to create InvalidParameterError", function () {

      var error: InvalidParameterError = new InvalidParameterError(message);
      expect(error.message === message).toEqual(true);
   });

   it("Needs to create InvalidOperationError", function () {

      var error: InvalidOperationError = new InvalidOperationError(message);
      expect(error.message === message).toEqual(true);
   });

   it("Needs to create ConnectionError", function () {

      var error: ConnectionError = new ConnectionError(message);
      expect(error.message === message).toEqual(true);
   });

   it("Needs to create EnvironmentError", function () {

      var error: EnvironmentError = new EnvironmentError(message);
      expect(error.message === message).toEqual(true);
   });

   it("Needs to create InvalidStateerror", function () {

      var error: InvalidStateError = new InvalidStateError(message);
      expect(error.message === message).toEqual(true);
   });   
});
****************************************

****************************************
Boxer\test\joinpagevalidator.test.ts
****************************************
'use strict';
// Copyright Braid Technologies ltd, 2024
import { expect } from 'expect';
import { describe, it } from 'mocha';
import { IKeyGenerator } from '../core/IKeyGenerator';
import { getDefaultKeyGenerator } from '../core/IKeyGeneratorFactory';
import { SessionKey, ConversationKey } from '../core/Keys';
import { JoinDetails } from '../core/JoinDetails';
import { JoinPageValidator } from '../core/JoinPageValidator';

const badUuid = "9a0583f5xca56-421b-8545-aa23032d6c93"

var keyGenerator: IKeyGenerator = getDefaultKeyGenerator();

describe("JoinPageValidator", function () {

   it("Needs to detect invalid name", function () {

      let validator = new JoinPageValidator();
      let session = new SessionKey (keyGenerator.generateKey());
      let conversation = new ConversationKey (keyGenerator.generateKey());

      expect(validator.canAttemptJoin ("", undefined as unknown as string, session, conversation)).toEqual(false);
   });

   it("Needs to detect invalid session key", function () {

      let validator = new JoinPageValidator();
      let session = new SessionKey (badUuid);
      let conversation = new ConversationKey (keyGenerator.generateKey());

      expect(validator.canAttemptJoin ("joe@mail.com", "Joe", session, conversation)).toEqual(false);
   }); 

   it("Needs to detect invalid conversation key", function () {

      let validator = new JoinPageValidator();
      let session = new SessionKey (keyGenerator.generateKey());
      let conversation = new ConversationKey (badUuid);

      expect(validator.canAttemptJoin ("joe@mail.com", "Joe", session, conversation)).toEqual(false);
   }); 
    

   it("Needs to detect valid components", function () {
      let validator = new JoinPageValidator();
      let session = new SessionKey (keyGenerator.generateKey());
      let conversation = new ConversationKey (keyGenerator.generateKey());

      expect(validator.canAttemptJoin ("joe@mail.com", "Joe", session, conversation)).toEqual(true);
   });
   
});


describe("JoinDetails", function () {

   it("Needs to classify empty string", function () {

      let details = new JoinDetails("");

      expect(details.canAttemptJoin()).toEqual(false);
   });

   it("Needs to detect invalid name", function () {

      let name = "";
      let session = new SessionKey (keyGenerator.generateKey());
      let conversation = new ConversationKey (keyGenerator.generateKey());
      let secret = keyGenerator.generateSecret();

      let details = new JoinDetails ("&email=" + name + "&session=" + session.toString() + "&conversation=" + conversation.toString() + '&secret=' + secret);

      expect(details.canAttemptJoin()).toEqual(false);
   });

   it("Needs to detect invalid session key", function () {

      let name = "joe@mail.com";
      let session = new SessionKey (badUuid);
      let conversation = new ConversationKey (keyGenerator.generateKey());
      let secret = keyGenerator.generateSecret();      

      let details = new JoinDetails ("&email=" + name + "&session=" + session.toString() + "&conversation=" + conversation.toString() + '&secret=' + secret);

      expect(details.canAttemptJoin()).toEqual(false);
   }); 

   it("Needs to detect invalid conversation key", function () {

      let name = "joe@mail.com";
      let session = new SessionKey (keyGenerator.generateKey());
      let conversation = new ConversationKey (badUuid);
      let secret = keyGenerator.generateSecret();  

      let details = new JoinDetails ("&email=" + name + "&session=" + session.toString() + "&conversation=" + conversation.toString()+ '&secret=' + secret);

      expect(details.canAttemptJoin()).toEqual(false);
   });  
   
   it("Needs to detect all valid parts", function () {

      let name = "joe@mail.com";
      let session = new SessionKey (keyGenerator.generateKey());
      let conversation = new ConversationKey (keyGenerator.generateKey());
      let secret = keyGenerator.generateSecret();  

      let details = new JoinDetails ("&email=" + name + "&session=" + session.toString() + "&conversation=" + conversation.toString() + '&secret=' + secret);

      expect(details.canAttemptJoin()).toEqual(true);
   });     
});
****************************************

****************************************
Boxer\test\knowledge.test.ts
****************************************
'use strict';
// Copyright Braid Technologies ltd, 2024

import { expect } from 'expect';
import { describe, it } from 'mocha';

import { KStubEnvironmentVariables } from '../core/ConfigStrings';
import { lookLikeSameSource } from '../core/Embedding';

import { getEnvironment } from '../../CommonTs/src/IEnvironmentFactory';
import { EEnvironment } from '../../CommonTs/src/IEnvironment';
import { FindEnrichedChunkApi } from '../../CommonTs/src/FindEnrichedChunkApi';
import { EChunkRepository } from '../../CommonTs/src/EnrichedChunk';



describe("Chunk URLs", function () {

   it("Needs to identify URLs from same YouTube video", function () {

      var url1 = "https://www.youtube.com/watch?v=roEKOzxilq4&t=00h00m00s";
      var url2 = "https://www.youtube.com/watch?v=roEKOzxilq4&t=00h05m00s";

      expect(lookLikeSameSource (url1, url2)).toEqual(true);     
   });

   it("Needs to identify URLs from different YouTube videos", function () {

      var url1 = "https://www.youtube.com/watch?v=roEKOzxilq4&t=00h00m00s";
      var url2 = "https://www.youtube.com/watch?v=xoEKOzailq4&t=00h00m00s";

      expect(lookLikeSameSource (url1, url2)).toEqual(false);        
   });

   it("Needs to identify URLs from same GitHub repo", function () {

      var url1 = "https://github.com/jonverrier/BraidEng";
      var url2 = "https://github.com/jonverrier/BraidEng/issues";

      expect(lookLikeSameSource (url1, url2)).toEqual(true);     
   });

   it("Needs to identify URLs from different GitHub repos", function () {

      var url1 = "https://github.com/jonverrier/BraidEng";
      var url2 = "https://github.com/jonverrier/BraidWeb";

      expect(lookLikeSameSource (url1, url2)).toEqual(false);        
   });

});

describe("ChunkRepository", function () {

   let api = new FindEnrichedChunkApi(getEnvironment (EEnvironment.kLocal), KStubEnvironmentVariables.SessionKey);

   it("Needs to identify related content given an input URL", async function () {

      let query = {
         repositoryId: EChunkRepository.kBoxer,
         url: "https://www.youtube.com/watch?v=l5mG4z343qg&t=00m",
         maxCount: 1,
         similarityThreshold : 0.4

      }
      let response = await api.findRelevantChunksFromUrl (query);

      expect(response.length).toEqual(1);     
   });

   it("Needs to identify starter content", async function () {

      let query = {
         repositoryId: EChunkRepository.kBoxer,
         maxCount: 1,
         similarityThreshold : 0.4,
         summary: "This article exploure user interface considerations for interacting with LLM based applications."

      }
      let response = await api.findRelevantChunksFromSummary (query);

      expect(response.length).toEqual(1);          
   });

});
****************************************

****************************************
Boxer\test\like.test.ts
****************************************
'use strict';
// Copyright Braid technologies ltd, 2024

import { expect } from 'expect';
import { describe, it } from 'mocha';

import { Like } from '../core/Like';

let me = "Jon";
let now = new Date();

let them = "Jon";
let nowThem = new Date("1/1/2024");

describe("Like", async function () {
     

   var l1: Like, l2: Like, lErr:Like;

   l1 = new Like(me, now);

   l2 = new Like(them, nowThem);

   it("Needs to construct an empty object", function () {

      var lEmpty = new Like();

      expect(lEmpty.name).toEqual("");     
   });

   it("Needs to compare for equality and inequality", function () {

      var lNew: Like = new Like(l1.name, l1.when);

      expect(l1.equals(l1)).toEqual(true);
      expect(l1.equals(lNew)).toEqual(true);
      expect(l1.equals(l2)).toEqual(false);
   });
   
   
   it("Needs to detect inequality on date", function () {

      var lNew: Like = new Like(l1.name, new Date());

      expect(l1.equals(lNew)).toEqual(false);
   });

   it("Needs to correctly store attributes", function () {
         
      expect(l1.name === me).toEqual(true);
      expect(l1.when.getTime() === now.getTime()).toEqual(true);
   });

   it("Needs to copy construct", function () {

      let l2: Like = new Like(l1);

      expect(l1.equals(l2) === true).toEqual(true);
   });

   it("Needs to correctly change attributes", function () {

      var lNew: Like = new Like(l1.name, l1.when);

      lNew.name = them;
      lNew.when = nowThem;
     
      expect(l2.equals (lNew)).toEqual(true);
   });

   it("Needs to convert to and from JSON()", function () {

      var stream: string = l1.streamOut();

      var lNew: Like = new Like();
      lNew.streamIn(stream);
    
      expect(l1.equals(lNew)).toEqual(true);
   });   
});
****************************************

****************************************
Boxer\test\message.test.ts
****************************************
'use strict';
// Copyright Braid Technologies ltd, 2024
import { MDynamicStreamable } from '../core/StreamingFramework';
import { Message} from '../core/Message';
import { IKeyGenerator } from '../core/IKeyGenerator';
import { getDefaultKeyGenerator } from '../core/IKeyGeneratorFactory';

import { IRelevantEnrichedChunk } from '../../CommonTs/src/EnrichedChunk';

import { expect } from 'expect';
import { describe, it } from 'mocha';

var keyGenerator: IKeyGenerator = getDefaultKeyGenerator();

var myId: string = "1234";
var myAuthorId: string = "Jon";
var myResponseToId: string = "abcd";
var myText = "Hello";
var mySentAt = new Date();

var someoneElsesId: string = "5678";
var someoneElsesAuthorId: string = "Barry";
var someoneElsesResponseTo: string = "abcdefgh";
var someoneElsesText = "Bye";
var someoneElsesSentAt = new Date(0);

describe("Message", function () {

   var message1: Message, message2: Message, messageErr:Message;

   message1 = new Message(myId, myAuthorId, myResponseToId, myText, mySentAt);

   message2 = new Message(someoneElsesId, someoneElsesAuthorId, someoneElsesResponseTo, someoneElsesText, someoneElsesSentAt);

   it("Needs to construct an empty object", function () {

      var messageEmpty = new Message();

      expect(messageEmpty.text).toEqual("");
      expect(messageEmpty.responseToId).toEqual(undefined);
      expect(messageEmpty.isUnPrompted()).toEqual(true);
      expect(keyGenerator.couldBeAKey (messageEmpty.id)).toEqual(true);      
   });

   it("Needs to allow undefined ID", function () {

      var caught: boolean = false;
      try {
         messageErr = new Message(undefined, myId, myResponseToId, myText, mySentAt);
      } catch (e) {
         caught = true;
      }
      expect(caught).toEqual(false);
   });

   it("Needs to detect invalid ID", function () {

      var caught: boolean = false;
      try {
         messageErr = new Message(1 as unknown as string, myId, myResponseToId, myText,  mySentAt);
      } catch (e) {
         caught = true;
      }
      expect(caught).toEqual(true);
   });


   it("Needs to compare for equality and inequality", function () {

      var messageNew: Message = new Message(message1.id, message1.authorId, message1.responseToId, message1.text, message1.sentAt);

      expect(message1.equals(message1)).toEqual(true);
      expect(message1.equals(messageNew)).toEqual(true);
      expect(message1.equals(message2)).toEqual(false);
   });
   
   
   it("Needs to detect inequality on date", function () {

      var messageNew: Message = new Message(message1.id, message1.authorId, message1.responseToId, message1.text, new Date());

      expect(message1.equals(messageNew)).toEqual(false);
   });

   it("Needs to throw error if checkedResponseToId is not satisfied", function () {

      var messageEmpty = new Message();

      var caught: boolean = false;
      try {
         let thumb = messageEmpty.checkedResponseToId;

      } catch (e) {
         caught = true;
      }
      expect(caught).toEqual(true);
   });

   it("Needs to correctly store attributes", function () {
         
      expect(message1.authorId === myAuthorId).toEqual(true);
      expect(message1.responseToId === myResponseToId).toEqual(true);
      expect(message1.isUnPrompted()).toEqual(false);      
      expect(message1.sentAt.getTime() === mySentAt.getTime()).toEqual(true);
   });

   it("Needs to copy construct", function () {

      let persona2: Message = new Message(message1);

      expect(message1.equals(persona2) === true).toEqual(true);
   });

   it("Needs to correctly change attributes", function () {

      var messageNew: Message = new Message(message1.id, message1.authorId, message1.responseToId, message1.text, message1.sentAt);

      messageNew.id = someoneElsesId;
      messageNew.text = someoneElsesText;
      messageNew.authorId = someoneElsesAuthorId;
      messageNew.responseToId = someoneElsesResponseTo;
      messageNew.sentAt = someoneElsesSentAt;

      expect(message2.equals (messageNew)).toEqual(true);
   });

   it("Needs to catch errors on change id attributes", function () {

      var caught: boolean = false;
      try {
         message1.id = 1 as unknown as string;
      } catch (e) {
         caught = true;
      }
      expect(caught).toEqual(true);

   });

   it("Needs to convert to and from JSON()", function () {

      var stream: string = message1.streamOut();

      var messageNew: Message = new Message(message1.id, message1.authorId, message1.responseToId, message1.text, message1.sentAt);
      messageNew.streamIn(stream);

      expect(message1.equals(messageNew)).toEqual(true);
   });

   it("Needs to convert to and from JSON() with KnowledgeSources attached", function () {

      let ks1 = {
         chunk: {
            url: "https://test", 
            summary: message1.text,
            text: message1.text
         },
         relevance: 0.8
      };
      let messageWithSources = new Message (message1);

      let sources = new Array<IRelevantEnrichedChunk> ();
      sources.push (ks1);
      messageWithSources.chunks = sources;      
      var stream: string = messageWithSources.streamOut();

      var messageNew: Message = new Message(message1.id, message1.authorId, message1.responseToId, message1.text, message1.sentAt);

      messageNew.streamIn(stream);

      expect(messageWithSources.equals(messageNew)).toEqual(true);
   });   

   it("Needs to dynamically create Message to and from JSON()", function () {

      var stream: string = message1.flatten();

      var messageNew: Message = new Message();

      expect(message1.equals(messageNew)).toEqual(false);

      messageNew = MDynamicStreamable.resurrect(stream) as Message;

      expect(message1.equals(messageNew)).toEqual(true);
   });

   it("Needs to dynamically create Message to and from JSON() with KnowledgeSources attached", function () {

      let ks1 = {
         chunk: {
            url: "https://test", 
            summary: message1.text,
            text: message1.text
         },
         relevance: 0.8
      };
      let messageWithSources = new Message (message1);

      let sources = new Array<IRelevantEnrichedChunk> ();
      sources.push (ks1);
      messageWithSources.chunks = sources;      
     
      var stream: string = messageWithSources.flatten();

      var messageNew: Message = new Message();

      expect(messageWithSources.equals(messageNew)).toEqual(false);

      messageNew = MDynamicStreamable.resurrect(stream) as Message;

      expect(messageWithSources.equals(messageNew)).toEqual(true);
   });   

   it("Needs to count with tokens KnowledgeSources attached", function () {

      let ks1 = {chunk: {
            url: "https://test", 
            summary: message1.text,
            text: message1.text
         },
         relevance: 0.8
      };

      var messageNew: Message = new Message();  
      expect(messageNew.isDirty).toEqual(true);          
      expect(messageNew.tokens > 1).toEqual(false);
      expect(messageNew.isDirty).toEqual(false);   

      messageNew.text = "Some text and a bit more x y x help this needs to be longer than 2 tokens";

      expect(messageNew.tokens > 1).toEqual(true);
      expect(messageNew.isDirty).toEqual(false); 

      let messageWithSources = new Message (messageNew);
      expect(messageWithSources.isDirty).toEqual(true); 

      let sources = new Array<IRelevantEnrichedChunk> ();
      sources.push (ks1);
      messageWithSources.chunks = sources;      
      expect(messageWithSources.isDirty).toEqual(true);         
      expect(messageWithSources.tokens > 2).toEqual(true);
      expect(messageWithSources.isDirty).toEqual(false);       
   });    

});
****************************************

****************************************
Boxer\test\notification.test.ts
****************************************
'use strict';
// Copyright Braid technologies ltd, 2024
import { describe, it} from 'mocha';
import { expect } from 'expect';

import {
   Interest,
   Notification,
   NotificationFor,
   ObserverInterest,
   Notifier,
   IObserver,
   NotificationRouter,
   NotificationRouterFor,
   FunctionForNotification
} from '../core/NotificationFramework';
import { throwIfUndefined } from '../core/Asserts';

class MockObserver implements IObserver {

   public _lastNotification: Notification | undefined = undefined;

   constructor() {
      this._lastNotification = undefined;
   }

   notify(interest_: Interest, notification_: Notification): void {

      this._lastNotification = notification_;
   };

   notifyInt (interest_: Interest, notification_: NotificationFor<number>): void {

      this._lastNotification = notification_;
   };
};

describe("NotificationFramework", function () {
  
   it("Needs to create, test & assign Interest", function () {

      var notificationId1 : string = "Playing";
      var notificationId2: string = "Paused";

      var interest1: Interest = new Interest(notificationId1);
      var interest2: Interest = new Interest(notificationId2);
      var interest3: Interest = new Interest (interest1);
      var interest4: Interest = new Interest();

      expect(interest1.equals(interest1)).toEqual(true);
      expect(interest1.equals(interest2)).toEqual(false);
      expect(interest1.equals(interest3)).toEqual(true);
      expect(interest1.equals(interest4)).toEqual(false);
      expect(interest1.notificationId === notificationId1).toEqual(true);

      interest2.assign(interest1);
      expect(interest1.equals(interest2)).toEqual(true);
   });

   it("Needs to create, test & assign Notification", function () {

      var notificationId1: string = "Playing";
      var notificationId2: string = "Paused";

      var interest1: Interest = new Interest(notificationId1);
      var interest2: Interest = new Interest(notificationId2);

      var notification1: Notification = new Notification(interest1);
      var notification2: Notification = new Notification(interest2);
      var notification3: Notification = new Notification(notification1);
      var notification4: Notification = new Notification();

      expect(notification1.equals(notification1)).toEqual(true);
      expect(notification1.equals(notification2)).toEqual(false);
      expect(notification1.equals(notification3)).toEqual(true);
      expect(notification1.equals(notification4)).toEqual(false);
      expect(notification1.interest.equals(interest1)).toEqual(true);

      notification2.assign(notification1);
      expect(notification1.equals(notification2)).toEqual(true);
   });

   it("Need to create, test & assign Notification", function () {

      var notificationId1: string = "Playing";
      var notificationId2: string = "Paused";

      var interest1: Interest = new Interest(notificationId1);
      var interest2: Interest = new Interest(notificationId2);

      var notification1: Notification = new Notification(interest1);
      var notification2: Notification = new Notification(interest2);
      var notification3: Notification = new Notification(notification1);
      var notification4: Notification = new Notification();

      expect(notification1.equals(notification1)).toEqual(true);
      expect(notification1.equals(notification2)).toEqual(false);
      expect(notification1.equals(notification3)).toEqual(true);
      expect(notification1.equals(notification4)).toEqual(false);
      expect(notification1.interest.equals(interest1)).toEqual(true);

      notification2.assign(notification1);
      expect(notification1.equals(notification2)).toEqual(true);
   });

   it("Need to create, test & assign NotificationFor<EventData>", function () {

      var notificationId1: string = "Playing";
      var notificationId2: string = "Paused";

      var interest1: Interest = new Interest(notificationId1);
      var interest2: Interest = new Interest(notificationId2);

      var notification1: NotificationFor<number> = new NotificationFor<number>(interest1, 1);
      var notification2: NotificationFor<number> = new NotificationFor<number>(interest2, 2);
      var notification3: NotificationFor<number> = new NotificationFor<number>(notification1);
      var notification4: NotificationFor<number> = new NotificationFor<number>();

      expect(notification1.equals(notification1)).toEqual(true);
      expect(notification1.equals(notification2)).toEqual(false);
      expect(notification1.equals(notification3)).toEqual(true);
      expect(notification1.equals(notification4)).toEqual(false);
      expect(notification1.interest.equals(interest1)).toEqual(true);
      expect(notification1.eventData === 1).toEqual(true);

      notification2.assign(notification1);
      expect(notification1.equals(notification2)).toEqual(true);
   });

   it("Need to create, test & assign ObserverInterest", function () {

      var observer = new MockObserver();
      var notificationId1: string = "Playing";
      var notificationId2: string = "Paused";

      var interest1: Interest = new Interest(notificationId1);
      var interest2: Interest = new Interest(notificationId2);

      var observerInterest1: ObserverInterest = new ObserverInterest (observer, interest1);
      var observerInterest2: ObserverInterest = new ObserverInterest (observer, interest2);
      var observerInterest3: ObserverInterest = new ObserverInterest (observerInterest1);
      var observerInterest4: ObserverInterest = new ObserverInterest();

      expect(observerInterest1.equals(observerInterest1)).toEqual(true);
      expect(observerInterest1.equals(observerInterest2)).toEqual(false);
      expect(observerInterest1.equals(observerInterest3)).toEqual(true);
      expect(observerInterest1.equals(observerInterest4)).toEqual(false);
      expect(observerInterest1.interest.equals(interest1)).toEqual(true);
      expect(observerInterest1.observer === observer).toEqual(true);

      observerInterest4.assign(observerInterest1);
      expect(observerInterest1.equals(observerInterest4)).toEqual(true);
   });
   
   it("Need to create, test & assign NotificationRouter", function () {

      var observer = new MockObserver();
      var observer2 = new MockObserver();

      let observationRouter1 = new NotificationRouter(observer.notifyInt.bind(observer) as FunctionForNotification);
      var observationRouter2: NotificationRouter = new NotificationRouter(observer.notifyInt.bind(observer2) as FunctionForNotification);
      var observationRouter3: NotificationRouter = new NotificationRouter(observationRouter1);
      var observationRouter4: NotificationRouter = new NotificationRouter();

      expect(observationRouter1.equals(observationRouter1)).toEqual(true);
      expect(observationRouter1.equals(observationRouter2)).toEqual(false);
      expect(observationRouter1.equals(observationRouter3)).toEqual(true);
      expect(observationRouter1.function !== undefined).toEqual(true);
      expect(observationRouter4.function === undefined).toEqual(true);

      observationRouter2.assign(observationRouter1);
      expect(observationRouter1.equals(observationRouter2)).toEqual(true);
   });


   it("Need to create, test & assign NotificationRouterFor", function () {

      var observer = new MockObserver();
      var observer2 = new MockObserver();

      var observationRouter1: NotificationRouterFor<number> = new NotificationRouterFor<number>(observer.notifyInt.bind(observer));
      var observationRouter2: NotificationRouterFor<number> = new NotificationRouterFor<number>(observer.notifyInt.bind(observer2));
      var observationRouter3: NotificationRouterFor<number> = new NotificationRouterFor<number>(observationRouter1);
      var observationRouter4: NotificationRouterFor<number> = new NotificationRouterFor<number>();

      expect(observationRouter1.equals(observationRouter1)).toEqual(true);
      expect(observationRouter1.equals(observationRouter2)).toEqual(false);
      expect(observationRouter1.equals(observationRouter3)).toEqual(true);
      expect(observationRouter1.function !== undefined).toEqual(true);
      expect(observationRouter4.function === undefined).toEqual(true);

      observationRouter2.assign(observationRouter1);
      expect(observationRouter1.equals(observationRouter2)).toEqual(true);
   });

   it("Needs to flow notifications from Notifier to Observer", function () {

      var notifier = new Notifier();
      var observerYes = new MockObserver();
      var observerNo = new MockObserver();

      var notificationId1: string = "Playing";
      var notificationId2: string = "Paused";

      var interest1: Interest = new Interest(notificationId1);
      var interest2: Interest = new Interest(notificationId2);

      var observerInterest1: ObserverInterest = new ObserverInterest(observerYes, interest1);
      var observerInterest2: ObserverInterest = new ObserverInterest(observerNo, interest2);

      notifier.addObserver(observerInterest1);
      notifier.addObserver(observerInterest2);

      // Call sequence 1 - simple notification
      var notification: Notification = new Notification(interest1);

      notifier.notifyObservers(interest1, notification);

      throwIfUndefined (observerYes._lastNotification);

      expect(observerYes._lastNotification.equals(notification) === true).toEqual(true);
      expect((observerNo._lastNotification === undefined) === true).toEqual(true);

      // Call sequence 2 - notification with Notification payload
      var notificationForInt: NotificationFor<number> = new NotificationFor<number>(interest1, 1);

      notifier.notifyObservers(interest1, notificationForInt);

      throwIfUndefined (observerYes._lastNotification);

      expect(observerYes._lastNotification.equals(notificationForInt) === true).toEqual(true);
      expect((observerNo._lastNotification === undefined) === true).toEqual(true);

      // Tidy
      expect(notifier.removeObserver(observerInterest2) === true).toEqual(true);
      expect(notifier.removeObserver(observerInterest2) === false).toEqual(true);
      notifier.removeAllObservers();

      // Call sequence 3 - routed 
      var observationRouter3: NotificationRouter = new NotificationRouter (observerYes.notify.bind(observerYes));

      var observerInterest3: ObserverInterest = new ObserverInterest(observationRouter3, interest1);
      notifier.addObserver(observerInterest3);

      var notification3: Notification = new Notification(interest1);
      notifier.notifyObservers(interest1, notification3);
      
      throwIfUndefined (observerYes._lastNotification);

      expect(observerYes._lastNotification.equals(notification3) === true).toEqual(true);
      expect((observerNo._lastNotification === undefined) === true).toEqual(true);

      expect(notifier.removeObserver(observerInterest3) === true).toEqual(true);
      notifier.removeAllObservers();

      // Call sequence 4 - routed & with a payload
      var observationRouter4: NotificationRouterFor<number> = new NotificationRouterFor<number>(observerYes.notifyInt.bind(observerYes));

      var observerInterest4: ObserverInterest = new ObserverInterest(observationRouter4, interest1);
      notifier.addObserver(observerInterest4);

      var notification4: NotificationFor<number> = new NotificationFor<number>(interest1, 2);
      notifier.notifyObservers(interest1, notification4);
      
      throwIfUndefined (observerYes._lastNotification);

      expect(observerYes._lastNotification.equals(notification4) === true).toEqual(true);
      expect((observerNo._lastNotification === undefined) === true).toEqual(true);
      notifier.removeAllObservers();
   });
});
****************************************

****************************************
Boxer\test\persona.test.ts
****************************************
'use strict';
// Copyright Braid technologies ltd, 2024
import { MDynamicStreamable } from '../core/StreamingFramework';
import { Persona} from '../core/Persona';
import { EIcon } from '../core/Icons';
import { IKeyGenerator } from '../core/IKeyGenerator';
import { getDefaultKeyGenerator } from '../core/IKeyGeneratorFactory';

import { expect } from 'expect';
import { describe, it } from 'mocha';

var keyGenerator: IKeyGenerator = getDefaultKeyGenerator();

var myId: string = "1234";
var myName: string = "Jon";
var myEmail: string = "jon@a.com";
var myThumbnail: string = "abcd";
var myLastSeenAt = new Date();

var someoneElsesId: string = "5678";
var someoneElsesName: string = "Barry";
var someoneElsesEmail: string = "barry@b.com";
var someoneElsesThumbnail: string = "abcdefgh";
var someoneElsesLastSeenAt = new Date(0);

describe("Persona", function () {

   var persona1: Persona, persona2: Persona, personaErr:Persona;

   persona1 = new Persona(myId, myName, myEmail, EIcon.kPersonPersona, myThumbnail, myLastSeenAt);

   persona2 = new Persona(someoneElsesId, someoneElsesName, someoneElsesEmail, EIcon.kPersonPersona, someoneElsesThumbnail, someoneElsesLastSeenAt);

   it("Needs to construct an empty object", function () {

      var personaEmpty = new Persona();

      expect(personaEmpty.name).toEqual("");
      expect(keyGenerator.couldBeAKey (personaEmpty.id)).toEqual(true);      
   });

   it("Needs to allow undefined ID", function () {

      var caught: boolean = false;
      try {
         var personaErr: Persona = new Persona(undefined, myId, myEmail, EIcon.kPersonPersona, myThumbnail, myLastSeenAt);
      } catch (e) {
         caught = true;
      }
      expect(caught).toEqual(false);
   });

   it("Needs to detect invalid ID", function () {

      var caught: boolean = false;
      try {
         var personaErr: Persona = new Persona(1 as unknown as string, myId, myEmail, EIcon.kPersonPersona, myThumbnail, myLastSeenAt);
      } catch (e) {
         caught = true;
      }
      expect(caught).toEqual(true);
   });

   it("Needs to detect invalid name", function () {

      var caught: boolean = false;
      try {
         var personaErr: Persona = new Persona(myId, undefined, myEmail, EIcon.kPersonPersona, myThumbnail, myLastSeenAt);
      } catch (e) {
         caught = true;
      }
      expect(caught).toEqual(true);
   });

   it("Needs to throw error if checkedThumbnail is not satisfied", function () {

      var personaEmpty = new Persona();

      var caught: boolean = false;
      try {
         let thumb = personaEmpty.checkedThumbnailB64;

      } catch (e) {
         caught = true;
      }
      expect(caught).toEqual(true);
   });

   it("Needs to detect invalid thumbnail", function () {

      var caught: boolean = false;
      try {
         var personaErr: Persona = new Persona(myId, myName, myEmail, EIcon.kFromBcd, "", myLastSeenAt);
      } catch (e) {
         caught = true;
      }
      expect(caught).toEqual(true);
   });

   it("Needs to compare for equality and inequality", function () {

      var personaNew: Persona = new Persona(persona1.id, persona1.name, persona1.email, EIcon.kPersonPersona, persona1.thumbnailB64, persona1.lastSeenAt);

      expect(persona1.equals(persona1)).toEqual(true);
      expect(persona1.equals(personaNew)).toEqual(true);
      expect(persona1.equals(persona2)).toEqual(false);
   });
   
   it("Needs to detect inequality on date", function () {

      var personaNew: Persona = new Persona(persona1.id, persona1.name, persona1.email, persona1.icon, persona1.thumbnailB64, new Date());

      expect(persona1.equals(personaNew)).toEqual(false);
   });

   it("Needs to correctly store attributes", function () {
         
      expect(persona1.name === myName).toEqual(true);
      expect(persona1.thumbnailB64 === myThumbnail).toEqual(true);
      expect(persona1.checkedThumbnailB64 === myThumbnail).toEqual(true);
      expect(persona1.lastSeenAt.getTime() === myLastSeenAt.getTime()).toEqual(true);
   });

   it("Needs to copy construct", function () {

      let persona2: Persona = new Persona(persona1);

      expect(persona1.equals(persona2) === true).toEqual(true);
   });

   it("Needs to correctly change attributes", function () {

      var personaNew: Persona = new Persona(persona1.id, persona1.name, persona1.email, EIcon.kPersonPersona, persona1.thumbnailB64, persona1.lastSeenAt);

      personaNew.id = someoneElsesId;
      personaNew.name = someoneElsesName;
      personaNew.email = someoneElsesEmail;
      personaNew.thumbnailB64 = someoneElsesThumbnail;
      personaNew.lastSeenAt = someoneElsesLastSeenAt;

      expect(persona2.equals (personaNew)).toEqual(true);
   });

   it("Needs to catch errors on change id attributes", function () {

      var caught: boolean = false;
      try {
         persona1.id = 1 as unknown as string;
      } catch (e) {
         caught = true;
      }
      expect(caught).toEqual(true);

   });

   it("Needs to throw errors on change name attribute", function () {

      var caught: boolean = false;
      try {
         persona1.name = undefined as unknown as string;
      } catch (e) {
         caught = true;
      }
      expect(caught).toEqual(true);

   });

   it("Needs to throw errors on change email attribute", function () {

      var caught: boolean = false;
      try {
         persona1.email = undefined as unknown as string;
      } catch (e) {
         caught = true;
      }
      expect(caught).toEqual(true);

   });

   it("Needs to throw errors on change thumbnail attribute using empty string", function () {

      var caught: boolean = false;
      try {
         persona1.thumbnailB64 = "";
      } catch (e) {
         caught = true;
      }
      expect(caught).toEqual(true);

   });

   it("Needs to throw errors on change thumbnail attribute using invalid B64 string", function () {

      var caught: boolean = false;
      try {
         persona1.thumbnailB64 = "abcde";
      } catch (e) {
         caught = true;
      }
      expect(caught).toEqual(true);
   });

   it("Needs to fall back to browser shim thumbnail attribute ", function () {

      var caught: boolean = false;
      try {
         persona1.setThumbnailB64 ("abcdefgh", true);
      } catch (e) {
         caught = true;
      }
      expect(caught).toEqual(false);

   });

   it("Needs to throw errors when falling back to browser shim thumbnail attribute ", function () {

      var caught: boolean = false;
      try {
         persona1.setThumbnailB64(1 as unknown as string, true);
      } catch (e) {
         caught = true;
      }
      expect(caught).toEqual(true);

   });

   it("Needs to test unknown status", function () {

      let unknown: Persona = Persona.unknown();
      let unknown2: Persona = new Persona(unknown.id, unknown.name, unknown.email, unknown.icon, unknown.thumbnailB64, unknown.lastSeenAt);

      expect(Persona.isUnknown(unknown)).toEqual(true);
      expect(Persona.isUnknown(unknown2)).toEqual(true);
   });

   it("Needs to convert to and from JSON()", function () {

      var stream: string = persona1.streamOut();

      var personaNew: Persona = new Persona(persona1.id, persona1.name, persona1.email, persona1.icon, persona1.thumbnailB64, persona1.lastSeenAt);
      personaNew.streamIn(stream);

      expect(persona1.equals(personaNew)).toEqual(true);
   });

   it("Needs to dynamically create Persona to and from JSON()", function () {

      var stream: string = persona1.flatten();

      var personaNew: Persona = new Persona();

      expect(persona1.equals(personaNew)).toEqual(false);

      personaNew = MDynamicStreamable.resurrect(stream) as Persona;

      expect(persona1.equals(personaNew)).toEqual(true);
   });

});
****************************************

****************************************
Boxer\test\queue.test.ts
****************************************
// Copyright Braid technologies ltd, 2024

import { expect } from 'expect';
import { describe, it } from 'mocha';

import { Queue } from '../core/Queue';

describe("Queue", function () {
  
   
   it("returns empty when initialised.", function () {
      
      let queue = new Queue<string>();
      expect(queue.peek()).toEqual(undefined); 
   });
   
   it("Enqueues & dequeues single item.", function () {

      let queue = new Queue<string>();
      queue.enqueue("One");
      expect(queue.peek()).toEqual("One");
      queue.dequeue();
      expect(queue.peek()).toEqual(undefined); 
   });
   
   it("Enqueues & dequeues multiple items.", function () {

      let queue = new Queue<string>();
      queue.enqueue("One");
      queue.enqueue("Two");
      expect(queue.peek()).toEqual("One");
      queue.dequeue();
      expect(queue.peek()).toEqual("Two");
   });
});
****************************************

****************************************
Boxer\test\sharedembedding.test.ts
****************************************
'use strict';
// Copyright Braid Technologies ltd, 2024
import { MDynamicStreamable } from '../core/StreamingFramework';
import { SharedEmbedding } from '../core/SharedEmbedding';
import { IKeyGenerator } from '../core/IKeyGenerator';
import { getDefaultKeyGenerator } from '../core/IKeyGeneratorFactory';

import { expect } from 'expect';
import { describe, it } from 'mocha';

var keyGenerator: IKeyGenerator = getDefaultKeyGenerator();

var myId: string = "1234";
var myUrl: string = "https://www.sample.com";
var myConversationId = "1234";
var myEmail = "jon@mail.com";

var someoneElsesId: string = "5678";
var someoneElsesUrl: string = "https://www.anothersample.com";
var someoneElsesConversationId = "5678";
var someoneElsesEmail = "barry@mail.com";

describe("SharedEmbedding", function () {

   var sharedEmbedding1: SharedEmbedding, sharedEmbedding2: SharedEmbedding, messageErr:SharedEmbedding;

   sharedEmbedding1 = new SharedEmbedding(myId, myUrl, myConversationId, undefined);

   sharedEmbedding2 = new SharedEmbedding(someoneElsesId, someoneElsesUrl, someoneElsesConversationId, undefined);

   it("Needs to construct an empty object", function () {

      var messageEmpty = new SharedEmbedding();

      expect(typeof (messageEmpty.url)).toEqual('undefined');
      expect(keyGenerator.couldBeAKey (messageEmpty.id)).toEqual(true);      
   });

   it("Needs to allow undefined ID", function () {

      var caught: boolean = false;
      try {
         messageErr = new SharedEmbedding(undefined, myUrl, myConversationId, undefined);
      } catch (e) {
         caught = true;
      }
      expect(caught).toEqual(false);
   });

   it("Needs to detect invalid ID", function () {

      var caught: boolean = false;
      try {
         messageErr = new SharedEmbedding(1 as unknown as string, myUrl, myConversationId, undefined);
      } catch (e) {
         caught = true;
      }
      expect(caught).toEqual(true);
   });


   it("Needs to compare for equality and inequality", function () {

      var messageNew: SharedEmbedding = new SharedEmbedding(sharedEmbedding1.id, sharedEmbedding1.url, 
                                                            sharedEmbedding1.conversationId,  
                                                            sharedEmbedding1.likes);

      expect(sharedEmbedding1.equals(sharedEmbedding1)).toEqual(true);
      expect(sharedEmbedding1.equals(messageNew)).toEqual(true);
      expect(sharedEmbedding1.equals(sharedEmbedding2)).toEqual(false);
   });
   

   it("Needs to throw error if like on undefined url", function () {

      var messageEmpty = new SharedEmbedding();

      var caught: boolean = false;
      try {
         let thumb = messageEmpty.like (myEmail);

      } catch (e) {
         caught = true;
      }
      expect(caught).toEqual(true);
   });

   it("Needs to correctly store attributes", function () {
         
      expect(sharedEmbedding1.url === myUrl).toEqual(true);
      expect(sharedEmbedding1.netLikeCount === 0).toEqual(true);
   });

   it("Needs to copy construct", function () {

      let embedding2: SharedEmbedding = new SharedEmbedding(sharedEmbedding1);

      expect(sharedEmbedding1.equals(embedding2) === true).toEqual(true);
   });

   it("Needs to correctly change attributes", function () {

      var messageNew: SharedEmbedding = new SharedEmbedding(sharedEmbedding1.id, sharedEmbedding1.url, 
                                                            sharedEmbedding1.conversationId, 
                                                            sharedEmbedding1.likes);

      messageNew.id = someoneElsesId;
      messageNew.url = someoneElsesUrl;
      messageNew.conversationId = someoneElsesConversationId;

      expect(sharedEmbedding2.equals (messageNew)).toEqual(true);
   });

   it("Needs to catch errors on change id attributes", function () {

      var caught: boolean = false;
      try {
         sharedEmbedding1.id = 1 as unknown as string;
      } catch (e) {
         caught = true;
      }
      expect(caught).toEqual(true);

   });

   it("Needs to convert to and from JSON()", function () {

      var stream: string = sharedEmbedding1.streamOut();

      var messageNew: SharedEmbedding = new SharedEmbedding(sharedEmbedding1.id, sharedEmbedding1.url, 
                                                            sharedEmbedding1.conversationId,
                                                            sharedEmbedding1.likes);

      messageNew.streamIn(stream);

      expect(sharedEmbedding1.equals(messageNew)).toEqual(true);
   });  

   it("Needs to dynamically create SharedEmbedding to and from JSON()", function () {

      var stream: string = sharedEmbedding1.flatten();

      var messageNew: SharedEmbedding = new SharedEmbedding();

      expect(sharedEmbedding1.equals(messageNew)).toEqual(false);

      messageNew = MDynamicStreamable.resurrect(stream) as SharedEmbedding;

      expect(sharedEmbedding1.equals(messageNew)).toEqual(true);
   });
    
   it("Needs to process a single like", function () {

      var messageEmpty = new SharedEmbedding();
      messageEmpty.url = sharedEmbedding1.url;

      messageEmpty.like(myEmail);

      expect(messageEmpty.netLikeCount).toEqual(1);  
      expect(messageEmpty.isLikedBy (myEmail)).toEqual (true);  
      expect(messageEmpty.isLikedBy ("blah")).toEqual (false);      
   });

   it("Needs to process a duplicate like", function () {

      var messageEmpty = new SharedEmbedding();
      messageEmpty.url = sharedEmbedding1.url;

      messageEmpty.like(myEmail);
      messageEmpty.like(myEmail);

      expect(messageEmpty.netLikeCount).toEqual(1);     
   });   

   it("Needs to process a single unslike", function () {

      var messageEmpty = new SharedEmbedding();
      messageEmpty.url = sharedEmbedding1.url;

      messageEmpty.unlike(myEmail);

      expect(messageEmpty.netLikeCount).toEqual(0);     
   });

   it("Needs to process a duplicate unlike", function () {

      var messageEmpty = new SharedEmbedding();
      messageEmpty.url = sharedEmbedding1.url;

      messageEmpty.like(myEmail);      
      messageEmpty.unlike(myEmail);
      messageEmpty.unlike(myEmail);

      expect(messageEmpty.netLikeCount).toEqual(0);     
   });

   it("Needs to process a like then unlike", function () {

      var messageEmpty = new SharedEmbedding();
      messageEmpty.url = sharedEmbedding1.url;

      messageEmpty.like(myEmail);
      messageEmpty.unlike(myEmail);
      
      expect(messageEmpty.netLikeCount).toEqual(0);     
   });    
        
});
****************************************

****************************************
Boxer\test\uuid.test.ts
****************************************
'use strict';
// Copyright Braid technologies ltd, 2024
import { expect } from 'expect';
import { describe, it } from 'mocha';
import { IKeyGenerator } from '../core/IKeyGenerator';
import { getDefaultKeyGenerator } from '../core/IKeyGeneratorFactory';

const badUuid = "9a0583f5xca56-421b-8545-aa23032d6c93"

var keyGenerator: IKeyGenerator = getDefaultKeyGenerator();

describe("Uuid", function () {

   it("Needs to create UUID", function () {

      var newUuid: string = keyGenerator.generateKey();
      expect(newUuid.length == 36).toEqual(true);
   });

   it("Needs to test valid UUID", function () {

      var newUuid: string = keyGenerator.generateKey();
      expect(keyGenerator.couldBeAKey(newUuid)).toEqual(true);

      expect(keyGenerator.couldBeAKey("")).toEqual(false);
      expect(keyGenerator.couldBeAKey(badUuid)).toEqual(false);
   });   

   it("Needs to generate a secret value", function () {

      var newSecret: string = keyGenerator.generateSecret();

      expect(newSecret.length > 0).toEqual(true);
   });    
});

describe("Uuid - without Blob", function () {

   var oldBlob: any = global.Blob;

   beforeEach(() => {
      (global.Blob as any) = undefined;
   });

   afterEach(() => {
      (global.Blob as any) = oldBlob;
   });

   it("Needs to create UUID without Blob", function () {

      var newUuid: string = keyGenerator.generateKey();

      expect(newUuid.length == 36).toEqual(true);
   });

   it("Needs to test valid UUID without Blob", function () {

      var newUuid: string = keyGenerator.generateKey();
      expect(keyGenerator.couldBeAKey(newUuid)).toEqual(true);

      expect(keyGenerator.couldBeAKey("")).toEqual(false);
      expect(keyGenerator.couldBeAKey(badUuid)).toEqual(false);
   });
});
****************************************

****************************************
Boxer\ui\AnimatedIconButton.tsx
****************************************
/*! Copyright Braid Technologies 2024 */

// React
import React, { useState, useEffect } from 'react';

// Fluent
import {
   makeStyles, 
   Menu,
   MenuButton,
   MenuItem,
   MenuDivider,
   MenuList,
   MenuPopover,
   MenuTrigger,   
} from '@fluentui/react-components';

import {
   Lightbulb24Filled
} from '@fluentui/react-icons';
import { EUIStrings } from './UIStrings';

const animatedGlowIcon = makeStyles({
  root: {        
     boxShadow: '0px 0px 0px 0px white;'
  },
});

export enum EAnimatedIconButtonTypes { // Must mirror MessageBarIntent, with addition of 'nothing' if you dont want to display a message. 
   kLightBulb
}

interface IAnimatedIconButtonProps {
   animate: boolean;
   icon: EAnimatedIconButtonTypes;  
   promptAnimated: string;
   promptUnamimated: string; 
   onClick () : void;
   onCancel () : void;
}

let animatedColourSequence = ['#333333', '#444444', '#555555', '#666666', '#777777', '#888888', '#999999', '#AAAAAA', '#BBBBBB', '#CCCCCC', '#DDDDDD', '#EEEEEE', '#FFFFFF', '#FFFFFF', '#FFFFFF', '#FFFFFF'];
let staticColourSeqeunce = ['#333333'];

// create a forceUpdate hook
// https://stackoverflow.com/questions/46240647/how-to-force-a-functional-react-component-to-render
function useForceUpdate() {
   const [value, setValue] = useState(0); // simple integer state
   return () => setValue(value => value + 1); // update state to force render
}

export const AnimatedIconButton = (props: IAnimatedIconButtonProps) => {

   const [seq, setSeq] = useState<number>(0);
   let localSeq = seq;

   // call the force update hook 
   const forceUpdate = useForceUpdate(); 
      
   function animateColours () : void {
      setSeq (localSeq + 1);
      localSeq = localSeq + 1;
      if (localSeq > animatedColourSequence.length) {
         localSeq = 0;
         setSeq (0);
      }     
      forceUpdate ();             
   } 

   useEffect(() => {
      const interval = setInterval(animateColours, 100);
     
      return (() => {
         if (interval)
            clearInterval(interval);
      });
   }, []);

   const animatedGlowIconClasses = animatedGlowIcon();

   const onClick = (ev: React.MouseEvent<HTMLDivElement>) => {
      props.onClick ();
   }
   const onCancel = (ev: React.MouseEvent<HTMLDivElement>) => {
      props.onCancel ();
   }   

   return (
         <Menu>
            <MenuTrigger disableButtonEnhancement>
               <MenuButton  disabled={!props.animate}
                  icon={<Lightbulb24Filled 
                  className={animatedGlowIconClasses.root} 
                  primaryFill={props.animate ? animatedColourSequence[seq] : staticColourSeqeunce[0]}/>} 
                   />
            </MenuTrigger>

            <MenuPopover>
               <MenuList>
                  <MenuItem onClick={onClick}>{props.promptAnimated}</MenuItem>
                  <MenuDivider/>
                  <MenuItem onClick={onCancel}>{EUIStrings.kNoThanks}</MenuItem>
               </MenuList>
            </MenuPopover>
         </Menu>              
  );

         /* 
         <Tooltip content={props.animate ? props.promptAnimated : props.promptUnamimated} relationship="label">
         <Button 
            disabled={!props.animate}
            icon={<Lightbulb24Filled 
               className={animatedGlowIconClasses.root} 
               primaryFill={props.animate ? animatedColourSequence[seq] : staticColourSeqeunce[0]}/>} 
            onClick={onClick}/>       
            </Tooltip> 
            */  
};
****************************************

****************************************
Boxer\ui\AppEntry.tsx
****************************************
/*! Copyright Braid Technologies 2024 */

// React
import React, { useState } from 'react';
import { createRoot } from "react-dom/client";

// Fluent
import {
   FluentProvider, teamsDarkTheme, makeStyles
} from '@fluentui/react-components';

import { getDefaultLoginEnvironment } from '../../CommonTs/src/IEnvironmentFactory';

// Local
import { Persona } from '../core/Persona';
import { EIcon } from '../core/Icons';
import { JoinDetails } from '../core/JoinDetails';
import { EUIStrings } from './UIStrings';
import { innerColumnStyles } from './ColumnStyles';
import { EMainPageMessageTypes, MainPageMessageRow } from './MainPageMessage';
import { JoinPane } from './JoinPane';
import { ConversationControllerRow } from './ConversationController';
import { SessionKey, ConversationKey } from '../core/Keys';
import { getDefaultKeyGenerator } from '../core/IKeyGeneratorFactory';

export interface IAppProps {

}

const fluidFillPageStyles = makeStyles({
   root: {
      minWidth: "512px",  // Ask for enough for at least the error message, plus don't crowd the entry text box - this is a trial value at 512    
   },
});

const pageOuterStyles = makeStyles({
   root: {
      display: 'flex',
      flexDirection: 'row',
      alignItems: 'stretch',  /* for a row, the main axis is vertical, flex-end is items aligned to the bottom of the row */
      justifyContent: 'center', /* for a row, the cross-axis is horizontal, center means vertically centered */
      height: '100vh', /* fill the screen with flex layout */ 
      width: '100%',  /* fill the screen with flex layout */       
      marginLeft: '0px',
      marginRight: '0px',
      marginTop: '0px',
      marginBottom: '0px',
      paddingLeft: '20px',
      paddingRight: '20px',
      paddingTop: '20px',
      paddingBottom: '20px',
      webkitTextSizeAdjust: '100%'
   },
});

export const App = (props: IAppProps) => {

   let localUserPersona = new Persona ();
   localUserPersona.icon = EIcon.kPersonPersona;

   // Environment.override (EEnvironment.kProduction);

   // This little block attempts to pick up a joinpath from the URL after the #value
   // If it looks valid, we pre-populate the joining form
   // *** BE CAREFUL HERE - CAN GENERATE INFINITE RE_RENDERING ***
   var hashValue: string = "";
   if (window.location.hash)
      hashValue = window.location.hash.substring(1);
   
   let joinAttempt = new JoinDetails (hashValue);
   localUserPersona.email = joinAttempt.email; 
   localUserPersona.name = joinAttempt.name;
   const secret = joinAttempt.secret;

   const [lastMessage, setLastMessage] = useState<string>("");
   const [lastMessageType, setLastMessageType] = useState<EMainPageMessageTypes> (EMainPageMessageTypes.kNothing);
   const [lastMessageIsDismissable, setLastMessageIsDismissable] = useState<boolean>(true);   
   
   const [sessionKey, setSessionKey] = useState<SessionKey>(joinAttempt.session);
   const [conversationKey, setConversationKey] = useState<ConversationKey>(joinAttempt.conversation);

   const fluidFillPageClasses = fluidFillPageStyles();
   const pageOuterClasses = pageOuterStyles();
   const innerColumnClasses = innerColumnStyles();
   
   let keyGenerator = getDefaultKeyGenerator();

   if (secret.length > 0 
      && (!keyGenerator.matchesSavedSecret (secret)) 
      && lastMessage !== EUIStrings.kSecretError) {

      setLastMessage (EUIStrings.kSecretError);
      setLastMessageType (EMainPageMessageTypes.kWarning);    
      setLastMessageIsDismissable(false);            
   }

   function onConnect (sessionKey_: SessionKey, conversationKey_: ConversationKey, secret_: string) : void  {
      
      setLastMessage ("");
      setLastMessageType (EMainPageMessageTypes.kNothing);   
      setLastMessageIsDismissable(true);  

      setSessionKey (sessionKey_);
      setConversationKey (conversationKey_);

      keyGenerator.saveSecret (secret_);

      // Start the login process by redirecting to the login API
      // with no email address and no name bcs thats what we get from login
      let query = JoinDetails.toString ("", "", sessionKey_, conversationKey_, secret_);

      let environment = getDefaultLoginEnvironment ();
      let loginUrl = environment.loginWithLinkedInApi();

      location.replace (loginUrl + '?' + query);
   }

   function onConnectError (hint_: string) : void  {

      setLastMessage (EUIStrings.kJoinApiError);
      setLastMessageType (EMainPageMessageTypes.kError);
   }

   function onFluidError (hint_: string) : void  {

      setLastMessage (EUIStrings.kJoinApiError);
      setLastMessageType (EMainPageMessageTypes.kError);
      setLastMessageIsDismissable(true);        

      // Clear the coversation key - takes us back to the join page.
      setConversationKey (new ConversationKey (""));      
   }
   
   function onAiError (hint_: string) : void  {

      setLastMessage (EUIStrings.kAiApiError);
      setLastMessageType (EMainPageMessageTypes.kError);
      setLastMessageIsDismissable(true);        
   }

   function onDismissMessage () : void {

      setLastMessage ("");
      setLastMessageType (EMainPageMessageTypes.kNothing);
      setLastMessageIsDismissable(true);        
   }

   return (
         <FluentProvider theme={teamsDarkTheme} className={fluidFillPageClasses.root}>            
            <div className={pageOuterClasses.root}>    
               <div className={innerColumnClasses.root}>             
      
                  <MainPageMessageRow 
                     intent={lastMessageType} 
                     text={lastMessage} 
                     dismissable={lastMessageIsDismissable}
                     onDismiss={onDismissMessage}/>
      
                  <ConversationControllerRow 
                     sessionKey={sessionKey}
                     conversationKey={conversationKey}
                     secret={secret}
                     localPersona={localUserPersona}
                     onFluidError={onFluidError}
                     onAiError={onAiError}>                          
                  </ConversationControllerRow>      

                  <JoinPane 
                     sessionKey={sessionKey} 
                     conversationKey={conversationKey}
                     secret={secret}                     
                     joinPersona={localUserPersona}                     
                     onConnect={onConnect} 
                     onConnectError={onConnectError}>                     
                  </JoinPane>   

               </div>
            </div>
         </FluentProvider>         
      );
}

// This allows code to be loaded in node.js for tests, even if we dont run actual React methods
if (document !== undefined && document.getElementById !== undefined) {
   const root = createRoot(document.getElementById("reactRoot") as HTMLElement);
   root.render(
      <App />
   ); 

}
****************************************

****************************************
Boxer\ui\ColumnStyles.tsx
****************************************
// Copyright (c) 2024 Braid Technologies Ltd

// Fluent
import {
   FluentProvider, teamsDarkTheme, makeStyles, Text
} from '@fluentui/react-components';

import { EUIStrings } from './UIStrings';

export const innerColumnStyles = makeStyles({
   root: {
      display: 'flex',
      flexDirection: 'column',
      justifyContent: 'flex-start',    // start layout at the top       
      alignItems: 'center',
      maxWidth: EUIStrings.kMaxColumnWidth
   },
});

export const innerColumnMidStyles = makeStyles({
   root: {    
      display: 'flex',
      flexDirection: 'row'
   },
});

export const innerColumnFooterStyles = makeStyles({
   root: {    
      display: 'flex',
      flexDirection: 'row',
      marginTop: 'auto',
      alignSelf: 'flex-end'      
   },
});

export const textFieldStyles = makeStyles({
   root: {    
      width: '100%'
   },
});
****************************************

****************************************
Boxer\ui\ConversationController.tsx
****************************************
/*! Copyright Braid Technologies 2024 */
// The ConversationController manages the interaction with the shared data structures, and drives a ConversationView
// ConversationPage is largely a passive view, although it does notify the controller if the local users adds a message.

// React
import React, { useState, useReducer } from 'react';

// Local
import { throwIfUndefined } from '../core/Asserts';
import { Persona } from '../core/Persona';
import { Message } from '../core/Message';
import { SharedEmbedding, findInMap } from '../core/SharedEmbedding';
import { CaucusOf } from '../core/CaucusFramework';
import { SessionKey, ConversationKey } from '../core/Keys';
import { JoinDetails } from '../core/JoinDetails';
import { JoinPageValidator } from '../core/JoinPageValidator';
import { ConversationView } from './ConversationPane';
import { BraidFluidConnection } from '../core/BoxerFluidConnection';
import { Interest, NotificationFor, NotificationRouterFor, ObserverInterest } from '../core/NotificationFramework';
import { AIConnection } from '../core/AIConnection';
import { EUIStrings, initialQuestions } from './UIStrings';
import { EConfigNumbers, EConfigStrings } from '../core/ConfigStrings';
import { getRecordRepository } from '../core/IActivityRepositoryFactory';
import { IStoredUrlActivity, IStoredLikeUrlActivity, IStoredMessageActivity, 
         urlActivityRecordClassName, urlLikeActivityRecordClassName, messageActivityRecordClassName,
         urlActivityRecordSchemaNumber, urlLikeActivityRecordSchemaNumber, messageActivityRecordSchemaNumber } from '../core/ActivityRecord';

import { getDefaultKeyGenerator } from '../core/IKeyGeneratorFactory';
import { getDetaultAdminRepository} from '../core/IAdminRepository';
import { makeSummaryCall } from '../core/ApiCalls';

import { FindEnrichedChunkApi } from '../../CommonTs/src/FindEnrichedChunkApi';
import { getDefaultEnvironment } from '../../CommonTs/src/IEnvironmentFactory';
import { IEnrichedChunkSummary, EChunkRepository, kDefaultSimilarityThreshold } from '../../CommonTs/src/EnrichedChunk';
import { EStorableApplicationIds } from '../../CommonTs/src/IStorable';

export interface IConversationControllerProps {

   sessionKey: SessionKey;
   conversationKey: ConversationKey;
   secret: string;
   localPersona: Persona; 
   onFluidError (hint_: string) : void;   
   onAiError (hint_: string) : void;     
}

let firstLoad = true;

export const ConversationControllerRow = (props: IConversationControllerProps) => {

   const [conversation, setConversation] = useState<Array<Message>>(new Array<Message>());
   const [audience, setAudience] = useState<Map<string, Persona>>(new Map<string, Persona>());
   const [sharedEmbeddings, setSharedEmbeddings] = useState<Map<string, SharedEmbedding>>(new Map<string, SharedEmbedding>());   
   const [fluidConnection, setFluidConnection] = useState<BraidFluidConnection | undefined>(undefined);
   const [joining, setJoining] = useState<boolean> (false);
   const [conversationKey, setConversationKey] = useState<ConversationKey> (props.conversationKey);   
   const [isBusy, setIsBusy] = useState<boolean>(false);
   const [suggested, setSuggested] = useState<Message|undefined>(undefined);  
   const [key, setKey] = useState<number> (0);
   const [suppressScroll, setSuppressScroll] = useState<boolean> (false);
   const [chatLevel, setChatLevel] = useState<number>(2);   
   const [userIsAdmin, setUserIsAdmin] = useState<boolean> (false);

   // async call to see if the local user is an administrator
   let repository = getDetaultAdminRepository();
   repository.isAdmin (props.localPersona).then ((result) => {
      if (userIsAdmin != result) {
         setUserIsAdmin (result)
      }
   });

   const [, updateState] = React.useState<object>();
   const forceUpdate = React.useCallback(() => updateState({}), []);

   function addMessage (fluidMessagesConnection_: BraidFluidConnection, message_: Message) : void {

      fluidMessagesConnection_.messageCaucus().add (message_.id, message_);

      // Save state and force a refresh                  
      let messageArray = fluidMessagesConnection_.messageCaucus().currentAsArray();      
      setConversation (messageArray);                
      forceUpdate ();   
      setSuppressScroll(false);      
   }

   function hasRecentHepfulStart (fluidMessagesConnection_: BraidFluidConnection) : boolean {

      let messageArray = fluidMessagesConnection_.messageCaucus().currentAsArray();  

      let currentTime = new Date();
      
      for (let i = 0; i < messageArray.length; i++) {

         if (messageArray[i].authorId === EConfigStrings.kLLMGuid
            && messageArray[i].isUnPrompted()) {

               let messageTime = messageArray[i].sentAt;

               let difference = currentTime.getTime() - messageTime.getTime();

               if (difference < EConfigNumbers.kHelpfulPromptMinimumGapMins * 1000) {
                  return true;
               }
         }
      }

      return false;
   }

   function makeInitialSuggestion (fluidMessagesConnection_: BraidFluidConnection, isInitial: boolean) : void {

      setIsBusy (true);

      setTimeout(() => {

         let messageArray = fluidMessagesConnection_.messageCaucus().currentAsArray(); 

         if (messageArray.length > EConfigNumbers.kMinMessagesforRecap) {
            let message = new Message();

            message.authorId = EConfigStrings.kLLMGuid;            
            message.text = EUIStrings.kWelcomeWouldYouLikeRecap;
            message.sentAt = new Date();   
            
            setSuggested(message);
         }
         else
         if (! hasRecentHepfulStart (fluidMessagesConnection_)) {
            let message = new Message();

            message.authorId = EConfigStrings.kLLMGuid;
            const randomElement = initialQuestions[Math.floor(Math.random() * initialQuestions.length)];
            message.text = randomElement;
            message.sentAt = new Date();   
            
            setSuggested(message);
         } 
         setIsBusy (false);

      }, EConfigNumbers.kInitialHelpfulPromptDelayMsecs);  
   }

   function initialiseConnectionState (fluidMessagesConnection_: BraidFluidConnection, 
                                       conversationKey_: ConversationKey) : void {

      setFluidConnection (fluidMessagesConnection_);  

      // Notifications function for adds, removes, changes
      // Warning - this function must be declared after the call to setFluidConnection(), else it binds to the original value - which is always undefined. 
      // **************************************
      let remoteChanged = function (interest: Interest, data: NotificationFor<Message>) : void {

         let offlineRefresh = function () {       

            if (typeof fluidMessagesConnection_ !== "undefined") {

               throwIfUndefined(fluidMessagesConnection_);   // This is just to keep the compiler happy with statement below. 
               refreshLocalState (fluidMessagesConnection_);                      
            }
         }

         offlineRefresh();    
         forceUpdate ();            
      }      

      refreshLocalState (fluidMessagesConnection_);       

      let changeObserver = new NotificationRouterFor<Message> (remoteChanged);

      let changeObserverInterest = new ObserverInterest (changeObserver, CaucusOf.caucusMemberChangedInterest);
      let addedObserverInterest = new ObserverInterest (changeObserver, CaucusOf.caucusMemberAddedInterest);      
      let removedObserverInterest = new ObserverInterest (changeObserver, CaucusOf.caucusMemberRemovedInterest);

      // Hook up a notification function for adds, removes, changes in the message list       
      fluidMessagesConnection_.messageCaucus().addObserver (changeObserverInterest);
      fluidMessagesConnection_.messageCaucus().addObserver (addedObserverInterest);   
      fluidMessagesConnection_.messageCaucus().addObserver (removedObserverInterest);  
      
      // Hook up a notification function for adds, removes, changes in the participant list 
      fluidMessagesConnection_.participantCaucus().addObserver (changeObserverInterest);
      fluidMessagesConnection_.participantCaucus().addObserver (addedObserverInterest);   
      fluidMessagesConnection_.participantCaucus().addObserver (removedObserverInterest);     
      
      // Hook up a notification function for adds, removes, changes in the list of shared embeddings 
      fluidMessagesConnection_.sharedEmbeddingCaucus().addObserver (changeObserverInterest);
      fluidMessagesConnection_.sharedEmbeddingCaucus().addObserver (addedObserverInterest);   
      fluidMessagesConnection_.sharedEmbeddingCaucus().addObserver (removedObserverInterest);         
      
      setConversationKey (conversationKey_);  

      makeInitialSuggestion (fluidMessagesConnection_, true);    
      
      /* Volume testing - works fine as of May 30 204 - few seconds to load 1,000 messages, view renders at interactive speed. 
      if (firstLoad && Environment.environment() === EEnvironment.kLocal) {
         
         for (let i = 0; i < 1000; i++) {
            let volumeTestMessage = new Message ();
            volumeTestMessage.authorId = EConfigStrings.kLLMGuid;
            volumeTestMessage.text = i.toString();
            volumeTestMessage.sentAt = new Date();        
            fluidMessagesConnection_.messageCaucus().add (volumeTestMessage.id, volumeTestMessage);              
         }
   
         firstLoad = false;
      }   
      */    
   }

   let validater = new JoinPageValidator();

   if (validater.canAttemptJoin (props.localPersona.email, props.localPersona.name, 
                                     props.sessionKey, props.conversationKey) && 
      fluidConnection === undefined 
      && !joining) {

      setJoining(true);
      let fluidMessagesConnection = new BraidFluidConnection ( props.localPersona);
      
      if (! (props.conversationKey.looksValidConversationKey())) {

         fluidMessagesConnection.createNew (props.sessionKey, false).then (conversationKey_ => {
        
            initialiseConnectionState (fluidMessagesConnection, conversationKey_);
            setJoining (false);

         }).catch ((e : any) => {
         
            props.onFluidError ("Error creating new conversation, session: " + props.sessionKey.toString() + ".");
            setJoining (false);
         })
      }
      else {

         fluidMessagesConnection.attachToExisting (props.sessionKey, conversationKey, false).then (conversationKey_ => {

            initialiseConnectionState (fluidMessagesConnection, conversationKey_);
         
            setJoining (false);

         }).catch ((e: any) => {
         
            props.onFluidError (e? e.toString() : EUIStrings.kJoinApiError + " :" + conversationKey.toString() + ".");
            setJoining (false);
         })
      }
   }

   audience.set (props.localPersona.id, props.localPersona);  
   
   function refreshLocalState (fluidConnection_ : BraidFluidConnection) : void {

      // Save state and force a refresh
      let messageArray = fluidConnection_.messageCaucus().currentAsArray();   
      setConversation (messageArray);           
      let audienceMap = fluidConnection_.participantCaucus().current();  
      setAudience (audienceMap);            
      let sharedEmbeddingMap = fluidConnection_.sharedEmbeddingCaucus().current();
      setSharedEmbeddings (sharedEmbeddingMap);       
   }

   function refreshAndForceUpdate () : void {

      throwIfUndefined (fluidConnection);    
      
      refreshLocalState (fluidConnection);
                    
      forceUpdate ();       
   }

   function onSetBraidChattiness (level: number, max: number) : void {

      setChatLevel (level);         
   }

   function onExitConversation () : void {

      let query = JoinDetails.toString ("", "", props.sessionKey, new ConversationKey(""), "");
      location.replace (EConfigStrings.kHomeRelativeUrl + '#' + query);   
      location.reload();          
   }

   function onTrimConversation () : void {

      throwIfUndefined (fluidConnection);
      let fluidMessagesConnection : BraidFluidConnection = fluidConnection;      
      fluidMessagesConnection.resetMessages ();  
      refreshAndForceUpdate ();        
   }

   function onUnlikeUrl (url_: string) : void {
      
      let map = fluidConnection?.sharedEmbeddingCaucus().current();
      if (map) {
         let item = findInMap (url_, map);
         if (item) {
            item.unlike (props.localPersona.name);
            fluidConnection?.sharedEmbeddingCaucus().amend (item.id, item);           
         }
         else {
            item = new SharedEmbedding ();
            item.url = url_;
            item.unlike (props.localPersona.name);
            fluidConnection?.sharedEmbeddingCaucus().add (item.id, item);                            
         }
         map.set (item.id, item) ;
         setSharedEmbeddings (map);   
         setSuppressScroll(true);             
         forceUpdate();     
      }

      let keyGenerator = getDefaultKeyGenerator();

      let repository = getRecordRepository(props.sessionKey);
      let email = props.localPersona.email;

      let record : IStoredLikeUrlActivity= {
         id : keyGenerator.generateKey(),
         applicationId: EStorableApplicationIds.kBoxer,
         contextId: props.conversationKey.toString(),
         userId: email,
         created: new Date().toUTCString(),
         amended: new Date().toUTCString(),  
         functionalSearchKey: undefined,  
         className: urlLikeActivityRecordClassName,
         schemaVersion: urlLikeActivityRecordSchemaNumber, 
         url: url_,
         like: false  
      };
      repository.save (record);                                                            
   }

   function onLikeUrl (url_: string) : void {
      
      let keyGenerator = getDefaultKeyGenerator();

      let repository = getRecordRepository(props.sessionKey);
      let email = props.localPersona.email;

      let record : IStoredLikeUrlActivity= {
         id : keyGenerator.generateKey(), 
         applicationId: EStorableApplicationIds.kBoxer,
         contextId: props.conversationKey.toString(),
         userId: email,
         created: new Date().toUTCString(),
         amended: new Date().toUTCString(),  
         functionalSearchKey: undefined, 
         className: urlLikeActivityRecordClassName,
         schemaVersion: urlLikeActivityRecordSchemaNumber, 
         url: url_,
         like: true  
      };
      repository.save (record); 

      onPostiveUseOfUrl (url_);                                                            
   }

   function onClickUrl (url_: string) : void {
      
      let keyGenerator = getDefaultKeyGenerator();

      let repository = getRecordRepository(props.sessionKey);
      let email = props.localPersona.email;
      let record : IStoredUrlActivity = {
         id : keyGenerator.generateKey(), 
         applicationId: EStorableApplicationIds.kBoxer,
         contextId: props.conversationKey.toString(),
         userId: email,
         created: new Date().toUTCString(),
         amended: new Date().toUTCString(),  
         functionalSearchKey: undefined,  
         className: urlActivityRecordClassName,
         schemaVersion: urlActivityRecordSchemaNumber, 
         url: url_ 
      };
      repository.save (record); 

      onPostiveUseOfUrl (url_);                                                            
   }

   function onPostiveUseOfUrl (url_: string) : void {
      
      let map = fluidConnection?.sharedEmbeddingCaucus().current();
      if (map) {
         let item = findInMap (url_, map);
         if (item) {
            item.like (props.localPersona.name);
            fluidConnection?.sharedEmbeddingCaucus().amend (item.id, item);              
         }
         else {
            item = new SharedEmbedding ();
            item.url = url_;
            item.like (props.localPersona.name);
            fluidConnection?.sharedEmbeddingCaucus().add (item.id, item);            
         }
         map.set (item.id, item) ;
         setSharedEmbeddings (map);  
         setSuppressScroll(true);          
         forceUpdate();                   
      }

      // Get the summary of the URL the user clicked on      
      let api = new FindEnrichedChunkApi (getDefaultEnvironment(), props.sessionKey.toString());
      let query = {
         repositoryId: EChunkRepository.kBoxer,
         url: url_,
         maxCount: 1,
         similarityThreshold : kDefaultSimilarityThreshold
      }
      let summary = api.findChunkFromUrl (query);
      
      summary.then ((enriched: IEnrichedChunkSummary | undefined) => {

         if (enriched) {
            let summaryText = enriched.summary;
         
            let connection = new AIConnection (props.sessionKey);

            // Ask the LLM for a question based on the summary 
            connection.makeFollowUpCall (summaryText).then ((result_: Message | undefined) => {                                                                               
               if (result_) {
                  result_.authorId = props.localPersona.id;
                  setSuggested (result_);
               }         
            });  
         }
      });                                                                
   }

   function onDeleteMessage (id: string) : void {

      throwIfUndefined (fluidConnection);
      let fluidMessagesConnection : BraidFluidConnection = fluidConnection;      
      fluidMessagesConnection.messageCaucus().remove (id);  
      
      let repository = getRecordRepository(props.sessionKey);
      repository.removeMessageRecord (id); 

      setSuppressScroll(true);        

      refreshAndForceUpdate ();   
   }   

   function onAddSuggestedContent () {

      throwIfUndefined (fluidConnection);

      throwIfUndefined (suggested);      
      suggested.sentAt = new Date(); // Need to reset date so it goes at the end. 

      if (suggested.chunks && suggested.chunks.length > 0) {
         // If we have attached chunks, its a full message that we just replay
         addMessage (fluidConnection, suggested); 
      }
      else
      if (suggested.text === EUIStrings.kWelcomeWouldYouLikeRecap) {

         suggested.text = EUIStrings.kSummarising;
         addMessage (fluidConnection, suggested); 
         suggested.hookLiveAppend (onStreamedUpdate);         
         setIsBusy(true);    
         
         // If it is an offer of a summary, make a transcript then post it for summarisation
         let transcript = AIConnection.buildTranscript (fluidConnection.messageCaucus().currentAsArray(), 
                                                        fluidConnection.participantCaucus().current());  

         makeSummaryCall (props.sessionKey, transcript).then ((summary: string | undefined) => {

            if (summary) {
               suggested.text = summary;
               fluidConnection.messageCaucus().amend (suggested.id, suggested);                                 
            }
            suggested.unhookLiveAppend();    
            setIsBusy(false);                        

         }).catch ((e: any) => {
            suggested.unhookLiveAppend();  
            setIsBusy(false);                
         });
      }
      else {
         // else it is a suggested question, so we play it as a message that makes a request to the LLM, which sends all the context with it to the LLM
         let fullMessage = EConfigStrings.kLLMRequestSignature + " " + suggested.text;
         onSend (fullMessage);
      }

      setSuggested (undefined);
   }

   function onCancelSuggestedContent () {
      setSuggested (undefined);
   }
 
   // Hook the message for updates via streaming
   // When we get an update, push it to shared memory for other clients and then refresh the local UI
   let onStreamedUpdate = function  (message: Message, more: boolean) {

      if (fluidConnection) {

         fluidConnection.messageCaucus().amend (message.id, message); 

         setKey (Math.random());
      }
      if (!more)
         message.unhookLiveAppend(); 
   }     

   function onSend (messageText_: string) : void {

      throwIfUndefined (fluidConnection);
      let fluidMessagesConnection : BraidFluidConnection = fluidConnection;       

      let keyGenerator = getDefaultKeyGenerator();     

      // set up a message to append
      let message = new Message ();
      message.authorId = props.localPersona.id;
      message.text = messageText_;
      message.sentAt = new Date();

      // Push it to shared data
      fluidMessagesConnection.messageCaucus().add (message.id, message);
      setSuppressScroll (false);

      // Update the timestamp of the person who posted it
      let storedPerson = fluidMessagesConnection.participantCaucus().get (props.localPersona.id);
      storedPerson.lastSeenAt = message.sentAt;
      fluidMessagesConnection.participantCaucus().amend (storedPerson.id, storedPerson);    
      
      // Save it to the DB - async 
      let repository = getRecordRepository(props.sessionKey);
      let email = props.localPersona.email;

      let record : IStoredMessageActivity = {
         id : message.id, 
         applicationId: EStorableApplicationIds.kBoxer,
         contextId: props.conversationKey.toString(),
         userId: email,
         created: new Date().toUTCString(),
         amended: new Date().toUTCString(),  
         functionalSearchKey: undefined,         
         className: messageActivityRecordClassName,
         schemaVersion: messageActivityRecordSchemaNumber, 
         message: messageText_
      };
      repository.save (record);       

      // Save state and force a refresh
      // NB we keep local variables this time - dont just call the 'refreshLocalState' else you risk stale state
      let messageArray = fluidMessagesConnection.messageCaucus().currentAsArray();      
      setConversation (messageArray);      
      let audienceMap = fluidMessagesConnection.participantCaucus().current();
      setAudience (audienceMap);     
      let sharedEmbeddingMap = fluidMessagesConnection.sharedEmbeddingCaucus().current();
      setSharedEmbeddings (sharedEmbeddingMap);       

      // If LLM is being invoked we make a call here 
      // ======================================================
      if (AIConnection.isRequestForLLM (message, audienceMap)) {

         setIsBusy(true);         

         let query = AIConnection.buildEnrichmentQuery (messageArray, audienceMap);
         let responseShell = new Message (keyGenerator.generateKey(), EConfigStrings.kLLMGuid, message.id, 
                                          "", new Date()); 

         // Push the shell to shared data
         addMessage (fluidMessagesConnection, responseShell);                                             
            
         responseShell.hookLiveAppend (onStreamedUpdate);

         let connection = new AIConnection (props.sessionKey);

         connection.makeEnrichedCall (responseShell, query).then ((result_: Message | undefined) => {            

            setIsBusy(false);        
            if (result_)
               fluidConnection.messageCaucus().amend (result_.id, result_);                                               

         }).catch ( (e: any) => {
               
            props.onAiError (EUIStrings.kAiApiError);
              setIsBusy(false);      
             responseShell.unhookLiveAppend();                                          
         });            
      }
      else {
         // If the user looks they have miss-typed, we send a reminder.  
         // ======================================================      
         if (AIConnection.mightBeMissTypedRequestForLLM (message, audienceMap)) {

            // set up a message to append
            let response = new Message ();
            response.authorId = EConfigStrings.kLLMGuid;
            response.text = EUIStrings.kLLMNameReminder;
            response.sentAt = new Date();
            response.responseToId = message.id;

            // Push it to shared data
            addMessage (fluidMessagesConnection, response);                         
         }
         forceUpdate ();    
      }  
   } 

   let joinValidator = new JoinPageValidator ();

   // Only display conversation when we have all required details and we also have a secret that matches the last one
   if (!joinValidator.canAttemptJoin(props.localPersona.email, props.localPersona.name, props.sessionKey, props.conversationKey) 
    || !joinValidator.matchesSavedSecret (props.secret)) {
    
      return (<div></div>);
   }
   else {  
      return (
         <ConversationView key = {key}
             userIsAdmin = {userIsAdmin}
             isConnected={props.sessionKey.looksValidSessionKey() && conversationKey.looksValidConversationKey()}
             suppressScroll = {suppressScroll}
             isBusy = {isBusy}
             sessionKey={props.sessionKey}
             localPersonaName={props.localPersona.name}
             conversationKey={conversationKey}
             conversation={conversation}
             audience={audience} 
             sharedEmbeddings={sharedEmbeddings}
             hasSuggestedContent={suggested ? true: false}
             suggestedContent={suggested ? suggested.text: ""}
             braidChattinessLevel={chatLevel}
             onSend={onSend} 
             onAddSuggestedContent={onAddSuggestedContent}
             onCancelSuggestedContent={onCancelSuggestedContent}
             onTrimConversation={onTrimConversation}
             onExitConversation={onExitConversation}             
             onClickUrl={onClickUrl}
             onLikeUrl={onLikeUrl}    
             onUnlikeUrl={onUnlikeUrl}      
             onDeleteMessage={onDeleteMessage}          
             onSetBraidChattiness={onSetBraidChattiness}    
             >
         </ConversationView>
      );
   }
}
****************************************

****************************************
Boxer\ui\ConversationMessagePrompt.tsx
****************************************
/*! Copyright Braid Technologies 2024 */
 
// React
import React, { ChangeEvent, useState, useLayoutEffect } from 'react';

// Fluent
import { InputOnChangeData, makeStyles, Textarea } from '@fluentui/react-components';

import { EUIStrings } from './UIStrings';
import { throwIfUndefined } from '../core/Asserts';
import { EConfigNumbers, EConfigStrings } from '../core/ConfigStrings';

export interface IMessagePromptProps {

   message: string;
   onSend (message_: string) : void;   
   onChange (message_: string) : void;
}

const textFieldStyles = makeStyles({
   root: {
      display: 'flex',
      flexDirection: 'column',
      width: '100%'
   },
   textarea: {
      width: '100%',      
      height: '100%',
      textAlign: 'left',
      verticalAlign: 'top',
   },
   prompt: {
      textAlign: 'center',
      fontSize: '8pt',
      color: 'grey',
      width: '100%',       
   }
});

export function wrapText(context: OffscreenCanvasRenderingContext2D | CanvasRenderingContext2D | null, 
   text: string,
   width: number, 
   defaultHeight: number, defaultWidth: number,
   lineSeparation: number): number {

      let y = 0;
      let hardLines = text.split("\n");


   // Special case if we dont have any text - allow provision for one line
   if (hardLines.length === 0)
      return defaultHeight;

   let dy = 0;
   let lines = 0;

   for (var iHardLines = 0; iHardLines < hardLines.length; iHardLines++) {

      var line = "";
      var words = hardLines[iHardLines].split(" ");
      var lineWidth = 0;
      var lineHeightDelta = defaultHeight;

      for (var iWords = 0; iWords < words.length; iWords++) {
         var testLine = line + words[iWords] + " ";
         var testWidth;

         if (context) {
            let metrics = context.measureText(testLine);
            testWidth = metrics.width;
            lineHeightDelta = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;            
         }
         else {
            testWidth = defaultWidth * testLine.length;
            lineHeightDelta = defaultHeight;           
         }

         // Finish if we have incrementally exceeded maxWidth, 
         // or if we only have one word so we have to finish any way. 
         if ((testWidth > width) || ((testWidth > width) && iWords === 0)) {
            line = words[iWords] + " ";
            y += lineHeightDelta;
            dy += lineHeightDelta;
            lineWidth = (testWidth - lineWidth) - defaultWidth / 2;
            lines++;

            if ((iWords + 1) < words.length)
               dy += lineSeparation;
         }
         else {
            line = testLine;
            lineWidth = testWidth - defaultWidth / 2;
         }
      }

      if (context) {
         let metrics = context.measureText(line);
         testWidth = metrics.width;
         lineHeightDelta = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;            
      }
      else {
         testWidth = defaultWidth * line.length;
         lineHeightDelta = defaultHeight;       
      }

      y += lineHeightDelta;
      dy += lineHeightDelta;
      lines++;
      if ((iHardLines + 1) < hardLines.length)
         dy += lineSeparation;      
   }

   return dy;
}

// Ref
// https://blog.steveasleep.com/how-to-draw-multi-line-text-on-an-html-canvas-in-2021
export function calculateDyNeeded (width: number, value: string): number {

   const smallestTextForWrap = "A";

   let offScreenCanvas = new OffscreenCanvas(width, width * 10);
   throwIfUndefined (offScreenCanvas);
   let offscreenContext = offScreenCanvas.getContext("2d") as OffscreenCanvasRenderingContext2D; 
   offscreenContext.font = EConfigStrings.kFontNameForTextWrapCalculation;

   let metrics = offscreenContext.measureText(smallestTextForWrap);
   let spaceCharWidth = metrics.width;
   let spaceCharHeight = metrics.fontBoundingBoxAscent + metrics.fontBoundingBoxDescent; 

   let dyNeeded = wrapText(offscreenContext, value.length > 0 ? value: smallestTextForWrap,
         width - EConfigNumbers.kMessagePrompt2HBorder,
         spaceCharHeight,
         spaceCharWidth,
         EConfigNumbers.kMessagePromptLineSpace);

   let dyMin = wrapText(offscreenContext, smallestTextForWrap,
         width,
         spaceCharHeight,
         spaceCharWidth,
         EConfigNumbers.kMessagePromptLineSpace);         

   // Tidy up
   offScreenCanvas = null as any as OffscreenCanvas;
   offscreenContext = null as any as OffscreenCanvasRenderingContext2D;

   return Math.max (dyMin, dyNeeded);
}

export const MessagePrompt = (props: IMessagePromptProps) => {   

   const textFieldClasses = textFieldStyles();
   const [width, setWidth] = useState(0); 
   const textAreaId = "textAreaId;"  
   
   useLayoutEffect(() => {
      
      const textArea = document.getElementById(
         textAreaId
       ) as HTMLTextAreaElement | null;

      if (textArea) {
         let dx = textArea.offsetWidth; 

         if (width !== dx) {
            setWidth(dx);         
         }
      } 
    }, []);

   function onKeyChange(ev: ChangeEvent<HTMLTextAreaElement>, data: InputOnChangeData): void {

      props.onChange (data.value);
   } 

   /*
   * looks to see if the user has Ctrl-enter, and if so processes a Commit
   * @param event - Keyboard Event
   * @param value - current text value
   */
   function onSend(event: React.KeyboardEvent<HTMLElement>, value: string) {

      var processed: boolean = false;

      switch (event.key) {

         case 'Enter':
            if (event.ctrlKey) {
               props.onSend (value);
               processed = true;
            }
            break;

         case 'Escape':
            props.onChange ("");
            processed = true;
            break;            

         default:
            break;
      }
  
      if (processed) {
         event.stopPropagation();
         event.preventDefault();
      }
   };

   let bump = EConfigNumbers.kMessagePrompt2VBorder;
   var dyNeeded = bump;

   if (width !== 0) 
      dyNeeded = calculateDyNeeded (width, props.message) + bump;   

   return (<div className={textFieldClasses.root}> 
      <Textarea
         id={textAreaId}
         appearance="outline"
         placeholder={EUIStrings.kSendMessagePlaceholder}
         maxLength={EConfigNumbers.kMessagePromptMaxCharacters}
         textarea={{ className: textFieldClasses.textarea }}
         resize="none"
         value={props.message}
         onChange={onKeyChange}
         style={{
            height: (dyNeeded).toString() + 'px',
            width: '100%'
         }}
         onKeyDown={(e) => onSend(e, props.message)} 
         disabled={false}      
         autoFocus={true}                 
      /> 
      <div className={textFieldClasses.prompt}>{EUIStrings.kMessageTextPrompt}</div>
      </div>);
}
****************************************

****************************************
Boxer\ui\ConversationPane.tsx
****************************************
/*! Copyright Braid Technologies 2024 */

// React
import React, { useState, useEffect } from 'react';

// Fluent
import {
   makeStyles, shorthands, 
   Button, 
   Toolbar, ToolbarButton, ToolbarDivider,
   Tooltip, 
   Body1,
   Caption1,
   Link,
   Text, 
   Spinner, 
   SpinnerProps,
   partitionAvatarGroupItems,
   AvatarGroup,
   AvatarGroupPopover,
   AvatarGroupItem
} from '@fluentui/react-components';

import {
   Person24Regular,
   Laptop24Regular,
   Send24Regular,
   Copy24Regular,
   Delete24Regular, 
   DoorArrowLeft24Regular,
   ChatMultipleRegular,
   ChatMultipleHeartRegular,
   ChatMultipleHeartFilled,
   DeleteRegular,
   ChatOffRegular,
   ChatAddRegular   
} from '@fluentui/react-icons';

import { EIcon } from '../core/Icons';
import { EConfigNumbers, EConfigStrings }  from '../core/ConfigStrings';
import { Persona } from '../core/Persona';
import { Message } from '../core/Message';
import { EUIStrings } from './UIStrings';
import { innerColumnFooterStyles, textFieldStyles } from './ColumnStyles';
import { SessionKey, ConversationKey } from '../core/Keys';
import { JoinDetails } from '../core/JoinDetails';
import { AnimatedIconButton, EAnimatedIconButtonTypes } from './AnimatedIconButton';
import { MessagePrompt } from './ConversationMessagePrompt';
import { Media } from '../core/Media';
import { SharedEmbedding, findInMap } from '../core/SharedEmbedding';

import { IRelevantEnrichedChunk } from '../../CommonTs/src/EnrichedChunk';

export interface IConversationHeaderProps {

   userisAdmin: boolean;
   sessionKey: SessionKey;
   conversationKey: ConversationKey;   
   audience: Map<string, Persona>;
   braidChattinessLevel: number;
   onTrimConversation () : void;  
   onExitConversation () : void;  
   onSetBraidChattiness (level: number, max: number) : void;  
}

export interface IConversationViewProps {

   isConnected: boolean;
   userIsAdmin: boolean;
   sessionKey: SessionKey;
   conversationKey: ConversationKey;    
   audience: Map<string, Persona>;
   conversation: Array<Message>;
   localPersonaName: string;
   sharedEmbeddings: Map<string, SharedEmbedding>;
   isBusy: boolean;   
   hasSuggestedContent: boolean;
   suggestedContent: string;
   suppressScroll: boolean;
   braidChattinessLevel: number;
   onSend (message_: string) : void;   
   onTrimConversation () : void;   
   onExitConversation () : void;
   onAddSuggestedContent (): void;
   onCancelSuggestedContent (): void;
   onClickUrl (url_: string): void;   
   onLikeUrl (url_: string): void;   
   onUnlikeUrl (url_: string): void;     
   onDeleteMessage (id: string) : void;   
   onSetBraidChattiness (level: number, max: number) : void;
}

const headerRowStyles = makeStyles({
   root: {    
      display: 'flex',
      flexDirection: 'row',
      alignItems: 'center',
      width: '100%' 
   },
});

export const ConversationHeaderRow = (props: IConversationHeaderProps) => {

   let chatLevelForPrompt = props.braidChattinessLevel + 1;
   let maxChatLevelForPrompt = EConfigNumbers.kMaxChatLevel + 1; 

   let lessChatPrompt = EUIStrings.kBoxerLessChatButtonPrompt.replace ("%%1", chatLevelForPrompt.toString())
                                                             .replace ("%%2", maxChatLevelForPrompt.toString());

   let moreChatPrompt = EUIStrings.kBoxerMoreChatButtonPrompt.replace ("%%1", chatLevelForPrompt.toString())
                                                             .replace ("%%2", maxChatLevelForPrompt.toString());

   let canHaveLessChat = props.braidChattinessLevel > 0;
   let canHaveMoreChat = props.braidChattinessLevel < EConfigNumbers.kMaxChatLevel;

   const headerRowClasses = headerRowStyles();

   // Copy audience to an array for consumption by Fluent classes
   let audienceArray = Array.from(props.audience.values());

   const { inlineItems, overflowItems } = partitionAvatarGroupItems({
      items: audienceArray
    });


   function onCopy (ev: React.MouseEvent<HTMLButtonElement>) : void {

      // Make join details with no email address and no name
      let joinDetails = JoinDetails.makeFromParts ("", "", props.sessionKey, props.conversationKey, "");
      
      // https://stackoverflow.com/questions/10783322/window-location-url-javascript

      let newUrl = window.location.protocol + // => "http:"
      '//' +
      window.location.host +                  // => "example.com:3000"
      window.location.pathname +              // => "/pathname/
      '#' + joinDetails.toString();

      navigator.clipboard.writeText (newUrl);
   }       

   function onMoreChat (ev: React.MouseEvent<HTMLButtonElement>) : void {

      if (props.braidChattinessLevel < EConfigNumbers.kMaxChatLevel) {
         let newChatLevel = props.braidChattinessLevel + 1;
         props.onSetBraidChattiness (newChatLevel, EConfigNumbers.kMaxChatLevel);
      }
   } 

   function onLessChat (ev: React.MouseEvent<HTMLButtonElement>) : void {
      if (props.braidChattinessLevel > 0) {     
         let newChatLevel = props.braidChattinessLevel - 1;
         props.onSetBraidChattiness (newChatLevel, EConfigNumbers.kMaxChatLevel);         
      }
   }    

   function onTrimConversation (ev: React.MouseEvent<HTMLButtonElement>) : void {

      props.onTrimConversation();
   } 

   function onExitConversation (ev: React.MouseEvent<HTMLButtonElement>) : void {

      props.onExitConversation();
   }           

   return (
      <div className={headerRowClasses.root}>
         <AvatarGroup>
            {inlineItems.map((persona) => (
               <Tooltip content={persona.name} relationship="label" positioning={'below'} key={persona.id}>
                  <AvatarGroupItem name={persona.name} key={persona.id} />
               </Tooltip>
            ))}
            {overflowItems && (
               <AvatarGroupPopover indicator="icon">
                  {overflowItems.map((persona) => (
                     <AvatarGroupItem name={persona.name} key={persona.id} />
                  ))}
               </AvatarGroupPopover>
            )}
         </AvatarGroup>  
         <ToolbarDivider />
         <Toolbar aria-label="Conversation control toolbar" >                  
            <Tooltip content={EUIStrings.kCopyConversationUrlButtonPrompt} 
               relationship="label" positioning={'below'}>
               <ToolbarButton
                  icon={<Copy24Regular />}
                  aria-label={EUIStrings.kCopyConversationUrlButtonPrompt} 
                  disabled={!(props.sessionKey.looksValidSessionKey() && props.conversationKey.looksValidConversationKey())} 
                  onClick={onCopy}
               />                 
            </Tooltip>           
            <Tooltip content={lessChatPrompt} 
               relationship="label" positioning={'below'}>
               <ToolbarButton
                  icon={<ChatOffRegular />}
                  aria-label={lessChatPrompt} 
                  disabled={!canHaveLessChat} 
                  onClick={onLessChat}
               />  
            </Tooltip>        
            <Tooltip content={moreChatPrompt} 
               relationship="label" positioning={'below'}>
               <ToolbarButton
                  icon={<ChatAddRegular />}
                  aria-label={moreChatPrompt} 
                  disabled={!canHaveMoreChat} 
                  onClick={onMoreChat}
               />  
            </Tooltip>                
            <Tooltip content={EUIStrings.kTrimConversationButtonPrompt} 
               relationship="label" positioning={'below'}>
               <ToolbarButton
                  icon={<Delete24Regular />}
                  aria-label={EUIStrings.kTrimConversationButtonPrompt} 
                  disabled={!(props.userisAdmin && props.sessionKey.looksValidSessionKey() && props.conversationKey.looksValidConversationKey())} 
                  onClick={onTrimConversation}
               />  
            </Tooltip>       
            <Tooltip content={EUIStrings.kExitConversationButtonPrompt} 
               relationship="label" positioning={'below'}>
               <ToolbarButton
                  icon={<DoorArrowLeft24Regular />}
                  aria-label={EUIStrings.kExitConversationButtonPrompt} 
                  disabled={!(props.sessionKey.looksValidSessionKey() && props.conversationKey.looksValidConversationKey())} 
                  onClick={onExitConversation}
               />  
            </Tooltip>                                                   
         </Toolbar>           
      </div>
   );
}

const embeddedRowStyles = makeStyles({
   root: {    
      display: 'flex',
      flexDirection: 'row',
      width: '100%',
      height: '100%',
      alignItems: 'stretch',   /* for a row, the main axis is vertical, stretch means fill the row with content */
      justifyContent: 'center' /* for a row, the cross-axis is horizontal, center means vertically centered */           
   },
});

const embeddedColumnStyles = makeStyles({
   root: {    
      display: 'flex',
      flexDirection: 'column',
      justifyContent: 'flex-start'    // start layout at the top                  
   },
});

const conversationContentRowStyles = makeStyles({
   root: {    
      display: 'flex',
      flexDirection: 'row',         
      width: '100%',           
      alignItems: 'stretch',   /* for a row, the main axis is vertical, stretch means fill the row with content */
      overflowY: 'auto'
   },
});

const conversationContentColumnStyles = makeStyles({
   root: {  
      display: 'flex',
      flexDirection: 'column',                        
      width: '100%',
      overflowY: 'auto'     
   },
});

const DefaultSpinner = (props: Partial<SpinnerProps>) => <Spinner {...props} />;


export const ConversationView = (props: IConversationViewProps) => {

   const embeddedRowClasses = embeddedRowStyles();
   const embeddedColumnClasses = embeddedColumnStyles();   
   const conversationContentRowClasses = conversationContentRowStyles();
   const conversationContentColumnClasses =  conversationContentColumnStyles();
   const footerSectionClasses = innerColumnFooterStyles();   
   const alwaysScrollToBottomId = "AlwaysScrollToBottom";
    
   // Shorthand only
   let conversation = props.conversation;
   let audience = props.audience;

   function onSend (messageText_: string) : void {

      props.onSend (messageText_);
      if (!props.suppressScroll)
         scroll();
   }

   // https://stackoverflow.com/questions/45719909/scroll-to-bottom-of-an-overflowing-div-in-react 
   function scroll (): void {

      const divScroll = document.getElementById(
         alwaysScrollToBottomId
       ) as HTMLDivElement | null;

      if (divScroll) {
         divScroll.scrollIntoView();
      }       
   }
 
   useEffect(() => {
      if (!props.suppressScroll)      
         scroll();
    });     

   if (! props.isConnected) {
      return (<div></div>);
   }
   else {
      return (
         <div className={embeddedRowClasses.root}>      
            <div className={embeddedColumnClasses.root}>                     

               <ConversationHeaderRow 
                  userisAdmin={props.userIsAdmin}
                  sessionKey={props.sessionKey} 
                  conversationKey={props.conversationKey}
                  audience={props.audience} 
                  onTrimConversation={props.onTrimConversation}      
                  onExitConversation={props.onExitConversation}
                  onSetBraidChattiness={props.onSetBraidChattiness}
                  braidChattinessLevel={props.braidChattinessLevel}
                  >                                                                       
               </ConversationHeaderRow>
               
               &nbsp;

               <div className={conversationContentRowClasses.root}>                
                  <div className={conversationContentColumnClasses.root}>             
                     {conversation.map (message => { 
                        return (         
                           <SingleMessageView 
                              sessionKey={props.sessionKey}
                              message={message} 
                              localPersonaName={props.localPersonaName}                              
                              key={message.id}
                              author={Persona.safeAuthorLookup (audience, message.authorId)}
                              userIsAdmin={props.userIsAdmin}
                              sharedEmbeddings={props.sharedEmbeddings}
                              showAiWarning={message.authorId === EConfigStrings.kLLMGuid}
                              onClickUrl={props.onClickUrl}  
                              onLikeUrl={props.onLikeUrl}   
                              onDislikeUrl={props.onUnlikeUrl}
                              onDeleteMessage={props.onDeleteMessage}
                           />
                        )                     
                     })}                          
                     <div id={alwaysScrollToBottomId}/>  
                  </div>               
               </div>

               &nbsp;  

               <div className={footerSectionClasses.root}>               
                  {props.isBusy ? <DefaultSpinner/> : <div/>}              
                  <InputView 
                     onSend={onSend}
                     suggestedContent={props.suggestedContent} 
                     isBusy={props.isBusy}
                     hasSuggestedContent={props.hasSuggestedContent}
                     onAddSuggestedContent={props.onAddSuggestedContent}
                     onCancelSuggestedContent={props.onCancelSuggestedContent}>
                     </InputView>          
               </div> 
            </div>
         </div>
     );
   }
}

export interface ISingleMessageViewProps {

   sessionKey: SessionKey;
   message: Message;  
   author: Persona;
   showAiWarning: boolean;
   localPersonaName: string;   
   sharedEmbeddings: Map<string, SharedEmbedding>;  
   userIsAdmin: boolean; 
   onClickUrl (url_: string) : void;    
   onLikeUrl (url_: string) : void;  
   onDislikeUrl (url_: string) : void;     
   onDeleteMessage (id: string) : void;
}

 export interface IAuthorIconProps {
 
   author: Persona; 
}

export interface IKnowledgeSegmentProps {

   sessionKey: SessionKey;
   segment: IRelevantEnrichedChunk;  
   key: string;
   localPersonaName: string;
   sharedEmbeddings: Map<string, SharedEmbedding>;   
   onClickUrl (url_: string) : void;    
   onLikeUrl (url_: string) : void;  
   onUnlikeUrl (url_: string) : void;      
}

const glow = makeStyles({
   root: {    
      marginBottom: '10px' ,      
      boxShadow: '0px 0px 5px 0px white;'
   },
});

const noGlow = makeStyles({
   root: {    
      marginBottom: '10px'       
   },
});

 export const AuthorIcon = (props: IAuthorIconProps) => {

   const glowClasses = glow();    
   const noGlowClasses = noGlow(); 
   var className;

   if (props.author.icon === EIcon.kLLMPersona) {
      className = glowClasses.root;
   }
   else {
      className = noGlowClasses.root;      
   }

   return ((props.author.icon === EIcon.kLLMPersona) ?
            <Laptop24Regular className={className} />
            : <Person24Regular className={className}/>
   );
}

const singleMessageRow = makeStyles({
   root: {    
      display: 'flex',
      flexDirection: 'row',
      alignItems: 'left'
   },
});

const singleMessageIconColumn = makeStyles({
   root: {    
      ...shorthands.margin("10px"),      
      display: 'flex',
      flexDirection: 'column'
   },
});

const singleMessageTextColumn = makeStyles({
   root: {    
      ...shorthands.margin("10px"),       
      display: 'flex',
      flexDirection: 'column'
   },
});

const sourcesRow = makeStyles({
   root: {    
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'left'
   },
});

const padAfterMessage = makeStyles({
   root: {    
      marginBottom: '10px'    
   },
});

const linkStyles = makeStyles({
   root: {    
      marginRight: '10px',
      justifySelf: 'centre'      
   },
});

const greenStyles = makeStyles({
   root: {    
      color: 'green',
      justifySelf: 'centre'       
   },
});

const amberStyles = makeStyles({
   root: {    
      color: 'orange',
      justifySelf: 'centre'  
   },
});

const toolbarRowStyles = makeStyles({
   root: {    
      display: 'flex',
      flexDirection: 'row',
      alignItems: 'center'
   },
});

const toolbarButtonStyles = makeStyles({
   root: {    
      alignSelf: 'centre',
      marginLeft: '5px',
      marginRight: '5px'
   }
});

const buttonStyles = makeStyles({
   root: {
      flexGrow: '0',
      flexShrink: '0'      
   }
});

export const KowledgeSegmentsView = (props: IKnowledgeSegmentProps) => {

   const sourcesClasses = sourcesRow();
   const greenClasses = greenStyles();
   const amberClasses = amberStyles();

   let relevantChunk = props.segment;
   let relevanceText = relevantChunk.relevance ? (relevantChunk.relevance * 100).toPrecision(2) + '%': "";
   
   const onClickLink = (event: React.MouseEvent<HTMLAnchorElement>): void => {
      // NB we call 'prevent default' as we want to control the action i.e. open a  new tab. 
      event.stopPropagation();
      event.preventDefault();

      props.onClickUrl (relevantChunk.chunk.url);  
      (window as any).open(relevantChunk.chunk.url, '_blank');
   };

   const onClickLike = (event: React.MouseEvent<HTMLButtonElement>): void => {
      // NB we call 'prevent default' as we want to control the action  
      event.stopPropagation();
      event.preventDefault();

      props.onLikeUrl (relevantChunk.chunk.url);        
   }   

   const onClickUnlike = (event: React.MouseEvent<HTMLButtonElement>): void => {
      // NB we call 'prevent default' as we want to control the action  
      event.stopPropagation();
      event.preventDefault();

      props.onUnlikeUrl (relevantChunk.chunk.url);       
   }   

   let relevanceClasses = relevantChunk.relevance ? relevantChunk.relevance >= 0.5 ? greenClasses : amberClasses : amberClasses; 
   let linkClasses = linkStyles();
   let toolbarRowClasses = toolbarRowStyles();  
   let toolbarButtonClasses = toolbarButtonStyles();   
   
   let linkText = relevantChunk.chunk.url;
   
   let media = new Media();
   let maxLength = EConfigNumbers.kMaximumLinkTextlength;
   if (media.isSmallFormFactor()) 
      maxLength = EConfigNumbers.kMaximumLinkTextlengthMobile;

   if (linkText.length > maxLength + 3) {
      linkText = linkText.slice (0, maxLength) + '...';
   }

   let likedByMe = false;
   let likedByAnyone = false;
   let likeText = "";
   let shared = findInMap (relevantChunk.chunk.url, props.sharedEmbeddings);
   if (shared) {
      likedByMe = shared.isLikedBy (props.localPersonaName); 
      likedByAnyone = shared.netLikeCount > 0;  
      if (likedByAnyone) {
         let count =  shared.likes.length;

         if (count > 1)
            likeText = count.toString() + " " + EUIStrings.kLikePlural;
         else
            likeText = count.toString() + " " + EUIStrings.kLikeSignular;         
      }   
   }


   return (<div className={sourcesClasses.root} key={relevantChunk.chunk.url}>
              <div className={toolbarRowClasses.root}>
                 <Link className={linkClasses.root} 
                    href={relevantChunk.chunk.url} onClick={onClickLink} inline>{linkText}                
                  </Link>
                  <Body1 className={relevanceClasses.root}> {relevanceText} </Body1>
                  <Toolbar aria-label="Like/dislike control toolbar" >                        
                     <ToolbarDivider />                  
                     <Tooltip content={likedByMe ? EUIStrings.kDidNotLikeThis : EUIStrings.kLikedThis} relationship="label" positioning={'above'}>                     
                        <ToolbarButton
                           className={toolbarButtonClasses.root}
                           icon={likedByMe? <ChatMultipleHeartFilled/> : likedByAnyone ? <ChatMultipleHeartRegular/> : <ChatMultipleRegular/>} 
                           onClick={likedByMe ? onClickUnlike : onClickLike}/>   
                     </Tooltip> 
                     <Text size={100}>{likeText}</Text>    
                  </Toolbar>                                              
               </div>
               <Body1 className={toolbarRowClasses.root}> {relevantChunk.chunk.summary} </Body1>
            </div>      
         );
}

// create a forceUpdate hook
// https://stackoverflow.com/questions/46240647/how-to-force-a-functional-react-component-to-render
function useForceUpdate() {
   const [value, setValue] = useState(0); // simple integer state
   return () => setValue(value => value + 1); // update state to force render
}

export const SingleMessageView = (props: ISingleMessageViewProps) => {

   const singleMessageRowClasses = singleMessageRow();
   const singleMessageIconColumnClasses = singleMessageIconColumn();
   const singleMessageColumnClasses = singleMessageTextColumn();
   const toolbarButtonClasses = toolbarButtonStyles(); 
   const toolbarRowClasses = toolbarRowStyles();  

   const padAfterMessageClasses = padAfterMessage();  
   const amberClasses = amberStyles();

   // we can omly delete our own messages
   let canDelete = props.userIsAdmin || (props.author.name === props.localPersonaName);

   const onDeleteMessage = (event: React.MouseEvent<HTMLButtonElement>): void => {
      // NB we call 'prevent default' as we want to control the action  
      event.stopPropagation();
      event.preventDefault();

      props.onDeleteMessage (props.message.id);        
   } 

   var aiSources;
   var aiFooter;   

   if (props.showAiWarning) {
      
      if (props.message.chunks.length > 0) { 

         aiSources = props.message.chunks.map ((releventChunk : IRelevantEnrichedChunk) => {
            return <KowledgeSegmentsView sessionKey={props.sessionKey} 
                    localPersonaName={props.localPersonaName}
                    segment={releventChunk} key={releventChunk.chunk.url} 
                    sharedEmbeddings={props.sharedEmbeddings}
                    onClickUrl={props.onClickUrl}
                    onLikeUrl={props.onLikeUrl}
                    onUnlikeUrl={props.onDislikeUrl}/>
         })   
         aiFooter = <Text size={100}> {EUIStrings.kAiContentWarning} </Text>;   
      }
      else {
         aiSources = <Text size={100} className={amberClasses.root}> {EUIStrings.kAiNoGoodSources} </Text>;  
         aiFooter = <div/>;         
      }
   } 
   else {
      aiFooter = <div/>;
      aiSources = <div/>;
   }

   return (
      <div className={singleMessageRowClasses.root}>
         <div className={singleMessageIconColumnClasses.root}>
            <AuthorIcon author={props.author} />            
         </div>   
         <div className={singleMessageColumnClasses.root}>
            <Caption1><b>{props.author.name}</b></Caption1> 
            <div className={toolbarRowClasses.root}>                
               <Body1>{props.message.text}</Body1>  
               <Toolbar aria-label="Delete control toolbar" >                        
                  <ToolbarDivider />                  
                  <Tooltip content={EUIStrings.kDeleteMessage} relationship="label" positioning={'above'}>                     
                     <ToolbarButton
                        className={toolbarButtonClasses.root}
                        disabled={!canDelete}
                        icon={<DeleteRegular/>} 
                        onClick={onDeleteMessage}/>   
                  </Tooltip>    
               </Toolbar>              
            </div>
            <div className={padAfterMessageClasses.root}></div>              
            {aiSources}  
            <div className={padAfterMessageClasses.root}></div>                     
            {aiFooter}
            <div className={padAfterMessageClasses.root}></div> 
         </div>              
      </div>);    
}

export interface IInputViewProps {
   
   isBusy: boolean;
   hasSuggestedContent: boolean;
   suggestedContent: string;
   onSend (message_: string) : void;
   onAddSuggestedContent(): void;
   onCancelSuggestedContent() : void;
}

 const inputGroupStyles = makeStyles({
   root: {    
      display: 'flex',
      flexDirection: 'column',      
      textAlign: 'left',
      width: '100%'
   },
});

const inputRowStyles = makeStyles({
   root: {    
      display: 'flex',
      flexDirection: 'row',      
      textAlign: 'left',
      width: '100%'
   },
});

const textColumnStyles = makeStyles({
   root: {    
      display: 'flex',
      flexDirection: 'column',      
      width: '100%'
   },
});

const bottonColumnStyles = makeStyles({
   root: {    
      display: 'flex',
      flexDirection: 'column',      
      width: 'fit-content'   
   },
});

const bottonRowStyles = makeStyles({
   root: {    
      display: 'flex',
      flexDirection: 'row',      
      justifyContent: 'flex-end'
   },
});

export const InputView = (props: IInputViewProps) => {

   const inputGroupClasses =inputGroupStyles();
   const inputRowClasses = inputRowStyles();
   const textColumnClasses = textColumnStyles();
   const buttonColumnClasses = bottonColumnStyles();   
   const buttonRowClasses = bottonRowStyles();      
   const buttonClasses = buttonStyles();

   const [message, setMessage] = useState<string>("");
   const [canSend, setCanSend] = useState<boolean>(false);

   function onSend (message_: string) : void {

      props.onSend (message);
      setMessage ("");   
      setCanSend (false);        
   }   

   function onChange (message_: string) : void {

      setMessage (message_);   
      setCanSend (message_.length > 0);        
   }  

   function onMessageSend (ev: React.MouseEvent<HTMLButtonElement>) : void {

      onSend(message);       
   }

   return (
      <div className={inputGroupClasses.root}>
         <Text>{EUIStrings.kSendMessagePreamble}</Text>
         &nbsp;
         <div className={inputRowClasses.root}>
            <div className={textColumnClasses.root}>
               <MessagePrompt onSend={onSend} onChange={onChange} message={message} />               
            </div>
            &nbsp;           
            <div className={buttonColumnClasses.root}>
               <div className={buttonRowClasses.root}>                              
                  <Button 
                     className={buttonClasses.root}
                     disabled={(!canSend) || (props.isBusy)}
                     icon={<Send24Regular/>} 
                     onClick={onMessageSend}/>                                               
                  &nbsp;                  
                  <AnimatedIconButton animate={props.hasSuggestedContent} 
                     icon={EAnimatedIconButtonTypes.kLightBulb} 
                     promptAnimated={props.suggestedContent} 
                     promptUnamimated={EUIStrings.kAiHasNoSuggestedDocuments}
                     onClick={props.onAddSuggestedContent}
                     onCancel={props.onCancelSuggestedContent}/>                               
                  </div>
            </div>       
         </div>   
      </div>        
   );
}
****************************************

****************************************
Boxer\ui\JoinPane.tsx
****************************************
/*! Copyright Braid Technologies 2024 */

// React
import React, { ChangeEvent, MouseEvent, useState } from 'react';

// Fluent
import {
   makeStyles, shorthands, 
   Dropdown, Option, Tooltip, Button,
   Text, Input, Image, 
   InputOnChangeData,
   SelectionEvents,
   OptionOnSelectData
} from '@fluentui/react-components';

import {
   Key24Regular
} from '@fluentui/react-icons';

import { getDefaultFluidEnvironment } from '../../CommonTs/src/IEnvironmentFactory';
import { EEnvironment } from '../../CommonTs/src/IEnvironment';

import { Persona } from '../core/Persona';
import { SessionKey, ConversationKey } from '../core/Keys';
import { JoinPageValidator } from '../core/JoinPageValidator';
import { KeyRetriever } from '../core/KeyRetriever';
import { EUIStrings } from './UIStrings';
import { EConfigStrings } from '../core/ConfigStrings';
import { innerColumnFooterStyles, textFieldStyles } from './ColumnStyles';
import { throwIfUndefined } from '../core/Asserts';
import { getDefaultKeyGenerator } from '../core/IKeyGeneratorFactory';

export interface IJoinPageProps {
   sessionKey: SessionKey;  
   conversationKey: ConversationKey;
   secret: string;
   joinPersona: Persona;
   onConnect (sessionKey_: SessionKey, 
              conversationKey_: ConversationKey,
              secret_: string) : void;
   onConnectError (hint_: string) : void;    
}

const joinPageInnerStyles = makeStyles({
   root: {    
      display: 'flex',
      flexDirection: 'column',  
   },
});

const joinFormRowStyles = makeStyles({
   root: {    
      display: 'flex',
      flexDirection: 'row',    
   },
});

 const buttonDisabledStyles = makeStyles({
   root: {    
      filter: 'grayscale(100%)',
      marginLeft: 'auto', 
      marginRight: '0'
   },
});

const buttonEnabledStyles = makeStyles({
   root: {    
      filter: 'grayscale(0%)',
      marginLeft: 'auto', 
      marginRight: '0'
   },
});

const dropdownStyles = makeStyles({
   root: {
     // Stack the label above the field with a gap
     display: "grid",
     gridTemplateRows: "repeat(1fr)",
     justifyItems: "start",
     ...shorthands.gap("2px"),
     maxWidth: "400px",
   },
 });

 function conversationKeyFromName (name: string) : ConversationKey {
   
   switch (name) {
      case EUIStrings.kTestConversationName:
         return new ConversationKey ("");  
      case EUIStrings.kDemoConversationName:  
         return new ConversationKey (EConfigStrings.kDemoConversationKey);                     
      case EUIStrings.kCohort1Team1ConversationName:
         return new ConversationKey (EConfigStrings.kCohort1Team1ConversationKey);            
      case EUIStrings.kCohort1Team2ConversationName:
         return new ConversationKey (EConfigStrings.kCohort1Team2ConversationKey);              
      case EUIStrings.kCohort1Team3ConversationName:
         return new ConversationKey (EConfigStrings.kCohort1Team3ConversationKey);    
      case EUIStrings.kCohort1ConversationName:
      default:
         return new ConversationKey (EConfigStrings.kCohort1ConversationKey);                   
      }   
 }


export const JoinPane = (props: IJoinPageProps) => {

   const joinPageInnerClasses = joinPageInnerStyles();   
   const joinFormRowClasses = joinFormRowStyles();
   const innerColumnFooterClasses = innerColumnFooterStyles(); 
   const stretchClasses = textFieldStyles();
   const buttonDisabledClasses = buttonDisabledStyles();
   const buttonEnabledClasses = buttonEnabledStyles();
   const dropdownClasses = dropdownStyles();

   const retriever = new KeyRetriever();

   /*
    * @param runningInLocalEnv
    * This logic with runningInLocalEnv is bcs when running against a local fluid framework, we dont know the container ID
    * we have to let the code create a new container then share it manually in the URL#string
    * In production, we have well known container IDs which were created beforehand.
   */
   let runningInLocalEnv: boolean = (getDefaultFluidEnvironment().name === EEnvironment.kLocal);

   let defaultConversationName = EUIStrings.kCohort1ConversationName;
   var conversations: Array<string>;
   
   if (runningInLocalEnv) {
      conversations = [EUIStrings.kTestConversationName];
      defaultConversationName = EUIStrings.kTestConversationName;      
   }
   else {
      conversations = [
         EUIStrings.kCohort1ConversationName,
         EUIStrings.kCohort1Team1ConversationName,
         EUIStrings.kCohort1Team2ConversationName,
         EUIStrings.kCohort1Team3ConversationName,
         EUIStrings.kDemoConversationName
      ];
      defaultConversationName = EUIStrings.kCohort1ConversationName;    
   }

   const [sessionKey, setSessionKey] = useState<SessionKey>(props.sessionKey); 
   const [selectedConversationNames, setSelectedConversationNames] = React.useState<string[]>([
      defaultConversationName
   ]);
   const [conversationName, setConversationName] = React.useState<string>(defaultConversationName);
  
   function onConversationSelect (ev: SelectionEvents, data: OptionOnSelectData) {

      let conversationName = data.optionText;

      setSelectedConversationNames(data.selectedOptions);
      throwIfUndefined (conversationName); // Make compiler happy for next line
      setConversationName(conversationName);     
   };

   function onKeyChange(ev: ChangeEvent<HTMLInputElement>, data: InputOnChangeData): void {

      let newSessionKey = new SessionKey (data.value);

      setSessionKey(newSessionKey);
   }   

   function onTryJoin(ev: MouseEvent<HTMLButtonElement>): void {
      
      ev.preventDefault();

      tryToJoin();
   }

   function tryToJoin () : void {
      
      let conversationKey : ConversationKey;

      if (runningInLocalEnv) {
         conversationKey = props.conversationKey;
      }
      else {
         conversationKey = conversationKeyFromName (conversationName);
      }

      let joinValidator = new JoinPageValidator ();

      let secret = "";

      let keyGenerator = getDefaultKeyGenerator();

      if (! joinValidator.haveSavedSecret ()) {       
         secret = keyGenerator.generateSecret();
         keyGenerator.saveSecret (secret);
      }
      else {
         secret = keyGenerator.savedSecret();
      }

      props.onConnect (sessionKey, conversationKey, secret);
   }

   let joinValidator = new JoinPageValidator ();

   if (joinValidator.matchesSavedSecret (props.secret)) {
      return (<div></div>);
   }
   else {
      return (
         <div className={innerColumnFooterClasses.root} >               
            <div className={joinPageInnerClasses.root}>  
               &nbsp;              
               <div className={joinFormRowClasses.root}>             
                  <Text align="start" className={stretchClasses.root}>{EUIStrings.kJoinPagePreamble}</Text> 
               </div>             
               &nbsp;         
               <div className={joinFormRowClasses.root}>                   
                  <Tooltip withArrow content={EUIStrings.kJoinConversationKeyPrompt} relationship="label">
                     <Input aria-label={EUIStrings.kJoinConversationKeyPrompt}
                        className={stretchClasses.root}                  
                        required={true}                  
                        value={sessionKey.toString()}
                        maxLength={75}
                        contentBefore={<Key24Regular />}
                        placeholder={EUIStrings.kJoinConversationKeyPlaceholder}
                        onChange={onKeyChange}
                        disabled={false}
                        autoFocus={true}
                     />
               </Tooltip>  
               </div>
               &nbsp;
               <div className={joinFormRowClasses.root}>     
                  <div className={dropdownClasses.root}>              
                     <Tooltip withArrow content={EUIStrings.kJoinConversationPicker} relationship="label">
                        <Dropdown
                           defaultValue={defaultConversationName}
                           defaultSelectedOptions={[defaultConversationName]}
                           onOptionSelect={onConversationSelect}
                           {...props}
                        >
                           {conversations.map((conversation) => (
                              <Option key={conversation}>
                                 {conversation}
                              </Option>
                           ))}
                        </Dropdown>
                     </Tooltip>      
                  </div>    
                  &nbsp;          
                  &nbsp;    
                  &nbsp;                                                   
                  <Button onClick={onTryJoin} >        
                     <Tooltip withArrow content={EUIStrings.kJoinConversationWithLinkedInPrompt} relationship="label">
                        <Image className={sessionKey.looksValidSessionKey()? buttonEnabledClasses.root : buttonDisabledClasses.root}
                           alt={EUIStrings.kJoinConversationWithLinkedInPrompt}
                           src="assets/img/SignInWithLinkedIn.png"
                        />
                     </Tooltip>  
                  </Button>              
               </div>               
               &nbsp;                   
               <div className={joinFormRowClasses.root}> 
                  <Text className={stretchClasses.root}>{sessionKey.looksValidSessionKey() ? EUIStrings.kJoinConversationLooksLikeKeyOk : EUIStrings.kJoinConversationDoesNotLookLikeKey}</Text>   
               </div>
               &nbsp;                
            </div>                          
         </div>
      );
   };
}
****************************************

****************************************
Boxer\ui\MainPageMessage.tsx
****************************************
/*! Copyright Braid Technologies 2024 */

// React
import React from 'react';

import { DismissRegular } from "@fluentui/react-icons";
import {
  MessageBar,
  MessageBarActions,
  MessageBarTitle,
  MessageBarBody,
  MessageBarGroup,
  MessageBarIntent,
  Text,
  Button,
  makeStyles,
} from "@fluentui/react-components";

import { EUIStrings } from './UIStrings';

const messageBarStyles = makeStyles({
  messageBarGroup: {
    display: "flex",
    flexDirection: "row",
    alignItems: 'center',    
    maxWidth: EUIStrings.kMaxColumnWidth 
  }
});

export enum EMainPageMessageTypes { // Must mirror MessageBarIntent, with addition of 'nothing' if you dont want to display a message. 
   kInformation = "info", 
   kWarning = "warning", 
   kError = "error", 
   kSuccess = "success",
   kNothing = "nothing"
}

interface IMainPageMessageProps {
   intent: EMainPageMessageTypes;
   text: string;
   dismissable: boolean;
   onDismiss () : void;   
}

export const MainPageMessageRow = (props: IMainPageMessageProps) => {

  const messageClasses = messageBarStyles();
  
  let nullMessage = {intent: EMainPageMessageTypes.kNothing, text:"" };

  let displayMessage = {intent: props.intent, text: props.text };

  const dismissMessage = () =>
    { props.onDismiss() };

  if (displayMessage.intent === EMainPageMessageTypes.kNothing)
     return (<div />);

  if (props.dismissable) {
     return (
        <MessageBarGroup className={messageClasses.messageBarGroup}>
           <MessageBar key={0} intent={displayMessage.intent}>
              <MessageBarBody>
                 <MessageBarTitle>{EUIStrings.kPageErrorCaption}</MessageBarTitle>
                 &nbsp;
                 {displayMessage.text} 
               </MessageBarBody>
               <MessageBarActions
                  containerAction={
                     <Button
                      onClick={() => dismissMessage()}
                      aria-label="dismiss"
                      appearance="transparent"
                      icon={<DismissRegular />}
                     />
                  }
               />
           </MessageBar>
        </MessageBarGroup>
     );
  }
  else
  {
     return (
        <MessageBarGroup className={messageClasses.messageBarGroup}>
           <MessageBar key={0} intent={displayMessage.intent}>
              <MessageBarBody>
                 <MessageBarTitle>{EUIStrings.kPageErrorCaption}</MessageBarTitle>
                 <Text>{displayMessage.text}</Text> 
               </MessageBarBody>
           </MessageBar>
        </MessageBarGroup>);
  }
};
****************************************

****************************************
Boxer\ui\UIStrings.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd

export enum EUIStrings {

   kMaxColumnWidth = "896px",
   kJoinPagePreamble = "To join a conversation with @Boxer, you need to enter the key from your contact at Braid, pick a conversation to join, then login with LinkedIn to identify yourself.",
   kJoinConversationKeyPrompt = "Key",
   kJoinConversationKeyPlaceholder = "Key... ",  
   kJoinConversationDoesNotLookLikeKey = "It does not look like the key is valid.",
   kJoinConversationLooksLikeKeyOk = "It looks like the key is valid, you can try to join the conversation via LinkedIn.",
   kJoinConversationWithLinkedInPrompt = "Join with LinkedIn... ",  
   kJoinConversationPicker = "Select a conversation to join.",

   kCohort1ConversationName = "Cohort 1 - Paris Olympics 2024",
   kCohort1Team1ConversationName = "4x100m swim",
   kCohort1Team2ConversationName = "Triathlon",
   kCohort1Team3ConversationName = "Judo",   
   kDemoConversationName = "Demo",
   kTestConversationName = "Test", 

   kPageErrorCaption = "Error",
   
   kJoinApiError = "Sorry, we were not able to connect to the conversation.",
   kAiApiError = "Sorry, we were not able to connect to the AI.", 
   kSecretError = "Sorry, we were not able to validate end-end security in your login. Please try again. If this rekeeps happening, please ask your contact at Braid for support.",  

   kSendMessagePreamble = "Type a message below. If you want @Boxer to reply, put '@Boxer' in the message. Treat your messages as public and do not enter confidential information.",
   kNoThanks = "No thanks.",
   kLikedThis = "Click to like.",
   kDidNotLikeThis = "Click if you don't like it any more.",
   kDeleteMessage = "Delete message.",
   kSendMessagePlaceholder = "Write a message... ",  
   kMessageTextPrompt = "Ctrl+Enter to send or Esc to cancel.",
   kCopyConversationUrlButtonPrompt = "Copy the URL for this conversation to the clipboard.",
   kTrimConversationButtonPrompt = "Delete the conversation history.",
   kExitConversationButtonPrompt = "Leave this conversation.",   
   kBoxerMoreChatButtonPrompt = "Make @Boxer chattier. Currently %%1 out of %%2.",
   kBoxerLessChatButtonPrompt = "Make @Boxer less chatty. Currently %%1 out of %%2.",   
   kAiHasNoSuggestedDocuments = "No suggestions at present. Interacting with @Boxer will generate suggestions.", 
   kPomptToGetStarted = "Where is a good place to start learning about building applications with LLMs? With some examples in Python?",

   kAiNoGoodSources = "@Boxer does not have good backup for this answer. AI can make mistakes. Consider checking important information.",
   kAiContentWarning = "AI can make mistakes. Consider checking important information.",

   kLLMNameReminder = "Just checking...  if you want your request to be sent to @Boxer, include the phrase '@Boxer' in your message. With an '@' sign.",

   kLikeSignular = "like.",
   kLikePlural = "likes.",

   kWelcomeWouldYouLikeRecap = "Welcome, would you like a recap?",
   kSummarising = "Summarising ..."
};

export var initialQuestions: Array<string> = [
      "What are some common use cases for generative AI?",
      "How can Python be used to interact with an LLM?",
      "What is the purpose of tokenization in LLMs?",
      "Explain the difference between static and dynamic tokenization.",
      "How do you handle out-of-vocabulary words in tokenization?",
      "What are embeddings in the context of NLP?",
      "How do you load a pre-trained LLM in Python using Hugging Face Transformers?",
      "Describe the process of fine-tuning an LLM.",
      "What are the benefits of fine-tuning a pre-trained model?",
      "How can you generate text using GPT-3 in Python?",
      "What is the role of the `generate` function in text generation?",
      "How do you control the length of generated text in an LLM?",
      "Explain the concept of 'temperature' in text generation.",
      "What is top-k sampling in the context of LLMs?",
      "How does nucleus sampling (top-p) work in text generation?",
      "Describe beam search as a decoding strategy.",
      "What are the trade-offs between beam search and greedy decoding?",
      "How can you evaluate the quality of generated text?",
      "What are common metrics for evaluating generative models?",
      "How do you prevent an LLM from generating inappropriate content?",
      "What is the purpose of prompt engineering?",
      "How can you improve the coherence of generated text?",
      "What is zero-shot learning in LLMs?",
      "How does few-shot learning differ from zero-shot learning?",
      "Describe the role of context in text generation.",
      "How do you manage large-scale LLMs in a production environment?",
      "What are the computational challenges of training an LLM?",
      "Explain the concept of model parallelism.",
      "How can you reduce the inference time of an LLM?",
      "What is model distillation in the context of LLMs?",
      "Describe how to use the `transformers` library to implement a chatbot.",
      "What is the role of an API in interacting with an LLM?",
      "How do you secure an API endpoint for an LLM?",
      "What ethical considerations should be taken when using generative AI?",
      "How can you detect and mitigate biases in LLMs?",
      "What is the impact of training data on the performance of an LLM?",
      "How do you perform hyperparameter tuning for an LLM?",
      "Explain the role of learning rate schedules in training LLMs.",
      "How can you use Python to preprocess text data for LLM training?",
      "What are some techniques for data augmentation in NLP?",
      "How do you implement a feedback loop for improving an LLM?",
      "Describe a real-world application of generative AI.",
      "What is the significance of multilingual capabilities in LLMs?",
      "How can transfer learning benefit the deployment of LLMs in different domains?"
];
****************************************

****************************************
Boxer\scripts\common\ApiConfiguration.py
****************************************
# Copyright (c) 2024 Braid Technologies Ltd

# Standard library imports
import os

azure = True                  

if azure:
   API_TYPE = "Azure" #AZURE VERSION WAS "Azure"
   # API_KEY = os.environ["AZURE_OPENAI_API_KEY"] #AZURE VERSION WAS os.environ["AZURE_OPENAI_API_KEY"]           #uncomment if code breaks - changes for script to exectable on both Windows and Unix machines.  
   API_KEY = os.getenv("AZURE_OPENAI_API_KEY")  # Use os.getenv() to safely retrieve environment variables       #comment if code breaks  - changes for script to exectable on both Windows and Unix machines. 
   API_VERSION = "2024-06-01" #AZURE VERSION WAS "2023-07-01-preview"
   RESOURCE_ENDPOINT = "https://studiomodels.openai.azure.com:443" #AZURE VERSION WAS os.environ["AZURE_OPENAI_ENDPOINT"] 
else:
   API_TYPE = "open_ai" #AZURE VERSION WAS "Azure"
   API_KEY = os.environ["OPENAI_API_KEY"] #AZURE VERSION WAS os.environ["AZURE_OPENAI_API_KEY"] 
   API_VERSION = "2020-11-07" #AZURE VERSION WAS "2023-07-01-preview"
   RESOURCE_ENDPOINT = "https://api.openai.com/v1" #AZURE VERSION WAS os.environ["AZURE_OPENAI_ENDPOINT"] 



class ApiConfiguration:
    def __init__(self) -> None:
        self.apiKey = API_KEY
        self.apiVersion = API_VERSION
        self.resourceEndpoint = RESOURCE_ENDPOINT
        self.azureDeploymentName = "StudioLarge"
        self.azureEmbedDeploymentName="StudioEmbeddingLarge"
        self.modelName="gpt-35-turbo-16k"
        self.embedModelName="text-embedding-ada-002"
        self.processingThreads = 1
        self.openAiRequestTimeout = 60
        self.summaryWordCount = 50      # 50 word summary
        self.chunkDurationMins = 10     # 10 minute long video clips
        self.maxTokens = 4096           # Upper limit on total tokens in an API call. 10 minutes of video = 600 words = 2400 tokens, plus approx 2x headroom
        self.discardIfBelow = 100       # Dont index if less than 100 tokens in an article

    apiType: str
    apiKey: str
    apiVersion: str
    resourceEndpoint: str
    azureDeploymentName: str
    azureEmbedDeploymentName: str
    modelName: str
    embedModelName: str
    processingThreads: int
    openAiRequestTimeout: int
    summaryWordCount: int
    chunkDurationMins: int
    maxTokens: int
    discardIfBelow: int
****************************************

****************************************
Boxer\scripts\common\common_functions.py
****************************************
# Standard library imports
import os
from openai import AzureOpenAI

from common.ApiConfiguration import ApiConfiguration

config = ApiConfiguration()

def ensure_directory_exists(directory):
    """
    Checks if the directory at the given destination exists.
    If it does not exist, creates the directory.

    Parameters:
    directory (str): The path to the directory.
    """
    # Use os.path.join() to handle path construction across different platforms
    if not os.path.exists(directory):
        os.makedirs(directory)
        #print(f"Directory '{directory}' created.")  #  can remove or comment out this print statement for production
    else:
        # print(f"Directory '{directory}' already exists.")
        pass

# Construct the path using os.path.join() for cross-platform compatibility
HTML_DESTINATION_DIR = os.path.join("data", "web")
ensure_directory_exists(HTML_DESTINATION_DIR)

def get_embedding(text : str, client : AzureOpenAI, config : ApiConfiguration):

   text = text.replace("\n", " ")
   response = client.embeddings.create(input = [text], 
                                   model=config.azureEmbedDeploymentName,
                                   timeout=config.openAiRequestTimeout)
   
   return response.data[0].embedding
****************************************

****************************************
Boxer\scripts\common\Urls.py
****************************************
# Standard library imports
import os
import json
import logging

logging.basicConfig(level=logging.INFO)

youTubeUrls = [  
["Stanford CS229: Machine Learning Full Course taught by Andrew Ng | Autumn 2018 - YouTube", "PLoROMvodv4rMiGQp3WXShtMGgzqpfVfbU"],
["Stanford CS224N: Natural Language Processing with Deep Learning | Winter 2021 - YouTube", "PLoROMvodv4rOSH4v6133s9LFPRHjEmbmJ"],
["Braid AI Canon", "PL9LkXkIUrSoxIlFSKcyB21XFFLCCYfPGv"],
["Braid - Additional Content", "PL9LkXkIUrSozgkPNepSMzidqtAGR0b1F_"],
["Augmented Language Models (LLM Bootcamp) (youtube.com)", "PL1T8fO7ArWleyIqOy37OVXsP4hFXymdOZ"]
]

gitHubUrls = [
["Generative AI for Beginners", "microsoft/generative-ai-for-beginners/blob/main", "../msintro"],
["AI Engineering", "swyxio/ai-notes", "../aieng"]
]

webUrls = [
["Software 2.0. by Andrej Karpathy", "https://karpathy.medium.com/software-2-0-a64152b37c35", False],
["Transformers, Explained: Understand the Model Behind GPT-3, BERT, and T5 (daleonai.com)", "https://daleonai.com/transformers-explained", False],
["What Is ChatGPT Doing … and Why Does It Work?—Stephen Wolfram", "https://writings.stephenwolfram.com/2023/02/what-is-chatgpt-doing-and-why-does-it-work/", False],
["How Stable Diffusion Works · Chris McCormick (mccormickml.com)", "https://mccormickml.com/2022/12/21/how-stable-diffusion-works/", False],
["Deep Learning in a Nutshell: Core Concepts | NVIDIA Technical Blog", "https://developer.nvidia.com/blog/deep-learning-nutshell-core-concepts/", False],
["Practical Deep Learning for Coders - Practical Deep Learning (fast.ai)", "https://course.fast.ai/", True],
["Word2Vec Explained. Explaining the Intuition of Word2Vec &… | by Vatsal | Towards Data Science", "https://towardsdatascience.com/word2vec-explained-49c52b4ccb71", False],
["Yes you should understand backprop | by Andrej Karpathy", "https://karpathy.medium.com/yes-you-should-understand-backprop-e2f06eab496b", False],
["The Illustrated Transformer by Jay Alammar (jalammar.github.io)", "https://jalammar.github.io/illustrated-transformer/", False],
["The Annotated Transformer (harvard.edu)", "https://nlp.seas.harvard.edu/annotated-transformer/", False],
["The Illustrated Stable Diffusion by Jay Alammar Visualizing machine learning one concept at a time. (jalammar.github.io)", "https://jalammar.github.io/illustrated-stable-diffusion/", False],
["Huyen Chip's Blog", "https://huyenchip.com/", True],
["Stamford CS234 - Large Language Models", "https://stanford-cs324.github.io/winter2022/lectures/", True],
["The Scaling Hypothesis · Gwern.net", "https://gwern.net/scaling-hypothesis", False],
["chinchilla's wild implications — LessWrong", "https://www.lesswrong.com/posts/6Fpvch8RR29qLEWNH/chinchilla-s-wild-implications", False],
["The AI Revolution: How Auto-GPT Unleashes a New Era of Automation and Creativity | by Sriram Parthasarathy | Towards AI", "https://pub.towardsai.net/the-ai-revolution-how-auto-gpt-unleashes-a-new-era-of-automation-and-creativity-2008aa2ca6ae", False],
["The Waluigi Effect (mega-post) — LessWrong", "https://www.lesswrong.com/posts/D7PumeYTDPfBTp3i7/the-waluigi-effect-mega-post", False],
["Build a GitHub Support Bot with GPT3, LangChain, and Python | Dagster Blog", "https://dagster.io/blog/chatgpt-langchain", False],
["Prompt Engineering Guide | Prompt Engineering Guide (promptingguide.ai)", "https://www.promptingguide.ai/", False],
["Learn | Pinecone", "https://www.pinecone.io/learn/", True],
["Use Cases | Langchain", "https://python.langchain.com/v0.1/docs/use_cases/", True],
["Hugging Face Cookbook", "https://huggingface.co/learn/cookbook", True],
["Open AI Cookbook", "https://cookbook.openai.com/", True],
["State of Open Source AI - 2023 Edition", "https://book.premai.io/state-of-open-source-ai/", True],
["Scaled Agile Framework 6.0", "https://scaledagileframework.com/", True],
["McKinsey on AI", "https://www.mckinsey.com/capabilities/mckinsey-digital/our-insights/the-economic-potential-of-generative-ai-the-next-productivity-frontier", True],
["A16Z Market Analysis", "https://a16z.com/for-b2b-generative-ai-apps-is-less-more/", True],
["A16Z Market Analysis", "https://a16z.com/navigating-the-high-cost-of-ai-compute/", True],
["A16Z Market Analysis", "https://a16z.com/financial-services-will-embrace-generative-ai-faster-than-you-think/", True],
["A16Z Market Analysis", "https://a16z.com/who-owns-the-generative-ai-platform/", True],
["Interaction Design Foundation", "https://www.interaction-design.org/literature/topics/design-thinking", True],
["UX for AI", "https://www.uxforai.com/", True],
["Testing Machine Learning Systems: Code, Data and Models ", "https://madewithml.com/courses/mlops/testing/", True],
["Monitoring Machine Learning Systems: Code, Data and Models ", "https://madewithml.com/courses/mlops/monitoring/", True]
]

#class to store information about each URL
class UrlHit:
    def __init__(self) -> None:
        self.path = ""
        self.desc = ""
        self.hits = 0

    path: str
    desc: str
    hits: int


def countUrlHits(destinationDir, urls, input_filename, output_filename):
    # Set up logging
    logging.basicConfig(level=logging.WARNING)
    logger = logging.getLogger(__name__)

    if not destinationDir:
        logger.error("Output folder not provided")
        exit(1)

    chunks = []
    total_chunks = 0

    logger.debug("Starting hit counting")

    # Load the chunks from a JSON file
    input_file = os.path.join(destinationDir, input_filename)  # Adjusted input_file path

    logger.debug("Input file path: %s", input_file)

    try:
        with open(input_file, "r", encoding="utf-8") as f:
            chunks = json.load(f)
    except FileNotFoundError:
        logger.error("Input file '%s' not found", input_file)
        exit(1)
    except Exception as e:
        logger.error("Error loading JSON file: %s", str(e))
        exit(1)

    total_chunks = len(chunks)
    logger.debug("Total chunks to be processed: %s", total_chunks)

    # Build an empty array to accumulate hits
    hits = [None] * len(urls)
    for i, url in enumerate(urls):
        hit = UrlHit()
        hit.desc = url[0]
        hit.path = url[1]
        hit.hits = 0
        hits[i] = hit

    # Iterate through chunks accumulating hit count
    for chunk in chunks:
        haveHit = False
        haveAda = False

        ada = chunk.get('hitTrackingId')
        if (len(ada) > 0):
            haveAda = True

        for hit in hits:
            source = chunk.get('hitTrackingId')
            if source in hit.path:
                hit.hits += 1
                haveHit = True

        #if not haveHit:
            #raise AssertionError('All chunks should have a hit: ' + chunk.get('sourceId'))

        #if not haveAda:
            #raise AssertionError('All chunks should have an ada')

    # Print the results
    for hit in hits:
        print(hit.desc + ', ' + hit.path + ', ' + str(hit.hits))

    # Save the hits to an output file
    output_file = os.path.join(destinationDir, output_filename)
    logger.debug("Output file path: %s", output_file)   

    try:
        with open(output_file, "w", encoding="utf-8") as f:
            json.dump([hit.__dict__ for hit in hits], f)
        logger.debug("Output file saved at: %s", output_file)
    except Exception as e:
        logger.error("Error saving output file: %s", str(e))
        exit(1)
****************************************

****************************************
Boxer\scripts\common\__init__.py
****************************************

****************************************

****************************************
Boxer\scripts\github\download_markdown.py
****************************************
""" This script downloads the transcripts for all the markdown files in a GitHub repo. """
# Copyright (c) 2024 Braid Technologies Ltd

# Standard Library Imports
import os
import json
import logging
import time
import threading
import queue
import pathlib
from pathlib import Path

# Third-Party Packages
from markdown import markdown
from bs4 import BeautifulSoup

class Counter:
    """Thread-safe counter"""

    def __init__(self):
        """Initialize the counter"""
        self.value = 0
        self.lock = threading.Lock()

    def increment(self):
        """Increment the counter"""
        with self.lock:
            self.value += 1


counter = Counter()

def makeSourceId(repoSourceDir, repoName, filePath):
    """Constructs sourceId from repoSourceDir, repoName, and filePath"""
    relPath = os.path.relpath(filePath, repoSourceDir)
    composite = repoName + '/' + relPath
    unix = Path(composite).as_posix()
    return unix

def md_to_plain_text(md):
    """Converts Markdown content into plain text"""
    html = markdown(md)
    soup = BeautifulSoup(html, features='html.parser')
    fullText = soup.get_text()
    nolineFeeds = fullText.replace("\n", " ")
    return nolineFeeds
    
def get_markdown(fileName, counter_id, repoSourceDir, repoName, markdownDestinationDir, logger):
    """Reads Markdown content from a file and writes out as plain text"""

    sourceId = makeSourceId(repoSourceDir, repoName, fileName)
    fakeName = Path(fileName).name.replace("\\", "_")
    contentOutputFileName = os.path.join(markdownDestinationDir, fakeName + ".json.mdd")
    metaOutputFilename = os.path.join(markdownDestinationDir, fakeName + ".json")

    # if markdown file already exists, skip it
    if os.path.exists(contentOutputFileName):
        logger.debug("Skipping file %d, %s", counter_id, fileName)
        return False    
    
    markdown_content = Path(fileName).read_text(encoding="utf-8")
    plainText = md_to_plain_text(markdown_content) 

    jsonSeg = {"text": plainText, "start": "0"}
    jsonArr = [jsonSeg]
         
    # save the plain text content as a .json.mdd file
    with open(contentOutputFileName, "w", encoding="utf-8") as file:
        json.dump(jsonArr, file, indent=4, ensure_ascii=False)

    metadata = {
        "speaker": "",
        "title": Path(fileName).name,
        "sourceId": sourceId,
        "filename": os.path.basename(contentOutputFileName),
        "description": Path(fileName).name,
        "hitTrackingId": repoName
    }

    # save the metadata as a .json file
    with open(metaOutputFilename, "w", encoding="utf-8") as file:
        json.dump(metadata, file, indent=4, ensure_ascii=False)
    
    logger.debug("Markdown download completed: %d, %s", counter_id, fileName)
    return True

def process_queue(q, repoSourceDir, repoName, markdownDestinationDir, logger):
    """Processes the queue"""
    while not q.empty():
        file = q.get()

        counter.increment()
        get_markdown(file, counter.value, repoSourceDir, repoName, markdownDestinationDir, logger)
        q.task_done()

def download_markdown(repoSourceDir, repoName, markdownDestinationDir): 
    """Main function to download Markdown files"""

    logging.basicConfig(level=logging.WARNING)
    logger = logging.getLogger(__name__)

    MAX_RESULTS = 100
    PROCESSING_THREADS = 1

    q = queue.Queue()

    if not markdownDestinationDir:
        logger.error("Markdown folder not provided")
        exit(1)

    if not repoSourceDir:
        logger.error("Repo name not provided")
        exit(1)

    cwd = os.getcwd()
    logger.debug("Current directory: %s", cwd)
    logger.debug("Repo folder: %s", repoSourceDir)
    logger.debug("Markdown folder: %s", markdownDestinationDir)

    directory_path = Path(repoSourceDir)

    # Use rglob() to recursively search for all files
    searchPath = directory_path.rglob("*.md")
    markdown_files = list(searchPath)

    # Build a queue of Markdown filenames
    for file in markdown_files:
        q.put(str(file))

    logger.info("Total markdown files to be downloaded: %s", q.qsize())

    start_time = time.time()

    # Create multiple threads to process the queue
    threads = []
    for i in range(PROCESSING_THREADS):
        t = threading.Thread(target=process_queue, args=(q, repoSourceDir, repoName, markdownDestinationDir, logger))
        t.start()
        threads.append(t)

    # Wait for all threads to finish
    for t in threads:
        t.join()

    finish_time = time.time()
    logger.debug("Total time taken: %s", finish_time - start_time)
****************************************

****************************************
Boxer\scripts\github\__init__.py
****************************************
from .download_markdown import download_markdown
****************************************

****************************************
Boxer\scripts\test\README.md
****************************************
# Test Scripts README

This README provides instructions on how to run the test scripts located in the `scripts/test/` folder and explains their expected output.

## Table of Contents

1. [Prerequisites](#prerequisites)
2. [Running the Tests](#running-the-tests)
3. [Test Scripts](#test-scripts)
   - [test_web_pipeline.py](#test_web_pipelinepy)
   - [test_youtube_pipeline.py](#test_youtube_pipelinepy)
4. [Expected Output](#expected-output)
5. [Troubleshooting](#troubleshooting)

## Prerequisites

Before running the tests, ensure you have the following:

- Python 3.12.4 installed
- Virtual environment activated
- All required dependencies installed (run `pip install -r scripts/requirements.txt` from the project root)
- Proper environment variables set in your `.env` file

## Running the Tests

To run the test scripts, follow these steps:

1. Navigate to the `scripts/test/` directory:

   ```
   cd scripts/test/
   ```

2. Run the tests using pytest:
   ```
   pytest test_web_pipeline.py test_youtube_pipeline.py
   ```

You can also run each test script separately:

```
pytest -v "test_web_pipeline.py"
pytest -v "test_youtube_pipeline.py"
```

## Test Scripts

### test_web_pipeline.py

This script tests the web content processing pipeline. It includes tests for:

- Downloading HTML content
- Enriching text chunks
- Generating summaries
- Creating embeddings
- Counting URL hits

### test_youtube_pipeline.py

This script tests the YouTube content processing pipeline. It includes tests for:

- Downloading YouTube transcripts
- Enriching transcript chunks
- Generating summaries
- Creating embeddings
- Counting URL hits
- Handling various YouTube API exceptions

## Expected Output

When running the tests, you should see output similar to the following:

```
============================= test session starts ==============================
platform darwin -- Python 3.12.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /path/to/your/project/scripts/test
collected X items

test_web_pipeline.py ...                                                 [ 33%]
test_youtube_pipeline.py ......                                          [100%]

============================== X passed in Y.YYs ===============================
```

Each dot (.) represents a passed test. If a test fails, you'll see an 'F' instead, followed by detailed error information.

## Troubleshooting

If you encounter any issues while running the tests:

1. Ensure all prerequisites are met and dependencies are installed.
2. Check that your `.env` file contains the necessary API keys.
3. Verify that you're running the tests from the correct directory.
4. If a specific test is failing, review the error message and stack trace for more information.
****************************************

****************************************
Boxer\scripts\test\test_3chunks_web_pipeline.py
****************************************
import pytest
import os
import sys
import json
from unittest.mock import MagicMock, patch, mock_open
from pathlib import Path
from collections import namedtuple

# Add the parent directory of the test file to the Python path for importing modules
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)

from scripts.text.enrich_text_chunks import (
    append_text_to_previous_chunk,
    add_new_chunk,
    parse_json_mdd_transcript,
    enrich_text_chunks
)
from scripts.web.download_html import download_html

# Constants for testing, used for calculating chunk sizes and overlaps
PERCENTAGE_OVERLAP = 0.05
AVERAGE_WORDS_PER_MINUTE = 100
AVERAGE_CHARACTERS_PER_TOKEN = 4
AVERAGE_TOKENS_PER_WORD = 1.33

# Mock configuration for the chunking process
Config = namedtuple('Config', ['chunkDurationMins', 'discardIfBelow', 'maxTokens'])
mock_config = Config(chunkDurationMins=1, discardIfBelow=10, maxTokens=15)  # Adjust maxTokens to ensure chunking

# Mock metadata for chunks, used in the tests
mock_metadata = {
    "speaker": "",
    "title": "Test Title",
    "sourceId": "test-source",
    "filename": "test_file.json.mdd",
    "description": "Test description",
    "hitTrackingId": "https://test.com",
    "start": "0",
    "seconds": 145,
    "text": "This is a test text content."
}

def calculate_exact_text_length(config):
    """
    Calculate the exact number of characters required to generate a specified number of chunks.

    Args:
        config: The configuration object with chunk duration and max tokens.

    Returns:
        int: The total number of characters required for the desired number of chunks.
    """
    tokens_per_chunk = config.maxTokens - int(config.maxTokens * PERCENTAGE_OVERLAP)
    characters_per_chunk = tokens_per_chunk * AVERAGE_CHARACTERS_PER_TOKEN
    total_characters_required = characters_per_chunk * 3  # For 3 chunks
    return total_characters_required

def generate_mock_mdd_content(total_characters_required):
    """
    Generate mock content for an MDD file with three parts, based on the total required characters.

    Args:
        total_characters_required: The total number of characters required.

    Returns:
        str: The JSON string representing the mock MDD content.
    """
    sample_text = "This is a paragraph of text. " * (total_characters_required // len("This is a paragraph of text. ") + 1)
    sample_text = sample_text[:total_characters_required]

    return json.dumps([
        {"text": sample_text[:total_characters_required // 3], "start": "0", "duration": "60"},
        {"text": sample_text[total_characters_required // 3: 2 * total_characters_required // 3], "start": "60", "duration": "60"},
        {"text": sample_text[2 * total_characters_required // 3:], "start": "120", "duration": "60"}
    ])

def create_tokenizer_mock():
    """
    Create a mock tokenizer that simulates realistic token encoding behavior.

    Returns:
        MagicMock: A mock tokenizer with customized encoding behavior.
    """
    tokenizer = MagicMock()
    tokenizer.encode = MagicMock(side_effect=lambda text, disallowed_special=None: list(range(len(text.split()))))
    return tokenizer

@patch('scripts.web.download_html.requests.Session')
@patch('builtins.open', new_callable=mock_open)
@patch('json.dump')
def test_download_html(mock_json_dump, mock_file, mock_session):
    """
    Test the download_html function for downloading and processing HTML content.

    Args:
        mock_json_dump: Mock for the json.dump function.
        mock_file: Mock for the open function.
        mock_session: Mock for the requests.Session class.
    """
    # Mock HTML content
    mock_html = "<html><body><p>This is a test paragraph.</p></body></html>"
    mock_response = mock_session.return_value.get.return_value
    mock_response.content = mock_html.encode('utf-8')
    mock_response.text = mock_html

    # Mock BeautifulSoup
    with patch('scripts.web.download_html.BeautifulSoup') as mock_bs:
        mock_bs.return_value.get_text.return_value = "This is a test paragraph."

        # Run the download_html function
        download_html('http://example.com', False, '/tmp/html', 1)

    # Adjusted expected file path for content
    expected_content_file_path = os.path.normpath('/tmp/html/example.com.json.mdd')
    expected_metadata_file_path = os.path.normpath('/tmp/html/example.com.json')

    # Normalize the actual file paths called with
    actual_content_file_path = os.path.normpath(mock_file.call_args_list[0][0][0])
    actual_metadata_file_path = os.path.normpath(mock_file.call_args_list[1][0][0])

    # Check that the files were opened with the correct paths
    assert actual_content_file_path == expected_content_file_path
    assert actual_metadata_file_path == expected_metadata_file_path

    # Check if json.dump was called with correct content data
    expected_content = [{"text": "This is a test paragraph.", "start": "0"}]
    mock_json_dump.assert_any_call(expected_content, mock_file(), indent=4, ensure_ascii=False)

def test_append_text_to_previous_chunk():
    """
    Test the append_text_to_previous_chunk function to verify text is correctly appended with overlap.
    """
    chunks = [{"text": "Hello world "}]
    text = "This is a test sentence."

    append_text_to_previous_chunk(text, chunks)

    words = text.split(" ")
    expected_overlap_length = int(len(words) * PERCENTAGE_OVERLAP)
    expected_overlap = " ".join(words[:expected_overlap_length])
    assert chunks[-1]["text"].endswith(expected_overlap)

def test_add_new_chunk():
    """
    Test the add_new_chunk function to ensure new chunks are correctly added.
    """
    metadata = {"title": "Test Title", "description": "Test description", "start": "0"}
    text = "This is a test sentence."
    chunk_begin_tokens = 0
    chunks = []
    minimumSegmentTokenCount = 3

    add_new_chunk(metadata, text, chunk_begin_tokens, chunks, minimumSegmentTokenCount)

    assert len(chunks) == 1
    assert chunks[0]["text"] == text
    assert chunks[0]["start"] == str(chunk_begin_tokens)

    characters_per_minute = AVERAGE_WORDS_PER_MINUTE * AVERAGE_CHARACTERS_PER_TOKEN
    expected_seconds = int(len(text) / (characters_per_minute / 60))
    assert chunks[0]["seconds"] == expected_seconds

def test_parse_json_mdd_transcript(tmp_path):
    """
    Test the parse_json_mdd_transcript function with a manually created MDD file.

    Args:
        tmp_path: A pytest fixture providing a temporary directory.
    """
    config = MagicMock()
    config.chunkDurationMins = 1
    config.discardIfBelow = 1
    config.maxTokens = 15  # Adjust maxTokens to force chunking

    metadata = {
        "title": "Test Title",
        "description": "Test description",
        "filename": "test_mdd.json.mdd",
        "start": "0",
        "seconds": 180
    }

    total_characters_required = calculate_exact_text_length(config)
    tokenizer = create_tokenizer_mock()

    # Write the mock MDD content to a temporary file
    mock_mdd_content = generate_mock_mdd_content(total_characters_required)
    mdd_path = tmp_path / "test_mdd.json.mdd"
    mdd_path.write_text(mock_mdd_content)

    chunks = []
    parse_json_mdd_transcript(config, str(mdd_path), metadata, tokenizer, chunks)

    assert len(chunks) == 3

@pytest.fixture
def mock_file_system(tmp_path):
    """
    A pytest fixture to create a mock file system structure for testing.

    Args:
        tmp_path: A pytest fixture providing a temporary directory.

    Returns:
        str: The path to the mock file system.
    """
    # Create a temporary directory structure
    markdown_dir = tmp_path / "markdown"
    markdown_dir.mkdir()

    total_characters_required = calculate_exact_text_length(mock_config)
    sample_text = "This is a paragraph of text. " * (total_characters_required // len("This is a paragraph of text. ") + 1)
    sample_text = sample_text[:total_characters_required]

    # Ensure the mock MDD content has the exact length for 3 chunks
    sample_mdd_content = json.dumps([
        {"text": sample_text[:total_characters_required // 3], "start": "0", "duration": "60"},
        {"text": sample_text[total_characters_required // 3: 2 * total_characters_required // 3], "start": "60", "duration": "60"},
        {"text": sample_text[2 * total_characters_required // 3:], "start": "120", "duration": "60"}
    ])

    (markdown_dir / "test_file.json").write_text(json.dumps(mock_metadata))
    (markdown_dir / "test_file.json.mdd").write_text(sample_mdd_content)
    return str(markdown_dir)

@patch('tiktoken.encoding_for_model')
def test_enrich_text_chunks(mock_tokenizer, mock_file_system):
    """
    Test the enrich_text_chunks function to ensure text chunking and file output are correctly handled.

    Args:
        mock_tokenizer: Mock for the tokenizer.
        mock_file_system: Mock file system structure provided by the fixture.
    """
    # Mock the tokenizer
    mock_tokenizer.return_value.encode.side_effect = lambda text, **kwargs: list(range(len(text.split())))

    # Adjust config to force multiple chunks
    mock_config = Config(chunkDurationMins=1, discardIfBelow=1, maxTokens=15)  # Adjust maxTokens to a small number

    # Run the function
    enrich_text_chunks(mock_config, mock_file_system)

    # Check if the output file was created
    output_file = Path(mock_file_system) / "output" / "master_text.json"
    assert output_file.exists()

    # Read the output file and check its content
    with open(output_file, 'r') as f:
        output_content = json.load(f)

    # Assert the structure and content of the output
    assert isinstance(output_content, list)
    assert len(output_content) == 3
    print(output_content )
if __name__ == "__main__":
    pytest.main()
****************************************

****************************************
Boxer\scripts\test\test_utility.py
****************************************
""" This script will take a list of questions and run them through the test pipeline."""
# Copyright (c) 2024 Braid Technologies Ltd

# Standard Library Imports
import logging
from logging import Logger
import os
import json

# Third-Party Packages
import openai
from openai import AzureOpenAI
from openai import BadRequestError

from tenacity import (
    retry,
    wait_random_exponential,
    stop_after_attempt,
    retry_if_not_exception_type,
)
from rich.progress import Progress
import numpy as np
from numpy.linalg import norm

# Local Modules
from common.ApiConfiguration import ApiConfiguration
from common.common_functions import get_embedding

kOpenAiPersonaPrompt = "You are an AI assistant helping an application developer understand generative AI. You explain complex concepts in simple language, using Python examples if it helps. You limit replies to 50 words or less. If you don't know the answer, say 'I don't know'. If the question is not related to building AI applications, Python, or Large Language Models (LLMs), say 'That doesn't seem to be about AI'."
kInitialQuestionPrompt = "You are an AI assistant helping an application developer understand generative AI. You will be presented with a question. Answer the question in a few sentences, using language a suitable for a technical graduate student will understand. Limit your reply to 50 words or less. If you don't know the answer, say 'I don't know'. If the question is not related to building AI applications, Python, or Large Language Models (LLMs), say 'That doesn't seem to be about AI'.\n"
kEnrichmentPrompt = "You will be provided with a question about building applications that use generative AI technology. Write a 50 word summary of an article that would be a great answer to the question. Consider enriching the question with additional topics that the question asker might want to understand. Write the summary in the present tense, as though the article exists. If the question is not related to building AI applications, Python, or Large Language Models (LLMs), say 'That doesn't seem to be about AI'.\n"
kFollowUpPrompt = "You will be provided with a summary of an article about building applications that use generative AI technology. Write a question of no more than 10 words that a reader might ask as a follow up to reading the article."
kEnrichmentQuestionPrefix = "Question:"
kFollowUpPrefix = "Article summary: "

class test_result:
    def __init__(self) -> None:
        self.question = ""
        self.enriched_question = ""        
        self.hit = False 
        self.hitRelevance = 0
        self.hitSummary = ""
        self.followUp = ""
        self.followUpOnTopic = ""

    question: str
    enriched_question: str    
    hit: bool
    hitRelevance: float
    hitSummary: str
    followUp: str
    followUpOnTopic: str  # Corrected typo here

@retry(
    wait=wait_random_exponential(min=5, max=15),
    stop=stop_after_attempt(5),
    retry=retry_if_not_exception_type(openai.BadRequestError),
)
def get_enriched_question(client: AzureOpenAI, config: ApiConfiguration, text: str, logger):
    """Generate a summary using chatgpt"""

    messages = [
        {
            "role": "system",
            "content": kOpenAiPersonaPrompt,
        },
        {
           "role": "user", 
           "content": kEnrichmentPrompt + kEnrichmentQuestionPrefix + text
        },
    ]

    response = client.chat.completions.create(
        model=config.azureDeploymentName,
        messages=messages,
        temperature=0.7,
        max_tokens=config.maxTokens,
        top_p=0.0,
        frequency_penalty=0,
        presence_penalty=0,
        stop=None,
        timeout=config.openAiRequestTimeout
    )

    text = response.choices[0].message.content
    finish_reason = response.choices[0].finish_reason

    if finish_reason != "stop" and finish_reason != 'length' and finish_reason != "":
        logger.warning("Stop reason: %s", finish_reason)
        logger.warning("Text: %s", text)
        logger.warning("Increase Max Tokens and try again")
        exit(1)

    return text


@retry(
    wait=wait_random_exponential(min=5, max=15),
    stop=stop_after_attempt(5),
    retry=retry_if_not_exception_type(openai.BadRequestError),
)
def get_text_embedding(client: AzureOpenAI, config: ApiConfiguration, text: str, logger: Logger) : 
    """Get the embedding for a text"""

    embedding = get_embedding (text, client, config)
    return embedding


@retry(
    wait=wait_random_exponential(min=5, max=15),
    stop=stop_after_attempt(5),
    retry=retry_if_not_exception_type(openai.BadRequestError),
)
def get_followup_question(client: AzureOpenAI, config: ApiConfiguration, text: str, logger):
    """Generate a summary using chatgpt"""

    messages = [
        {
            "role": "system",
            "content": kFollowUpPrompt,
        },
        {
           "role": "user", 
           "content": text
        },
    ]

    response = client.chat.completions.create(
        model=config.azureDeploymentName,
        messages=messages,
        temperature=0.7,
        max_tokens=config.maxTokens,
        top_p=0.0,
        frequency_penalty=0,
        presence_penalty=0,
        stop=None,
        timeout=config.openAiRequestTimeout
    )

    text = response.choices[0].message.content
    finish_reason = response.choices[0].finish_reason

    if finish_reason != "stop" and finish_reason != 'length' and finish_reason != "":
        logger.warning("Stop reason: %s", finish_reason)
        logger.warning("Text: %s", text)
        logger.warning("Increase Max Tokens and try again")
        exit(1)

    return text

@retry(
    wait=wait_random_exponential(min=5, max=15),
    stop=stop_after_attempt(5),
    retry=retry_if_not_exception_type(openai.BadRequestError),
)
def assess_followup_question(client: AzureOpenAI, config: ApiConfiguration, text: str, logger):
    """Generate a summary using chatgpt"""

    messages = [
        {
            "role": "system",
            "content": "You are an AI assistant helping a team of developers understand AI. You explain complex concepts in simple language. You will be asked a question. Respond 'yes' if the question appears to be about AI, otherwise respond 'no'."
        },
        {
           "role": "user", 
           "content": text
        },
    ]

    response = client.chat.completions.create(
        model=config.azureDeploymentName,
        messages=messages,
        temperature=0.7,
        max_tokens=config.maxTokens,
        top_p=0.0,
        frequency_penalty=0,
        presence_penalty=0,
        stop=None,
        timeout=config.openAiRequestTimeout
    )

    text = response.choices[0].message.content
    finish_reason = response.choices[0].finish_reason

    if finish_reason != "stop" and finish_reason != 'length' and finish_reason != "":
        logger.warning("Stop reason: %s", finish_reason)
        logger.warning("Text: %s", text)
        logger.warning("Increase Max Tokens and try again")
        exit(1)

    return text

def cosine_similarity(a, b): 
   result = np.dot(a, b) / (norm(a) * norm(b))
   return result

def run_tests(config, testDestinationDir, sourceDir, questions): 
   """Run tests with given questions"""

   logging.basicConfig(level=logging.WARNING)
   logger = logging.getLogger(__name__)

   client = AzureOpenAI(
      azure_endpoint = config.resourceEndpoint, 
      api_key=config.apiKey,  
      api_version=config.apiVersion
   )      
   
   if not testDestinationDir:
      logger.error("Test data folder not provided")
      exit(1)

   results = []

   # load the existing chunks from a json file
   cache_file = os.path.join(sourceDir, "embeddings_lite.json")
   if os.path.isfile(cache_file):
      with open(cache_file, "r", encoding="utf-8") as f:
         current = json.load(f)       

   logger.info("Starting test run, total questions to be processed: %s", len(questions))

   for question in questions:
      result = test_result()
      result.question = question

      result.enriched_question = get_enriched_question(client, config, question, logger)

      # Convert the text of the enriched question to a vector embedding
      embedding = get_text_embedding(client, config, result.enriched_question, logger)
   
      # Iterate through the chunks we have stored 
      for chunk in current:
         
         # calculate the similarity between the chunk and the question
         ada = chunk.get("ada_v2")
         similarity = cosine_similarity(ada, embedding)

         # If we pass a reasonableness threshold, count it as a hit
         if similarity > 0.8:
            result.hit = True
         
         # If it is the best hit so far, record the match
         if similarity > result.hitRelevance:
            result.hitRelevance = similarity 
            result.hitSummary = chunk.get("summary")

      # Ask GPT for a follow-up question on the best match
      # Once we have a follow-up, ask GPT if the follow-up looks like it is about AI            
      result.followUp = get_followup_question(client, config, result.hitSummary, logger)
      result.followUpOnTopic = assess_followup_question(client, config, result.followUp, logger)            

      results.append(result)

   logger.debug("Total tests processed: %s", len(results))

   output_results = []
   for result in results:
      output = dict()
      output["question"] = result.question
      output["enriched_question"] = result.enriched_question
      output["hit"] = result.hit   
      output["summary"] = result.hitSummary        
      output["hitRelevance"] = result.hitRelevance      
      output["followUp"] = result.followUp  
      output["followUpOnTopic"] = result.followUpOnTopic             
      output_results.append(output)
      
   # save the test results to a json file
   output_file = os.path.join(testDestinationDir, "test_output.json")
   with open(output_file, "w", encoding="utf-8") as f:
      json.dump(output_results, f)
****************************************

****************************************
Boxer\scripts\test\test_web_pipeline.py
****************************************
# Copyright (c) 2024 Braid Technologies Ltd

# Standard Library Imports
import pytest
import os
import json
import shutil
import sys
import logging

# Set up logging to display information about the execution of the script
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)
logging.getLogger().setLevel(logging.DEBUG)

# Add the project root and scripts directory to the Python path
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
scripts_dir = os.path.join(project_root, 'scripts')
sys.path.extend([project_root, scripts_dir])

# Import necessary modules from the project
from common.ApiConfiguration import ApiConfiguration
from common.Urls import webUrls, countUrlHits
from common.common_functions import ensure_directory_exists
from web.download_html import download_html
from text.enrich_text_chunks import enrich_text_chunks
from text.enrich_text_summaries import enrich_text_summaries
from text.enrich_text_embeddings import enrich_text_embeddings
from text.enrich_lite import enrich_lite


'''

def create_mock_html_files(test_output_dir, source_url):
    """Create mock HTML files for testing."""
    html_dir = os.path.join(test_output_dir, "html")
    os.makedirs(html_dir, exist_ok=True)
    
    # Create three mock HTML files
    for i in range(3):
        filename = f"mock_page_{i}.json.mdd"
        filepath = os.path.join(html_dir, filename)
        content = [{"text": f"This is mock content for chunk {i}", "start": str(i * 100)}]
        with open(filepath, "w") as f:
            json.dump(content, f)
        
        # Create corresponding metadata file
        meta_filename = f"mock_page_{i}.json"
        meta_filepath = os.path.join(html_dir, meta_filename)
        metadata = {
            "speaker": "",
            "title": f"Mock Page {i}",
            "sourceId": f"{source_url}/page{i}",
            "filename": filename,
            "description": f"Mock description for page {i}",
            "hitTrackingId": source_url
        }
        with open(meta_filepath, "w") as f:
            json.dump(metadata, f)

def test_chunk_addition(tmp_path, config: ApiConfiguration):
    logger.info("Starting chunk addition test")

    test_output_dir = os.path.join(str(tmp_path), "test_output")
    os.makedirs(test_output_dir, exist_ok=True)
    logger.info(f"Created test output directory: {test_output_dir}")

    source_url = "http://example.com/test"
    create_mock_html_files(test_output_dir, source_url)

    # Mock the download_html function to avoid actual web requests
    with patch('web.download_html.download_html', return_value=None):
        # Run the enrichment process
        enrich_text_chunks(config, test_output_dir)

    # Check the output
    master_text_path = os.path.join(test_output_dir, "output", "master_text.json")
    assert os.path.exists(master_text_path), f"master_text.json not found at {master_text_path}"

    with open(master_text_path, "r") as f:
        chunks = json.load(f)

    # Verify that we have exactly 3 chunks
    assert len(chunks) == 3, f"Expected 3 chunks, but got {len(chunks)}"

    # Verify that each chunk has the correct structure and content
    for i, chunk in enumerate(chunks):
        assert chunk["sourceId"] == f"{source_url}/page{i}", f"Incorrect sourceId for chunk {i}"
        assert chunk["text"].startswith(f"This is mock content for chunk {i}"), f"Incorrect content for chunk {i}"
        assert chunk["start"] == str(i * 100), f"Incorrect start time for chunk {i}"
        assert "seconds" in chunk, f"Missing 'seconds' field in chunk {i}"
        assert chunk["hitTrackingId"] == source_url, f"Incorrect hitTrackingId for chunk {i}"

    logger.info("Chunk addition test completed successfully")

'''
# Fixture to create a temporary directory for test output
@pytest.fixture
def test_output_dir(tmpdir):
    dir_path = tmpdir.mkdir("test_output")
    logger.info(f"Created temporary test output directory: {dir_path}")
    yield str(dir_path)
    # Clean up after the test
    logger.info(f"Cleaning up test output directory: {dir_path}")
    shutil.rmtree(str(dir_path))

# Fixture to create an instance of ApiConfiguration
@pytest.fixture
def config():
    logger.info("Creating ApiConfiguration instance")
    return ApiConfiguration()

# Function to check if the content from a source URL is present in the specified file
def check_content(file_path, source_url):
    logger.info(f"Checking content for source URL: {source_url}")
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Could not find master_text.json at {file_path}")
        
        with open(file_path, "r", encoding="utf-8") as f:
            content = json.load(f)
        matching_chunks = [chunk for chunk in content if chunk["hitTrackingId"] == source_url]
        logger.info(f"Found {len(matching_chunks)} chunks for source: {source_url}")
        assert matching_chunks, f"Content from source {source_url} not found"
        return matching_chunks
    except Exception as e:
        logger.error(f"Error checking content for {source_url}: {str(e)}")
        raise

# Function to run the entire pipeline of text enrichment processes
def run_pipeline(config, output_dir):
    logger.info(f"Running pipeline for output directory: {output_dir}")
    try:
        enrich_text_chunks(config, output_dir)
        enrich_text_summaries(config, output_dir)
        enrich_text_embeddings(config, output_dir)
        enrich_lite(output_dir)
        logger.info("Pipeline completed successfully")
    except Exception as e:
        logger.error(f"Error running pipeline: {str(e)}")
        raise

# Function to verify the hit counts for the expected number of sources

def verify_hit_counts(output_dir, expected_sources):
    logger.info(f"Verifying hit counts for {expected_sources} expected sources")
    try:
        with open(os.path.join(output_dir, "hit_test_results.json"), "r", encoding="utf-8") as f:
            hit_counts = json.load(f)
        
        assert len(hit_counts) == expected_sources, f"Expected hit counts for {expected_sources} sources, got {len(hit_counts)}"
        
        for i, hit in enumerate(hit_counts):
            logger.info(f"Source {i+1} ({hit['path']}) hit count: {hit['hits']}")
            assert hit['hits'] > 0, f"No hits found for source {hit['path']}. Hit counts: {hit_counts}"
        
        logger.info("Hit count verification completed successfully")
    except Exception as e:
        logger.error(f"Error verifying hit counts: {str(e)}")
        raise

def test_web_pipeline(tmp_path, config: ApiConfiguration):
    logger.info("Starting web pipeline test")

    # Create a new directory for test output
    test_output_dir = os.path.join(str(tmp_path), "test_output")
    os.makedirs(test_output_dir, exist_ok=True)
    logger.info(f"Created test output directory: {test_output_dir}")

    # Clean contents (in case of a failed previous run)
    for item in os.listdir(test_output_dir):
        item_path = os.path.join(test_output_dir, item)
        if os.path.isdir(item_path):
            shutil.rmtree(item_path)
        else:
            os.remove(item_path)
    logger.info("Cleaned test output directory")

    source1 = webUrls[0]  # First source URL
    source2 = webUrls[1]  # Second source URL

    try:
        # Download source 1 and run the whole pipeline
        logger.info(f"Downloading and processing source 1: {source1[1]}")
        download_html(source1[1], source1[2], test_output_dir, config.discardIfBelow)
        run_pipeline(config, test_output_dir)

        # Load JSON output and confirm content from source 1
        master_text_path = os.path.join(test_output_dir, "output", "master_text.json")
        source1_chunks = check_content(master_text_path, source1[1])
        assert source1_chunks, f"No content found for source 1: {source1[1]}"
        logger.info("Confirmed content from source 1")

        # Add source 2 and run the whole pipeline again
        logger.info(f"Downloading and processing source 2: {source2[1]}")
        download_html(source2[1], source2[2], test_output_dir, config.discardIfBelow)
        run_pipeline(config, test_output_dir)

        # Load JSON output and confirm content from both sources
        source1_chunks = check_content(master_text_path, source1[1])
        source2_chunks = check_content(master_text_path, source2[1])
        assert source1_chunks, f"No content found for source 1: {source1[1]}"
        assert source2_chunks, f"No content found for source 2: {source2[1]}"
        logger.info("Confirmed content from both sources")

        # Count URL hits
        test_webUrls = [source1, source2]
        logger.info("Counting URL hits")
        output_dir = os.path.join(test_output_dir, "output")
        countUrlHits(output_dir, test_webUrls, "master_text.json", "hit_test_results.json")

        # Verify the hit counts
        verify_hit_counts(output_dir, 2)  # Expect 2 sources with hits

        logger.info("Web pipeline test completed successfully")

    except Exception as e:
        logger.error(f"Web pipeline test failed: {str(e)}")
        raise

    finally:
        # Clean up by deleting the test output directory and all files
        shutil.rmtree(test_output_dir)
        logger.info(f"Cleaned up test output directory: {test_output_dir}")

    logger.info("Web pipeline test completed")
****************************************

****************************************
Boxer\scripts\test\test_youtube_pipeline.py
****************************************
# Copyright (c) 2024 Braid Technologies Ltd

# Standard Library Imports
import pytest
import os
import json
import shutil
import sys
import logging
import re
from unittest.mock import patch, MagicMock
from typing import List, Dict, Any, Optional

# Third-Party Packages
from youtube_transcript_api import NoTranscriptFound, TranscriptsDisabled, VideoUnavailable

# Set up logging to display information about the execution of the script
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

#Configurations to omit an out of scope log 
logging.getLogger("openai._base_client").setLevel(logging.WARNING)

# Add the project root and scripts directory to the Python path
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
scripts_dir = os.path.join(project_root, 'scripts')
sys.path.extend([project_root, scripts_dir])

class IgnoreSpecificWarningsFilter(logging.Filter):
    """
    A custom logging filter to ignore specific warning messages.

    This filter is designed to remove warning logs that match a specific pattern
    related to RetryError and APIConnectionError.
    """

    def __init__(self) -> None:
        """
        Initialize the IgnoreSpecificWarningsFilter.

        Sets up the regex pattern to match the specific warning messages to be filtered.
        """
        super().__init__()
        self.pattern = re.compile(r'Error: RetryError\[<Future at 0x[0-9a-fA-F]+ state=finished raised APIConnectionError>\]')

    def filter(self, record: logging.LogRecord) -> bool:
        """
        Filter log records based on the predefined pattern.

        Args:
            record (logging.LogRecord): The log record to be filtered.

        Returns:
            bool: True if the log should be kept, False if it should be filtered out.
        """
        if record.levelno == logging.WARNING:
            return not self.pattern.search(record.getMessage())
        return True


custom_filter = IgnoreSpecificWarningsFilter()

for name in logging.root.manager.loggerDict:
    logging.getLogger(name).addFilter(custom_filter)

# Import necessary modules from the project
from common.ApiConfiguration import ApiConfiguration
from common.Urls import youTubeUrls, countUrlHits
from common.common_functions import ensure_directory_exists
from youtube.download_transcripts import download_transcripts, get_transcript
from youtube.enrich_transcript_chunks import enrich_transcript_chunks
from youtube.enrich_transcript_summaries import enrich_transcript_summaries
from youtube.enrich_transcript_embeddings import enrich_transcript_embeddings
from text.enrich_lite import enrich_lite

@pytest.fixture
def test_output_dir(tmpdir) -> str:
    """
    Fixture to create a temporary directory for test output.

    Args:
        tmpdir: pytest fixture for temporary directory

    Returns:
        str: Path to the temporary test output directory
    """
    dir_path = tmpdir.mkdir("test_output")
    logger.info(f"Created temporary test output directory: {dir_path}")
    yield str(dir_path)
    # Clean up after the test
    logger.info(f"Cleaning up test output directory: {dir_path}")
    shutil.rmtree(str(dir_path))

@pytest.fixture
def config() -> ApiConfiguration:
    """
    Fixture to create an instance of ApiConfiguration.

    Returns:
        ApiConfiguration: An instance of the ApiConfiguration class
    """
    logger.info("Creating ApiConfiguration instance")
    return ApiConfiguration()

def check_content(file_path: str, source_id: str) -> List[Dict[str, Any]]:
    """
    Check if the content from a source URL is present in the specified file.

    Args:
        file_path (str): Path to the JSON file containing the content
        source_id (str): ID of the source to check for

    Returns:
        List[Dict[str, Any]]: List of chunks matching the source ID

    Raises:
        FileNotFoundError: If the specified file is not found
    """
    logger.info(f"Checking content for source ID: {source_id}")
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Could not find master_enriched.json at {file_path}")
        
        with open(file_path, "r", encoding="utf-8") as f:
            content = json.load(f)
        
        if not content:
            logger.warning(f"File {file_path} is empty")
            return []

        # Log the structure of the first few items for debugging
        logger.info(f"Sample content structure: {json.dumps(content[:2], indent=2)}")
        
        # Check for sourceId or any other potential identifier
        matching_chunks = [
            chunk for chunk in content 
            if chunk.get("sourceId") == source_id or
               chunk.get("playlistId") == source_id or
               chunk.get("hitTrackingId") == source_id
        ]
        
        logger.info(f"Found {len(matching_chunks)} chunks for source: {source_id}")
        
        if not matching_chunks:
            # Log all unique identifiers in the content for debugging
            unique_ids = set(
                chunk.get("sourceId") or chunk.get("playlistId") or chunk.get("hitTrackingId")
                for chunk in content
            )
            logger.warning(f"Available unique identifiers in content: {unique_ids}")
        
        return matching_chunks
    except Exception as e:
        logger.error(f"Error checking content for {source_id}: {str(e)}")
        raise

def run_pipeline(config: ApiConfiguration, output_dir: str) -> None:
    """
    Run the entire pipeline of transcript enrichment processes.

    Args:
        config (ApiConfiguration): Configuration object for API settings
        output_dir (str): Directory to store output files

    Raises:
        Exception: If any step in the pipeline fails
    """
    logger.info(f"Running pipeline for output directory: {output_dir}")
    try:
        logger.info("Starting enrich_transcript_chunks")
        enrich_transcript_chunks(config, output_dir)
        logger.info("Completed enrich_transcript_chunks")

        logger.info("Starting enrich_transcript_summaries")
        enrich_transcript_summaries(config, output_dir)
        logger.info("Completed enrich_transcript_summaries")

        logger.info("Starting enrich_transcript_embeddings")
        enrich_transcript_embeddings(config, output_dir)
        logger.info("Completed enrich_transcript_embeddings")

        logger.info("Starting enrich_lite")
        enrich_lite(output_dir)
        logger.info("Completed enrich_lite")

        logger.info("Pipeline completed successfully")
    except Exception as e:
        logger.error(f"Error running pipeline: {str(e)}", exc_info=True)
        raise

def verify_hit_counts(output_dir: str, expected_sources: int) -> None:
    """
    Verify the hit counts for the expected number of sources.

    Args:
        output_dir (str): Directory containing the hit count results
        expected_sources (int): Expected number of sources

    Raises:
        AssertionError: If the hit counts do not match expectations
    """
    logger.info(f"Verifying hit counts for {expected_sources} expected sources")
    try:
        with open(os.path.join(output_dir, "hit_test_results.json"), "r", encoding="utf-8") as f:
            hit_counts = json.load(f)
        
        assert len(hit_counts) == expected_sources, f"Expected hit counts for {expected_sources} sources, got {len(hit_counts)}"
        
        for i, hit in enumerate(hit_counts):
            logger.info(f"Source {i+1} ({hit['path']}) hit count: {hit['hits']}")
            assert hit['hits'] > 0, f"No hits found for source {hit['path']}. Hit counts: {hit_counts}"
        
        logger.info("Hit count verification completed successfully")
    except Exception as e:
        logger.error(f"Error verifying hit counts: {str(e)}")
        raise

def test_youtube_pipeline(tmp_path: str, config: ApiConfiguration) -> None:
    """
    Test the entire YouTube pipeline process.

    Args:
        tmp_path (str): Temporary path for test output
        config (ApiConfiguration): Configuration object for API settings

    Raises:
        Exception: If any step in the pipeline test fails
    """
    logger.info("Starting YouTube pipeline test")

    # Create a new directory for test output
    test_output_dir = os.path.join(str(tmp_path), "test_output")
    os.makedirs(test_output_dir, exist_ok=True)
    logger.info(f"Created test output directory: {test_output_dir}")

    # Clean contents (in case of a failed previous run)
    for item in os.listdir(test_output_dir):
        item_path = os.path.join(test_output_dir, item)
        if os.path.isdir(item_path):
            shutil.rmtree(item_path)
        else:
            os.remove(item_path)
    logger.info("Cleaned test output directory")

    source1 = youTubeUrls[0]  # First source URL
    source2 = youTubeUrls[1]  # Second source URL

    logger.info(f"Source 1: {source1}")
    logger.info(f"Source 2: {source2}")

    try:
        # Download source 1 and run the whole pipeline
        logger.info(f"Downloading and processing source 1: {source1[1]}")
        logger.info(f"Transcript destination directory: {test_output_dir}")
        download_transcripts(source1[1], test_output_dir)
        run_pipeline(config, test_output_dir)

        # Load JSON output and confirm content from source 1
        master_enriched_path = os.path.join(test_output_dir, "output", "master_enriched.json")
        source1_chunks = check_content(master_enriched_path, source1[1])
        assert source1_chunks, f"No content found for source 1: {source1[1]}"
        logger.info("Confirmed content from source 1")

        # Add source 2 and run the whole pipeline again
        logger.info(f"Downloading and processing source 2: {source2[1]}")
        logger.info(f"Transcript destination directory: {test_output_dir}")
        download_transcripts(source2[1], test_output_dir)
        run_pipeline(config, test_output_dir)

        # Load JSON output and confirm content from both sources
        source1_chunks = check_content(master_enriched_path, source1[1])
        source2_chunks = check_content(master_enriched_path, source2[1])
        assert source1_chunks, f"No content found for source 1: {source1[1]}"
        assert source2_chunks, f"No content found for source 2: {source2[1]}"
        logger.info("Confirmed content from both sources")

        # Count URL hits
        test_youTubeUrls = [source1, source2]
        logger.info("Counting URL hits")
        output_dir = os.path.join(test_output_dir, "output")
        countUrlHits(output_dir, test_youTubeUrls, "master_enriched.json", "hit_test_results.json")

        # Verify the hit counts
        verify_hit_counts(output_dir, 2)  # Expect 2 sources with hits

        logger.info("YouTube pipeline test completed successfully")

    except Exception as e:
        logger.error(f"YouTube pipeline test failed: {str(e)}")
        raise

    finally:
        # Clean up by deleting the test output directory and all files
        shutil.rmtree(test_output_dir)
        logger.info(f"Cleaned up test output directory: {test_output_dir}")

    logger.info("YouTube pipeline test completed")

@pytest.mark.parametrize("exception_class, expected_result", [
    (TranscriptsDisabled, False),
    (VideoUnavailable, False),
    (Exception, False)
])
def test_get_transcript_exceptions(exception_class: Exception, expected_result: bool) -> None:
    """
    Test get_transcript function for various exception scenarios.

    Args:
        exception_class (Exception): The exception class to be raised
        expected_result (bool): The expected return value of get_transcript

    This test ensures that get_transcript handles different exceptions correctly.
    """
    mock_playlist_item = {
        "snippet": {
            "resourceId": {
                "videoId": "test_video_id"
            }
        }
    }
    mock_logger = MagicMock()
    
    with patch('youtube.download_transcripts.YouTubeTranscriptApi.get_transcript') as mock_get_transcript:
        mock_get_transcript.side_effect = exception_class("Test exception")
        
        result = get_transcript(mock_playlist_item, 1, "/tmp/test_dir", mock_logger)
        
        assert result == expected_result
        mock_logger.debug.assert_called()

def test_get_transcript_success() -> None:
    """
    Test successful scenario of get_transcript function.

    This test ensures that get_transcript works correctly when transcript retrieval is successful.
    """
    mock_playlist_item = {
        "snippet": {
            "resourceId": {
                "videoId": "test_video_id"
            }
        }
    }
    mock_logger = MagicMock()
    mock_transcript = [{"text": "Test transcript"}]
    
    with patch('youtube.download_transcripts.YouTubeTranscriptApi.get_transcript') as mock_get_transcript, \
         patch('builtins.open', MagicMock()) as mock_open, \
         patch('os.makedirs') as mock_makedirs:
        mock_get_transcript.return_value = mock_transcript
        
        result = get_transcript(mock_playlist_item, 1, "/tmp/test_dir", mock_logger)
        
        assert result == True
        mock_logger.debug.assert_called_with("Transcription download completed: %d, %s", 1, "test_video_id")
        mock_open.assert_called_once()
        mock_makedirs.assert_called_once()

def test_get_transcript_file_exists() -> None:
    """
    Test get_transcript function when the transcript file already exists.

    This test ensures that get_transcript skips downloading when the transcript file is already present.
    """
    mock_playlist_item = {
        "snippet": {
            "resourceId": {
                "videoId": "test_video_id"
            }
        }
    }
    mock_logger = MagicMock()
    
    with patch('os.path.exists', return_value=True):
        result = get_transcript(mock_playlist_item, 1, "/tmp/test_dir", mock_logger)
        
        assert result == False
        mock_logger.debug.assert_called_with("Skipping video %d, %s", 1, "test_video_id")

if __name__ == "__main__":
    pytest.main([__file__])
****************************************

****************************************
Boxer\scripts\test\__init__.py
****************************************

****************************************

****************************************
Boxer\scripts\text\enrich_lite.py
****************************************
""" This script removes the text from the enriched transcript and saves it as a new json file."""
# Copyright (c) 2024 Braid Technologies Ltd

# Standard Library Imports
import json
import os
import logging

def remove_text(segments):
    """This function removes the text from each dictionary in the list."""
    return [
        {k: v for k, v in seg.items() if k != "text" and k != "description"}
        for seg in segments
    ]

def enrich_lite(destinationDir): 
    """Remove text from enriched transcript and save as a new JSON file."""
    
    logging.basicConfig(level=logging.WARNING)
    logger = logging.getLogger(__name__)

    if not destinationDir:
        logger.error("Output folder not provided")
        exit(1)

    # Load source list from JSON file
    input_file = os.path.join(destinationDir, "output", "master_enriched.json")
    with open(input_file, "r", encoding="utf-8") as f:
        segments = json.load(f)

    total_segments = len(segments)

    # Create a lambda function to remove the text from each dictionary in the list
    lite = remove_text(segments)

    # Save the embeddings to a JSON file
    output_file = os.path.join(destinationDir, "output", "master_enriched_lite.json")
    with open(output_file, "w", encoding="utf-8") as f:
        json.dump(lite, f)

    logger.debug("Total segments processed: %s", total_segments)
****************************************

****************************************
Boxer\scripts\text\enrich_text_chunks.py
****************************************
""" This script generates a master csv file from the transcript files."""
# Copyright (c) 2024 Braid Technologies Ltd

# from the markdown files, generate a master json file
# from the makdown folder read all the .json files then load the associated .mdd file

# Standard Library Imports
import os
import json
import logging
from pathlib import Path
import math

# Third-Party Packages
import tiktoken
from rich.progress import Progress

# Local Modules
from common.common_functions import ensure_directory_exists

PERCENTAGE_OVERLAP = 0.05
AVERAGE_CHARACTERS_PER_TOKEN = 4
AVERAGE_WORDS_PER_MINUTE = 100
AVERAGE_TOKENS_PER_WORD=1.33

total_files = 0

class MddSegment:
    def __init__(self, chunk: dict) -> None:
        self.text = chunk.get("text")
        self.start = chunk.get("start")
        self.duration = chunk.get("duration")

def gen_metadata_master(metadata):
    """generate the metadata master csv file"""
    text = metadata["title"] + " " + metadata["description"]
    metadata["start"] = "0"

    text = text.strip()

    if not text:
        metadata["text"] = "No description available."
    else:
        # clean the text
        text = clean_text(text)
        metadata["text"] = text.strip()


def clean_text(text):
    """clean the text"""
    text = text.replace("\n", " ")  # remove new lines
    text = text.replace("&#39;", "'")
    text = text.replace(">>", "")  # remove '>>'
    text = text.replace("  ", " ")  # remove double spaces
    text = text.replace("[inaudible]", "")  # [inaudible]

    return text


def append_text_to_previous_chunk(text, chunks):
    """
    append PERCENTAGE_OVERLAP text to the previous chunk to smooth context transition
    """
    if chunks:
        words = text.split(" ")
        word_count = len(words)
        if word_count > 0:
            append_text = " ".join(words[0:int(word_count * PERCENTAGE_OVERLAP)])
            chunks[-1]["text"] += append_text


def add_new_chunk(metadata, text, chunk_begin_tokens, chunks, minimumSegmentTokenCount):
    """add a new chunk to the chunks list"""

    # don't add very short chunks
    if len(text) < minimumSegmentTokenCount * AVERAGE_CHARACTERS_PER_TOKEN:
        return
    
    charactersPerSecond = AVERAGE_WORDS_PER_MINUTE * AVERAGE_CHARACTERS_PER_TOKEN / 60

    metadata["start"] = str(chunk_begin_tokens)
    metadata["seconds"] = int(len(text) / charactersPerSecond)
    metadata["text"] = text
    chunks.append(metadata.copy())


def parse_json_mdd_transcript(config, mdd, metadata, tokenizer, chunks):
    """parse the json mdd file and return the transcript"""
    text = ""
    current_tokens = None
    seg_begin_tokens = None
    seg_finish_tokens = None
    current_token_length = 0
    first_chunk = True
    last_chunk = False

    # add the title to the transcript
    if "title" in metadata and metadata["title"]:
        metadata["title"] = clean_text(metadata.get("title"))
        text += metadata.get("title") + ". "

    current_token_length = len(tokenizer.encode(text))

    # open the mdd file
    with open(mdd, "r", encoding="utf-8") as json_file:
        json_mdd = json.load(json_file)

        if len(json_mdd) == 1:
            last_chunk = True

        for chunk in json_mdd:
            seg = MddSegment(chunk)
            current_tokens = int(seg.start)
            current_text = seg.text            

            if seg_begin_tokens is None:
                seg_begin_tokens = current_tokens
                # calculate the finish time from the chunk_begin_time
                seg_finish_tokens = seg_begin_tokens + config.chunkDurationMins * 60

            # Get the number of tokens in the text.
            # Need to calc to allow for tokens for 
            # summary request in next pipeline step
            total_tokens = len(tokenizer.encode(current_text, disallowed_special=())) + current_token_length

            # Deal with case of a chunk that is already over the limit - in which case we add it
            # in chunks # then return.
            if total_tokens >= seg_finish_tokens:
               
               currentWordCount = 0
               words = current_text.split(" ")
               word_count = len(words)
                  
               while currentWordCount < word_count:
                  maxWords = math.floor (seg_finish_tokens / AVERAGE_TOKENS_PER_WORD)
                  thisTextWordCount = min(maxWords, word_count - currentWordCount);
                  thisText = " ".join(words[currentWordCount : thisTextWordCount])
                  add_new_chunk(metadata, thisText, seg_begin_tokens, chunks, config.discardIfBelow)

                  #if we are not at the end, we overlap chunks by moving back a bit
                  if currentWordCount + thisTextWordCount < word_count:
                     currentWordCount += int (thisTextWordCount * (1- PERCENTAGE_OVERLAP))
                  else:
                     currentWordCount += thisTextWordCount

               return
        
            if current_tokens < seg_finish_tokens and total_tokens < config.maxTokens:
                # add the text to the transcript
                text += current_text + " "
                current_token_length = total_tokens
            else:
                if not first_chunk:
                    # append PERCENTAGE_OVERLAP text to the previous chunk
                    # to smooth context transition
                    append_text_to_previous_chunk(text, chunks)
                first_chunk = False
                add_new_chunk(metadata, text, seg_begin_tokens, chunks, config.discardIfBelow)

                text = current_text + " "

                # reset the chunk_begin_time
                seg_begin_tokens = None
                seg_finish_tokens = None

                current_token_length = len(tokenizer.encode(text))

        # Deal with case where there is only one chunk
        if first_chunk and last_chunk:
           add_new_chunk(metadata, text, seg_begin_tokens, chunks, config.discardIfBelow)
        else:
            # Append the last text chunk to the last chunk in chunks dictionary
            if seg_begin_tokens and text != "":
               previous_chunk_tokens = len(tokenizer.encode(chunks[-1]["text"]))
               current_chunk_tokens = len(tokenizer.encode(text))

               if previous_chunk_tokens + current_chunk_tokens < config.maxTokens:
                   chunks[-1]["text"] += text
               else:
                  if not first_chunk:
                     # append PERCENTAGE_OVERLAP text to the previous chunk
                     # to smooth context transition
                     append_text_to_previous_chunk(text, chunks)
                     first_chunk = False
                     add_new_chunk(metadata, text, seg_begin_tokens, chunks, config.discardIfBelow)


def get_transcript(config, metadata, markdownDestinationDir, logger, tokenizer, chunks):
    """get the transcript from the .mdd file"""

    global total_files
    mdd = os.path.join(markdownDestinationDir, metadata["filename"])

    # check that the .mdd file exists
    if not os.path.exists(mdd):
        logger.info("mdd file does not exist: %s", mdd)
        return None
    else:
        logger.debug("Processing file: %s", mdd)
        total_files += 1

    parse_json_mdd_transcript(config, mdd, metadata, tokenizer, chunks)


def enrich_text_chunks(config, markdownDestinationDir):
    logging.basicConfig(level=logging.WARNING)
    logger = logging.getLogger(__name__)
    chunks = []

    if not markdownDestinationDir:
        logger.error("Markdown folder not provided")
        exit(1)

    # https://stackoverflow.com/questions/75804599/openai-api-how-do-i-count-tokens-before-i-send-an-api-request
    ENCODING_MODEL = "gpt-3.5-turbo"
    tokenizer = tiktoken.encoding_for_model(ENCODING_MODEL)

    cwd = os.getcwd()
    logger.debug("Current directory : %s", cwd)
    logger.debug("Markdown folder: %s", markdownDestinationDir)
    logger.debug("Segment length %d minutes", config.chunkDurationMins)

    folder = os.path.join(markdownDestinationDir, "*.json")
    logger.debug("Search spec: %s", str(folder))

    directory_path = Path(markdownDestinationDir)

    # Use rglob() to recursively search for all files
    searchPath = directory_path.glob("*.json")
    jsonFiles = list(searchPath)

    global total_files
    total_files = len(jsonFiles)  # Initialize total_files with the count of jsonFiles

    with Progress() as progress:
        task1 = progress.add_task("[green]Enriching Buckets...", total=total_files)

        for file in jsonFiles:
            # load the json file
            meta = json.load(open(file, encoding="utf-8"))

            get_transcript(config, meta, markdownDestinationDir, logger, tokenizer, chunks)
            progress.update(task1, advance=1)

    logger.debug("Total files: %s", total_files)
    logger.debug("Total chunks: %s", len(chunks))

    # save chunks to a json file
    output_subdir = "output"
    output_file = os.path.join(markdownDestinationDir, output_subdir, "master_text.json")

    # Ensure the output subdirectory exists
    ensure_directory_exists(os.path.dirname(output_file))

    with open(output_file, "w", encoding="utf-8") as f:
        json.dump(chunks, f, ensure_ascii=False, indent=4)
****************************************

****************************************
Boxer\scripts\text\enrich_text_embeddings.py
****************************************
""" This script will take a text and create embeddings for each text using the OpenAI API."""
# Copyright (c) 2024 Braid Technologies Ltd

# Standard Library Imports
import logging
import re
import os
import json
import threading
import queue

# Third-Party Packages
from openai import AzureOpenAI
from openai import BadRequestError
from tenacity import (
    retry,
    wait_random_exponential,
    stop_after_attempt,
    retry_if_not_exception_type,
)
from rich.progress import Progress

# Local Modules
from common.common_functions import ensure_directory_exists
from common.common_functions import get_embedding
from common.ApiConfiguration import ApiConfiguration

def normalize_text(s, sep_token=" \n "):
    """Normalize text by removing extra spaces and newlines."""
    s = re.sub(r"\s+", " ", s).strip()
    s = re.sub(r". ,", "", s)  # corrected the regex pattern
    s = s.replace("..", ".")
    s = s.replace(". .", ".")
    s = s.replace("\n", "")
    s = s.strip()

    return s


@retry(
    wait=wait_random_exponential(min=10, max=45),
    stop=stop_after_attempt(5),
    retry=retry_if_not_exception_type(BadRequestError),
)
def get_text_embedding(client : AzureOpenAI, config : ApiConfiguration, text: str):
    """Get the embedding for a text."""
    embedding = get_embedding(text,
                              client,
                              config)
    
    return embedding


def process_queue(client : AzureOpenAI, config : ApiConfiguration, progress, task, q, logger, output_chunks, current_chunks):
    """Process the queue."""
    while not q.empty():
        chunk = q.get()
        found = False

        for i in current_chunks:
            if i.get('sourceId') == chunk.get('sourceId'):
              current_summary = i.get("summary")
              current_ada = i.get("ada_v2")
              if current_summary and current_ada: 
                 chunk["summary"] = current_summary
                 chunk["ada_v2"] = current_ada                
                 found = True  
                 output_chunks.append(chunk.copy())                 
                 break

        if not found:
            if "ada_v2" in chunk:
                output_chunks.append(chunk.copy())
            else:
                # Get embedding using OpenAI API
                try:
                    embedding = get_text_embedding(client, config, chunk["text"])
                    chunk["ada_v2"] = embedding.copy()
                    output_chunks.append(chunk.copy())
                except BadRequestError as request_error:
                    logger.warning("Error processing chunk %s: %s", chunk.get('sourceId'), request_error)
                except Exception as e:
                    logger.warning("Unknown error processing chunk %s: %s", chunk.get('sourceId'), str(e))

        progress.update(task, advance=1)
        q.task_done()


def enrich_text_embeddings(config : ApiConfiguration, destinationDir : str):

    logging.basicConfig(level=logging.WARNING)
    logger = logging.getLogger(__name__)
    for key in logging.Logger.manager.loggerDict:
       logging.getLogger(key).setLevel(logging.WARNING)

    client = AzureOpenAI(
       azure_endpoint = config.resourceEndpoint, 
       api_key=config.apiKey,  
       api_version=config.apiVersion
    )   

    if not destinationDir:
        logger.error("Markdown folder not provided")
        exit(1)

    total_chunks = 0
    output_chunks = []
    current = []

    logger.debug("Starting OpenAI Embeddings")

    # Load chunks from the input JSON file
    input_file = os.path.join(destinationDir, "output", "master_enriched.json")
    with open(input_file, "r", encoding="utf-8") as f:
        chunks = json.load(f)

    total_chunks = len(chunks)
    logger.info("Total chunks to be processed: %s", total_chunks)

    # Prepare a queue with chunks to be processed
    q = queue.Queue()
    for chunk in chunks:
        q.put(chunk)

    # Load existing chunks from cache
    cache_file = os.path.join(destinationDir, "output", "master_enriched.json")
    if os.path.isfile(cache_file):
        with open(cache_file, "r", encoding="utf-8") as f:
            current = json.load(f)

    with Progress() as progress:
        task1 = progress.add_task("[green]Enriching Embeddings...", total=total_chunks)
        # Create multiple threads to process the queue
        threads = []
        for i in range(config.processingThreads):
            t = threading.Thread(target=process_queue, args=(client, config, progress, task1, q, logger, output_chunks, current))
            t.start()
            threads.append(t)

        # Wait for all threads to finish
        for t in threads:
            t.join()

    # Sort the output chunks by sourceId
    output_chunks.sort(key=lambda x: x["sourceId"])

    logger.debug("Total chunks processed: %s", len(output_chunks))

    # Save enriched chunks to a JSON file
    output_subdir = "output"
    output_file = os.path.join(destinationDir, output_subdir, "master_enriched.json")

    # Ensure the output subdirectory exists
    ensure_directory_exists(os.path.dirname(output_file))

    with open(output_file, "w", encoding="utf-8") as f:
        json.dump(output_chunks, f, ensure_ascii=False, indent=4)
****************************************

****************************************
Boxer\scripts\text\enrich_text_summaries.py
****************************************
""" Summarize a youtube transcript using chatgpt"""
# Copyright (c) 2024 Braid Technologies Ltd

# Standard Library Imports
import json
import os
import threading
import queue
import logging
from logging import Logger

# Third-Party Packages
from openai import AzureOpenAI
from openai import BadRequestError
from tenacity import (
    retry,
    wait_random_exponential,
    stop_after_attempt,
    retry_if_not_exception_type,
)
from rich.progress import Progress

# Local Modules
from common.common_functions import ensure_directory_exists
from common.ApiConfiguration import ApiConfiguration

class Counter:
    """thread safe counter"""

    def __init__(self):
        """initialize the counter"""
        self.value = 0
        self.lock = threading.Lock()

    def increment(self):
        """increment the counter"""
        with self.lock:
            self.value += 1
            return self.value
        

counter = Counter()

@retry(
    wait=wait_random_exponential(min=10, max=45),
    stop=stop_after_attempt(5),
    retry=retry_if_not_exception_type(BadRequestError)
)
def chatgpt_summary(client : AzureOpenAI, config : ApiConfiguration, text : str, logger : Logger):
    """generate a summary using chatgpt"""

    messages = [
        {
            "role": "system",
            "content": "You're an AI Assistant for summarising useful blogs, write an authoritative " 
                       + str(config.summaryWordCount) + 
                       "  word summary. Avoid starting sentences with 'This document' or 'The document'.",
        },
        {"role": "user", "content": text},
    ]

    response = client.chat.completions.create(
        model=config.azureDeploymentName,
        messages=messages,
        temperature=0.7,
        max_tokens=config.maxTokens,
        top_p=0.0,
        frequency_penalty=0,
        presence_penalty=0,
        stop=None,
        timeout=config.openAiRequestTimeout        
    )

    # print(response)
    text = response.choices[0].message.content
    finish_reason = response.choices[0].finish_reason

    # print(finish_reason)
    if finish_reason != "stop" and finish_reason != 'length' and finish_reason != "":
        logger.warning("Stop reason: %s", finish_reason)
        logger.warning("Text: %s", text)
        logger.warning("Increase Max Tokens and try again")
        exit(1)

    return text


def process_queue_for_summaries(client : AzureOpenAI, config : ApiConfiguration, progress, task, q, total_chunks, output_chunks, current_chunks, logger):
    """process the queue"""
    
    while not q.empty():

        chunk = q.get()
        found = False

        for i in current_chunks: 
           if i.get('sourceId') == chunk.get('sourceId'):
              current_summary = i.get("summary")
              current_ada = i.get("ada_v2")
              if current_summary and current_ada: 
                 chunk["summary"] = current_summary
                 chunk["ada_v2"] = current_ada                
                 found = True  
                 output_chunks.append(chunk.copy())                 
                 break

        if not found:
           text = chunk.get("text")

           try:
              summary = chatgpt_summary(client, config, text, logger)
              # add the summary to the chunk dictionary
              chunk["summary"] = summary
              output_chunks.append(chunk.copy())
           except BadRequestError as request_error:
              logger.warning("Error: %s", request_error)
           except Exception as e:
              logger.warning("Error: %s", e)

        count = counter.increment()
        progress.update(task, advance=1)
        logger.debug("Processed %d chunks of %d", count, total_chunks)


        q.task_done()


def enrich_text_summaries(config, destinationDir): 

   client = AzureOpenAI(
      azure_endpoint = config.resourceEndpoint, 
      api_key=config.apiKey,  
      api_version=config.apiVersion
   )   

   logging.basicConfig(level=logging.WARNING)
   logger = logging.getLogger(__name__)
   for key in logging.Logger.manager.loggerDict:
      logging.getLogger(key).setLevel(logging.WARNING)

   if not destinationDir:
    logger.error("Destination folder not provided")
    exit(1)

   chunks = []
   output_chunks = []
   current = []
   total_chunks = 0

   logger.debug("Starting OpenAI summarization")

   # load the chunks from a json file
   input_file = os.path.join(destinationDir, "output", "master_text.json")
   with open(input_file, "r", encoding="utf-8") as f:
      chunks = json.load(f)

   total_chunks = len(chunks)

   logger.debug("Total chunks to be processed: %s", len(chunks))

   # add chunk list to a queue
   q = queue.Queue()
   for chunk in chunks:
      q.put(chunk)

   # load the existing chunks from a json file
   output_subdir = "output"
   cache_file = os.path.join(destinationDir, "output", "master_enriched.json")
   # Ensure the output subdirectory exists
   ensure_directory_exists(os.path.dirname(cache_file))

   if os.path.isfile(cache_file):
      with open(cache_file, "r", encoding="utf-8") as f:
         current = json.load(f)   
   
   with open(cache_file, "w", encoding="utf-8") as f:
      json.dump(chunks, f, ensure_ascii=False, indent=4)

   with Progress() as progress:
      task1 = progress.add_task("[purple]Enriching Summaries...", total=total_chunks)

      # create multiple threads to process the queue
      threads = []
      for i in range(config.processingThreads):
         t = threading.Thread(target=process_queue_for_summaries, args=(client, config, progress, task1, q, total_chunks, output_chunks, current, logger))
         t.start()
         threads.append(t)

      # wait for all threads to finish
      for t in threads:
         t.join()

   # sort the output chunks by sourceId 
   output_chunks.sort(key=lambda x: (x["sourceId"]))

   logger.debug("Total chunks processed: %s", len(output_chunks))

   #print(f"markdownDestinationDir = {markdownDestinationDir}")         #added for debugging 
   output_subdir = "output"
   output_file = os.path.join(destinationDir, "output", "master_enriched.json")

   # Ensure the output subdirectory exists
   ensure_directory_exists(os.path.dirname(output_file))
   # save chunks to a json file
   with open(output_file, "w", encoding="utf-8") as f:
        json.dump(output_chunks, f, ensure_ascii=False, indent=4)
****************************************

****************************************
Boxer\scripts\text\__init__.py
****************************************
from .enrich_text_chunks import enrich_text_chunks
from .enrich_text_summaries import enrich_text_summaries
from .enrich_text_embeddings import enrich_text_embeddings
from .enrich_lite import enrich_lite
****************************************

****************************************
Boxer\scripts\web\download_html.py
****************************************
""" This script downloads the text content for all sub pages of a URL. """
# Copyright (c) 2024 Braid Technologies Ltd

# Standard Library Imports
import os
import json
import logging
import time
import threading
import queue
from pathlib import Path
from urllib.parse import urlsplit, urljoin

# Third-Party Packages
from bs4 import BeautifulSoup
import requests


MAX_LINKS_PERPAGE=256 #Max number of links we keep from a single page
MAX_PAGE_DEPTH=1     #Max depth we search in a website
AVERAGE_CHARACTERS_PER_TOKEN=6

headers = {
   'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110',
   'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
   'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.3',
   'Accept-Encoding': 'none',
   'Accept-Language': 'en-US,en;q=0.8',
   'Connection': 'keep-alive'       
}  

class Counter:
    """thread safe counter"""

    def __init__(self):
        """initialize the counter"""
        self.value = 0
        self.lock = threading.Lock()

    def increment(self):
        """increment the counter"""
        with self.lock:
            self.value += 1


counter = Counter()

def makePathOnly (url):
    split_url = urlsplit(url)
    # split_url.scheme   "http"
    # split_url.netloc   "127.0.0.1" 
    # split_url.path     "/asdf/login.php"
    # Use all the path 
    clean_path = str(split_url.netloc) + split_url.path
    return clean_path

def makeFullyQualified (base, rel):
    return urljoin(base,rel)
    
def get_html(url, counter_id, siteUrl, htmlDesitinationDir, logger, minimumPageTokenCount):
    """Read in HTML content and write out as plain text """

    sourceId = makePathOnly (url)
    fakeName = sourceId.replace("//", "_").replace("/", "_")
    contentOutputFileName = os.path.join(htmlDesitinationDir, f"{fakeName}.json.mdd")
    metaOutputFilename = os.path.join(htmlDesitinationDir, f"{fakeName}.json")

    # if markdown file already exists, skip it
    if os.path.exists(contentOutputFileName):
        logger.debug("Skipping : %s", url)
        return False    
    
    # In case the web site expect cookies and/or javascript
    session = requests.Session()     
    page = session.get(url, headers=headers)
    soup = BeautifulSoup(page.content, "html.parser") 
    fullText = soup.get_text()
    nolineFeeds = fullText.replace("\n", " ")
    # dont add very short pages
    if len(nolineFeeds) < minimumPageTokenCount * AVERAGE_CHARACTERS_PER_TOKEN:
       logger.debug("Skipping : %s", url)
       return    

    jsonSeg = dict()
    jsonSeg["text"] = nolineFeeds
    jsonSeg["start"] = "0"
    jsonArr = [""]
    jsonArr[0] = jsonSeg
         
    # save the plain text content as a .json.mdd file
    with open(contentOutputFileName, "w", encoding="utf-8") as file:
        json.dump(jsonArr, file, indent=4, ensure_ascii=False)

    metadata = {}
    metadata["speaker"] = ""
    metadata["title"] = Path(url).name
    metadata["sourceId"] = sourceId
    metadata["filename"] = os.path.basename(contentOutputFileName)   
    metadata["description"] = Path(url).name
    metadata["hitTrackingId"] = siteUrl    

    # save the metadata as a .json file
    json.dump(metadata, open(metaOutputFilename, "w", encoding="utf-8"))
    
    logger.debug("Html download completed: %d, %s", counter_id, url)

    return True


def process_queue(q, sourceUrl, htmlDestinationDir, logger, minimumPageTokenCount):
    """process the queue"""
    while not q.empty():
        file = q.get()

        counter.increment()

        get_html(file, counter.value, sourceUrl, htmlDestinationDir, logger, minimumPageTokenCount)
        q.task_done()


def deduplicate(currentLinks, newLinks): # remove duplicates 

    deduped = []

    for item in newLinks:
        if not item in currentLinks:
           deduped.append(item)
    
    return deduped

def remove_exits(sourceUrl, links): # remove links that point outside the main site being searched
                                    # we also remove links starting with #as they are just the same page
    """ Remove links that point outside the main site being searched """
    trimmed = []

    for item in links:
        match = (item.startswith(sourceUrl) 
                 and (not '#' in item))
        if match :
            trimmed .append(item)        

    return trimmed

def add_prefix(sourceUrl, links):
    """ Add prefixes to relative URLs """

    full = []

    for item in links:
        newUrl = makeFullyQualified(sourceUrl, item)
        full.append(newUrl)

    return full


def recurse_page_list(startUrl, processedLinks, depth, logger, recurse):
    """ Recursively crawl through pages starting from startUrl """

    # Bail if we hit maximum depth
    if depth > MAX_PAGE_DEPTH:
        logger.debug("Depth exceeded: %s", startUrl)
        return

    # In case the website expects cookies and/or JavaScript
    session = requests.Session()
    page = session.get(startUrl, headers=headers)
    soup = BeautifulSoup(page.text, "html.parser")

    logger.debug("Processing: %s", startUrl)
    processedLinks.append(startUrl)

    if not recurse:
        return

    subLinks = soup.find_all('a')
    subUrls = []

    for link in subLinks:
        url = str(link.get('href'))
        subUrls.append(url)

    full = add_prefix(startUrl, subUrls)
    deduped = deduplicate(processedLinks, full)
    trimmed = remove_exits(startUrl, deduped)

    for link in trimmed:
        if link not in processedLinks:
            recurse_page_list(link, processedLinks, depth + 1, logger, recurse)

         
def build_page_list(sourceUrl, q, minimumPageTokenCount, logger, recurse):
    """ Build a list of pages starting from sourceUrl """

    links = []

    recurse_page_list(sourceUrl, links, 0, logger, recurse)

    for url in links:
        q.put(url)
    
def download_html (sourceUrl, recurse, htmlDesitinationDir, minimumPageTokenCount): 
   
   logging.basicConfig(level=logging.WARNING)
   logger = logging.getLogger(__name__)

   PROCESSING_THREADS = 1

   q = queue.Queue()

   if not htmlDesitinationDir:
      logger.error("Html folder not provided")
      exit(1)

   if not sourceUrl:
      logger.error("Source url not provided")
      exit(1)

   logger.debug("Source URL: %s", sourceUrl)
   logger.debug("Html folder: %s", htmlDesitinationDir)

   # Recursively search for all html files  
   build_page_list (sourceUrl, q, minimumPageTokenCount, logger, recurse)
   
   logger.info("Total HTML files to be downloaded: %s", q.qsize())

   start_time = time.time()

   # create multiple threads to process the queue
   threads = []
   for i in range(PROCESSING_THREADS):
      t = threading.Thread(
         target=process_queue,
                args=(q, sourceUrl, htmlDesitinationDir, logger, minimumPageTokenCount),
         )
      t.start()
   threads.append(t)

   # wait for all threads to finish
   for t in threads:
      t.join()

   finish_time = time.time()
   logger.debug("Total time taken: %s", finish_time - start_time)
****************************************

****************************************
Boxer\scripts\web\__init__.py
****************************************
from .download_html import download_html
****************************************

****************************************
Boxer\scripts\youtube\download_transcripts.py
****************************************
""" This script downloads the transcripts for all the videos in a YouTube playlist. """

# Standard Library Imports
import os
import json
import logging
import time
import threading
import queue

# Third-Party Packages
import googleapiclient.discovery
import googleapiclient.errors
from youtube_transcript_api import YouTubeTranscriptApi, NoTranscriptFound, TranscriptsDisabled, VideoUnavailable
from youtube_transcript_api.formatters import WebVTTFormatter


logger = logging.getLogger(__name__)

GOOGLE_DEVELOPER_API_KEY = os.environ["GOOGLE_DEVELOPER_API_KEY"]

# Initialize the Google developer API client
GOOGLE_API_SERVICE_NAME = "youtube"
GOOGLE_API_VERSION = "v3"

MAX_RESULTS = 50
PROCESSING_THREADS = 1

class Counter:
    """thread safe counter"""

    def __init__(self):
        """initialize the counter"""
        self.value = 0
        self.lock = threading.Lock()

    def increment(self):
        """increment the counter"""
        with self.lock:
            self.value += 1


def gen_metadata(playlist_item, transcriptDestinationDir):
    """Generate metadata for a video"""

    video_id = playlist_item["snippet"]["resourceId"]["videoId"]
    filename = os.path.join(transcriptDestinationDir, video_id + ".json")

    metadata = {}
    metadata["speaker"] = ""
    metadata["title"] = playlist_item["snippet"]["title"]
    metadata["sourceId"] = playlist_item["snippet"]["resourceId"]["videoId"]
    metadata["description"] = playlist_item["snippet"]["description"]
    metadata["hitTrackingId"] = playlist_item["snippet"]["playlistId"]

    # Ensure the directory exists before saving
    os.makedirs(transcriptDestinationDir, exist_ok=True)

    # Save the metadata as a .json file
    with open(filename, "w", encoding="utf-8") as file:
        json.dump(metadata, file, indent=4, ensure_ascii=False)




def get_transcript(playlist_item, counter_id, transcriptDestinationDir, logger):
    """Get the transcript for a video"""

    video_id = playlist_item["snippet"]["resourceId"]["videoId"]
    filename = os.path.join(transcriptDestinationDir, video_id + ".json.vtt")

    # If video transcript already exists, skip it
    if os.path.exists(filename):
        logger.debug("Skipping video %d, %s", counter_id, video_id)
        return False

    try:
        transcript = YouTubeTranscriptApi.get_transcript(video_id)
        # Remove \n from the text
        for item in transcript:
            item["text"] = item["text"].replace("\n", " ")

        logger.debug("Transcription download completed: %d, %s", counter_id, video_id)

        # Ensure the directory exists before saving
        os.makedirs(transcriptDestinationDir, exist_ok=True)

        # Save the transcript as a .vtt file
        with open(filename, "w", encoding="utf-8") as file:
            json.dump(transcript, file, indent=4, ensure_ascii=False)

    except NoTranscriptFound:
        logger.debug("No transcript found for video: %s", video_id)
        return False
    except TranscriptsDisabled:
        logger.debug("Transcripts are disabled for video: %s", video_id)
        return False
    except VideoUnavailable:
        logger.debug("Video unavailable: %s", video_id)
        return False
    except Exception as exception:
        logger.debug("An error occurred: %s", str(exception))
        logger.debug("Transcription not found for video: %s", video_id)
        return False

    return True



def process_queue(q, counter, transcriptDestinationDir, logger):
    """Process the queue"""
    while not q.empty():
        video = q.get()

        counter.increment()

        if get_transcript(video, counter.value, transcriptDestinationDir, logger):
            gen_metadata(video, transcriptDestinationDir)
        q.task_done()

def download_transcripts (playlistId, transcriptDestinationDir): 
   
   logging.basicConfig(level=logging.INFO)
   logger = logging.getLogger(__name__)

   formatter = WebVTTFormatter()
   q = queue.Queue()


   if not transcriptDestinationDir:
      logger.error("Transcript folder not provided")
      exit(1)

   if not playlistId:
      logger.error("Playlist ID not provided")
      exit(1)

   counter = Counter()   

   logger.debug("Transcription folder: %s", transcriptDestinationDir)

   youtube = googleapiclient.discovery.build(
      GOOGLE_API_SERVICE_NAME, GOOGLE_API_VERSION, developerKey=GOOGLE_DEVELOPER_API_KEY
   )

   # Create a request object with the playlist ID and the max results
   request = youtube.playlistItems().list(
      part="snippet", playlistId=playlistId, maxResults=MAX_RESULTS
   )


   # Loop through the pages of results until there is no next page token
   while request:
      # Execute the request and get the response
      response = request.execute()

      # Iterate over the items in the response and append the video IDs to the list
      for item in response["items"]:
        q.put(item)

      # Get the next page token from the response and create a new request object
      next_page_token = response.get("nextPageToken")
      if next_page_token:
         request = youtube.playlistItems().list(
            part="snippet",
            playlistId=playlistId,
            maxResults=MAX_RESULTS,
            pageToken=next_page_token,
      )
      else:
         request = None

   logger.info("Total transcriptions to be download: %s", q.qsize())

   start_time = time.time()

   # create multiple threads to process the queue
   threads = []
   for i in range(PROCESSING_THREADS):
      t = threading.Thread(
             target=process_queue,
             args=(q, counter, transcriptDestinationDir, logger),
             )
      t.start()
      threads.append(t)

   # wait for all threads to finish
   for t in threads:
      t.join()

   finish_time = time.time()
   logger.debug("Total time taken: %s", finish_time - start_time)
****************************************

****************************************
Boxer\scripts\youtube\enrich_transcript_chunks.py
****************************************
""" This script generates a master csv file from the transcript files."""

# from the transcript files, generate a master csv file
# from the transcript folder read all the .json files then load the associated .vtt file

# Standard Library Imports
from datetime import datetime, timedelta
import os
import json
import glob
import logging
from typing import List, Dict

# Third-Party Packages
import tiktoken
from rich.progress import Progress


# Define constants
PERCENTAGE_OVERLAP = 0.05
ENCODING_MODEL = "gpt-3.5-turbo"
tokenizer = tiktoken.encoding_for_model(ENCODING_MODEL)

# Configure logging
logging.basicConfig(level=logging.WARNING)
logger = logging.getLogger(__name__)

class VttChunk:
    def __init__(self, chunk: dict[str, str | float]) -> None:
        self.text = chunk.get("text")
        self.start = chunk.get("start")
        self.duration = chunk.get("duration")

    text: str
    start: float
    duration: float

def gen_metadata_master(metadata):
    """generate the metadata master csv file"""
    text = metadata["title"] + " " + metadata["description"]
    metadata["start"] = "00:00:00"

    text = text.strip()

    if text == "" or text is None:
        metadata["text"] = "No description available."
    else:
        text = text.replace("\n", "")
        metadata["text"] = text.strip()

def clean_text(text):
    """clean the text"""
    text = text.replace("\n", " ")  # remove new lines
    text = text.replace("&#39;", "'")
    text = text.replace(">>", "")  # remove '>>'
    text = text.replace("  ", " ")  # remove double spaces
    text = text.replace("[inaudible]", "")  # [inaudible]

    return text

def append_text_to_previous_chunk(text, chunks):
    """append PERCENTAGE_OVERLAP text to the previous chunk to smooth context transition"""
    if len(chunks) > 0:
        words = text.split(" ")
        word_count = len(words)
        if word_count > 0:
            append_text = " ".join(words[0 : int(word_count * PERCENTAGE_OVERLAP)])
            chunks[-1]["text"] += append_text

def add_new_chunk(metadata, text, chunk_begin_seconds, chunks):
    """add a new chunk to the chunks list"""
    delta = timedelta(seconds=chunk_begin_seconds)
    begin_time = datetime.min + delta
    metadata["start"] = begin_time.strftime("%H:%M:%S")
    metadata["seconds"] = chunk_begin_seconds

    metadata["text"] = text
    chunks.append(metadata.copy())

def parse_json_vtt_transcript(vtt, metadata, chunks, chunkMinutes, maxTokens):
    """parse the json vtt file and return the transcript"""
    text = ""
    current_seconds = None
    seg_begin_seconds = None
    seg_finish_seconds = None
    current_token_length = 0
    first_chunk = True

    logger.debug(f"Processing VTT file: {vtt}")
    logger.debug(f"Initial metadata: {metadata}")

    if "speaker" in metadata and metadata["speaker"] != "":
        metadata["speaker"] = clean_text(metadata.get("speaker"))
        text = "The speaker's name is " + metadata["speaker"] + ". "

    if "title" in metadata and metadata["title"] != "":
        metadata["title"] = clean_text(metadata.get("title"))
        text += metadata.get("title") + ". "

    if "description" in metadata and metadata["description"] != "":
        metadata["description"] = clean_text(metadata.get("description"))
        text += metadata.get("description") + ". "

    current_token_length = len(tokenizer.encode(text))

    try:
        with open(vtt, "r", encoding="utf-8") as json_file:
            json_vtt = json.load(json_file)
    except FileNotFoundError:
        logger.error(f"VTT file not found: {vtt}")
        return chunks
    except json.JSONDecodeError:
        logger.error(f"Invalid JSON in VTT file: {vtt}")
        return chunks

    logger.debug(f"Loaded {len(json_vtt)} segments from VTT file")

    for chunk in json_vtt:
        seg = VttChunk(chunk)
        current_seconds = int(seg.start)
        current_text = seg.text

        if seg_begin_seconds is None:
            seg_begin_seconds = current_seconds
            seg_finish_seconds = seg_begin_seconds + chunkMinutes * 60

        total_tokens = len(tokenizer.encode(current_text)) + current_token_length

        if current_seconds < seg_finish_seconds and total_tokens < maxTokens:
            text += current_text + " "
            current_token_length = total_tokens
        else:
            if not first_chunk:
                append_text_to_previous_chunk(text, chunks)
            first_chunk = False
            add_new_chunk(metadata, text, seg_begin_seconds, chunks)

            text = current_text + " "
            seg_begin_seconds = current_seconds
            seg_finish_seconds = seg_begin_seconds + chunkMinutes * 60
            current_token_length = len(tokenizer.encode(text))

    if seg_begin_seconds is not None and text != "":
        if chunks and not first_chunk:
            previous_chunk_tokens = len(tokenizer.encode(chunks[-1]["text"]))
            current_chunk_tokens = len(tokenizer.encode(text))

            if previous_chunk_tokens + current_chunk_tokens < maxTokens:
                chunks[-1]["text"] += text
            else:
                append_text_to_previous_chunk(text, chunks)
        else:
            add_new_chunk(metadata, text, seg_begin_seconds, chunks)

    logger.debug(f"Processed {len(chunks)} chunks")

    return chunks
    
def get_transcript(metadata, transcriptDestinationDir, chunks, chunkMinutes, maxTokens):
    """get the transcript from the .vtt file"""
    global total_files
    vtt = os.path.join(transcriptDestinationDir, metadata["sourceId"] + ".json.vtt")

    if not os.path.exists(vtt):
        logger.info("vtt file does not exist: %s", vtt)
        return None
    else:
        logger.debug("Processing file: %s", vtt)
        total_files += 1

    parse_json_vtt_transcript(vtt, metadata, chunks, chunkMinutes, maxTokens)

total_files = 0

def enrich_transcript_chunks (config, transcriptDestinationDir): 
    global total_files
    chunks = []
    total_files = 0

    if not transcriptDestinationDir:
        logger.error("Transcript folder not provided")
        exit(1)

    logger.debug("Transcription folder: %s", transcriptDestinationDir)
    logger.debug("Chunk length %d minutes", config.chunkDurationMins)

    folder = os.path.join(transcriptDestinationDir, "*.json")

    with Progress() as progress:
        task1 = progress.add_task("[green]Enriching chunks...", total=total_files)

        for file in glob.glob(folder):
            meta = json.load(open(file, encoding="utf-8"))

            get_transcript(meta, transcriptDestinationDir, chunks, config.chunkDurationMins, (config.maxTokens - config.summaryWordCount * 4))
            progress.update(task1, advance=1)

    logger.debug("Total files: %s", total_files)
    logger.debug("Total chunks: %s", len(chunks))

    output_subdir = "output"
    output_file = os.path.join(transcriptDestinationDir, output_subdir, "master_transcriptions.json")

    ensure_directory_exists(os.path.dirname(output_file))
    with open(output_file, "w", encoding="utf-8") as f:
        json.dump(chunks, f, ensure_ascii=False, indent=4)

def ensure_directory_exists(directory):
    """Ensure directory exists; if not, create it."""
    if not os.path.exists(directory):
        os.makedirs(directory)
****************************************

****************************************
Boxer\scripts\youtube\enrich_transcript_embeddings.py
****************************************
# Standard Library Imports
import logging
import re
import os
import json
import threading
import queue

# Third-Party Packages
from openai import AzureOpenAI
from openai import BadRequestError
import tiktoken
from tenacity import (
    retry,
    wait_random_exponential,
    stop_after_attempt,
    retry_if_not_exception_type,
)
from rich.progress import Progress

# Local Modules
from common.ApiConfiguration import ApiConfiguration
from common.common_functions import ensure_directory_exists
from common.common_functions import get_embedding

tokenizer = tiktoken.get_encoding("cl100k_base")

def normalize_text(s, sep_token=" \n "):
    """normalize text by removing extra spaces and newlines"""
    s = re.sub(r"\s+", " ", s).strip()
    s = re.sub(r". ,", "", s)
    s = s.replace("..", ".")
    s = s.replace(". .", ".")
    s = s.replace("\n", "")
    s = s.strip()

    return s

@retry(
    wait=wait_random_exponential(min=10, max=45),
    stop=stop_after_attempt(5),
    retry=retry_if_not_exception_type(BadRequestError),
)
def get_text_embedding(client : AzureOpenAI, config : ApiConfiguration, text: str):
    """get the embedding for a text"""
    embedding = get_embedding(text, 
                              client, 
                              config)
    return embedding

def process_queue(client, config, progress, task, q, logger, output_chunks, current_chunks):
    """process the queue"""
    while not q.empty():
        chunk = q.get()
        found = False

        for i in current_chunks: 
           if i.get('sourceId') == chunk.get('sourceId'):           
              current_summary = i.get("summary")
              current_ada = i.get("ada_v2")
              if current_summary and current_ada: 
                 chunk["summary"] = current_summary
                 chunk["ada_v2"] = current_ada   
                 output_chunks.append(chunk.copy())                                 
                 found = True  
                 break
        
        if not found:
           try:
              embedding = get_text_embedding(client, config, chunk["text"])
              chunk["ada_v2"] = embedding.copy()     
              output_chunks.append(chunk.copy())                          
           except BadRequestError as request_error:
              logger.warning("Error: %s %s", chunk.get('sourceId'), request_error)
           except Exception as e:
              logger.warning("Error: %s %s", chunk.get('sourceId'), 'Unknown error')          

        progress.update(task, advance=1)
        q.task_done()

def convert_time_to_seconds(value):
    """convert time to seconds"""
    time_value = value.split(":")
    if len(time_value) == 3:
        h, m, s = time_value
        return int(h) * 3600 + int(m) * 60 + int(s)
    else:
        return 0

def enrich_transcript_embeddings(config, transcriptDestinationDir): 

   client = AzureOpenAI(
      azure_endpoint = config.resourceEndpoint, 
      api_key=config.apiKey,  
      api_version=config.apiVersion
   )   

   logger = logging.getLogger(__name__)
   logging.basicConfig(level=logging.WARNING)
   for key in logging.Logger.manager.loggerDict:
      logging.getLogger(key).setLevel(logging.WARNING)
   
   if not transcriptDestinationDir:
      logger.error("Transcript folder not provided")
      exit(1)

   total_chunks = 0
   output_chunks = []

   input_file = os.path.join(transcriptDestinationDir, "output", "master_enriched.json")
   with open(input_file, "r", encoding="utf-8") as f:
      chunks = json.load(f)

   total_chunks = len(chunks)

   logger.debug("Starting OpenAI Embeddings")
   logger.debug("Total chunks to be processed: %s", len(chunks))

   q = queue.Queue()
   for chunk in chunks:
      q.put(chunk)

   cache_file = os.path.join(transcriptDestinationDir, "output", "master_enriched.json")
   if os.path.isfile(cache_file):
      with open(cache_file, "r", encoding="utf-8") as f:
         current = json.load(f) 

   with Progress() as progress:
      task1 = progress.add_task("[green]Enriching Embeddings...", total=total_chunks)
      threads = []
      for i in range(config.processingThreads):
         t = threading.Thread(target=process_queue, args=(client, config, progress, task1, q, logger, output_chunks, current))
         t.start()
         threads.append(t)

      for t in threads:
         t.join()

   output_chunks.sort(key=lambda x: (x["sourceId"], convert_time_to_seconds(x["start"])))

   logger.debug("Total chunks processed: %s", len(output_chunks))

   output_subdir = "output"
   output_file = os.path.join(transcriptDestinationDir, output_subdir, "master_enriched.json")

   ensure_directory_exists(os.path.dirname(output_file))

   with open(output_file, "w", encoding="utf-8") as f:
      json.dump(chunks, f, ensure_ascii=False, indent=4)
****************************************

****************************************
Boxer\scripts\youtube\enrich_transcript_summaries.py
****************************************
# Standard Library Imports
import json
import os
import threading
import queue
import logging
from logging import Logger

# Third-Party Packages
from openai import AzureOpenAI
from openai import BadRequestError

from tenacity import (
    retry,
    wait_random_exponential,
    stop_after_attempt,
    retry_if_not_exception_type,
)
from rich.progress import Progress

# Local Modules
from common.common_functions import ensure_directory_exists
from common.ApiConfiguration import ApiConfiguration

class Counter:
    """thread safe counter"""

    def __init__(self):
        """initialize the counter"""
        self.value = 0
        self.lock = threading.Lock()

    def increment(self):
        """increment the counter"""
        with self.lock:
            self.value += 1
            return self.value

@retry(
    wait=wait_random_exponential(min=10, max=45),
    stop=stop_after_attempt(5),
    retry=retry_if_not_exception_type(BadRequestError),
)
def chatgpt_summary(client : AzureOpenAI, config : ApiConfiguration, text : str, logger : Logger):
    """generate a summary using chatgpt"""

    messages = [
        {
            "role": "system",
            "content": "You are an AI Assistant for video summarization, write an authoritative " 
                       + str(config.summaryWordCount) + 
                       " word summary. Avoid starting sentences with 'This document' or 'The document'.",
        },
        {"role": "user", "content": text},
    ]

    response = client.chat.completions.create(
        model=config.azureDeploymentName,
        messages=messages,
        temperature=0.7,
        max_tokens=config.maxTokens,
        top_p=0.0,
        frequency_penalty=0,
        presence_penalty=0,
        stop=None,
        timeout=config.openAiRequestTimeout,
    )

    text = response.choices[0].message.content
    finish_reason = response.choices[0].finish_reason

    if finish_reason != "stop" and finish_reason != 'length' and finish_reason != "":
        logger.warning("Stop reason: %s", finish_reason)
        logger.warning("Text: %s", text)
        logger.warning("Increase Max Tokens and try again")
        exit(1)

    return text

def process_queue(client : AzureOpenAI, config : ApiConfiguration, progress, task, q, counter, logger, output_chunks, current_chunks):
    """process the queue"""
    while not q.empty():

        chunk = q.get()
        found = False

        for i in current_chunks: 
           if i.get('sourceId') == chunk.get('sourceId'):
              current_summary = i.get("summary")
              current_ada = i.get("ada_v2")
              if current_summary and current_ada: 
                 chunk["summary"] = current_summary
                 chunk["ada_v2"] = current_ada   
                 output_chunks.append(chunk.copy())                                 
                 found = True  
                 break

        if not found:           
           text = chunk.get("text")

           # get a summary of the text using chatgpt
           try:
              summary = chatgpt_summary(client, config, text, logger)
              # add the summary to the segment dictionary
              chunk["summary"] = summary
              output_chunks.append(chunk.copy())
           except BadRequestError as request_error:
              logger.warning("Error: %s", request_error)
           except Exception as e:
              logger.warning("Error: %s", e)

        count = counter.increment()
        progress.update(task, advance=1)

        q.task_done()

# convert time '00:01:20' to seconds
def convert_time_to_seconds(value):
    """convert time to seconds"""
    time_value = value.split(":")
    if len(time_value) == 3:
        h, m, s = time_value
        return int(h) * 3600 + int(m) * 60 + int(s)
    else:
        return 0

def enrich_transcript_summaries(config : ApiConfiguration, transcriptDestinationDir: str): 
   
   client = AzureOpenAI(
      azure_endpoint = config.resourceEndpoint, 
      api_key=config.apiKey,  
      api_version=config.apiVersion
   )      

   logging.basicConfig(level=logging.WARNING)
   logger = logging.getLogger(__name__)
   for key in logging.Logger.manager.loggerDict:
      logging.getLogger(key).setLevel(logging.WARNING)

   if not transcriptDestinationDir:
      logger.error("Transcript folder not provided")
      exit(1)

   chunks = []
   output_chunks = []
   current = []
   total_chunks = 0

   counter = Counter()

   logger.debug("Starting OpenAI summarization")

   # load the chunks from a json file
   input_file = os.path.join(transcriptDestinationDir, "output", "master_transcriptions.json")
   with open(input_file, "r", encoding="utf-8") as f:
      chunks = json.load(f)

   total_chunks = len(chunks)

   logger.debug("Total chunks to be processed: %s", len(chunks))

   # add segment list to a queue
   q = queue.Queue()
   for chunk in chunks:
      q.put(chunk)

   # load the existing chunks from a json file
   cache_file = os.path.join(transcriptDestinationDir, "output", "master_enriched.json")
   if os.path.isfile(cache_file):
      with open(cache_file, "r", encoding="utf-8") as f:
         current = json.load(f)  

   with Progress() as progress:
      task1 = progress.add_task("[purple]Enriching Summaries...", total=total_chunks)

      # create multiple threads to process the queue
      threads = []
      for i in range(config.processingThreads):
         t = threading.Thread(target=process_queue, args=(client, config, progress, task1, q, counter, logger, output_chunks, current))
         t.start()
         threads.append(t)

      # wait for all threads to finish
      for t in threads:
         t.join()

   # sort the output chunks by sourceId and start
   output_chunks.sort(key=lambda x: (x["sourceId"], convert_time_to_seconds(x["start"])))

   logger.debug("Total chunks processed: %s", len(output_chunks))

   # save the output chunks to a json file
   output_subdir = "output"
   output_file = os.path.join(transcriptDestinationDir, output_subdir, "master_enriched.json")

   ensure_directory_exists(os.path.dirname(output_file))

   with open(output_file, "w", encoding="utf-8") as f:
        json.dump(chunks, f, ensure_ascii=False, indent=4)
****************************************

****************************************
Boxer\scripts\youtube\not_used_enrich_transcript_speaker.py
****************************************
""" This script will get the speaker name from the YouTube video metadata and the first minute of the transcript using the OpenAI Functions entity extraction."""

# Standard Library Imports
import json
import os
import glob
import threading
import logging
import queue
import time
import argparse

# Third-Party Packages
import openai
from openai.embeddings_utils import get_embedding
from rich.progress import Progress
from tenacity import (
    retry,
    wait_random_exponential,
    stop_after_attempt,
    retry_if_not_exception_type,
)


logging.basicConfig(level=logging.WARNING)
logger = logging.getLogger(__name__)

API_KEY = os.environ["OPENAI_API_KEY"] #AZURE VERSION WAS os.environ["AZURE_OPENAI_API_KEY"] 
RESOURCE_ENDPOINT = "https://api.openai.com/v1" #AZURE VERSION WAS os.environ["AZURE_OPENAI_ENDPOINT"] 
TRANSCRIPT_FOLDER = "../data/transcripts"
PROCESSING_THREADS = 10
SEGMENT_MIN_LENGTH_MINUTES = 3
OPENAI_REQUEST_TIMEOUT = 60

OPENAI_MAX_TOKENS = 512
AZURE_OPENAI_MODEL_DEPLOYMENT_NAME = os.getenv(
    "AZURE_OPENAI_MODEL_DEPLOYMENT_NAME", "gpt-35-turbo"
)


openai.api_type = "open_ai" #AZURE VERSION WAS "Azure"
openai.api_key = API_KEY
openai.api_base = RESOURCE_ENDPOINT
openai.api_version = "2020-11-07" #AZURE VERSION WAS "2023-07-01-preview"

parser = argparse.ArgumentParser()
parser.add_argument("-f", "--folder")
parser.add_argument("--verbose", action="store_true")
args = parser.parse_args()
if args.verbose:
    logger.setLevel(logging.DEBUG)

TRANSCRIPT_FOLDER = args.folder if args.folder else None
if not TRANSCRIPT_FOLDER:
    logger.error("Transcript folder not provided")
    exit(1)

get_speaker_name = {
    "name": "get_speaker_name",
    "description": "Get the speaker names for the session.",
    "parameters": {
        "type": "object",
        "properties": {
            "speakers": {
                "type": "string",
                "description": "The speaker names.",
            }
        },
        "required": ["speaker_name"],
    },
}


openai_functions = [get_speaker_name]


# these maps are used to make the function name string to the function call
definition_map = {"get_speaker_name": get_speaker_name}

q = queue.Queue()

errors = 0


class Counter:
    """thread safe counter"""

    def __init__(self):
        """initialize the counter"""
        self.value = 0
        self.lock = threading.Lock()

    def increment(self):
        """increment the counter"""
        with self.lock:
            self.value += 1
            return self.value


counter = Counter()


@retry(
    wait=wait_random_exponential(min=6, max=10),
    stop=stop_after_attempt(5),
    retry=retry_if_not_exception_type(openai.BadRequestError),
)
def get_speaker_info(text, config):
    """Gets the OpenAI functions from the text."""

    function_name = None
    arguments = None

    response_1 = openai.ChatCompletion.create(
        model=config.modelName,
        messages=[
            {
                "role": "system",
                "content": "You are an AI assistant that can extract speaker names from text as a list of comma separated names. Try and extract the speaker names from the title. Speaker names are usually less than 3 words long.",
            },
            {"role": "user", "content": text},
        ],
        functions=openai_functions,
        max_tokens=OPENAI_MAX_TOKENS,
        #AZURE VERSION WAS engine=AZURE_OPENAI_MODEL_DEPLOYMENT_NAME,
        request_timeout=OPENAI_REQUEST_TIMEOUT,
        function_call={"name": "get_speaker_name"},
        temperature=0.0,
    )

    # The assistant's response includes a function call. We extract the arguments from this function call

    result = response_1.get("choices")[0].get("message")

    if result.get("function_call"):
        function_name = result.get("function_call").get("name")
        arguments = json.loads(result.get("function_call").get("arguments"))

    return function_name, arguments


def clean_text(text):
    """clean the text"""
    text = text.replace("\n", " ")  # remove new lines
    text = text.replace("&#39;", "'")
    text = text.replace(">>", "")  # remove '>>'
    text = text.replace("  ", " ")  # remove double spaces
    text = text.replace("[inaudible]", "")  # [inaudible]

    return text


def get_first_segment(file_name):
    """Gets the first segment from the filename"""

    text = ""
    current_seconds = None
    segment_begin_seconds = None
    segment_finish_seconds = None

    vtt = file_name.replace(".json", ".json.vtt")

    with open(vtt, "r", encoding="utf-8") as json_file:
        json_vtt = json.load(json_file)

        for segment in json_vtt:
            current_seconds = segment.get("start")

            if segment_begin_seconds is None:
                segment_begin_seconds = current_seconds
                # calculate the finish time from the segment_begin_time
                segment_finish_seconds = (
                    segment_begin_seconds + SEGMENT_MIN_LENGTH_MINUTES * 60
                )

            if current_seconds < segment_finish_seconds:
                # add the text to the transcript
                text += clean_text(segment.get("text")) + " "

    return text


def process_queue(progress, task):
    """process the queue"""
    while not q.empty():
        filename = q.get()
        progress.update(task, advance=1)
        if errors > 100:
            logger.error("Too many errors. Exiting...")
            exit(1)

        with open(filename, "r", encoding="utf-8") as json_file:
            metadata = json.load(json_file)

            base_text = 'The title is: ' +  metadata['title'] + " " + metadata["description"] + " " + get_first_segment(filename)
            # replace new line with empty string
            base_text = base_text.replace("\n", " ")

            function_name, arguments = get_speaker_info(base_text)
            speakers = arguments.get("speakers", "")
            if speakers == "":
                print(f"From function call: {filename}\t---MISSING SPEAKER---")
                continue
            else:
                print(f"From function call: {filename}\t{speakers}")

            metadata["speaker"] = speakers
            json.dump(metadata, open(filename, "w", encoding="utf-8"))

        q.task_done()
        time.sleep(0.2)


logger.debug("Transcription folder %s", TRANSCRIPT_FOLDER)
logger.debug("Starting Speaker Update")

# load all the transcript json files into the queue
folder = os.path.join(TRANSCRIPT_FOLDER, "*.json")

for filename in glob.glob(folder):
    # load the json file
    q.put(filename)


logger.debug("Starting speaker name update. Files to be processed: %s", q.qsize())
start_time = time.time()
with Progress() as progress:
    task1 = progress.add_task("[blue]Enriching Speaker Data...", total=q.qsize())
    # create multiple threads to process the queue
    threads = []
    for i in range(PROCESSING_THREADS):
        t = threading.Thread(target=process_queue, args=(progress, task1))
        t.start()
        threads.append(t)

    # wait for all threads to finish
    for t in threads:
        t.join()

finish_time = time.time()
logger.debug(
    "Finished speaker name update. Total time taken: %s", finish_time - start_time
)
****************************************

****************************************
Boxer\scripts\youtube\__init__.py
****************************************
from .download_transcripts import download_transcripts
from .enrich_transcript_chunks import enrich_transcript_chunks
from .enrich_transcript_summaries import enrich_transcript_summaries
from .enrich_transcript_embeddings import enrich_transcript_embeddings
****************************************

****************************************
BoxerEval\common\ApiConfiguration.py
****************************************
# Copyright (c) 2024 Braid Technologies Ltd

# Standard library imports
import os

azure = True                  

if azure:
   API_TYPE = "Azure" #AZURE VERSION WAS "Azure"
   # API_KEY = os.environ["AZURE_OPENAI_API_KEY"] #AZURE VERSION WAS os.environ["AZURE_OPENAI_API_KEY"]           #uncomment if code breaks - changes for script to exectable on both Windows and Unix machines.  
   API_KEY = os.getenv("AZURE_OPENAI_API_KEY")  # Use os.getenv() to safely retrieve environment variables       #comment if code breaks  - changes for script to exectable on both Windows and Unix machines. 
   API_VERSION = "2024-02-01" #AZURE VERSION WAS "2023-07-01-preview"
   RESOURCE_ENDPOINT = "https://braidlms.openai.azure.com/" #AZURE VERSION WAS os.environ["AZURE_OPENAI_ENDPOINT"] 
else:
   API_TYPE = "open_ai" #AZURE VERSION WAS "Azure"
   API_KEY = os.environ["OPENAI_API_KEY"] #AZURE VERSION WAS os.environ["AZURE_OPENAI_API_KEY"] 
   API_VERSION = "2020-11-07" #AZURE VERSION WAS "2023-07-01-preview"
   RESOURCE_ENDPOINT = "https://api.openai.com/v1" #AZURE VERSION WAS os.environ["AZURE_OPENAI_ENDPOINT"] 


# fetch Gemini API key from environment variables
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GEMINI_SERVICE_ENDPOINT = "https://generativelanguage.googleapis.com"
# API_VERSION = "v1"  # Gemini API version


class ApiConfiguration:
    def __init__(self) -> None:
        """
        Initialises an instance of the ApiConfiguration class, setting default values for Azure OpenAI and Gemini API parameters.

        :param None: No parameters are required to create an instance of this class.

        :return: Nothing is returned by this method.
        """
        self.apiKey = API_KEY
        self.apiVersion = API_VERSION
        self.resourceChatCompletionEndpoint = "https://studiomodels.openai.azure.com/openai/deployments/StudioLarge/chat/completions?api-version=2024-06-01"  # Chat completions endpoint
        self.resourceEmbeddingEndpoint = "https://studiomodels.openai.azure.com/openai/deployments/StudioEmbeddingLarge/embeddings?api-version=2024-06-01"  # Embeddings endpoint
        self.azureDeploymentName = "StudioLarge"
        self.azureEmbedDeploymentName = "StudioEmbeddingLarge"
        self.modelName = "gpt-4"
        self.embedModelName = "text-embedding-3-large"
        self.processingThreads = 4
        self.openAiRequestTimeout = 60
        self.summaryWordCount = 50      # 50 word summary
        self.chunkDurationMins = 10     # 10 minute long video clips
        self.maxTokens = 4096           # Upper limit on total tokens in an API call. 10 minutes of video = 600 words = 2400 tokens, plus approx 2x headroom
        self.discardIfBelow = 100       # Dont index if less than 100 tokens in an article
        self.GeminiApiKey = GEMINI_API_KEY
        self.GeminiServiceEndpoint = GEMINI_SERVICE_ENDPOINT

    apiType: str
    apiKey: str
    apiVersion: str
    resourceEndpoint: str
    azureDeploymentName: str
    azureEmbedDeploymentName: str
    modelName: str
    embedModelName: str
    processingThreads: int
    openAiRequestTimeout: int
    summaryWordCount: int
    chunkDurationMins: int
    maxTokens: int
    discardIfBelow: int 
    GeminiApiKey: str
    GeminiServiceEndpoint: str
****************************************

****************************************
BoxerEval\common\common_functions.py
****************************************
# Standard library imports
import os
from openai import AzureOpenAI

from common.ApiConfiguration import ApiConfiguration

config = ApiConfiguration()

def ensure_directory_exists(directory):
    """
    Checks if the directory at the given destination exists.
    If it does not exist, creates the directory.

    Parameters:
    directory (str): The path to the directory.
    """
    # Use os.path.join() to handle path construction across different platforms
    if not os.path.exists(directory):
        os.makedirs(directory)
        #print(f"Directory '{directory}' created.")  #  can remove or comment out this print statement for production
    else:
        # print(f"Directory '{directory}' already exists.")
        pass

# Construct the path using os.path.join() for cross-platform compatibility
HTML_DESTINATION_DIR = os.path.join("data", "web")
ensure_directory_exists(HTML_DESTINATION_DIR)

def get_embedding(text: str, embedding_client: AzureOpenAI, config: ApiConfiguration, model: str = "text-embedding-3-large"):
    # Replace newlines with spaces 
    text = text.replace("\n", " ")

    # Use the provided model parameter if given, otherwise fall back to config's deployment name
    chosen_model = model if model else config.embedModelName

    # Generate embedding using the chosen model and configuration
    response = embedding_client.embeddings.create(
        input=[text],
        model=chosen_model,
        timeout=config.openAiRequestTimeout
    )
    
    return response.data[0].embedding
****************************************

****************************************
BoxerEval\common\__init__.py
****************************************

****************************************
