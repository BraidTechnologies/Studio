****************************************
BoxerEval\test output\resultsOverviewVisualization.ipynb
****************************************
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Copyright (c) 2024 Braid Technologies Ltd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Imports "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import pandas as pd\n",
    "import plotly.express as px\n",
    "import plotly.graph_objects as go"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loading Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded Test Results 2024052802_Baseline.xlsx into variable: Test_Results_2024052802_Baseline\n",
      "Columns in Test_Results_2024052802_Baseline:\n",
      "Index(['Column1.question', 'Column1.hit', 'Column1.summary',\n",
      "       'Column1.hitRelevance', 'Column1.followUp', 'Column1.followUpOnTopic'],\n",
      "      dtype='object')\n",
      "\n",
      "\n",
      "Loaded Test Results Baseline - sameEmbeddingsAsV1.xlsx into variable: Test_Results_Baseline___sameEmbeddingsAsV1\n",
      "Columns in Test_Results_Baseline___sameEmbeddingsAsV1:\n",
      "Index(['Column1.question', 'Column1.enriched_question', 'Column1.hit',\n",
      "       'Column1.summary', 'Column1.hitRelevance', 'Column1.followUp',\n",
      "       'Column1.followUpOnTopic'],\n",
      "      dtype='object')\n",
      "\n",
      "\n",
      "Loaded test_output_v1_2024-08-28_14-25-47.xlsx into variable: test_output_v1_2024_08_28_14_25_47\n",
      "Columns in test_output_v1_2024_08_28_14_25_47:\n",
      "Index(['Column1.question', 'Column1.enriched_question', 'Column1.hit',\n",
      "       'Column1.summary', 'Column1.hitRelevance'],\n",
      "      dtype='object')\n",
      "\n",
      "\n",
      "Loaded test_output_v2_businessanalyst_2024-09-03_12-17-34.xlsx into variable: test_output_v2_businessanalyst_2024_09_03_12_17_34\n",
      "Columns in test_output_v2_businessanalyst_2024_09_03_12_17_34:\n",
      "Index(['Column1.question', 'Column1.enriched_question', 'Column1.hit',\n",
      "       'Column1.summary', 'Column1.hitRelevance'],\n",
      "      dtype='object')\n",
      "\n",
      "\n",
      "Loaded test_output_v2_developer_2024-09-03_12-10-22.xlsx into variable: test_output_v2_developer_2024_09_03_12_10_22\n",
      "Columns in test_output_v2_developer_2024_09_03_12_10_22:\n",
      "Index(['Column1.question', 'Column1.enriched_question', 'Column1.hit',\n",
      "       'Column1.summary', 'Column1.hitRelevance'],\n",
      "      dtype='object')\n",
      "\n",
      "\n",
      "Loaded test_output_v2_developer_2024-09-05_11-11-44.xlsx into variable: test_output_v2_developer_2024_09_05_11_11_44\n",
      "Columns in test_output_v2_developer_2024_09_05_11_11_44:\n",
      "Index(['Column1.question', 'Column1.enriched_question', 'Column1.hit',\n",
      "       'Column1.summary', 'Column1.hitRelevance'],\n",
      "      dtype='object')\n",
      "\n",
      "\n",
      "Loaded test_output_v2_nonetype_2024-09-03_12-03-59.xlsx into variable: test_output_v2_nonetype_2024_09_03_12_03_59\n",
      "Columns in test_output_v2_nonetype_2024_09_03_12_03_59:\n",
      "Index(['Column1.question', 'Column1.enriched_question', 'Column1.hit',\n",
      "       'Column1.summary', 'Column1.hitRelevance'],\n",
      "      dtype='object')\n",
      "\n",
      "\n",
      "Loaded test_output_v2_nonetype_2024-09-05_10-56-27.xlsx into variable: test_output_v2_nonetype_2024_09_05_10_56_27\n",
      "Columns in test_output_v2_nonetype_2024_09_05_10_56_27:\n",
      "Index(['Column1.question', 'Column1.enriched_question', 'Column1.hit',\n",
      "       'Column1.summary', 'Column1.hitRelevance'],\n",
      "      dtype='object')\n",
      "\n",
      "\n",
      "Loaded test_output_v2_tester_2024-09-03_12-13-59.xlsx into variable: test_output_v2_tester_2024_09_03_12_13_59\n",
      "Columns in test_output_v2_tester_2024_09_03_12_13_59:\n",
      "Index(['Column1.question', 'Column1.enriched_question', 'Column1.hit',\n",
      "       'Column1.summary', 'Column1.hitRelevance'],\n",
      "      dtype='object')\n",
      "\n",
      "\n",
      "Loaded test_output_v2_tester_2024-09-05_11-36-37.xlsx into variable: test_output_v2_tester_2024_09_05_11_36_37\n",
      "Columns in test_output_v2_tester_2024_09_05_11_36_37:\n",
      "Index(['Column1.question', 'Column1.enriched_question', 'Column1.hit',\n",
      "       'Column1.summary', 'Column1.hitRelevance'],\n",
      "      dtype='object')\n",
      "\n",
      "\n",
      "Loaded test_output_v3_businessanalyst_2024-09-17_03-35-43.xlsx into variable: test_output_v3_businessanalyst_2024_09_17_03_35_43\n",
      "Columns in test_output_v3_businessanalyst_2024_09_17_03_35_43:\n",
      "Index(['Column1.question', 'Column1.enriched_question', 'Column1.hit',\n",
      "       'Column1.summary', 'Column1.hitRelevance', 'Column1.follow_up',\n",
      "       'Column1.follow_up_on_topic'],\n",
      "      dtype='object')\n",
      "\n",
      "\n",
      "Loaded test_output_v3_developer_2024-0.xlsx into variable: test_output_v3_developer_2024_0\n",
      "Columns in test_output_v3_developer_2024_0:\n",
      "Index(['Column1', 'Column1.enriched_question', 'Column1.hit',\n",
      "       'Column1.summary', 'Column1.hitRelevance', 'Column1.follow_up',\n",
      "       'Column1.follow_up_on_topic'],\n",
      "      dtype='object')\n",
      "\n",
      "\n",
      "Loaded test_output_v3_nonetype_2024-09.xlsx into variable: test_output_v3_nonetype_2024_09\n",
      "Columns in test_output_v3_nonetype_2024_09:\n",
      "Index(['Column1.question', 'Column1.enriched_question', 'Column1.hit',\n",
      "       'Column1.summary', 'Column1.hitRelevance', 'Column1.follow_up',\n",
      "       'Column1.follow_up_on_topic'],\n",
      "      dtype='object')\n",
      "\n",
      "\n",
      "Loaded test_output_v3_tester_2024-09-17_03-21-25.xlsx into variable: test_output_v3_tester_2024_09_17_03_21_25\n",
      "Columns in test_output_v3_tester_2024_09_17_03_21_25:\n",
      "Index(['Column1.question', 'Column1.enriched_question', 'Column1.hit',\n",
      "       'Column1.summary', 'Column1.hitRelevance', 'Column1.follow_up',\n",
      "       'Column1.follow_up_on_topic'],\n",
      "      dtype='object')\n",
      "\n",
      "\n",
      "Loaded test_output_v4_businessanalyst_2024-09-29_01-42-36.xlsx into variable: test_output_v4_businessanalyst_2024_09_29_01_42_36\n",
      "Columns in test_output_v4_businessanalyst_2024_09_29_01_42_36:\n",
      "Index(['Column1.question', 'Column1.enriched_question', 'Column1.hit',\n",
      "       'Column1.summary', 'Column1.hitRelevance', 'Column1.follow_up',\n",
      "       'Column1.follow_up_on_topic', 'Column1.gemini_evaluation'],\n",
      "      dtype='object')\n",
      "\n",
      "\n",
      "Loaded test_output_v4_developer_2024-09-28_21-45-10.xlsx into variable: test_output_v4_developer_2024_09_28_21_45_10\n",
      "Columns in test_output_v4_developer_2024_09_28_21_45_10:\n",
      "Index(['Column1.question', 'Column1.enriched_question', 'Column1.hit',\n",
      "       'Column1.summary', 'Column1.hitRelevance', 'Column1.follow_up',\n",
      "       'Column1.follow_up_on_topic', 'Column1.gemini_evaluation'],\n",
      "      dtype='object')\n",
      "\n",
      "\n",
      "Loaded test_output_v4_nonetype_2024-09-28_21-30-03.xlsx into variable: test_output_v4_nonetype_2024_09_28_21_30_03\n",
      "Columns in test_output_v4_nonetype_2024_09_28_21_30_03:\n",
      "Index(['Column1.question', 'Column1.enriched_question', 'Column1.hit',\n",
      "       'Column1.summary', 'Column1.hitRelevance', 'Column1.follow_up',\n",
      "       'Column1.follow_up_on_topic', 'Column1.gemini_evaluation'],\n",
      "      dtype='object')\n",
      "\n",
      "\n",
      "Loaded test_output_v4_tester_2024-09-29_00-32-01.xlsx into variable: test_output_v4_tester_2024_09_29_00_32_01\n",
      "Columns in test_output_v4_tester_2024_09_29_00_32_01:\n",
      "Index(['Column1.question', 'Column1.enriched_question', 'Column1.hit',\n",
      "       'Column1.summary', 'Column1.hitRelevance', 'Column1.follow_up',\n",
      "       'Column1.follow_up_on_topic', 'Column1.gemini_evaluation'],\n",
      "      dtype='object')\n",
      "\n",
      "\n",
      "Loaded test_output_v5_businessanalyst_2024-10-07_17-55-42.xlsx into variable: test_output_v5_businessanalyst_2024_10_07_17_55_42\n",
      "Columns in test_output_v5_businessanalyst_2024_10_07_17_55_42:\n",
      "Index(['Column1.question', 'Column1.enriched_question', 'Column1.hit',\n",
      "       'Column1.summary', 'Column1.hitRelevance', 'Column1.follow_up',\n",
      "       'Column1.follow_up_on_topic', 'Column1.gemini_evaluation'],\n",
      "      dtype='object')\n",
      "\n",
      "\n",
      "Loaded test_output_v5_developer_2024-10-07_17-25-23.xlsx into variable: test_output_v5_developer_2024_10_07_17_25_23\n",
      "Columns in test_output_v5_developer_2024_10_07_17_25_23:\n",
      "Index(['Column1.question', 'Column1.enriched_question', 'Column1.hit',\n",
      "       'Column1.summary', 'Column1.hitRelevance', 'Column1.follow_up',\n",
      "       'Column1.follow_up_on_topic', 'Column1.gemini_evaluation'],\n",
      "      dtype='object')\n",
      "\n",
      "\n",
      "Loaded test_output_v5_nonetype_2024-10-07_18-04-26.xlsx into variable: test_output_v5_nonetype_2024_10_07_18_04_26\n",
      "Columns in test_output_v5_nonetype_2024_10_07_18_04_26:\n",
      "Index(['Column1', 'Column1.enriched_question', 'Column1.hit',\n",
      "       'Column1.summary', 'Column1.hitRelevance', 'Column1.follow_up',\n",
      "       'Column1.follow_up_on_topic', 'Column1.gemini_evaluation'],\n",
      "      dtype='object')\n",
      "\n",
      "\n",
      "Loaded test_output_v5_tester_2024-10-07_17-35-56.xlsx into variable: test_output_v5_tester_2024_10_07_17_35_56\n",
      "Columns in test_output_v5_tester_2024_10_07_17_35_56:\n",
      "Index(['Column1.question', 'Column1.enriched_question', 'Column1.hit',\n",
      "       'Column1.summary', 'Column1.hitRelevance', 'Column1.follow_up',\n",
      "       'Column1.follow_up_on_topic', 'Column1.gemini_evaluation'],\n",
      "      dtype='object')\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Define the directory containing the files\n",
    "directory = \"D:/Braid Technologies/BraidTechnologiesRepo/WorkedExamples/BoxerTest/test output\"\n",
    "\n",
    "# List all files in the directory\n",
    "files = os.listdir(directory)\n",
    "\n",
    "# Filter to get only the Excel files (.xlsx)\n",
    "excel_files = [file for file in files if file.endswith('.xlsx')]\n",
    "\n",
    "# Function to convert filename into a valid variable name\n",
    "def create_variable_name(filename):\n",
    "    variable_name = filename.replace('.xlsx', '').replace(' ', '_').replace('-', '_').replace('.', '_')\n",
    "    return variable_name\n",
    "\n",
    "# Read each Excel file and assign it to a dynamically named variable\n",
    "for excel_file in excel_files:\n",
    "    file_path = os.path.join(directory, excel_file)\n",
    "    df = pd.read_excel(file_path)\n",
    "    \n",
    "    # Generate a valid variable name\n",
    "    variable_name = create_variable_name(excel_file)\n",
    "    \n",
    "    # Use globals() to dynamically assign the DataFrame to the variable name\n",
    "    globals()[variable_name] = df\n",
    "    print(f\"Loaded {excel_file} into variable: {variable_name}\")\n",
    "    \n",
    "    # Print the columns of each dataframe for inspection\n",
    "    print(f\"Columns in {variable_name}:\")\n",
    "    print(df.columns)\n",
    "    print(\"\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualizations Set 1: Box Plots "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define thresholds as variables for flexibility\n",
    "threshold_baseline_to_v4 = 0.8\n",
    "threshold_v5 = 0.6"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Box Plot: Static Persona all versions "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "alignmentgroup": "True",
         "boxmean": true,
         "boxpoints": "all",
         "hovertemplate": "<b>Version</b>: %{x}<br><b>Hit Relevance</b>: %{y}<br><b>Hit Binary</b>: %{customdata}",
         "jitter": 0.2,
         "legendgroup": "baseline",
         "marker": {
          "color": "rgb(102,194,165)",
          "opacity": 0.8,
          "size": 6
         },
         "name": "baseline",
         "notched": false,
         "offsetgroup": "baseline",
         "orientation": "v",
         "pointpos": -1.5,
         "showlegend": true,
         "type": "box",
         "width": 0.4,
         "x": [
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline"
         ],
         "x0": " ",
         "xaxis": "x",
         "y": [
          0.8784441145756917,
          0.8774876933819626,
          0.8746684526475066,
          0.8746424643210794,
          0.8672439394801955,
          0.8603153999309818,
          0.855133577099862,
          0.854684365530313,
          0.8545490013947185,
          0.8536750205786069,
          0.8501388581189828,
          0.8499660383782022,
          0.8470403662206168,
          0.8463422141715554,
          0.8454658353831477,
          0.8453736197417216,
          0.8451186188958659,
          0.8450729794568982,
          0.843996474043092,
          0.8417384332596856,
          0.8399934314279974,
          0.8382348105204843,
          0.8373992935457025,
          0.8361225308669625,
          0.8351752441648143,
          0.8343694018089332,
          0.8321899352349762,
          0.832155049588577,
          0.830248828676792,
          0.8295025892387569,
          0.8289186592390524,
          0.8288114265837756,
          0.8284027920639331,
          0.8273072353527722,
          0.8271236092473713,
          0.826975894551871,
          0.8265560599870281,
          0.825320371453267,
          0.8248481659124333,
          0.824346976359626,
          0.8229000166277352,
          0.8206292698708735,
          0.8198691672518295,
          0.8195897019982514,
          0.8194865396947004,
          0.8188920393542686,
          0.8167959019266425,
          0.8164857256712671,
          0.8159706347347968,
          0.8159293705435575,
          0.8157958553839585,
          0.8154986121078773,
          0.814084258399054,
          0.8117359799225621,
          0.8115161548623933,
          0.8111692492276386,
          0.8108709355131023,
          0.810498399917788,
          0.8101889348326631,
          0.8099605332098587,
          0.8092608604270364,
          0.8079074337556884,
          0.8078390308025816,
          0.8078210638903874,
          0.8077010144788173,
          0.8076098567585128,
          0.807204013767107,
          0.8067548407994568,
          0.8061181657940557,
          0.8060373413831154,
          0.8059647466331435,
          0.8049369563243841,
          0.8036939307668896,
          0.8025805035692839,
          0.8022600750793488,
          0.8012921522278786,
          0.8005338717485814,
          0.7993632539029342,
          0.7977609335991143,
          0.7977478616824621,
          0.7970567781996246,
          0.7960420128627206,
          0.7959482970504347,
          0.7948834305972643,
          0.794524347185814,
          0.7939856708447534,
          0.7937062140910492,
          0.7932719784138285,
          0.7918442800322498,
          0.7901422444482195,
          0.7889456502312663,
          0.7883422641059364,
          0.7872176322886016,
          0.7869777101688635,
          0.7856166825021259,
          0.7854434461911843,
          0.7812875857150219,
          0.7810471085440618,
          0.7763484036629806
         ],
         "y0": " ",
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "boxmean": true,
         "boxpoints": "all",
         "hovertemplate": "<b>Version</b>: %{x}<br><b>Hit Relevance</b>: %{y}<br><b>Hit Binary</b>: %{customdata}",
         "jitter": 0.2,
         "legendgroup": "v1",
         "marker": {
          "color": "rgb(252,141,98)",
          "opacity": 0.8,
          "size": 6
         },
         "name": "v1",
         "notched": false,
         "offsetgroup": "v1",
         "orientation": "v",
         "pointpos": -1.5,
         "showlegend": true,
         "type": "box",
         "width": 0.4,
         "x": [
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1",
          "v1"
         ],
         "x0": " ",
         "xaxis": "x",
         "y": [
          0.924393906743026,
          0.9196197307846814,
          0.8825453470648145,
          0.9419836152751369,
          0.8975484931393578,
          0.9006644801836481,
          0.8977080433152496,
          0.8768427687461189,
          0.866785073743707,
          0.8800914343652871,
          0.889463879803277,
          0.8774046754452423,
          0.8853839932582857,
          0.8611237869950039,
          0.9025014929395084,
          0.8721533465732854,
          0.8893276465553455,
          0.9474367915470402,
          0.9196082914928412,
          0.9104634578659536,
          0.8813608196512471,
          0.8832289825869751,
          0.8943909102965277,
          0.8733851781088875,
          0.878329959424582,
          0.878437707412324,
          0.9036892070514992,
          0.8906516541140975,
          0.8809789373092691,
          0.7869028287789468,
          0.9122188833033122,
          0.8758124028340517,
          0.8995820133429755,
          0.8925493497314996,
          0.9076956487276172,
          0.8930047486215221,
          0.8798066217189165,
          0.8752383447498052,
          0.7869028287789468,
          0.9221819567817656,
          0.900731387387977,
          0.9049989099877668,
          0.901678749344388,
          0.8787264646280729,
          0.8688002811140939,
          0.8709995106036429,
          0.8844732560868644,
          0.9086761349035344,
          0.8970097815672291,
          0.878465725171397,
          0.8083703954979202,
          0.9083431734259648,
          0.8973444266406977,
          0.9034778476492,
          0.866285395122804,
          0.8878699520674281,
          0.8563737388393757,
          0.8823015340438092,
          0.88465944513763,
          0.7869028287789468,
          0.8854094789645809,
          0.8793141728608034,
          0.9005005328022911,
          0.8974425891351023,
          0.890067281771038,
          0.8658099442602168,
          0.8496761951073898,
          0.7869028287789468,
          0.8865766117548506,
          0.8832139456700308,
          0.8293944736856675,
          0.9003748819551849,
          0.8549134928018522,
          0.8790993214401471,
          0.8886748362035549,
          0.850524606511569,
          0.8995291091543325,
          0.8930652736969807,
          0.8730485074069402,
          0.870791079873467,
          0.7869028287789468,
          0.9088065613543568,
          0.8837147902049028,
          0.8797394457853547,
          0.8782849114748466,
          0.8793997210638661,
          0.8577444746083728,
          0.881085912634266,
          0.8352460647346155,
          0.8951948088957126,
          0.8696743779067561,
          0.8661900150435694,
          0.8725327171504833,
          0.8153449800176882,
          0.8554040653098364,
          0.8562968713770878,
          0.8490709056683587,
          0.8652669929819938,
          0.8083703954979202
         ],
         "y0": " ",
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "boxmean": true,
         "boxpoints": "all",
         "hovertemplate": "<b>Version</b>: %{x}<br><b>Hit Relevance</b>: %{y}<br><b>Hit Binary</b>: %{customdata}",
         "jitter": 0.2,
         "legendgroup": "v2",
         "marker": {
          "color": "rgb(141,160,203)",
          "opacity": 0.8,
          "size": 6
         },
         "name": "v2",
         "notched": false,
         "offsetgroup": "v2",
         "orientation": "v",
         "pointpos": -1.5,
         "showlegend": true,
         "type": "box",
         "width": 0.4,
         "x": [
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2"
         ],
         "x0": " ",
         "xaxis": "x",
         "y": [
          0.9243939067430264,
          0.9196197307846814,
          0.8825453470648145,
          0.9419836152751369,
          0.8975484931393578,
          0.9006644801836481,
          0.9001721544418274,
          0.8768427687461189,
          0.866785073743707,
          0.8800914343652871,
          0.889463879803277,
          0.8774046754452423,
          0.8853839932582857,
          0.8611237869950039,
          0.9025014929395084,
          0.8721533465732854,
          0.8893276465553455,
          0.9474367915470402,
          0.9196082914928412,
          0.9104634578659536,
          0.8813608196512471,
          0.8832289825869751,
          0.8943909102965277,
          0.8737754648414694,
          0.878329959424582,
          0.878437707412324,
          0.9036892070514992,
          0.8906516541140975,
          0.8809789373092691,
          0.7869028287789468,
          0.9122188833033122,
          0.8758124028340517,
          0.8995820133429755,
          0.8925493497314996,
          0.907489681483558,
          0.8930047486215221,
          0.8798066217189165,
          0.8752383447498052,
          0.7869028287789468,
          0.9221819567817656,
          0.900731387387977,
          0.9049989099877668,
          0.901678749344388,
          0.8787264646280729,
          0.8688002811140939,
          0.8709995106036429,
          0.8958046893978626,
          0.9086761349035344,
          0.8970097815672291,
          0.8862818711565011,
          0.8083703954979202,
          0.9083431734259648,
          0.8973444266406977,
          0.9034778476492,
          0.8623330133476658,
          0.8878699520674281,
          0.8563737388393757,
          0.8832868391747636,
          0.88465944513763,
          0.7869028287789468,
          0.8854094789645809,
          0.8793141728608034,
          0.9005005328022911,
          0.8974425891351023,
          0.890067281771038,
          0.8658099442602168,
          0.8496761951073898,
          0.7869028287789468,
          0.8865766117548506,
          0.8728400750173998,
          0.8293944736856675,
          0.9003748819551849,
          0.8549134928018522,
          0.8889713645737101,
          0.8886748362035549,
          0.850524606511569,
          0.8995291091543325,
          0.8930652736969807,
          0.8730485074069402,
          0.870791079873467,
          0.7869028287789468,
          0.9088065613543568,
          0.8837147902049028,
          0.8797394457853547,
          0.8782849114748466,
          0.8793997210638661,
          0.8577444746083728,
          0.881085912634266,
          0.8352460647346155,
          0.8951948088957126,
          0.8702655201361587,
          0.8661900150435694,
          0.8725327171504833,
          0.8153449800176882,
          0.8554040653098364,
          0.8562968713770878,
          0.8490709056683587,
          0.8652669929819938,
          0.8083703954979202
         ],
         "y0": " ",
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "boxmean": true,
         "boxpoints": "all",
         "hovertemplate": "<b>Version</b>: %{x}<br><b>Hit Relevance</b>: %{y}<br><b>Hit Binary</b>: %{customdata}",
         "jitter": 0.2,
         "legendgroup": "v3",
         "marker": {
          "color": "rgb(231,138,195)",
          "opacity": 0.8,
          "size": 6
         },
         "name": "v3",
         "notched": false,
         "offsetgroup": "v3",
         "orientation": "v",
         "pointpos": -1.5,
         "showlegend": true,
         "type": "box",
         "width": 0.4,
         "x": [
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3"
         ],
         "x0": " ",
         "xaxis": "x",
         "y": [
          0.9102863570496312,
          0.9111326313307512,
          0.8932963934535463,
          0.916287037186294,
          0.8963182789980809,
          0.9155823461989266,
          0.8804366333634528,
          0.8531395561507806,
          0.8794404378099483,
          0.911845697918194,
          0.891650221981209,
          0.8793998958141752,
          0.8963567436737593,
          0.8758339056529525,
          0.9001711385822954,
          0.8721424218133543,
          0.9241784315679225,
          0.9503984050753228,
          0.899196083760261,
          0.8729473222805881,
          0.9097360708864052,
          0.8791826793196098,
          0.8844092461003461,
          0.906051403068038,
          0.8787108485775526,
          0.8807908793545486,
          0.9072472256126204,
          0.8935409216037367,
          0.8739062348052659,
          0.8899149172803996,
          0.9050704930175772,
          0.917986871968316,
          0.8856807915827534,
          0.8889750298816943,
          0.8815775654815671,
          0.9015841067812976,
          0.8562689185154987,
          0.8788100836539721,
          0.821834469706107,
          0.9199758819533326,
          0.8730628738661588,
          0.8989870736125395,
          0.8832383397891186,
          0.8717191916649,
          0.8689511339258135,
          0.8657558862457023,
          0.8729166660338238,
          0.8750168499195771,
          0.8644314454810835,
          0.8955164057266124,
          0.8956610462740369,
          0.869623925325292,
          0.8845357012184273,
          0.874238879585829,
          0.8455064638965984,
          0.8872603065937068,
          0.8517043158830384,
          0.868910928875287,
          0.8981308721985063,
          0.8739347691944866,
          0.8917200102786358,
          0.857369829621579,
          0.8616783695004196,
          0.8691082243801631,
          0.872347983599727,
          0.8895936907611239,
          0.8831906572622278,
          0.8241676086086914,
          0.8693780270815367,
          0.8409705472570665,
          0.8498475248739437,
          0.8738315878289198,
          0.836865422200058,
          0.8491313795871752,
          0.8814053714536882,
          0.8353251641242605,
          0.8644015906793546,
          0.8661652419170786,
          0.8703993623704002,
          0.877041231277552,
          0.854653260188563,
          0.8755974266169718,
          0.8519364476849055,
          0.8489493218611897,
          0.8376595086063615,
          0.8853442104303648,
          0.8746793364511695,
          0.8357013888344408,
          0.8313767012659128,
          0.8761802927983601,
          0.8550202599149437,
          0.8698249504976189,
          0.856345651667017,
          0.8208274981947007,
          0.847567614403881,
          0.8696593450311181,
          0.8097623915928384,
          0.8685240577638,
          0.8029446049613596
         ],
         "y0": " ",
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "boxmean": true,
         "boxpoints": "all",
         "hovertemplate": "<b>Version</b>: %{x}<br><b>Hit Relevance</b>: %{y}<br><b>Hit Binary</b>: %{customdata}",
         "jitter": 0.2,
         "legendgroup": "v4",
         "marker": {
          "color": "rgb(166,216,84)",
          "opacity": 0.8,
          "size": 6
         },
         "name": "v4",
         "notched": false,
         "offsetgroup": "v4",
         "orientation": "v",
         "pointpos": -1.5,
         "showlegend": true,
         "type": "box",
         "width": 0.4,
         "x": [
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4"
         ],
         "x0": " ",
         "xaxis": "x",
         "y": [
          0.9097454065690208,
          0.9146952930552276,
          0.8941589155284498,
          0.916287037186294,
          0.8997835397330693,
          0.8997298548696421,
          0.8871333935790341,
          0.8573013165556782,
          0.8900350912307643,
          0.9105421821824942,
          0.8936743771219616,
          0.8748559413280973,
          0.8944453950418302,
          0.882531939367155,
          0.9050497683123672,
          0.8728668700189449,
          0.9246063188814052,
          0.9503984050753228,
          0.8919065631007775,
          0.890839257880814,
          0.9117307814851824,
          0.8791826793196098,
          0.8844092461003461,
          0.907005446339322,
          0.8730020946296939,
          0.8858990608400041,
          0.9155702794727816,
          0.8935409216037367,
          0.8806624400824667,
          0.8845030955247996,
          0.8990167445484607,
          0.9181384263037144,
          0.8856807915827534,
          0.8919791914679454,
          0.8799867775276035,
          0.906164066758436,
          0.846105972981078,
          0.8632301420589058,
          0.821834469706107,
          0.9168439843603292,
          0.8730628738661588,
          0.8961541173952502,
          0.8930383620789725,
          0.873398419894492,
          0.8680503120078186,
          0.8686086536087215,
          0.8909779895727419,
          0.8652959317079337,
          0.8644314454810835,
          0.8893894650962594,
          0.8956610462740369,
          0.869623925325292,
          0.8961282260807768,
          0.8676048856093134,
          0.8461001310998058,
          0.8872603065937068,
          0.8508780652690656,
          0.8655220585731731,
          0.8943338061561141,
          0.8678952715338496,
          0.8988973766772407,
          0.8622646466664529,
          0.8616783695004196,
          0.8774183214069123,
          0.8513876287721488,
          0.8895936907611239,
          0.8831906572622278,
          0.8210666597145564,
          0.8693780270815367,
          0.8382160214466984,
          0.8505341245916723,
          0.8751734057631104,
          0.8460107222830198,
          0.8726079394035209,
          0.8890114058330164,
          0.8299660160251069,
          0.869166415605693,
          0.8556854763683883,
          0.8763041507348912,
          0.8806153115362199,
          0.8601061732870892,
          0.8777439849842348,
          0.867812425845204,
          0.8428085509264354,
          0.8444366691045202,
          0.8831714438416778,
          0.8746793364511695,
          0.8504311665044678,
          0.8391522960946612,
          0.8482990888126966,
          0.8643824647379152,
          0.8724320843995278,
          0.8627392260254052,
          0.8198790625192233,
          0.8456025969202264,
          0.8737674294218963,
          0.8110655271040754,
          0.8600789560676712,
          0.8029446049613596
         ],
         "y0": " ",
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "boxmean": true,
         "boxpoints": "all",
         "hovertemplate": "<b>Version</b>: %{x}<br><b>Hit Relevance</b>: %{y}<br><b>Hit Binary</b>: %{customdata}",
         "jitter": 0.2,
         "legendgroup": "v5",
         "marker": {
          "color": "rgb(255,217,47)",
          "opacity": 0.8,
          "size": 6
         },
         "name": "v5",
         "notched": false,
         "offsetgroup": "v5",
         "orientation": "v",
         "pointpos": -1.5,
         "showlegend": true,
         "type": "box",
         "width": 0.4,
         "x": [
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5"
         ],
         "x0": " ",
         "xaxis": "x",
         "y": [
          0.6731369367196186,
          0.6323135191555299,
          0.5006659540333269,
          0.7716985956105529,
          0.5766350368531212,
          0.6663332896682035,
          0.6367316360363126,
          0.5796837212028515,
          0.5600788971319738,
          0.5975354552166916,
          0.5973072022288308,
          0.5287444433166782,
          0.6516017178514449,
          0.534736986669372,
          0.6195480880639543,
          0.645337990929014,
          0.6386517810197362,
          0.514074583983961,
          0.6815023838724285,
          0.5990940647152662,
          0.6801472106742469,
          0.5684908872406775,
          0.5752713592379886,
          0.6161912052347343,
          0.6801369401015469,
          0.5845394166769631,
          0.6543367988114225,
          0.6117959463887068,
          0.6160300278531107,
          0.6496918093041857,
          0.6719629371048373,
          0.6203056874564287,
          0.6134468627126082,
          0.5781589763970728,
          0.6105740701826523,
          0.6947086033378694,
          0.5291563195265314,
          0.5432901396564853,
          0.5179860737997545,
          0.6612861072303015,
          0.5661888095923717,
          0.6051030879690789,
          0.6402930586594894,
          0.5553412053827245,
          0.5651653651167712,
          0.608802380472875,
          0.6357586184202657,
          0.5974777919918486,
          0.662749796152806,
          0.5318721776485819,
          0.6108998408183915,
          0.5588826198839557,
          0.5962617901606643,
          0.5672801383797338,
          0.5223279169527594,
          0.6442206613763538,
          0.5551265351855341,
          0.5903162538615705,
          0.552906559133195,
          0.6186804552531608,
          0.6308996394936437,
          0.5514039965679497,
          0.5558179608474426,
          0.6582613961593514,
          0.5567287350733925,
          0.5662416833826047,
          0.5681068934105677,
          0.3935201190872517,
          0.5659531832177507,
          0.5075502790538586,
          0.47006342716934,
          0.7006802245363074,
          0.5283867200836436,
          0.4888247111847659,
          0.567965290896608,
          0.4986059847398644,
          0.6523283969648632,
          0.6352992922469146,
          0.6503658722569365,
          0.6416843997092457,
          0.4907060335795465,
          0.6441758718579682,
          0.5713241091300499,
          0.5764094654751307,
          0.5584517426067436,
          0.582698289012325,
          0.6401734158003897,
          0.5550108640888761,
          0.5072769278406136,
          0.563457141763934,
          0.6329583240946072,
          0.5768580507896294,
          0.5565887937055662,
          0.4353284213671637,
          0.5628903965614241,
          0.6477037065151873,
          0.4164287322152645,
          0.5828384288044239,
          0.37426439727290167
         ],
         "y0": " ",
         "yaxis": "y"
        }
       ],
       "layout": {
        "annotations": [
         {
          "font": {
           "color": "darkred",
           "size": 12
          },
          "showarrow": false,
          "text": "Threshold: 0.8",
          "x": 5,
          "xshift": 50,
          "y": 0.8,
          "yshift": 10
         },
         {
          "font": {
           "color": "darkblue",
           "size": 12
          },
          "showarrow": false,
          "text": "Threshold: 0.6",
          "x": 5,
          "xshift": 50,
          "y": 0.6,
          "yshift": -10
         }
        ],
        "bargap": 0.15,
        "boxmode": "group",
        "font": {
         "family": "Arial",
         "size": 14
        },
        "height": 650,
        "hovermode": "closest",
        "legend": {
         "title": {
          "text": "Version"
         },
         "tracegroupgap": 0
        },
        "margin": {
         "b": 60,
         "l": 60,
         "r": 40,
         "t": 70
        },
        "plot_bgcolor": "#f7f7f7",
        "shapes": [
         {
          "line": {
           "color": "darkred",
           "dash": "dash",
           "width": 2
          },
          "opacity": 0.7,
          "type": "line",
          "x0": -0.5,
          "x1": 4.5,
          "y0": 0.8,
          "y1": 0.8
         },
         {
          "line": {
           "color": "darkblue",
           "dash": "dash",
           "width": 2
          },
          "opacity": 0.7,
          "type": "line",
          "x0": 4,
          "x1": 5.5,
          "y0": 0.6,
          "y1": 0.6
         }
        ],
        "showlegend": true,
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "font": {
          "color": "darkblue",
          "family": "Times New Roman",
          "size": 22
         },
         "text": "Hit Relevance Distribution by Version (Static Persona)"
        },
        "width": 1000,
        "xaxis": {
         "anchor": "y",
         "categoryarray": [
          "baseline",
          "v1",
          "v2",
          "v3",
          "v4",
          "v5"
         ],
         "categoryorder": "array",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Version"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "gridcolor": "lightgray",
         "showgrid": true,
         "title": {
          "text": "Hit Relevance Score"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Define thresholds as variables for flexibility\n",
    "threshold_baseline_to_v4 = 0.8\n",
    "threshold_v5 = 0.6\n",
    "\n",
    "# Dataframes for Static Persona\n",
    "dataframes_static = {\n",
    "    \"baseline\": Test_Results_2024052802_Baseline,\n",
    "    \"v1\": test_output_v1_2024_08_28_14_25_47,\n",
    "    \"v2\": test_output_v2_nonetype_2024_09_03_12_03_59,\n",
    "    \"v3\": test_output_v3_nonetype_2024_09,\n",
    "    \"v4\": test_output_v4_nonetype_2024_09_28_21_30_03,\n",
    "    \"v5\": test_output_v5_nonetype_2024_10_07_18_04_26\n",
    "}\n",
    "\n",
    "# Combine data for easier plotting\n",
    "all_data_static = []\n",
    "for version, df in dataframes_static.items():\n",
    "    df['version'] = version  # Add a column for version\n",
    "    all_data_static.append(df[['Column1.hit', 'Column1.hitRelevance', 'version']])\n",
    "\n",
    "# Concatenate all data into a single DataFrame\n",
    "combined_df_static = pd.concat(all_data_static)\n",
    "\n",
    "# Convert hit column to binary values (1 if hit, 0 if not) based on a threshold of 0.75\n",
    "combined_df_static['hit_binary'] = combined_df_static['Column1.hitRelevance'].apply(lambda x: 1 if x >= 0.75 else 0)\n",
    "\n",
    "# Create a box plot for Static Persona including the baseline\n",
    "fig_static = px.box(combined_df_static, \n",
    "                    x='version', \n",
    "                    y='Column1.hitRelevance', \n",
    "                    points='all',  # Show all data points\n",
    "                    title='Hit Relevance Distribution by Version (Static Persona)',\n",
    "                    labels={'Column1.hitRelevance': 'Hit Relevance Score', 'version': 'Version'},\n",
    "                    color='version',  \n",
    "                    color_discrete_sequence=px.colors.qualitative.Set2)  # Use distinct color palette\n",
    "\n",
    "# Customize box plot aesthetics\n",
    "fig_static.update_traces(\n",
    "    boxmean=True, \n",
    "    jitter=0.2,\n",
    "    pointpos=-1.5,\n",
    "    marker=dict(size=6, opacity=0.8),\n",
    "    width=0.4\n",
    ")\n",
    "\n",
    "# Add horizontal lines for thresholds\n",
    "fig_static.add_shape(\n",
    "    type=\"line\", line_color=\"darkred\", line_width=2, opacity=0.7, \n",
    "    x0=-0.5, x1=4.5, y0=threshold_baseline_to_v4, y1=threshold_baseline_to_v4, \n",
    "    line_dash=\"dash\"\n",
    ")\n",
    "fig_static.add_shape(\n",
    "    type=\"line\", line_color=\"darkblue\", line_width=2, opacity=0.7, \n",
    "    x0=4, x1=5.5, y0=threshold_v5, y1=threshold_v5,\n",
    "    line_dash=\"dash\"\n",
    ")\n",
    "\n",
    "# Move the threshold text annotations to the right\n",
    "fig_static.add_annotation(\n",
    "    x=5, y=threshold_baseline_to_v4,\n",
    "    text=\"Threshold: 0.8\", showarrow=False, xshift=50, yshift=10,\n",
    "    font=dict(size=12, color=\"darkred\")\n",
    ")\n",
    "fig_static.add_annotation(\n",
    "    x=5, y=threshold_v5,\n",
    "    text=\"Threshold: 0.6\", showarrow=False, xshift=50, yshift=-10,\n",
    "    font=dict(size=12, color=\"darkblue\")\n",
    ")\n",
    "\n",
    "# Adjust layout for better spacing and visual clarity\n",
    "fig_static.update_layout(\n",
    "    xaxis_title='Version',\n",
    "    yaxis_title='Hit Relevance Score',\n",
    "    legend_title_text='Version',\n",
    "    font=dict(size=14, family='Arial'),\n",
    "    plot_bgcolor='#f7f7f7',  \n",
    "    title_font=dict(size=22, family='Times New Roman', color='darkblue'),  \n",
    "    width=1000,\n",
    "    height=650,\n",
    "    margin=dict(t=70, l=60, r=40, b=60),\n",
    "    boxmode='group', \n",
    "    showlegend=True,  \n",
    "    yaxis=dict(showgrid=True, gridcolor='lightgray'),  \n",
    "    bargap=0.15,\n",
    "    hovermode=\"closest\"  \n",
    ")\n",
    "\n",
    "# Update hover template\n",
    "fig_static.update_traces(\n",
    "    hovertemplate=\"<b>Version</b>: %{x}<br><b>Hit Relevance</b>: %{y}<br><b>Hit Binary</b>: %{customdata}\"\n",
    ")\n",
    "\n",
    "# Display the figure\n",
    "fig_static.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Box Plot: Tester Persona all versions "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "alignmentgroup": "True",
         "boxmean": true,
         "boxpoints": "all",
         "hovertemplate": "<b>Version</b>: %{x}<br><b>Hit Relevance</b>: %{y}<br><b>Hit Binary</b>: %{customdata}",
         "jitter": 0.2,
         "legendgroup": "baseline",
         "marker": {
          "color": "rgb(102,194,165)",
          "opacity": 0.8,
          "size": 6
         },
         "name": "baseline",
         "notched": false,
         "offsetgroup": "baseline",
         "orientation": "v",
         "pointpos": -1.5,
         "showlegend": true,
         "type": "box",
         "width": 0.4,
         "x": [
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline"
         ],
         "x0": " ",
         "xaxis": "x",
         "y": [
          0.8784441145756917,
          0.8774876933819626,
          0.8746684526475066,
          0.8746424643210794,
          0.8672439394801955,
          0.8603153999309818,
          0.855133577099862,
          0.854684365530313,
          0.8545490013947185,
          0.8536750205786069,
          0.8501388581189828,
          0.8499660383782022,
          0.8470403662206168,
          0.8463422141715554,
          0.8454658353831477,
          0.8453736197417216,
          0.8451186188958659,
          0.8450729794568982,
          0.843996474043092,
          0.8417384332596856,
          0.8399934314279974,
          0.8382348105204843,
          0.8373992935457025,
          0.8361225308669625,
          0.8351752441648143,
          0.8343694018089332,
          0.8321899352349762,
          0.832155049588577,
          0.830248828676792,
          0.8295025892387569,
          0.8289186592390524,
          0.8288114265837756,
          0.8284027920639331,
          0.8273072353527722,
          0.8271236092473713,
          0.826975894551871,
          0.8265560599870281,
          0.825320371453267,
          0.8248481659124333,
          0.824346976359626,
          0.8229000166277352,
          0.8206292698708735,
          0.8198691672518295,
          0.8195897019982514,
          0.8194865396947004,
          0.8188920393542686,
          0.8167959019266425,
          0.8164857256712671,
          0.8159706347347968,
          0.8159293705435575,
          0.8157958553839585,
          0.8154986121078773,
          0.814084258399054,
          0.8117359799225621,
          0.8115161548623933,
          0.8111692492276386,
          0.8108709355131023,
          0.810498399917788,
          0.8101889348326631,
          0.8099605332098587,
          0.8092608604270364,
          0.8079074337556884,
          0.8078390308025816,
          0.8078210638903874,
          0.8077010144788173,
          0.8076098567585128,
          0.807204013767107,
          0.8067548407994568,
          0.8061181657940557,
          0.8060373413831154,
          0.8059647466331435,
          0.8049369563243841,
          0.8036939307668896,
          0.8025805035692839,
          0.8022600750793488,
          0.8012921522278786,
          0.8005338717485814,
          0.7993632539029342,
          0.7977609335991143,
          0.7977478616824621,
          0.7970567781996246,
          0.7960420128627206,
          0.7959482970504347,
          0.7948834305972643,
          0.794524347185814,
          0.7939856708447534,
          0.7937062140910492,
          0.7932719784138285,
          0.7918442800322498,
          0.7901422444482195,
          0.7889456502312663,
          0.7883422641059364,
          0.7872176322886016,
          0.7869777101688635,
          0.7856166825021259,
          0.7854434461911843,
          0.7812875857150219,
          0.7810471085440618,
          0.7763484036629806
         ],
         "y0": " ",
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "boxmean": true,
         "boxpoints": "all",
         "hovertemplate": "<b>Version</b>: %{x}<br><b>Hit Relevance</b>: %{y}<br><b>Hit Binary</b>: %{customdata}",
         "jitter": 0.2,
         "legendgroup": "v2",
         "marker": {
          "color": "rgb(252,141,98)",
          "opacity": 0.8,
          "size": 6
         },
         "name": "v2",
         "notched": false,
         "offsetgroup": "v2",
         "orientation": "v",
         "pointpos": -1.5,
         "showlegend": true,
         "type": "box",
         "width": 0.4,
         "x": [
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2"
         ],
         "x0": " ",
         "xaxis": "x",
         "y": [
          0.9260896548361044,
          0.8958465943886792,
          0.8835965409616544,
          0.8873837995736313,
          0.8533479846923361,
          0.9035330506872984,
          0.8713233459019327,
          0.8680085066020624,
          0.8190568611323094,
          0.8815219379965763,
          0.8345599170000927,
          0.9132679311334024,
          0.8066154482552983,
          0.8754113638252863,
          0.7869028287789468,
          0.8937630766721856,
          0.8357541911288255,
          0.8444135294118604,
          0.7869028287789468,
          0.8603974601345054,
          0.7869028287789468,
          0.8893231070197398,
          0.7869028287789468,
          0.8784992926819956,
          0.7869028287789468,
          0.8329459623017822,
          0.7869028287789468,
          0.8831018847649333,
          0.7869028287789468,
          0.8304822390967751,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.8805711473862292,
          0.7869028287789468,
          0.863031670173316,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.8083703954979202,
          0.8702575370109655,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.8432393091870631,
          0.8583835613039328,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.8083703954979202,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.8083703954979202,
          0.7869028287789468,
          0.8083703954979202,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.8083703954979202,
          0.7869028287789468,
          0.8083703954979202,
          0.7869028287789468,
          0.8083703954979202,
          0.7869028287789468
         ],
         "y0": " ",
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "boxmean": true,
         "boxpoints": "all",
         "hovertemplate": "<b>Version</b>: %{x}<br><b>Hit Relevance</b>: %{y}<br><b>Hit Binary</b>: %{customdata}",
         "jitter": 0.2,
         "legendgroup": "v3",
         "marker": {
          "color": "rgb(141,160,203)",
          "opacity": 0.8,
          "size": 6
         },
         "name": "v3",
         "notched": false,
         "offsetgroup": "v3",
         "orientation": "v",
         "pointpos": -1.5,
         "showlegend": true,
         "type": "box",
         "width": 0.4,
         "x": [
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3"
         ],
         "x0": " ",
         "xaxis": "x",
         "y": [
          0.8083703954979202,
          0.9015171754259578,
          0.8837635812431716,
          0.8946324709152895,
          0.8749615685205423,
          0.8609085530793594,
          0.8923783642835412,
          0.8400127777995611,
          0.8559000189173868,
          0.8610576837707733,
          0.8816710844115082,
          0.8879365385767628,
          0.8479416812151344,
          0.8660337901743131,
          0.8658823528937307,
          0.8797883047885774,
          0.8564037275268988,
          0.893291145304563,
          0.8699357659602196,
          0.8843390913864568,
          0.865274474085645,
          0.8742042946540715,
          0.894052300078144,
          0.866061568775749,
          0.8680381692617449,
          0.8763184688319102,
          0.8452840841558233,
          0.8642551674216407,
          0.9000543325509806,
          0.834566958924211,
          0.8495751864287734,
          0.857172606444935,
          0.885955392802664,
          0.883679291694515,
          0.8639565363512176,
          0.8895918588345837,
          0.8792651567865146,
          0.8588833064324073,
          0.8667847771738724,
          0.8835163885238911,
          0.8908259460290608,
          0.8778987907593877,
          0.8768674445521122,
          0.8721827309596497,
          0.8659382556285979,
          0.8570277978566414,
          0.8703736585022539,
          0.8832320962247275,
          0.8769112086779935,
          0.8613149146379736,
          0.8582612252297606,
          0.892564500517015,
          0.8644078382101941,
          0.8882612740393964,
          0.8574631475788088,
          0.8816617966667775,
          0.8680218381539563,
          0.8837603702345594,
          0.8662604177753735,
          0.8977959508719734,
          0.8763335639473581,
          0.8834053275408591,
          0.8683890274631374,
          0.8917816788812097,
          0.866012329794057,
          0.8893836466284686,
          0.8654097474120723,
          0.8871932192350038,
          0.8685926139809419,
          0.8912970771976463,
          0.8671114258538987,
          0.8877321653436078,
          0.8894235437271147,
          0.871625457533162,
          0.884415953135862,
          0.8654498883140633,
          0.8580881231454508,
          0.8737164279194867,
          0.8526935909967343,
          0.901509665570102,
          0.8938942046190123,
          0.8868835425853685,
          0.866972158098575,
          0.8845187341218077,
          0.8692471065432266,
          0.8902972146005897,
          0.850853241229639,
          0.8898047115055115,
          0.8679444453972042,
          0.8655358413538649,
          0.8572797634282897,
          0.8822278379691474,
          0.8662009219736643,
          0.8741928447012778,
          0.8674757682402574,
          0.8838565402063694,
          0.8692620309832861,
          0.8780055294175004,
          0.8497140727660184,
          0.8986917345010078,
          0.8704297858168426,
          0.8799261647674379
         ],
         "y0": " ",
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "boxmean": true,
         "boxpoints": "all",
         "hovertemplate": "<b>Version</b>: %{x}<br><b>Hit Relevance</b>: %{y}<br><b>Hit Binary</b>: %{customdata}",
         "jitter": 0.2,
         "legendgroup": "v4",
         "marker": {
          "color": "rgb(231,138,195)",
          "opacity": 0.8,
          "size": 6
         },
         "name": "v4",
         "notched": false,
         "offsetgroup": "v4",
         "orientation": "v",
         "pointpos": -1.5,
         "showlegend": true,
         "type": "box",
         "width": 0.4,
         "x": [
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4"
         ],
         "x0": " ",
         "xaxis": "x",
         "y": [
          0.899425678580573,
          0.8841858110842884,
          0.8946324709152895,
          0.8782529409682958,
          0.8848509948202548,
          0.8765631908790298,
          0.8694720558744535,
          0.8816710844115082,
          0.853556733131251,
          0.851390555013653,
          0.8516295850035306,
          0.8448546946284595,
          0.9149889628496224,
          0.8835936323582444,
          0.8701221601791951,
          0.8421982714748847,
          0.8507106596227634,
          0.8630587612624951,
          0.8564037275268988,
          0.8830868630872897,
          0.8959521157397163,
          0.8523304026380984,
          0.8820680897147363,
          0.873302738139707,
          0.8662067928063856,
          0.8483985653426406,
          0.861618668162659,
          0.8900700283316093,
          0.8681242705488184,
          0.8301815964287346,
          0.8781911893759358,
          0.8799118223635365,
          0.8804708824383403,
          0.8800770177556605,
          0.8658125498372031,
          0.8717858304296473,
          0.8667950988683732,
          0.8509893908541228,
          0.8707194313343154,
          0.8564858475640829,
          0.8631344371435414,
          0.8717643234307194,
          0.8593765446884328,
          0.8339525641580207,
          0.871686351236009,
          0.8809646937695196,
          0.864465999804472,
          0.8608462381511908,
          0.8749077231927151,
          0.871139547948769,
          0.8945689572110711,
          0.8708724473393297,
          0.8861350552861318,
          0.8532426815410784,
          0.8598941095982945,
          0.867567396005291,
          0.8609057670026643,
          0.8286622463562502,
          0.8780297005345394,
          0.8838005691172023,
          0.8722468594757767,
          0.8751577028106131,
          0.8600058430423959,
          0.8805785552896785,
          0.8708701548282857,
          0.8661319936330839,
          0.8672548872932427,
          0.8721837992956972,
          0.8724539762151607,
          0.8333022916990186,
          0.8846299738046205,
          0.8986499335615127,
          0.8605682992736433,
          0.873161380722288,
          0.8862103516176731,
          0.8783930326564098,
          0.8845243343928193,
          0.8592618631134071,
          0.8650531711234029,
          0.8869733166807602,
          0.8836545084123362,
          0.8583163107227766,
          0.8895492481569449,
          0.8868200736265422,
          0.8569884908993959,
          0.8639701393099244,
          0.8703775637869767,
          0.8587823329468198,
          0.8737687199223553,
          0.8460184316230777,
          0.8868657091211494,
          0.8767387618572849,
          0.8885866629771221,
          0.8645786275221989,
          0.8799682999419439,
          0.8894621218575381,
          0.8817614418139013,
          0.8682819885407279,
          0.8849975614108211,
          0.8768515264945107
         ],
         "y0": " ",
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "boxmean": true,
         "boxpoints": "all",
         "hovertemplate": "<b>Version</b>: %{x}<br><b>Hit Relevance</b>: %{y}<br><b>Hit Binary</b>: %{customdata}",
         "jitter": 0.2,
         "legendgroup": "v5",
         "marker": {
          "color": "rgb(166,216,84)",
          "opacity": 0.8,
          "size": 6
         },
         "name": "v5",
         "notched": false,
         "offsetgroup": "v5",
         "orientation": "v",
         "pointpos": -1.5,
         "showlegend": true,
         "type": "box",
         "width": 0.4,
         "x": [
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5"
         ],
         "x0": " ",
         "xaxis": "x",
         "y": [
          0.6547423615411883,
          0.5926958703882844,
          0.594969910319314,
          0.6160156827895168,
          0.5698871349370588,
          0.5617320256678324,
          0.6111754694470071,
          0.6351630296316265,
          0.5293620036593946,
          0.5165885848632344,
          0.6250891883376415,
          0.49050136945260353,
          0.6203614498942224,
          0.4531948769457778,
          0.6774992403523487,
          0.5846492597137487,
          0.5163347446350194,
          0.5919516919393911,
          0.6402926311497983,
          0.5635205370102799,
          0.5354044743483545,
          0.6143051704606554,
          0.5369242242159882,
          0.5367452337341134,
          0.578056803814586,
          0.5433467016775535,
          0.6301831975695363,
          0.5641906054153115,
          0.5907335452846273,
          0.6248047560151081,
          0.5660981755903569,
          0.5447378589290522,
          0.563288931130918,
          0.5748471682351924,
          0.5826424452581832,
          0.5427189123366614,
          0.5413360870891892,
          0.595766223122522,
          0.5957339778332926,
          0.5776283443287193,
          0.6032933229688233,
          0.6326433183463078,
          0.5503216950175941,
          0.6016617148871323,
          0.5544780575962043,
          0.6636248888945908,
          0.5880464619014087,
          0.6388290857277393,
          0.531036979609324,
          0.584734072567297,
          0.5338601023240597,
          0.5773632366452974,
          0.563860275460953,
          0.6406218658552324,
          0.5509740336322557,
          0.5064902771522247,
          0.5668280872435397,
          0.5332541056260819,
          0.595003980380172,
          0.6121739113380347,
          0.6440538036285128,
          0.564323388040357,
          0.5942667061121738,
          0.6414614235034671,
          0.5937492885840039,
          0.6432231385667997,
          0.611585823211942,
          0.6050815900818665,
          0.5355819303024529,
          0.538020868997667,
          0.5844923599809049,
          0.6145211319764742,
          0.5406255094606985,
          0.5920360836459677,
          0.5624074477991295,
          0.6337873312853946,
          0.5931903312840862,
          0.5922815646098171,
          0.6398459186989373,
          0.5964084460765852,
          0.5981937523759794,
          0.6656281506557784,
          0.596401168464537,
          0.6256239928849933,
          0.5764258196365921,
          0.5920360836459677,
          0.5571014837924884,
          0.5656138004916621,
          0.5641147867309964,
          0.6038237092867681,
          0.5832365100508811,
          0.5982273273453204,
          0.5981937523759794,
          0.6688786422362436,
          0.5907682871801937,
          0.5865539788915848,
          0.6398459186989373,
          0.6189789563509723,
          0.5556884954117249,
          0.6240766790855555
         ],
         "y0": " ",
         "yaxis": "y"
        }
       ],
       "layout": {
        "annotations": [
         {
          "font": {
           "color": "darkred",
           "size": 12
          },
          "showarrow": false,
          "text": "Threshold: 0.8",
          "x": 5,
          "xshift": 50,
          "y": 0.8,
          "yshift": 10
         },
         {
          "font": {
           "color": "darkblue",
           "size": 12
          },
          "showarrow": false,
          "text": "Threshold: 0.6",
          "x": 5,
          "xshift": 50,
          "y": 0.6,
          "yshift": -10
         }
        ],
        "bargap": 0.15,
        "boxmode": "group",
        "font": {
         "family": "Arial",
         "size": 14
        },
        "height": 650,
        "hovermode": "closest",
        "legend": {
         "title": {
          "text": "Version"
         },
         "tracegroupgap": 0
        },
        "margin": {
         "b": 60,
         "l": 60,
         "r": 40,
         "t": 70
        },
        "plot_bgcolor": "#f7f7f7",
        "shapes": [
         {
          "line": {
           "color": "darkred",
           "dash": "dash",
           "width": 2
          },
          "opacity": 0.7,
          "type": "line",
          "x0": -0.5,
          "x1": 4,
          "y0": 0.8,
          "y1": 0.8
         },
         {
          "line": {
           "color": "darkblue",
           "dash": "dash",
           "width": 2
          },
          "opacity": 0.7,
          "type": "line",
          "x0": 3,
          "x1": 5.5,
          "y0": 0.6,
          "y1": 0.6
         }
        ],
        "showlegend": true,
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "font": {
          "color": "darkblue",
          "family": "Times New Roman",
          "size": 22
         },
         "text": "Hit Relevance Distribution by Version (Tester Persona)"
        },
        "width": 1000,
        "xaxis": {
         "anchor": "y",
         "categoryarray": [
          "baseline",
          "v2",
          "v3",
          "v4",
          "v5"
         ],
         "categoryorder": "array",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Version"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "gridcolor": "lightgray",
         "showgrid": true,
         "title": {
          "text": "Hit Relevance Score"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# List of dataframes and their version labels for comparison\n",
    "dataframes_static = {\n",
    "    \"baseline\": Test_Results_2024052802_Baseline,\n",
    "    \"v2\": test_output_v2_tester_2024_09_03_12_13_59,\n",
    "    \"v3\": test_output_v3_tester_2024_09_17_03_21_25,\n",
    "    \"v4\": test_output_v4_tester_2024_09_29_00_32_01,\n",
    "    \"v5\": test_output_v5_tester_2024_10_07_17_35_56\n",
    "}\n",
    "\n",
    "# Combine data for easier plotting\n",
    "all_data_static = []\n",
    "for version, df in dataframes_static.items():\n",
    "    df['version'] = version  # Add a column for version\n",
    "    all_data_static.append(df[['Column1.hit', 'Column1.hitRelevance', 'version']])\n",
    "\n",
    "# Concatenate all data into a single DataFrame\n",
    "combined_df_static = pd.concat(all_data_static)\n",
    "\n",
    "# Convert hit column to binary values (1 if hit, 0 if not) based on a threshold of 0.75\n",
    "combined_df_static['hit_binary'] = combined_df_static['Column1.hitRelevance'].apply(lambda x: 1 if x >= 0.75 else 0)\n",
    "\n",
    "# Create a box plot for Static Questions including the baseline\n",
    "fig_static = px.box(combined_df_static, \n",
    "                    x='version', \n",
    "                    y='Column1.hitRelevance', \n",
    "                    points='all',  # Show all data points\n",
    "                    title='Hit Relevance Distribution by Version (Tester Persona)',\n",
    "                    labels={'Column1.hitRelevance': 'Hit Relevance Score', 'version': 'Version'},\n",
    "                    color='version',  \n",
    "                    color_discrete_sequence=px.colors.qualitative.Set2)  # Use distinct color palette\n",
    "\n",
    "# Customize box plot aesthetics for bigger boxes and scatter points\n",
    "fig_static.update_traces(\n",
    "    boxmean=True,  # Show mean in each box\n",
    "    jitter=0.2,  # Reduce jitter for more space\n",
    "    pointpos=-1.5,  # Adjust point position closer to boxes\n",
    "    marker=dict(size=6, opacity=0.8),  # Increase marker size\n",
    "    width=0.4  # Increase box width\n",
    ")\n",
    "\n",
    "# Add horizontal lines for thresholds\n",
    "fig_static.add_shape(\n",
    "    type=\"line\", line_color=\"darkred\", line_width=2, opacity=0.7, \n",
    "    x0=-0.5, x1=4, y0=threshold_baseline_to_v4, y1=threshold_baseline_to_v4, \n",
    "    line_dash=\"dash\"\n",
    ")\n",
    "fig_static.add_shape(\n",
    "    type=\"line\", line_color=\"darkblue\", line_width=2, opacity=0.7, \n",
    "    x0=3, x1=5.5, y0=threshold_v5, y1=threshold_v5,  # Line starts after the v4 column\n",
    "    line_dash=\"dash\"\n",
    ")\n",
    "\n",
    "# Move the threshold text annotations to the right\n",
    "fig_static.add_annotation(\n",
    "    x=5, y=threshold_baseline_to_v4,\n",
    "    text=\"Threshold: 0.8\", showarrow=False, xshift=50, yshift=10,\n",
    "    font=dict(size=12, color=\"darkred\")\n",
    ")\n",
    "fig_static.add_annotation(\n",
    "    x=5, y=threshold_v5,\n",
    "    text=\"Threshold: 0.6\", showarrow=False, xshift=50, yshift=-10,\n",
    "    font=dict(size=12, color=\"darkblue\")\n",
    ")\n",
    "\n",
    "# Adjust layout for better spacing and visual clarity\n",
    "fig_static.update_layout(\n",
    "    xaxis_title='Version',\n",
    "    yaxis_title='Hit Relevance Score',\n",
    "    legend_title_text='Version',\n",
    "    font=dict(size=14, family='Arial'),  # Different font for readability\n",
    "    plot_bgcolor='#f7f7f7',  # Soft background for readability\n",
    "    title_font=dict(size=22, family='Times New Roman', color='darkblue'),  # Stylish title font\n",
    "    width=1000,  # Adjust width\n",
    "    height=650,  # Adjust height\n",
    "    margin=dict(t=70, l=60, r=40, b=60),\n",
    "    boxmode='group', \n",
    "    showlegend=True,  \n",
    "    yaxis=dict(showgrid=True, gridcolor='lightgray'),  # Add gridlines for clarity\n",
    "    bargap=0.15,  # Adjust gap between boxes\n",
    "    hovermode=\"closest\"  # Hovering shows closest point information\n",
    ")\n",
    "\n",
    "# Update hover template for better clarity\n",
    "fig_static.update_traces(\n",
    "    hovertemplate=\"<b>Version</b>: %{x}<br><b>Hit Relevance</b>: %{y}<br><b>Hit Binary</b>: %{customdata}\"\n",
    ")\n",
    "\n",
    "# Display the figure\n",
    "fig_static.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Box Plot: Developer Persona all versions "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "alignmentgroup": "True",
         "boxmean": true,
         "boxpoints": "all",
         "hovertemplate": "<b>Version</b>: %{x}<br><b>Hit Relevance</b>: %{y}<br><b>Hit Binary</b>: %{customdata}",
         "jitter": 0.2,
         "legendgroup": "baseline",
         "marker": {
          "color": "rgb(102,194,165)",
          "opacity": 0.8,
          "size": 6
         },
         "name": "baseline",
         "notched": false,
         "offsetgroup": "baseline",
         "orientation": "v",
         "pointpos": -1.5,
         "showlegend": true,
         "type": "box",
         "width": 0.4,
         "x": [
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline"
         ],
         "x0": " ",
         "xaxis": "x",
         "y": [
          0.8784441145756917,
          0.8774876933819626,
          0.8746684526475066,
          0.8746424643210794,
          0.8672439394801955,
          0.8603153999309818,
          0.855133577099862,
          0.854684365530313,
          0.8545490013947185,
          0.8536750205786069,
          0.8501388581189828,
          0.8499660383782022,
          0.8470403662206168,
          0.8463422141715554,
          0.8454658353831477,
          0.8453736197417216,
          0.8451186188958659,
          0.8450729794568982,
          0.843996474043092,
          0.8417384332596856,
          0.8399934314279974,
          0.8382348105204843,
          0.8373992935457025,
          0.8361225308669625,
          0.8351752441648143,
          0.8343694018089332,
          0.8321899352349762,
          0.832155049588577,
          0.830248828676792,
          0.8295025892387569,
          0.8289186592390524,
          0.8288114265837756,
          0.8284027920639331,
          0.8273072353527722,
          0.8271236092473713,
          0.826975894551871,
          0.8265560599870281,
          0.825320371453267,
          0.8248481659124333,
          0.824346976359626,
          0.8229000166277352,
          0.8206292698708735,
          0.8198691672518295,
          0.8195897019982514,
          0.8194865396947004,
          0.8188920393542686,
          0.8167959019266425,
          0.8164857256712671,
          0.8159706347347968,
          0.8159293705435575,
          0.8157958553839585,
          0.8154986121078773,
          0.814084258399054,
          0.8117359799225621,
          0.8115161548623933,
          0.8111692492276386,
          0.8108709355131023,
          0.810498399917788,
          0.8101889348326631,
          0.8099605332098587,
          0.8092608604270364,
          0.8079074337556884,
          0.8078390308025816,
          0.8078210638903874,
          0.8077010144788173,
          0.8076098567585128,
          0.807204013767107,
          0.8067548407994568,
          0.8061181657940557,
          0.8060373413831154,
          0.8059647466331435,
          0.8049369563243841,
          0.8036939307668896,
          0.8025805035692839,
          0.8022600750793488,
          0.8012921522278786,
          0.8005338717485814,
          0.7993632539029342,
          0.7977609335991143,
          0.7977478616824621,
          0.7970567781996246,
          0.7960420128627206,
          0.7959482970504347,
          0.7948834305972643,
          0.794524347185814,
          0.7939856708447534,
          0.7937062140910492,
          0.7932719784138285,
          0.7918442800322498,
          0.7901422444482195,
          0.7889456502312663,
          0.7883422641059364,
          0.7872176322886016,
          0.7869777101688635,
          0.7856166825021259,
          0.7854434461911843,
          0.7812875857150219,
          0.7810471085440618,
          0.7763484036629806
         ],
         "y0": " ",
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "boxmean": true,
         "boxpoints": "all",
         "hovertemplate": "<b>Version</b>: %{x}<br><b>Hit Relevance</b>: %{y}<br><b>Hit Binary</b>: %{customdata}",
         "jitter": 0.2,
         "legendgroup": "v2",
         "marker": {
          "color": "rgb(252,141,98)",
          "opacity": 0.8,
          "size": 6
         },
         "name": "v2",
         "notched": false,
         "offsetgroup": "v2",
         "orientation": "v",
         "pointpos": -1.5,
         "showlegend": true,
         "type": "box",
         "width": 0.4,
         "x": [
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2"
         ],
         "x0": " ",
         "xaxis": "x",
         "y": [
          0.884762210789768,
          0.9255372175185402,
          0.8830329232036519,
          0.8868939205244404,
          0.8799656617494899,
          0.8838257490641401,
          0.8791118466632416,
          0.888633030629863,
          0.8689339577679515,
          0.8409274873356855,
          0.8767504925375763,
          0.8392944831300012,
          0.840288432773151,
          0.8354236330105812,
          0.7869028287789468,
          0.7869028287789468,
          0.8276331333323734,
          0.8511220281168624,
          0.8655347456999489,
          0.8559985505411742,
          0.8304667821098717,
          0.7869028287789468,
          0.7869028287789468,
          0.8460681938457998,
          0.8822233487308441,
          0.85460654032204,
          0.8707019460116849,
          0.8083703954979202,
          0.8002329691843793,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.8501232090339811,
          0.7869028287789468,
          0.8700154397996658,
          0.8311222570611649,
          0.8521720295761063,
          0.7869028287789468,
          0.8735925041588358,
          0.8083703954979202,
          0.8296160148885376,
          0.8178725886356714,
          0.8524499305394312,
          0.8203926740936641,
          0.8320366239387859,
          0.7869028287789468,
          0.8779126193979027,
          0.7869028287789468,
          0.8021703051073606,
          0.7869028287789468,
          0.8797013546473093,
          0.8083703954979202,
          0.8435304524376659,
          0.8178725886356714,
          0.8706138615015921,
          0.8229108009609454,
          0.831317130837995,
          0.7869028287789468,
          0.8700154397996658,
          0.7869028287789468,
          0.8316389768617164,
          0.7869028287789468,
          0.8735925041588358,
          0.8083703954979202,
          0.8547248148816857,
          0.8178725886356714,
          0.8524499305394312,
          0.8195337778231886,
          0.8524285623507801,
          0.7869028287789468,
          0.8779126193979027,
          0.7869028287789468,
          0.8398433105553023,
          0.7869028287789468,
          0.8794504271150948,
          0.8083703954979202,
          0.8278998306365615,
          0.8178725886356714,
          0.8706138615015921,
          0.8195337778231886,
          0.8244281571301671,
          0.7869028287789468,
          0.8700154397996658,
          0.7869028287789468,
          0.8201765125077526,
          0.7869028287789468,
          0.8736175080780997,
          0.8083703954979202,
          0.8319209908749522,
          0.8178725886356714,
          0.8524499305394312,
          0.8203926740936641,
          0.8501232090339811,
          0.7869028287789468,
          0.8779126193979027,
          0.7869028287789468,
          0.8398433105553023,
          0.7869028287789468,
          0.8794504271150948,
          0.8083703954979202
         ],
         "y0": " ",
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "boxmean": true,
         "boxpoints": "all",
         "hovertemplate": "<b>Version</b>: %{x}<br><b>Hit Relevance</b>: %{y}<br><b>Hit Binary</b>: %{customdata}",
         "jitter": 0.2,
         "legendgroup": "v3",
         "marker": {
          "color": "rgb(141,160,203)",
          "opacity": 0.8,
          "size": 6
         },
         "name": "v3",
         "notched": false,
         "offsetgroup": "v3",
         "orientation": "v",
         "pointpos": -1.5,
         "showlegend": true,
         "type": "box",
         "width": 0.4,
         "x": [
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3"
         ],
         "x0": " ",
         "xaxis": "x",
         "y": [
          0.8083703954979202,
          0.9152736324291726,
          0.9220781627466824,
          0.8919654041985545,
          0.8646025685043087,
          0.8684299400878649,
          0.8410708974284912,
          0.8932484912086401,
          0.8713775953387568,
          0.8753026131666618,
          0.883293010464145,
          0.907260622876584,
          0.9042310985876056,
          0.8593273449943226,
          0.917807685559686,
          0.9058252128147471,
          0.8999378878316521,
          0.8596399084204615,
          0.8862892938537512,
          0.8778862001463288,
          0.8899879172874793,
          0.8341127343120772,
          0.8806008446770845,
          0.8948522290189048,
          0.9022007209199404,
          0.894825475188518,
          0.896891218323444,
          0.8995392649638773,
          0.8845488390221227,
          0.821629911253539,
          0.8620759495068129,
          0.9091842780842432,
          0.8391656608532361,
          0.8530286731580092,
          0.8857858096153653,
          0.8435408216872798,
          0.8476780675742053,
          0.8291727401476111,
          0.8897603787665008,
          0.889588499867617,
          0.85815213170492,
          0.8891488367082941,
          0.8950908060585238,
          0.8886161825454185,
          0.8867191327635875,
          0.8886146003374512,
          0.889587321486042,
          0.8864790937132252,
          0.8848824409054965,
          0.8776778117487706,
          0.8744849010151187,
          0.8687862641361138,
          0.8722236289679591,
          0.9118992132404868,
          0.8800241603515114,
          0.8877243474188323,
          0.8774532124892932,
          0.9021872763781562,
          0.8805877117774507,
          0.8670926343124354,
          0.9112557469473244,
          0.8918657088390336,
          0.8614235671924377,
          0.8941869231689,
          0.871648437712746,
          0.8905907806316963,
          0.8896449235867104,
          0.8529272048281984,
          0.9061196473101154,
          0.8660708616953184,
          0.8743646402436148,
          0.8852254756508622,
          0.8696521390207572,
          0.8631943606808961,
          0.8887832392086623,
          0.8649853324673193,
          0.8587217142437389,
          0.8765838902641002,
          0.8787546936976759,
          0.8699711351031423,
          0.8755434650927602,
          0.862841364636884,
          0.8793772842751083,
          0.8809250827899622,
          0.8661294594104632,
          0.826462147777373,
          0.8647893941155722,
          0.8810388167943792,
          0.8705134300133269,
          0.8423343659392963,
          0.8923963688337074,
          0.8540758230430909,
          0.873027655722822,
          0.8391914855447494,
          0.872466422157343,
          0.890655241706256,
          0.868197619711733,
          0.8680196670614673,
          0.884073630161455,
          0.8663658768092102,
          0.8919416564277105
         ],
         "y0": " ",
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "boxmean": true,
         "boxpoints": "all",
         "hovertemplate": "<b>Version</b>: %{x}<br><b>Hit Relevance</b>: %{y}<br><b>Hit Binary</b>: %{customdata}",
         "jitter": 0.2,
         "legendgroup": "v4",
         "marker": {
          "color": "rgb(231,138,195)",
          "opacity": 0.8,
          "size": 6
         },
         "name": "v4",
         "notched": false,
         "offsetgroup": "v4",
         "orientation": "v",
         "pointpos": -1.5,
         "showlegend": true,
         "type": "box",
         "width": 0.4,
         "x": [
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4"
         ],
         "x0": " ",
         "xaxis": "x",
         "y": [
          0.9125490349735256,
          0.9170406985803092,
          0.8875982212877107,
          0.8613522262540781,
          0.872149323188163,
          0.8303637140800361,
          0.918313969608644,
          0.8700043594647302,
          0.92535528561219,
          0.8583819710497751,
          0.8999192428519139,
          0.858819883369749,
          0.8214523560132084,
          0.8106002055982614,
          0.808384891758673,
          0.8986578987944036,
          0.8634084470568473,
          0.8525247025648912,
          0.907260622876584,
          0.8949816626965765,
          0.87929871079386,
          0.8525710750967607,
          0.868392139451109,
          0.8727965657017537,
          0.8576930478307992,
          0.8626111019919999,
          0.8988737345862591,
          0.8680347375001467,
          0.8689158517535562,
          0.8780611384291408,
          0.8677586228467297,
          0.8851966152308883,
          0.906717627643286,
          0.8940908045725743,
          0.9148486679110098,
          0.8749926005977292,
          0.878880552083495,
          0.8781975541804852,
          0.8835755882376777,
          0.8957425782510202,
          0.885762491678952,
          0.8843664333476459,
          0.8945927881042208,
          0.8634093487686979,
          0.8548417013000003,
          0.8483066342935078,
          0.892257576572012,
          0.8651450565386686,
          0.8611956003588346,
          0.8875260412833762,
          0.8954760295267873,
          0.8925746774509729,
          0.8502996876444346,
          0.818756300488843,
          0.8183343139266107,
          0.8799350017855181,
          0.8153990064271667,
          0.827192133273515,
          0.8626868889682385,
          0.8667768751326128,
          0.8556137088506408,
          0.8746574453882523,
          0.8774923461575244,
          0.8903911454851037,
          0.860690197223264,
          0.8769667910547794,
          0.8703362422947982,
          0.8712658336405842,
          0.865108722348039,
          0.8595687062388213,
          0.878825694116521,
          0.8496436517836379,
          0.8883206195215161,
          0.8832981730113286,
          0.8459305817354134,
          0.8970883890016753,
          0.8608558725547802,
          0.8425493455753086,
          0.8581478847252264,
          0.8510613411169673,
          0.8602528692433901,
          0.8508760261320377,
          0.865903401046781,
          0.8636549268455518,
          0.8817146050014355,
          0.8737336955242804,
          0.8787765200107382,
          0.8751840893259993,
          0.8738807710378649,
          0.8856146243431875,
          0.8671077239455628,
          0.8798329313609885,
          0.8602289380071341,
          0.8646537586597216,
          0.8631306201667842,
          0.8734466852438502,
          0.8727960133351874,
          0.8765676198905805,
          0.8948008296396015,
          0.8612301603859128
         ],
         "y0": " ",
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "boxmean": true,
         "boxpoints": "all",
         "hovertemplate": "<b>Version</b>: %{x}<br><b>Hit Relevance</b>: %{y}<br><b>Hit Binary</b>: %{customdata}",
         "jitter": 0.2,
         "legendgroup": "v5",
         "marker": {
          "color": "rgb(166,216,84)",
          "opacity": 0.8,
          "size": 6
         },
         "name": "v5",
         "notched": false,
         "offsetgroup": "v5",
         "orientation": "v",
         "pointpos": -1.5,
         "showlegend": true,
         "type": "box",
         "width": 0.4,
         "x": [
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5"
         ],
         "x0": " ",
         "xaxis": "x",
         "y": [
          0.5626848281895075,
          0.5379585911759426,
          0.551143131832724,
          0.5238279786707994,
          0.5627398559313014,
          0.5735894737479884,
          0.5702665686199596,
          0.6000674100955248,
          0.556392030995828,
          0.5668812426025432,
          0.46311535403615905,
          0.5430099234621252,
          0.4720799507036731,
          0.6343678716076319,
          0.4932027539035682,
          0.5152384064071143,
          0.5340488437987333,
          0.5825052192800249,
          0.62250269184828,
          0.6241840052825935,
          0.4798247780495428,
          0.4692487452689322,
          0.5255238992445165,
          0.5337444040157748,
          0.5521718026834296,
          0.6199276586452639,
          0.6129797826495775,
          0.4945173326579632,
          0.6057761299497958,
          0.5819327288004313,
          0.544422456053703,
          0.5669384808932681,
          0.5561001472829729,
          0.595362527175347,
          0.5753078914665821,
          0.6265954644896071,
          0.47986623690501984,
          0.6022262550799531,
          0.5767135999869816,
          0.5076654469780616,
          0.6570673410039699,
          0.4967044988060334,
          0.5701683607683296,
          0.49975844268256214,
          0.5712212337473397,
          0.4913629443906314,
          0.5616694263359545,
          0.5227730512714572,
          0.5357889012458162,
          0.6941451189180716,
          0.5925004063776605,
          0.5584558280351564,
          0.6121420202806211,
          0.6285864479880248,
          0.5868831952445831,
          0.5469053927620426,
          0.5234418658356943,
          0.622444443987347,
          0.589871335309441,
          0.4895847796162715,
          0.5472130984007476,
          0.5806793864764589,
          0.5833397669588367,
          0.5036418721159758,
          0.5377070778149224,
          0.6299056343177043,
          0.601486992775078,
          0.5380527712100321,
          0.5309427397281189,
          0.5758925880647775,
          0.5441272559185285,
          0.5237898721061909,
          0.5710894332390755,
          0.6317241326451314,
          0.5672205447249299,
          0.566391972031935,
          0.5241721949874862,
          0.6160908968282496,
          0.46178273846964,
          0.5332050561052482,
          0.5578101845477924,
          0.6077017477471107,
          0.5826147620277955,
          0.5668134088658006,
          0.5509320221617643,
          0.5769870470510097,
          0.5753389842943744,
          0.5228403047921816,
          0.6076729979228671,
          0.685084738445448,
          0.5213200631938628,
          0.5604809108882302,
          0.5234418658356943,
          0.6601224635294691,
          0.5616694263359545,
          0.547334315987066,
          0.5290356177360139,
          0.6352889417787004,
          0.565444617539338,
          0.5171719849408615
         ],
         "y0": " ",
         "yaxis": "y"
        }
       ],
       "layout": {
        "annotations": [
         {
          "font": {
           "color": "darkred",
           "size": 12
          },
          "showarrow": false,
          "text": "Threshold: 0.8",
          "x": 5,
          "xshift": 50,
          "y": 0.8,
          "yshift": 10
         },
         {
          "font": {
           "color": "darkblue",
           "size": 12
          },
          "showarrow": false,
          "text": "Threshold: 0.6",
          "x": 5,
          "xshift": 50,
          "y": 0.6,
          "yshift": -10
         }
        ],
        "bargap": 0.15,
        "boxmode": "group",
        "font": {
         "family": "Arial",
         "size": 14
        },
        "height": 650,
        "hovermode": "closest",
        "legend": {
         "title": {
          "text": "Version"
         },
         "tracegroupgap": 0
        },
        "margin": {
         "b": 60,
         "l": 60,
         "r": 40,
         "t": 70
        },
        "plot_bgcolor": "#f7f7f7",
        "shapes": [
         {
          "line": {
           "color": "darkred",
           "dash": "dash",
           "width": 2
          },
          "opacity": 0.7,
          "type": "line",
          "x0": -0.5,
          "x1": 4,
          "y0": 0.8,
          "y1": 0.8
         },
         {
          "line": {
           "color": "darkblue",
           "dash": "dash",
           "width": 2
          },
          "opacity": 0.7,
          "type": "line",
          "x0": 3,
          "x1": 5.5,
          "y0": 0.6,
          "y1": 0.6
         }
        ],
        "showlegend": true,
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "font": {
          "color": "darkblue",
          "family": "Times New Roman",
          "size": 22
         },
         "text": "Hit Relevance Distribution by Version (Developer Persona)"
        },
        "width": 1000,
        "xaxis": {
         "anchor": "y",
         "categoryarray": [
          "baseline",
          "v2",
          "v3",
          "v4",
          "v5"
         ],
         "categoryorder": "array",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Version"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "gridcolor": "lightgray",
         "showgrid": true,
         "title": {
          "text": "Hit Relevance Score"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# Dataframes for Developer Persona \n",
    "dataframes_developer = {\n",
    "    \"baseline\": Test_Results_2024052802_Baseline,\n",
    "    \"v2\": test_output_v2_developer_2024_09_03_12_10_22,\n",
    "    \"v3\": test_output_v3_developer_2024_0,\n",
    "    \"v4\": test_output_v4_developer_2024_09_28_21_45_10,\n",
    "    \"v5\": test_output_v5_businessanalyst_2024_10_07_17_55_42\n",
    "}\n",
    "\n",
    "# Combine data for easier plotting\n",
    "all_data_developer = []\n",
    "for version, df in dataframes_developer.items():\n",
    "    df['version'] = version  # Add a column for version\n",
    "    all_data_developer.append(df[['Column1.hit', 'Column1.hitRelevance', 'version']])\n",
    "\n",
    "# Concatenate all data into a single DataFrame\n",
    "combined_df_developer = pd.concat(all_data_developer)\n",
    "\n",
    "# Convert hit column to binary values (1 if hit, 0 if not) based on a threshold of 0.75\n",
    "combined_df_developer['hit_binary'] = combined_df_developer['Column1.hitRelevance'].apply(lambda x: 1 if x >= 0.75 else 0)\n",
    "\n",
    "# Create a box plot for Developer Persona\n",
    "fig_developer = px.box(combined_df_developer, \n",
    "                       x='version', \n",
    "                       y='Column1.hitRelevance', \n",
    "                       points='all',\n",
    "                       title='Hit Relevance Distribution by Version (Developer Persona)',\n",
    "                       labels={'Column1.hitRelevance': 'Hit Relevance Score', 'version': 'Version'},\n",
    "                       color='version',  \n",
    "                       color_discrete_sequence=px.colors.qualitative.Set2)\n",
    "\n",
    "# Customize box plot aesthetics\n",
    "fig_developer.update_traces(\n",
    "    boxmean=True,\n",
    "    jitter=0.2,\n",
    "    pointpos=-1.5,\n",
    "    marker=dict(size=6, opacity=0.8),\n",
    "    width=0.4\n",
    ")\n",
    "\n",
    "# Add horizontal lines for thresholds\n",
    "fig_developer.add_shape(\n",
    "    type=\"line\", line_color=\"darkred\", line_width=2, opacity=0.7, \n",
    "    x0=-0.5, x1=4, y0=threshold_baseline_to_v4, y1=threshold_baseline_to_v4, \n",
    "    line_dash=\"dash\"\n",
    ")\n",
    "fig_developer.add_shape(\n",
    "    type=\"line\", line_color=\"darkblue\", line_width=2, opacity=0.7, \n",
    "    x0=3, x1=5.5, y0=threshold_v5, y1=threshold_v5,\n",
    "    line_dash=\"dash\"\n",
    ")\n",
    "\n",
    "# Move the threshold text annotations to the right\n",
    "fig_developer.add_annotation(\n",
    "    x=5, y=threshold_baseline_to_v4,\n",
    "    text=\"Threshold: 0.8\", showarrow=False, xshift=50, yshift=10,\n",
    "    font=dict(size=12, color=\"darkred\")\n",
    ")\n",
    "fig_developer.add_annotation(\n",
    "    x=5, y=threshold_v5,\n",
    "    text=\"Threshold: 0.6\", showarrow=False, xshift=50, yshift=-10,\n",
    "    font=dict(size=12, color=\"darkblue\")\n",
    ")\n",
    "\n",
    "# Adjust layout\n",
    "fig_developer.update_layout(\n",
    "    xaxis_title='Version',\n",
    "    yaxis_title='Hit Relevance Score',\n",
    "    legend_title_text='Version',\n",
    "    font=dict(size=14, family='Arial'),\n",
    "    plot_bgcolor='#f7f7f7',\n",
    "    title_font=dict(size=22, family='Times New Roman', color='darkblue'),\n",
    "    width=1000,\n",
    "    height=650,\n",
    "    margin=dict(t=70, l=60, r=40, b=60),\n",
    "    boxmode='group',\n",
    "    showlegend=True,  \n",
    "    yaxis=dict(showgrid=True, gridcolor='lightgray'),\n",
    "    bargap=0.15,\n",
    "    hovermode=\"closest\"\n",
    ")\n",
    "\n",
    "# Update hover template\n",
    "fig_developer.update_traces(\n",
    "    hovertemplate=\"<b>Version</b>: %{x}<br><b>Hit Relevance</b>: %{y}<br><b>Hit Binary</b>: %{customdata}\"\n",
    ")\n",
    "\n",
    "# Display the figure\n",
    "fig_developer.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Box Plot: Buisness Analyst Persona all versions "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "alignmentgroup": "True",
         "boxmean": true,
         "boxpoints": "all",
         "hovertemplate": "<b>Version</b>: %{x}<br><b>Hit Relevance</b>: %{y}<br><b>Hit Binary</b>: %{customdata}",
         "jitter": 0.2,
         "legendgroup": "baseline",
         "marker": {
          "color": "rgb(102,194,165)",
          "opacity": 0.8,
          "size": 6
         },
         "name": "baseline",
         "notched": false,
         "offsetgroup": "baseline",
         "orientation": "v",
         "pointpos": -1.5,
         "showlegend": true,
         "type": "box",
         "width": 0.4,
         "x": [
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline",
          "baseline"
         ],
         "x0": " ",
         "xaxis": "x",
         "y": [
          0.8784441145756917,
          0.8774876933819626,
          0.8746684526475066,
          0.8746424643210794,
          0.8672439394801955,
          0.8603153999309818,
          0.855133577099862,
          0.854684365530313,
          0.8545490013947185,
          0.8536750205786069,
          0.8501388581189828,
          0.8499660383782022,
          0.8470403662206168,
          0.8463422141715554,
          0.8454658353831477,
          0.8453736197417216,
          0.8451186188958659,
          0.8450729794568982,
          0.843996474043092,
          0.8417384332596856,
          0.8399934314279974,
          0.8382348105204843,
          0.8373992935457025,
          0.8361225308669625,
          0.8351752441648143,
          0.8343694018089332,
          0.8321899352349762,
          0.832155049588577,
          0.830248828676792,
          0.8295025892387569,
          0.8289186592390524,
          0.8288114265837756,
          0.8284027920639331,
          0.8273072353527722,
          0.8271236092473713,
          0.826975894551871,
          0.8265560599870281,
          0.825320371453267,
          0.8248481659124333,
          0.824346976359626,
          0.8229000166277352,
          0.8206292698708735,
          0.8198691672518295,
          0.8195897019982514,
          0.8194865396947004,
          0.8188920393542686,
          0.8167959019266425,
          0.8164857256712671,
          0.8159706347347968,
          0.8159293705435575,
          0.8157958553839585,
          0.8154986121078773,
          0.814084258399054,
          0.8117359799225621,
          0.8115161548623933,
          0.8111692492276386,
          0.8108709355131023,
          0.810498399917788,
          0.8101889348326631,
          0.8099605332098587,
          0.8092608604270364,
          0.8079074337556884,
          0.8078390308025816,
          0.8078210638903874,
          0.8077010144788173,
          0.8076098567585128,
          0.807204013767107,
          0.8067548407994568,
          0.8061181657940557,
          0.8060373413831154,
          0.8059647466331435,
          0.8049369563243841,
          0.8036939307668896,
          0.8025805035692839,
          0.8022600750793488,
          0.8012921522278786,
          0.8005338717485814,
          0.7993632539029342,
          0.7977609335991143,
          0.7977478616824621,
          0.7970567781996246,
          0.7960420128627206,
          0.7959482970504347,
          0.7948834305972643,
          0.794524347185814,
          0.7939856708447534,
          0.7937062140910492,
          0.7932719784138285,
          0.7918442800322498,
          0.7901422444482195,
          0.7889456502312663,
          0.7883422641059364,
          0.7872176322886016,
          0.7869777101688635,
          0.7856166825021259,
          0.7854434461911843,
          0.7812875857150219,
          0.7810471085440618,
          0.7763484036629806
         ],
         "y0": " ",
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "boxmean": true,
         "boxpoints": "all",
         "hovertemplate": "<b>Version</b>: %{x}<br><b>Hit Relevance</b>: %{y}<br><b>Hit Binary</b>: %{customdata}",
         "jitter": 0.2,
         "legendgroup": "v2",
         "marker": {
          "color": "rgb(252,141,98)",
          "opacity": 0.8,
          "size": 6
         },
         "name": "v2",
         "notched": false,
         "offsetgroup": "v2",
         "orientation": "v",
         "pointpos": -1.5,
         "showlegend": true,
         "type": "box",
         "width": 0.4,
         "x": [
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2",
          "v2"
         ],
         "x0": " ",
         "xaxis": "x",
         "y": [
          0.925781253398802,
          0.9002609443056855,
          0.8923076210489114,
          0.9009824042225856,
          0.8975995429338126,
          0.8964398186582996,
          0.8935559104483027,
          0.8918887561642863,
          0.7869028287789468,
          0.8982909147255994,
          0.8934098851833159,
          0.892624653364244,
          0.8885427869977558,
          0.9040159271277428,
          0.9000265481166451,
          0.8694697855639434,
          0.8863699448920073,
          0.7869028287789468,
          0.8710628351285689,
          0.8916591125458198,
          0.7869028287789468,
          0.7869028287789468,
          0.8707825197900287,
          0.9093757715592058,
          0.8906448337668644,
          0.7869028287789468,
          0.9039100474032608,
          0.8862728899488659,
          0.7869028287789468,
          0.8561247770309184,
          0.8854935210987919,
          0.8083703954979202,
          0.915025441593786,
          0.907898692918885,
          0.8760014188668405,
          0.892334230669809,
          0.7868719302070888,
          0.7869028287789468,
          0.8863341828352918,
          0.7869028287789468,
          0.8710634414323196,
          0.8922656628564806,
          0.8768367886636266,
          0.8865866297865846,
          0.8883348825145082,
          0.8802253087959571,
          0.8858399630511821,
          0.8083703954979202,
          0.8926115660595216,
          0.8914236932482871,
          0.7869028287789468,
          0.8680939611484357,
          0.7869028287789468,
          0.8879578456111935,
          0.8974754871374087,
          0.7869028287789468,
          0.8968822312779074,
          0.8929255310399842,
          0.7869028287789468,
          0.8671937593310913,
          0.7869028287789468,
          0.7869028287789468,
          0.8848897432714946,
          0.8083703954979202,
          0.8898011067416771,
          0.8876670198052422,
          0.7869028287789468,
          0.8694644280838495,
          0.8805220120799089,
          0.7869028287789468,
          0.8740941779487243,
          0.8761761520348712,
          0.8762019304139819,
          0.7869028287789468,
          0.7869028287789468,
          0.8900911835951897,
          0.7869028287789468,
          0.7869028287789468,
          0.8775940568900029,
          0.86379531251827,
          0.8855301645192643,
          0.8981586834057937,
          0.884907539838112,
          0.8849324913331528,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.7869028287789468,
          0.8966778257324771,
          0.889176407759723,
          0.7869028287789468,
          0.7869028287789468,
          0.8812311564729811,
          0.8886670657691611,
          0.8977169480039757,
          0.7869028287789468,
          0.7869028287789468,
          0.8863498316574381
         ],
         "y0": " ",
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "boxmean": true,
         "boxpoints": "all",
         "hovertemplate": "<b>Version</b>: %{x}<br><b>Hit Relevance</b>: %{y}<br><b>Hit Binary</b>: %{customdata}",
         "jitter": 0.2,
         "legendgroup": "v3",
         "marker": {
          "color": "rgb(141,160,203)",
          "opacity": 0.8,
          "size": 6
         },
         "name": "v3",
         "notched": false,
         "offsetgroup": "v3",
         "orientation": "v",
         "pointpos": -1.5,
         "showlegend": true,
         "type": "box",
         "width": 0.4,
         "x": [
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3",
          "v3"
         ],
         "x0": " ",
         "xaxis": "x",
         "y": [
          0.8083703954979202,
          0.8922157949973222,
          0.8627125308391278,
          0.8927656084074856,
          0.8680480283887906,
          0.8752072964985901,
          0.882606349073998,
          0.8756449656794494,
          0.8917887535987512,
          0.8698714333588377,
          0.8665365655503806,
          0.8784575913704322,
          0.8781499372442343,
          0.8778038374537495,
          0.8871434618638618,
          0.8624995291125448,
          0.8714035590068662,
          0.8572886687344675,
          0.8608911867889214,
          0.8673272514800682,
          0.8651265733442882,
          0.8688606386701758,
          0.8671674454850152,
          0.8623414764615384,
          0.8589999472916422,
          0.8695840670468553,
          0.8794848508548733,
          0.8636182598567884,
          0.868438050576924,
          0.8577477943397475,
          0.9034177736070896,
          0.8771152687881361,
          0.8760996817256078,
          0.886738048304303,
          0.8502206006568602,
          0.8730891759860584,
          0.865945713662144,
          0.8654853458412803,
          0.8878529946503262,
          0.8698219506725495,
          0.8666523432710432,
          0.8753512321260981,
          0.8595540236484995,
          0.8823739243174586,
          0.8633794548817899,
          0.8676806524330092,
          0.8986746626630971,
          0.8752930084557498,
          0.8652149089637972,
          0.8717871336928219,
          0.8520950961457613,
          0.8651183968116382,
          0.8632611721269834,
          0.8688996549986941,
          0.8871666733708379,
          0.8771540832771615,
          0.8755135782145451,
          0.855304018296137,
          0.8740861607494457,
          0.8715160476703527,
          0.8580392364132345,
          0.90093500325521,
          0.8695703198407729,
          0.8691827023424603,
          0.8627288485888357,
          0.8692050114788884,
          0.832082850517313,
          0.8691950566145152,
          0.8660306223172377,
          0.8670077087307453,
          0.891131840136674,
          0.8564870278688782,
          0.8589907344074318,
          0.8636887374385043,
          0.8956752642558031,
          0.8751370901659713,
          0.8616977836874531,
          0.8571829057958268,
          0.8787222928383385,
          0.8577372744846431,
          0.8634490897211897,
          0.843634210493448,
          0.8570131420631468,
          0.8643252704702808,
          0.8715347943067006,
          0.8647883914674903,
          0.8596463453308213,
          0.8612656918987714,
          0.8614656677430144,
          0.8698455527062033,
          0.8581509187048756,
          0.862983457293862,
          0.8598030411143744,
          0.8616180665041032,
          0.8876713660394968,
          0.8764562551071113,
          0.8622165505534747,
          0.8508665105936918,
          0.8599612009153524,
          0.8879865795491658,
          0.8632537350230334,
          0.8767119771350291
         ],
         "y0": " ",
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "boxmean": true,
         "boxpoints": "all",
         "hovertemplate": "<b>Version</b>: %{x}<br><b>Hit Relevance</b>: %{y}<br><b>Hit Binary</b>: %{customdata}",
         "jitter": 0.2,
         "legendgroup": "v4",
         "marker": {
          "color": "rgb(231,138,195)",
          "opacity": 0.8,
          "size": 6
         },
         "name": "v4",
         "notched": false,
         "offsetgroup": "v4",
         "orientation": "v",
         "pointpos": -1.5,
         "showlegend": true,
         "type": "box",
         "width": 0.4,
         "x": [
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4",
          "v4"
         ],
         "x0": " ",
         "xaxis": "x",
         "y": [
          0.8697393910899545,
          0.8910156005838029,
          0.8866139743248748,
          0.8712542972899145,
          0.8547178182262136,
          0.8809798426081538,
          0.8826171764921442,
          0.8763143550833317,
          0.8820786260461465,
          0.8770315645885366,
          0.8719744836917137,
          0.8771554147673865,
          0.8660655581544457,
          0.8779393513495969,
          0.8645237813684424,
          0.8722487047510994,
          0.8803917538145132,
          0.8657214363044599,
          0.8861883097303953,
          0.8529383027534263,
          0.8867783332114516,
          0.8776052100146059,
          0.8695506982261886,
          0.8686979370335839,
          0.8738208911988398,
          0.8806341085920368,
          0.8693046585855314,
          0.8644568365434664,
          0.8362353005141436,
          0.8697623738263205,
          0.8795061898438358,
          0.8640161809765271,
          0.8744736702078131,
          0.8588736001970815,
          0.8500439600131373,
          0.8763068031035085,
          0.8727239897573158,
          0.8754567839677414,
          0.8664180332999974,
          0.8870388343929974,
          0.8546111518269639,
          0.8826670509752038,
          0.8755384750613422,
          0.8717186470509123,
          0.9022447145246832,
          0.8719407745789967,
          0.8496301637384719,
          0.8870685665873949,
          0.890957352947751,
          0.8786800109686976,
          0.8731266772130396,
          0.8740571985272786,
          0.8711884725348232,
          0.8712235947064113,
          0.8512300377213842,
          0.8637064923801302,
          0.8715299331141968,
          0.8602343436929818,
          0.8399536505317545,
          0.8843534907059679,
          0.8937898610434534,
          0.8522376801151742,
          0.8527080555800398,
          0.8709568017803936,
          0.8680092024074321,
          0.8708864364233855,
          0.8496568100899761,
          0.8903205793213386,
          0.8606270887344426,
          0.8734531100732879,
          0.8605399912427031,
          0.8645312415737277,
          0.8964109516806297,
          0.8927689803175661,
          0.8477074602007605,
          0.8794798849294259,
          0.8935462373131613,
          0.8686149201084529,
          0.8574269261228208,
          0.8823753922434641,
          0.8595540236484995,
          0.8649193206496718,
          0.8621846556469749,
          0.8760123065105768,
          0.8875328216970341,
          0.865959202388268,
          0.8496883132724933,
          0.8710211939116201,
          0.8570131420631468,
          0.8704455816044389,
          0.8688468078365978,
          0.8787342788760055,
          0.8783062388477221,
          0.8931297067217732,
          0.8583034521431591,
          0.8713679085396201,
          0.8596463453308213,
          0.864020434400735,
          0.8576267461340911,
          0.8772074922630392
         ],
         "y0": " ",
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "boxmean": true,
         "boxpoints": "all",
         "hovertemplate": "<b>Version</b>: %{x}<br><b>Hit Relevance</b>: %{y}<br><b>Hit Binary</b>: %{customdata}",
         "jitter": 0.2,
         "legendgroup": "v5",
         "marker": {
          "color": "rgb(166,216,84)",
          "opacity": 0.8,
          "size": 6
         },
         "name": "v5",
         "notched": false,
         "offsetgroup": "v5",
         "orientation": "v",
         "pointpos": -1.5,
         "showlegend": true,
         "type": "box",
         "width": 0.4,
         "x": [
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5",
          "v5"
         ],
         "x0": " ",
         "xaxis": "x",
         "y": [
          0.5626848281895075,
          0.5379585911759426,
          0.551143131832724,
          0.5238279786707994,
          0.5627398559313014,
          0.5735894737479884,
          0.5702665686199596,
          0.6000674100955248,
          0.556392030995828,
          0.5668812426025432,
          0.46311535403615905,
          0.5430099234621252,
          0.4720799507036731,
          0.6343678716076319,
          0.4932027539035682,
          0.5152384064071143,
          0.5340488437987333,
          0.5825052192800249,
          0.62250269184828,
          0.6241840052825935,
          0.4798247780495428,
          0.4692487452689322,
          0.5255238992445165,
          0.5337444040157748,
          0.5521718026834296,
          0.6199276586452639,
          0.6129797826495775,
          0.4945173326579632,
          0.6057761299497958,
          0.5819327288004313,
          0.544422456053703,
          0.5669384808932681,
          0.5561001472829729,
          0.595362527175347,
          0.5753078914665821,
          0.6265954644896071,
          0.47986623690501984,
          0.6022262550799531,
          0.5767135999869816,
          0.5076654469780616,
          0.6570673410039699,
          0.4967044988060334,
          0.5701683607683296,
          0.49975844268256214,
          0.5712212337473397,
          0.4913629443906314,
          0.5616694263359545,
          0.5227730512714572,
          0.5357889012458162,
          0.6941451189180716,
          0.5925004063776605,
          0.5584558280351564,
          0.6121420202806211,
          0.6285864479880248,
          0.5868831952445831,
          0.5469053927620426,
          0.5234418658356943,
          0.622444443987347,
          0.589871335309441,
          0.4895847796162715,
          0.5472130984007476,
          0.5806793864764589,
          0.5833397669588367,
          0.5036418721159758,
          0.5377070778149224,
          0.6299056343177043,
          0.601486992775078,
          0.5380527712100321,
          0.5309427397281189,
          0.5758925880647775,
          0.5441272559185285,
          0.5237898721061909,
          0.5710894332390755,
          0.6317241326451314,
          0.5672205447249299,
          0.566391972031935,
          0.5241721949874862,
          0.6160908968282496,
          0.46178273846964,
          0.5332050561052482,
          0.5578101845477924,
          0.6077017477471107,
          0.5826147620277955,
          0.5668134088658006,
          0.5509320221617643,
          0.5769870470510097,
          0.5753389842943744,
          0.5228403047921816,
          0.6076729979228671,
          0.685084738445448,
          0.5213200631938628,
          0.5604809108882302,
          0.5234418658356943,
          0.6601224635294691,
          0.5616694263359545,
          0.547334315987066,
          0.5290356177360139,
          0.6352889417787004,
          0.565444617539338,
          0.5171719849408615
         ],
         "y0": " ",
         "yaxis": "y"
        }
       ],
       "layout": {
        "annotations": [
         {
          "font": {
           "color": "darkred",
           "size": 12
          },
          "showarrow": false,
          "text": "Threshold: 0.8",
          "x": 5,
          "xshift": 50,
          "y": 0.8,
          "yshift": 10
         },
         {
          "font": {
           "color": "darkblue",
           "size": 12
          },
          "showarrow": false,
          "text": "Threshold: 0.6",
          "x": 5,
          "xshift": 50,
          "y": 0.6,
          "yshift": -10
         }
        ],
        "bargap": 0.15,
        "boxmode": "group",
        "font": {
         "family": "Arial",
         "size": 14
        },
        "height": 650,
        "hovermode": "closest",
        "legend": {
         "title": {
          "text": "Version"
         },
         "tracegroupgap": 0
        },
        "margin": {
         "b": 60,
         "l": 60,
         "r": 40,
         "t": 70
        },
        "plot_bgcolor": "#f7f7f7",
        "shapes": [
         {
          "line": {
           "color": "darkred",
           "dash": "dash",
           "width": 2
          },
          "opacity": 0.7,
          "type": "line",
          "x0": -0.5,
          "x1": 4,
          "y0": 0.8,
          "y1": 0.8
         },
         {
          "line": {
           "color": "darkblue",
           "dash": "dash",
           "width": 2
          },
          "opacity": 0.7,
          "type": "line",
          "x0": 3,
          "x1": 5.5,
          "y0": 0.6,
          "y1": 0.6
         }
        ],
        "showlegend": true,
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "font": {
          "color": "darkblue",
          "family": "Times New Roman",
          "size": 22
         },
         "text": "Hit Relevance Distribution by Version (Business Analyst Persona)"
        },
        "width": 1000,
        "xaxis": {
         "anchor": "y",
         "categoryarray": [
          "baseline",
          "v2",
          "v3",
          "v4",
          "v5"
         ],
         "categoryorder": "array",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Version"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "gridcolor": "lightgray",
         "showgrid": true,
         "title": {
          "text": "Hit Relevance Score"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Dataframes for Business Analyst Persona \n",
    "dataframes_ba = {\n",
    "    \"baseline\": Test_Results_2024052802_Baseline,\n",
    "    \"v2\": test_output_v2_businessanalyst_2024_09_03_12_17_34,\n",
    "    \"v3\": test_output_v3_businessanalyst_2024_09_17_03_35_43,\n",
    "    \"v4\": test_output_v4_businessanalyst_2024_09_29_01_42_36,\n",
    "    \"v5\": test_output_v5_businessanalyst_2024_10_07_17_55_42\n",
    "}\n",
    "\n",
    "# Combine data for easier plotting\n",
    "all_data_ba = []\n",
    "for version, df in dataframes_ba.items():\n",
    "    df['version'] = version  # Add a column for version\n",
    "    all_data_ba.append(df[['Column1.hit', 'Column1.hitRelevance', 'version']])\n",
    "\n",
    "# Concatenate all data into a single DataFrame\n",
    "combined_df_ba = pd.concat(all_data_ba)\n",
    "\n",
    "# Convert hit column to binary values (1 if hit, 0 if not) based on a threshold of 0.75\n",
    "combined_df_ba['hit_binary'] = combined_df_ba['Column1.hitRelevance'].apply(lambda x: 1 if x >= 0.75 else 0)\n",
    "\n",
    "# Create a box plot for Business Analyst Persona\n",
    "fig_ba = px.box(combined_df_ba, \n",
    "                x='version', \n",
    "                y='Column1.hitRelevance', \n",
    "                points='all', \n",
    "                title='Hit Relevance Distribution by Version (Business Analyst Persona)',\n",
    "                labels={'Column1.hitRelevance': 'Hit Relevance Score', 'version': 'Version'},\n",
    "                color='version',  \n",
    "                color_discrete_sequence=px.colors.qualitative.Set2)\n",
    "\n",
    "# Customize box plot aesthetics\n",
    "fig_ba.update_traces(\n",
    "    boxmean=True, \n",
    "    jitter=0.2, \n",
    "    pointpos=-1.5, \n",
    "    marker=dict(size=6, opacity=0.8), \n",
    "    width=0.4\n",
    ")\n",
    "\n",
    "# Add horizontal lines for thresholds\n",
    "fig_ba.add_shape(\n",
    "    type=\"line\", line_color=\"darkred\", line_width=2, opacity=0.7, \n",
    "    x0=-0.5, x1=4, y0=threshold_baseline_to_v4, y1=threshold_baseline_to_v4, \n",
    "    line_dash=\"dash\"\n",
    ")\n",
    "fig_ba.add_shape(\n",
    "    type=\"line\", line_color=\"darkblue\", line_width=2, opacity=0.7, \n",
    "    x0=3, x1=5.5, y0=threshold_v5, y1=threshold_v5,\n",
    "    line_dash=\"dash\"\n",
    ")\n",
    "\n",
    "# Move the threshold text annotations to the right\n",
    "fig_ba.add_annotation(\n",
    "    x=5, y=threshold_baseline_to_v4,\n",
    "    text=\"Threshold: 0.8\", showarrow=False, xshift=50, yshift=10,\n",
    "    font=dict(size=12, color=\"darkred\")\n",
    ")\n",
    "fig_ba.add_annotation(\n",
    "    x=5, y=threshold_v5,\n",
    "    text=\"Threshold: 0.6\", showarrow=False, xshift=50, yshift=-10,\n",
    "    font=dict(size=12, color=\"darkblue\")\n",
    ")\n",
    "\n",
    "# Adjust layout\n",
    "fig_ba.update_layout(\n",
    "    xaxis_title='Version',\n",
    "    yaxis_title='Hit Relevance Score',\n",
    "    legend_title_text='Version',\n",
    "    font=dict(size=14, family='Arial'),\n",
    "    plot_bgcolor='#f7f7f7',  \n",
    "    title_font=dict(size=22, family='Times New Roman', color='darkblue'),  \n",
    "    width=1000,\n",
    "    height=650,\n",
    "    margin=dict(t=70, l=60, r=40, b=60),\n",
    "    boxmode='group', \n",
    "    showlegend=True,  \n",
    "    yaxis=dict(showgrid=True, gridcolor='lightgray'),  \n",
    "    bargap=0.15,\n",
    "    hovermode=\"closest\"\n",
    ")\n",
    "\n",
    "# Update hover template\n",
    "fig_ba.update_traces(\n",
    "    hovertemplate=\"<b>Version</b>: %{x}<br><b>Hit Relevance</b>: %{y}<br><b>Hit Binary</b>: %{customdata}\"\n",
    ")\n",
    "\n",
    "# Display the figure\n",
    "fig_ba.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualizations Set 2: Grouped Bar Graphs (Gemini Evualation) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataframes_persona = {\n",
    "    \"static\": {\n",
    "        \"v4\": test_output_v4_nonetype_2024_09_28_21_30_03,\n",
    "        \"v5\": test_output_v5_nonetype_2024_10_07_18_04_26\n",
    "    },\n",
    "    \"developer\": {\n",
    "        \"v4\": test_output_v4_developer_2024_09_28_21_45_10,\n",
    "        \"v5\": test_output_v5_developer_2024_10_07_17_25_23\n",
    "    },\n",
    "    \"tester\": {\n",
    "        \"v4\": test_output_v4_tester_2024_09_29_00_32_01,\n",
    "        \"v5\": test_output_v5_tester_2024_10_07_17_35_56\n",
    "    },\n",
    "    \"business_analyst\": {\n",
    "        \"v4\": test_output_v4_businessanalyst_2024_09_29_01_42_36,\n",
    "        \"v5\": test_output_v5_businessanalyst_2024_10_07_17_55_42\n",
    "    }\n",
    "}\n",
    "\n",
    "# Define the color palette for Gemini scores (pastel colors)\n",
    "likert_colors = ['#FFB3BA', '#FFDFBA', '#BAFFC9', '#BAE1FF']  # Pastel shades for 1-4\n",
    "\n",
    "# Define score labels for the legend (with descriptions)\n",
    "score_labels = {\n",
    "    1: '1: Irrelevant or incoherent',\n",
    "    2: '2: Partially relevant but incomplete',\n",
    "    3: '3: Mostly relevant and coherent',\n",
    "    4: '4: Fully relevant and coherent'\n",
    "}\n",
    "\n",
    "# Function to create a visually enhanced grouped bar chart with mean scores for each persona\n",
    "def create_enhanced_gemini_chart(dataframes_persona, version):\n",
    "    # Prepare the layout for the visualization\n",
    "    fig = go.Figure()\n",
    "\n",
    "    personas = ['static', 'developer', 'business analyst', 'tester']  # Removed underscores\n",
    "    \n",
    "    # Iterate over each persona and plot the grouped bars\n",
    "    for i, persona in enumerate(personas):\n",
    "        df = dataframes_persona[persona.replace(' ', '_')][version]  # Replace spaces with underscores to match the data\n",
    "\n",
    "        # Calculate the mean score for each persona\n",
    "        mean_score = df['Column1.gemini_evaluation'].mean()\n",
    "        \n",
    "        # Calculate the counts for each score (1 to 4)\n",
    "        score_counts = df['Column1.gemini_evaluation'].value_counts().reindex([1, 2, 3, 4], fill_value=0).sort_index()\n",
    "\n",
    "        # Add a bar for each score (1 to 4) for this persona\n",
    "        for score, count in score_counts.items():\n",
    "            fig.add_trace(go.Bar(\n",
    "                x=[persona], y=[count], \n",
    "                name=score_labels[score],  # One legend for each score\n",
    "                marker_color=likert_colors[score-1],  # Pastel color for each score\n",
    "                hoverinfo='y+name',\n",
    "                text=f'Score: {score}, Count: {count}',\n",
    "                textposition='auto',\n",
    "                offsetgroup=score,  # Grouping the bars by score\n",
    "            ))\n",
    "        \n",
    "        # Add a text annotation for the mean score with proper spacing\n",
    "        fig.add_annotation(\n",
    "            x=persona,\n",
    "            y=max(score_counts) + 5,  # Position the annotation above the bars\n",
    "            text=f\"Mean: {mean_score:.2f}\",\n",
    "            showarrow=False,\n",
    "            font=dict(size=14, family='Arial', color='black')\n",
    "        )\n",
    "        \n",
    "        # Add vertical dashed line separators between personas\n",
    "        fig.add_shape(type=\"line\",\n",
    "                      x0=i + 0.5, x1=i + 0.5, y0=0, y1=max(score_counts) + 10,\n",
    "                      line=dict(color=\"gray\", dash=\"dash\", width=1.5),\n",
    "                      opacity=0.5)  # Translucent separator\n",
    "\n",
    "    # Customize the layout\n",
    "    fig.update_layout(\n",
    "        barmode='group',  # Group the bars instead of stacking\n",
    "        title={\n",
    "            'text': f'Gemini Score Distribution - {version.upper()}',\n",
    "            'y':0.95,\n",
    "            'x':0.5,\n",
    "            'xanchor': 'center',\n",
    "            'yanchor': 'top',\n",
    "            'font': {'size': 24, 'family': 'Times New Roman', 'color': 'darkblue'}\n",
    "        },\n",
    "        xaxis_title=\"Personas\",\n",
    "        yaxis_title=\"Count of Responses\",\n",
    "        legend_title=\"Gemini Evaluation Scale\",\n",
    "        font=dict(size=14),\n",
    "        title_font=dict(size=20),\n",
    "        plot_bgcolor='white',\n",
    "        height=600,\n",
    "        width=1200,  # Increased width to accommodate the legend\n",
    "        margin=dict(l=50, r=50, t=50, b=50)  # Adjust margins for better spacing\n",
    "    )\n",
    "    \n",
    "    # Update legend to show only 4 entries (1 per score)\n",
    "    fig.update_traces(showlegend=False)  # Hide individual legends\n",
    "    for score, color in score_labels.items():\n",
    "        fig.add_trace(go.Bar(\n",
    "            x=[None], y=[None],\n",
    "            marker_color=likert_colors[score-1],\n",
    "            name=score_labels[score],\n",
    "            showlegend=True\n",
    "        ))\n",
    "\n",
    "    # Show the figure\n",
    "    fig.show()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#FFB3BA"
         },
         "name": "1: Irrelevant or incoherent",
         "offsetgroup": "1",
         "showlegend": false,
         "text": "Score: 1, Count: 0",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "static"
         ],
         "y": [
          0
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#FFDFBA"
         },
         "name": "2: Partially relevant but incomplete",
         "offsetgroup": "2",
         "showlegend": false,
         "text": "Score: 2, Count: 1",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "static"
         ],
         "y": [
          1
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#BAFFC9"
         },
         "name": "3: Mostly relevant and coherent",
         "offsetgroup": "3",
         "showlegend": false,
         "text": "Score: 3, Count: 0",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "static"
         ],
         "y": [
          0
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#BAE1FF"
         },
         "name": "4: Fully relevant and coherent",
         "offsetgroup": "4",
         "showlegend": false,
         "text": "Score: 4, Count: 98",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "static"
         ],
         "y": [
          98
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#FFB3BA"
         },
         "name": "1: Irrelevant or incoherent",
         "offsetgroup": "1",
         "showlegend": false,
         "text": "Score: 1, Count: 3",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "developer"
         ],
         "y": [
          3
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#FFDFBA"
         },
         "name": "2: Partially relevant but incomplete",
         "offsetgroup": "2",
         "showlegend": false,
         "text": "Score: 2, Count: 2",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "developer"
         ],
         "y": [
          2
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#BAFFC9"
         },
         "name": "3: Mostly relevant and coherent",
         "offsetgroup": "3",
         "showlegend": false,
         "text": "Score: 3, Count: 0",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "developer"
         ],
         "y": [
          0
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#BAE1FF"
         },
         "name": "4: Fully relevant and coherent",
         "offsetgroup": "4",
         "showlegend": false,
         "text": "Score: 4, Count: 95",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "developer"
         ],
         "y": [
          95
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#FFB3BA"
         },
         "name": "1: Irrelevant or incoherent",
         "offsetgroup": "1",
         "showlegend": false,
         "text": "Score: 1, Count: 0",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "business analyst"
         ],
         "y": [
          0
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#FFDFBA"
         },
         "name": "2: Partially relevant but incomplete",
         "offsetgroup": "2",
         "showlegend": false,
         "text": "Score: 2, Count: 0",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "business analyst"
         ],
         "y": [
          0
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#BAFFC9"
         },
         "name": "3: Mostly relevant and coherent",
         "offsetgroup": "3",
         "showlegend": false,
         "text": "Score: 3, Count: 0",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "business analyst"
         ],
         "y": [
          0
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#BAE1FF"
         },
         "name": "4: Fully relevant and coherent",
         "offsetgroup": "4",
         "showlegend": false,
         "text": "Score: 4, Count: 100",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "business analyst"
         ],
         "y": [
          100
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#FFB3BA"
         },
         "name": "1: Irrelevant or incoherent",
         "offsetgroup": "1",
         "showlegend": false,
         "text": "Score: 1, Count: 16",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "tester"
         ],
         "y": [
          16
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#FFDFBA"
         },
         "name": "2: Partially relevant but incomplete",
         "offsetgroup": "2",
         "showlegend": false,
         "text": "Score: 2, Count: 37",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "tester"
         ],
         "y": [
          37
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#BAFFC9"
         },
         "name": "3: Mostly relevant and coherent",
         "offsetgroup": "3",
         "showlegend": false,
         "text": "Score: 3, Count: 0",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "tester"
         ],
         "y": [
          0
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#BAE1FF"
         },
         "name": "4: Fully relevant and coherent",
         "offsetgroup": "4",
         "showlegend": false,
         "text": "Score: 4, Count: 47",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "tester"
         ],
         "y": [
          47
         ]
        },
        {
         "marker": {
          "color": "#FFB3BA"
         },
         "name": "1: Irrelevant or incoherent",
         "showlegend": true,
         "type": "bar",
         "x": [
          null
         ],
         "y": [
          null
         ]
        },
        {
         "marker": {
          "color": "#FFDFBA"
         },
         "name": "2: Partially relevant but incomplete",
         "showlegend": true,
         "type": "bar",
         "x": [
          null
         ],
         "y": [
          null
         ]
        },
        {
         "marker": {
          "color": "#BAFFC9"
         },
         "name": "3: Mostly relevant and coherent",
         "showlegend": true,
         "type": "bar",
         "x": [
          null
         ],
         "y": [
          null
         ]
        },
        {
         "marker": {
          "color": "#BAE1FF"
         },
         "name": "4: Fully relevant and coherent",
         "showlegend": true,
         "type": "bar",
         "x": [
          null
         ],
         "y": [
          null
         ]
        }
       ],
       "layout": {
        "annotations": [
         {
          "font": {
           "color": "black",
           "family": "Arial",
           "size": 14
          },
          "showarrow": false,
          "text": "Mean: 3.98",
          "x": "static",
          "y": 103
         },
         {
          "font": {
           "color": "black",
           "family": "Arial",
           "size": 14
          },
          "showarrow": false,
          "text": "Mean: 3.87",
          "x": "developer",
          "y": 100
         },
         {
          "font": {
           "color": "black",
           "family": "Arial",
           "size": 14
          },
          "showarrow": false,
          "text": "Mean: 4.00",
          "x": "business analyst",
          "y": 105
         },
         {
          "font": {
           "color": "black",
           "family": "Arial",
           "size": 14
          },
          "showarrow": false,
          "text": "Mean: 2.78",
          "x": "tester",
          "y": 52
         }
        ],
        "barmode": "group",
        "font": {
         "size": 14
        },
        "height": 600,
        "legend": {
         "title": {
          "text": "Gemini Evaluation Scale"
         }
        },
        "margin": {
         "b": 50,
         "l": 50,
         "r": 50,
         "t": 50
        },
        "plot_bgcolor": "white",
        "shapes": [
         {
          "line": {
           "color": "gray",
           "dash": "dash",
           "width": 1.5
          },
          "opacity": 0.5,
          "type": "line",
          "x0": 0.5,
          "x1": 0.5,
          "y0": 0,
          "y1": 108
         },
         {
          "line": {
           "color": "gray",
           "dash": "dash",
           "width": 1.5
          },
          "opacity": 0.5,
          "type": "line",
          "x0": 1.5,
          "x1": 1.5,
          "y0": 0,
          "y1": 105
         },
         {
          "line": {
           "color": "gray",
           "dash": "dash",
           "width": 1.5
          },
          "opacity": 0.5,
          "type": "line",
          "x0": 2.5,
          "x1": 2.5,
          "y0": 0,
          "y1": 110
         },
         {
          "line": {
           "color": "gray",
           "dash": "dash",
           "width": 1.5
          },
          "opacity": 0.5,
          "type": "line",
          "x0": 3.5,
          "x1": 3.5,
          "y0": 0,
          "y1": 57
         }
        ],
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "font": {
          "color": "darkblue",
          "family": "Times New Roman",
          "size": 20
         },
         "text": "Gemini Score Distribution - V4",
         "x": 0.5,
         "xanchor": "center",
         "y": 0.95,
         "yanchor": "top"
        },
        "width": 1200,
        "xaxis": {
         "title": {
          "text": "Personas"
         }
        },
        "yaxis": {
         "title": {
          "text": "Count of Responses"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create the enhanced chart for v4 (you can do the same for v5 by changing the version)\n",
    "create_enhanced_gemini_chart(dataframes_persona, 'v4')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#FFB3BA"
         },
         "name": "1: Irrelevant or incoherent",
         "offsetgroup": "1",
         "showlegend": false,
         "text": "Score: 1, Count: 0",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "static"
         ],
         "y": [
          0
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#FFDFBA"
         },
         "name": "2: Partially relevant but incomplete",
         "offsetgroup": "2",
         "showlegend": false,
         "text": "Score: 2, Count: 0",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "static"
         ],
         "y": [
          0
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#BAFFC9"
         },
         "name": "3: Mostly relevant and coherent",
         "offsetgroup": "3",
         "showlegend": false,
         "text": "Score: 3, Count: 1",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "static"
         ],
         "y": [
          1
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#BAE1FF"
         },
         "name": "4: Fully relevant and coherent",
         "offsetgroup": "4",
         "showlegend": false,
         "text": "Score: 4, Count: 98",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "static"
         ],
         "y": [
          98
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#FFB3BA"
         },
         "name": "1: Irrelevant or incoherent",
         "offsetgroup": "1",
         "showlegend": false,
         "text": "Score: 1, Count: 2",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "developer"
         ],
         "y": [
          2
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#FFDFBA"
         },
         "name": "2: Partially relevant but incomplete",
         "offsetgroup": "2",
         "showlegend": false,
         "text": "Score: 2, Count: 15",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "developer"
         ],
         "y": [
          15
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#BAFFC9"
         },
         "name": "3: Mostly relevant and coherent",
         "offsetgroup": "3",
         "showlegend": false,
         "text": "Score: 3, Count: 7",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "developer"
         ],
         "y": [
          7
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#BAE1FF"
         },
         "name": "4: Fully relevant and coherent",
         "offsetgroup": "4",
         "showlegend": false,
         "text": "Score: 4, Count: 76",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "developer"
         ],
         "y": [
          76
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#FFB3BA"
         },
         "name": "1: Irrelevant or incoherent",
         "offsetgroup": "1",
         "showlegend": false,
         "text": "Score: 1, Count: 0",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "business analyst"
         ],
         "y": [
          0
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#FFDFBA"
         },
         "name": "2: Partially relevant but incomplete",
         "offsetgroup": "2",
         "showlegend": false,
         "text": "Score: 2, Count: 0",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "business analyst"
         ],
         "y": [
          0
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#BAFFC9"
         },
         "name": "3: Mostly relevant and coherent",
         "offsetgroup": "3",
         "showlegend": false,
         "text": "Score: 3, Count: 0",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "business analyst"
         ],
         "y": [
          0
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#BAE1FF"
         },
         "name": "4: Fully relevant and coherent",
         "offsetgroup": "4",
         "showlegend": false,
         "text": "Score: 4, Count: 100",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "business analyst"
         ],
         "y": [
          100
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#FFB3BA"
         },
         "name": "1: Irrelevant or incoherent",
         "offsetgroup": "1",
         "showlegend": false,
         "text": "Score: 1, Count: 2",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "tester"
         ],
         "y": [
          2
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#FFDFBA"
         },
         "name": "2: Partially relevant but incomplete",
         "offsetgroup": "2",
         "showlegend": false,
         "text": "Score: 2, Count: 0",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "tester"
         ],
         "y": [
          0
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#BAFFC9"
         },
         "name": "3: Mostly relevant and coherent",
         "offsetgroup": "3",
         "showlegend": false,
         "text": "Score: 3, Count: 3",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "tester"
         ],
         "y": [
          3
         ]
        },
        {
         "hoverinfo": "y+name",
         "marker": {
          "color": "#BAE1FF"
         },
         "name": "4: Fully relevant and coherent",
         "offsetgroup": "4",
         "showlegend": false,
         "text": "Score: 4, Count: 95",
         "textposition": "auto",
         "type": "bar",
         "x": [
          "tester"
         ],
         "y": [
          95
         ]
        },
        {
         "marker": {
          "color": "#FFB3BA"
         },
         "name": "1: Irrelevant or incoherent",
         "showlegend": true,
         "type": "bar",
         "x": [
          null
         ],
         "y": [
          null
         ]
        },
        {
         "marker": {
          "color": "#FFDFBA"
         },
         "name": "2: Partially relevant but incomplete",
         "showlegend": true,
         "type": "bar",
         "x": [
          null
         ],
         "y": [
          null
         ]
        },
        {
         "marker": {
          "color": "#BAFFC9"
         },
         "name": "3: Mostly relevant and coherent",
         "showlegend": true,
         "type": "bar",
         "x": [
          null
         ],
         "y": [
          null
         ]
        },
        {
         "marker": {
          "color": "#BAE1FF"
         },
         "name": "4: Fully relevant and coherent",
         "showlegend": true,
         "type": "bar",
         "x": [
          null
         ],
         "y": [
          null
         ]
        }
       ],
       "layout": {
        "annotations": [
         {
          "font": {
           "color": "black",
           "family": "Arial",
           "size": 14
          },
          "showarrow": false,
          "text": "Mean: 3.99",
          "x": "static",
          "y": 103
         },
         {
          "font": {
           "color": "black",
           "family": "Arial",
           "size": 14
          },
          "showarrow": false,
          "text": "Mean: 3.57",
          "x": "developer",
          "y": 81
         },
         {
          "font": {
           "color": "black",
           "family": "Arial",
           "size": 14
          },
          "showarrow": false,
          "text": "Mean: 4.00",
          "x": "business analyst",
          "y": 105
         },
         {
          "font": {
           "color": "black",
           "family": "Arial",
           "size": 14
          },
          "showarrow": false,
          "text": "Mean: 3.91",
          "x": "tester",
          "y": 100
         }
        ],
        "barmode": "group",
        "font": {
         "size": 14
        },
        "height": 600,
        "legend": {
         "title": {
          "text": "Gemini Evaluation Scale"
         }
        },
        "margin": {
         "b": 50,
         "l": 50,
         "r": 50,
         "t": 50
        },
        "plot_bgcolor": "white",
        "shapes": [
         {
          "line": {
           "color": "gray",
           "dash": "dash",
           "width": 1.5
          },
          "opacity": 0.5,
          "type": "line",
          "x0": 0.5,
          "x1": 0.5,
          "y0": 0,
          "y1": 108
         },
         {
          "line": {
           "color": "gray",
           "dash": "dash",
           "width": 1.5
          },
          "opacity": 0.5,
          "type": "line",
          "x0": 1.5,
          "x1": 1.5,
          "y0": 0,
          "y1": 86
         },
         {
          "line": {
           "color": "gray",
           "dash": "dash",
           "width": 1.5
          },
          "opacity": 0.5,
          "type": "line",
          "x0": 2.5,
          "x1": 2.5,
          "y0": 0,
          "y1": 110
         },
         {
          "line": {
           "color": "gray",
           "dash": "dash",
           "width": 1.5
          },
          "opacity": 0.5,
          "type": "line",
          "x0": 3.5,
          "x1": 3.5,
          "y0": 0,
          "y1": 105
         }
        ],
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "font": {
          "color": "darkblue",
          "family": "Times New Roman",
          "size": 20
         },
         "text": "Gemini Score Distribution - V5",
         "x": 0.5,
         "xanchor": "center",
         "y": 0.95,
         "yanchor": "top"
        },
        "width": 1200,
        "xaxis": {
         "title": {
          "text": "Personas"
         }
        },
        "yaxis": {
         "title": {
          "text": "Count of Responses"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create the enhanced chart for v4 (you can do the same for v5 by changing the version)\n",
    "create_enhanced_gemini_chart(dataframes_persona, 'v5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
****************************************

****************************************
BoxerEval\tests\BoxerDataTest_v1.py
****************************************
# Copyright (c) 2024 Braid Technologies Ltd

"""
Question Generation (Persona):
No persona-based question generation. A static list of questions is used.
    
Similarity Embedding:
Uses `text-embedding-ada-002` for embedding and cosine similarity calculations.
    
"""

# Standard Library Imports
import logging
import os
import json
import sys
from logging import Logger
from typing import List, Dict, Any
import numpy as np
from numpy.linalg import norm
import datetime

# Third-Party Packages
from openai import AzureOpenAI, OpenAIError, BadRequestError, APIConnectionError
from tenacity import retry, wait_random_exponential, stop_after_attempt, retry_if_not_exception_type

# Add the project root and scripts directory to the Python path
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)

# Local Modules
from common.ApiConfiguration import ApiConfiguration
from common.common_functions import get_embedding

# Constants
SIMILARITY_THRESHOLD = 0.8
MAX_RETRIES = 15

OPENAI_PERSONA_PROMPT =  "You are an AI assistant helping an application developer understand generative AI. You explain complex concepts in simple language, using Python examples if it helps. You limit replies to 50 words or less. If you don't know the answer, say 'I don't know'. If the question is not related to building AI applications, Python, or Large Language Models (LLMs), say 'That doesn't seem to be about AI'."
ENRICHMENT_PROMPT = "You will be provided with a question about building applications that use generative AI technology. Write a 50 word summary of an article that would be a great answer to the question. Consider enriching the question with additional topics that the question asker might want to understand. Write the summary in the present tense, as though the article exists. If the question is not related to building AI applications, Python, or Large Language Models (LLMs), say 'That doesn't seem to be about AI'.\n"
FOLLOW_UP_PROMPT =  "You will be provided with a summary of an article about building applications that use generative AI technology. Write a question of no more than 10 words that a reader might ask as a follow up to reading the article."

# Setup Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Function to configure the Azure OpenAI API client
def configure_openai_for_azure(config: ApiConfiguration) -> AzureOpenAI:
    """
    Configures OpenAI for Azure using the provided ApiConfiguration.

    Args:
        config (ApiConfiguration): The ApiConfiguration object containing the necessary settings.

    Returns:
        AzureOpenAI: An instance of AzureOpenAI configured with the provided settings.
    """
    return AzureOpenAI(
        azure_endpoint=config.resourceEndpoint, 
        api_key=config.apiKey.strip(),
        api_version=config.apiVersion
    )

# Class to hold test results
class TestResult:
    def __init__(self) -> None:
        """
        Initializes a new instance of the TestResult class.
        
        Sets the initial state of the test result, including the question, enriched question, 
        hit status, hit relevance, hit summary, follow-up question, and follow-up topic.
        
        Args:
            None
        
        Returns:
            None
        """
        self.question: str = ""
        self.enriched_question_summary: str = ""
        self.hit: bool = False
        self.hit_relevance: float = 0.0
        self.follow_up: str = ""
        self.follow_up_on_topic: str = ""

# Function to call the OpenAI API with retry logic
@retry(wait=wait_random_exponential(min=5, max=15), stop=stop_after_attempt(MAX_RETRIES), retry=retry_if_not_exception_type(BadRequestError))
def call_openai_chat(client: AzureOpenAI, messages: List[Dict[str, str]], config: ApiConfiguration, logger: logging.Logger) -> str:
    """
    Retries the OpenAI chat API call with exponential backoff and retry logic.

    :param client: An instance of the AzureOpenAI class.
    :type client: AzureOpenAI
    :param messages: A list of dictionaries representing the messages to be sent to the API.
    :type messages: List[Dict[str, str]]
    :param config: An instance of the ApiConfiguration class.
    :type config: ApiConfiguration
    :param logger: An instance of the logging.Logger class.
    :type logger: logging.Logger
    :return: The content of the first choice in the API response.
    :rtype: str
    :raises RuntimeError: If the finish reason in the API response is not 'stop', 'length', or an empty string.
    :raises OpenAIError: If there is an error with the OpenAI API.
    :raises APIConnectionError: If there is an error with the API connection.
    """
    try:
        response = client.chat.completions.create(
            model=config.azureDeploymentName,
            messages=messages,
            temperature=0.7,
            max_tokens=config.maxTokens,
            top_p=0.0,
            frequency_penalty=0,
            presence_penalty=0,
            timeout=config.openAiRequestTimeout,
        )
        content = response.choices[0].message.content
        finish_reason = response.choices[0].finish_reason

        if finish_reason not in {"stop", "length", ""}:
            logger.warning("Unexpected stop reason: %s", finish_reason)
            logger.warning("Content: %s", content)
            logger.warning("Consider increasing max tokens and retrying.")
            raise RuntimeError("Unexpected finish reason in API response.")

        return content

    except (OpenAIError, APIConnectionError) as e:
        logger.error(f"Error: {e}")
        raise

# Function to retrieve text embeddings using OpenAI API with retry logic
@retry(wait=wait_random_exponential(min=5, max=15), stop=stop_after_attempt(MAX_RETRIES), retry=retry_if_not_exception_type(BadRequestError))
def get_text_embedding(client: AzureOpenAI, config: ApiConfiguration, text: str, logger: Logger) -> np.ndarray:
    """
    Retrieves the text embedding for a given text using the OpenAI API.

    Args:
        client (AzureOpenAI): The OpenAI client instance.
        config (ApiConfiguration): The API configuration instance.
        text (str): The text for which to retrieve the embedding.
        logger (Logger): The logger instance.

    Returns:
        np.ndarray: The text embedding as a numpy array.

    Raises:
        OpenAIError: If an error occurs while retrieving the text embedding.
    """
    try:
        embedding = get_embedding(text, client, config)
        return np.array(embedding)
    except OpenAIError as e:
        logger.error(f"Error getting text embedding: {e}")
        raise

# Function to calculate cosine similarity between two vectors
def cosine_similarity(a: np.ndarray, b: np.ndarray) -> float:
    """
    Calculates the cosine similarity between two vectors.

    Args:
        a (np.ndarray): The first vector.
        b (np.ndarray): The second vector.

    Returns:
        float: The cosine similarity between the two vectors.

    Raises:
        ValueError: If the input vectors are not numpy arrays or convertible to numpy arrays.
        ValueError: If the input vectors do not have the same shape.
        ValueError: If either of the input vectors is a zero vector.
    """
    try:
        a, b = np.array(a), np.array(b)
    except Exception:
        raise ValueError("Input vectors must be numpy arrays or convertible to numpy arrays")

    if a.shape != b.shape:
        raise ValueError("Input vectors must have the same shape")

    dot_product = np.dot(a, b)
    a_norm, b_norm = norm(a), norm(b)

    if a_norm == 0 or b_norm == 0:
        raise ValueError("Input vectors must not be zero vectors")

    return dot_product / (a_norm * b_norm)

# Function to generate enriched questions using OpenAI API
@retry(wait=wait_random_exponential(min=5, max=15), stop=stop_after_attempt(MAX_RETRIES), retry=retry_if_not_exception_type(BadRequestError))
def generate_enriched_question(client: AzureOpenAI, config: ApiConfiguration, question: str, logger: logging.Logger) -> str:
    """
    Generates an enriched question using the OpenAI API.

    Args:
        client (AzureOpenAI): The OpenAI client instance.
        config (ApiConfiguration): The API configuration instance.
        question (str): The question to be enriched.
        logger (logging.Logger): The logger instance.

    Returns:
        str: The enriched question.

    Raises:
        BadRequestError: If the API request fails.
    """
    messages = [
        {"role": "system", "content": OPENAI_PERSONA_PROMPT},
        {"role": "user", "content": ENRICHMENT_PROMPT + "Question: " + question},
    ]
    logger.info("Making API request to OpenAI...")
    logger.info("Request payload: %s", messages)

    response = call_openai_chat(client, messages, config, logger)
    logger.info("API response received: %s", response)

    return response

def process_questions(client: AzureOpenAI, config: ApiConfiguration, questions: List[str], processed_question_chunks: List[Dict[str, Any]], logger: logging.Logger) -> List[TestResult]:
    """
    Processes a list of test questions and evaluates their relevance based on their similarity to pre-processed question chunks.

    Args:
        client (AzureOpenAI): The OpenAI client instance.
        config (ApiConfiguration): The API configuration instance.
        questions (List[str]): The list of test questions to be processed.
        processed_question_chunks (List[Dict[str, Any]]): The list of pre-processed question chunks.
        logger (logging.Logger): The logger instance.

    Returns:
        List[TestResult]: A list of test results, each containing the original question, its enriched version, and its relevance to the pre-processed chunks.
    """
    question_results: List[TestResult] = []
    
    for question in questions:
        question_result = TestResult()
        question_result.question = question
        question_result.enriched_question_summary = generate_enriched_question(client, config, question, logger)
        embedding = get_text_embedding(client, config, question_result.enriched_question_summary, logger)

        best_hit_relevance = 0  # To track the highest similarity score
        best_hit_summary = None  # To track the summary corresponding to the highest similarity

        for chunk in processed_question_chunks:
            if chunk and isinstance(chunk, dict) :  
                ada_embedding = chunk.get("ada_v2")
                similarity = cosine_similarity(ada_embedding, embedding)

                if similarity > SIMILARITY_THRESHOLD:
                    question_result.hit = True

                # Check if this is the best match so far
                if similarity > best_hit_relevance:
                    best_hit_relevance = similarity
                    best_hit_summary = chunk.get("summary")

        # Set the best hit relevance and summary for the question result
        question_result.hit_relevance = best_hit_relevance
        question_result.hit_summary = best_hit_summary

        question_results.append(question_result)

    logger.debug("Total tests processed: %s", len(question_results))
    return question_results


# Function to read processed chunks from the source directory
def read_processed_chunks(source_dir: str) -> List[Dict[str, Any]]:
    """
    Reads and processes JSON files from a specified source directory.

    Args:
        source_dir (str): The path to the source directory containing JSON files.

    Returns:
        List[Dict[str, Any]]: A list of dictionaries containing the processed JSON data.

    Raises:
        FileNotFoundError: If the source directory or a JSON file is not found.
        IOError: If an I/O error occurs while reading a JSON file.
    """
    processed_question_chunks: List[Dict[str, Any]] = []
    try:
        for filename in os.listdir(source_dir):
            if filename.endswith(".json"):
                file_path = os.path.join(source_dir, filename)
                with open(file_path, "r", encoding="utf-8") as f:
                    chunk = json.load(f)
                    processed_question_chunks = chunk
    except (FileNotFoundError, IOError) as e:
        logger.error(f"Error reading files: {e}")
        raise
    return processed_question_chunks

def save_results(test_destination_dir: str, question_results: List[TestResult]) -> None:
    """
    Saves the test results to a JSON file in the specified destination directory.

    Args:
        test_destination_dir (str): The path to the directory where the test results will be saved.
        question_results (List[TestResult]): A list of TestResult objects containing the test results.

    Returns:
        None
    """
    # Define the output structure with the specified columns
    output_results = [
        {
            "question": result.question,
            "enriched_question": result.enriched_question_summary, 
            "hit": result.hit,
            "summary": result.hit_summary, 
            "hitRelevance": result.hit_relevance,  
        }
        for result in question_results
    ]

    # Create a timestamp for the output file name
    current_datetime = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    output_file = os.path.join(test_destination_dir, f"test_output_v1_{current_datetime}.json")

    try:
        # Open the output file in write mode, using utf-8 encoding and create it if it doesn't exist
        with open(output_file, "w", encoding="utf-8") as f:
            # Write the output results to the file in JSON format 
            json.dump(output_results, f, indent=4)  # Save the results to the file 
        logger.info(f"Test results saved to: {output_file}")
    except IOError as e:
        logger.error(f"Error saving results: {e}")
        raise


# Main function to run tests
def run_tests(config: ApiConfiguration, test_destination_dir: str, source_dir: str, questions: List[str]) -> None:
    """
    Runs tests using the provided configuration, test destination directory, source directory, and questions.

    Args:
        config (ApiConfiguration): The configuration for the API.
        test_destination_dir (str): The directory where the test results will be saved.
        source_dir (str): The directory containing the source files.
        questions (List[str]): A list of questions to be processed.

    Returns:
        None
    """
    client = configure_openai_for_azure(config)

    if not test_destination_dir:
        logger.error("Test data folder not provided")
        raise ValueError("Test destination directory not provided")

    processed_question_chunks = read_processed_chunks(source_dir)
    question_results = process_questions(client, config, questions, processed_question_chunks, logger)
    save_results(test_destination_dir, question_results)
****************************************

****************************************
BoxerEval\tests\BoxerDataTest_v2.py
****************************************
# Copyright (c) 2024 Braid Technologies Ltd

"""
Question Generation (Persona):
Introduces question generation with `gpt-3.5-turbo`, for persona-based generation.
    
Similarity Embedding:
Continues using `text-embedding-ada-002` for similarity calculations.
    
Evaluation LLM:
No evaluation LLM integrated in this version.
"""

# Standard Library Imports
import logging
import os
import json
import sys
from logging import Logger
from typing import List, Dict, Any
import numpy as np
from numpy.linalg import norm
import datetime

# Third-Party Packages
from openai import AzureOpenAI, OpenAIError, BadRequestError, APIConnectionError
from tenacity import retry, wait_random_exponential, stop_after_attempt, retry_if_not_exception_type

# Add the project root and scripts directory to the Python path
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)

# Local Modules
from common.ApiConfiguration import ApiConfiguration
from common.common_functions import get_embedding
from PersonaStrategy import DeveloperPersonaStrategy, TesterPersonaStrategy, BusinessAnalystPersonaStrategy, PersonaStrategy

# Constants
SIMILARITY_THRESHOLD = 0.8
MAX_RETRIES = 15
NUM_QUESTIONS = 100

OPENAI_PERSONA_PROMPT =  "You are an AI assistant helping an application developer understand generative AI. You explain complex concepts in simple language, using Python examples if it helps. You limit replies to 50 words or less. If you don't know the answer, say 'I don't know'. If the question is not related to building AI applications, Python, or Large Language Models (LLMs), say 'That doesn't seem to be about AI'."
ENRICHMENT_PROMPT = "You will be provided with a question about building applications that use generative AI technology. Write a 50 word summary of an article that would be a great answer to the question. Consider enriching the question with additional topics that the question asker might want to understand. Write the summary in the present tense, as though the article exists. If the question is not related to building AI applications, Python, or Large Language Models (LLMs), say 'That doesn't seem to be about AI'.\n"
FOLLOW_UP_PROMPT =  "You will be provided with a summary of an article about building applications that use generative AI technology. Write a question of no more than 10 words that a reader might ask as a follow up to reading the article."

# Setup Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Function to configure the Azure OpenAI API client
def configure_openai_for_azure(config: ApiConfiguration) -> AzureOpenAI:
    """
    Configures OpenAI for Azure using the provided ApiConfiguration.

    Args:
        config (ApiConfiguration): The ApiConfiguration object containing the necessary settings.

    Returns:
        AzureOpenAI: An instance of AzureOpenAI configured with the provided settings.
    """
    return AzureOpenAI(
        azure_endpoint=config.resourceEndpoint, 
        api_key=config.apiKey.strip(),
        api_version=config.apiVersion
    )

# Class to hold test results
class TestResult:
    def __init__(self) -> None:
        """
        Initializes a new instance of the TestResult class.
        
        Sets the initial state of the test result, including the question, enriched question, 
        hit status, hit relevance, hit summary, follow-up question, and follow-up topic.
        
        Args:
            None
        
        Returns:
            None
        """
        self.question: str = ""
        self.enriched_question_summary: str = ""
        self.hit: bool = False
        self.hit_relevance: float = 0.0
        self.follow_up: str = ""
        self.follow_up_on_topic: str = ""

# Function to call the OpenAI API with retry logic
@retry(wait=wait_random_exponential(min=5, max=15), stop=stop_after_attempt(MAX_RETRIES), retry=retry_if_not_exception_type(BadRequestError))
def call_openai_chat(client: AzureOpenAI, messages: List[Dict[str, str]], config: ApiConfiguration, logger: logging.Logger) -> str:
    """
    Retries the OpenAI chat API call with exponential backoff and retry logic.

    :param client: An instance of the AzureOpenAI class.
    :type client: AzureOpenAI
    :param messages: A list of dictionaries representing the messages to be sent to the API.
    :type messages: List[Dict[str, str]]
    :param config: An instance of the ApiConfiguration class.
    :type config: ApiConfiguration
    :param logger: An instance of the logging.Logger class.
    :type logger: logging.Logger
    :return: The content of the first choice in the API response.
    :rtype: str
    :raises RuntimeError: If the finish reason in the API response is not 'stop', 'length', or an empty string.
    :raises OpenAIError: If there is an error with the OpenAI API.
    :raises APIConnectionError: If there is an error with the API connection.
    """
    try:
        response = client.chat.completions.create(
            model=config.azureDeploymentName,
            messages=messages,
            temperature=0.7,
            max_tokens=config.maxTokens,
            top_p=0.0,
            frequency_penalty=0,
            presence_penalty=0,
            timeout=config.openAiRequestTimeout,
        )
        content = response.choices[0].message.content
        finish_reason = response.choices[0].finish_reason

        if finish_reason not in {"stop", "length", ""}:
            logger.warning("Unexpected stop reason: %s", finish_reason)
            logger.warning("Content: %s", content)
            logger.warning("Consider increasing max tokens and retrying.")
            raise RuntimeError("Unexpected finish reason in API response.")

        return content

    except (OpenAIError, APIConnectionError) as e:
        logger.error(f"Error: {e}")
        raise

# Function to retrieve text embeddings using OpenAI API with retry logic
@retry(wait=wait_random_exponential(min=5, max=15), stop=stop_after_attempt(MAX_RETRIES), retry=retry_if_not_exception_type(BadRequestError))
def get_text_embedding(client: AzureOpenAI, config: ApiConfiguration, text: str, logger: Logger) -> np.ndarray:
    """
    Retrieves the text embedding for a given text using the OpenAI API.

    Args:
        client (AzureOpenAI): The OpenAI client instance.
        config (ApiConfiguration): The API configuration instance.
        text (str): The text for which to retrieve the embedding.
        logger (Logger): The logger instance.

    Returns:
        np.ndarray: The text embedding as a numpy array.

    Raises:
        OpenAIError: If an error occurs while retrieving the text embedding.
    """
    try:
        embedding = get_embedding(text, client, config)
        return np.array(embedding)
    except OpenAIError as e:
        logger.error(f"Error getting text embedding: {e}")
        raise

# Function to calculate cosine similarity between two vectors
def cosine_similarity(a: np.ndarray, b: np.ndarray) -> float:
    """
    Calculates the cosine similarity between two vectors.

    Args:
        a (np.ndarray): The first vector.
        b (np.ndarray): The second vector.

    Returns:
        float: The cosine similarity between the two vectors.

    Raises:
        ValueError: If the input vectors are not numpy arrays or convertible to numpy arrays.
        ValueError: If the input vectors do not have the same shape.
        ValueError: If either of the input vectors is a zero vector.
    """
    try:
        a, b = np.array(a), np.array(b)
    except Exception:
        raise ValueError("Input vectors must be numpy arrays or convertible to numpy arrays")

    if a.shape != b.shape:
        raise ValueError("Input vectors must have the same shape")

    dot_product = np.dot(a, b)
    a_norm, b_norm = norm(a), norm(b)

    if a_norm == 0 or b_norm == 0:
        raise ValueError("Input vectors must not be zero vectors")

    return dot_product / (a_norm * b_norm)

# Function to generate enriched questions using OpenAI API
@retry(wait=wait_random_exponential(min=5, max=15), stop=stop_after_attempt(MAX_RETRIES), retry=retry_if_not_exception_type(BadRequestError))
def generate_enriched_question(client: AzureOpenAI, config: ApiConfiguration, question: str, logger: logging.Logger) -> str:
    """
    Generates an enriched question using the OpenAI API.

    Args:
        client (AzureOpenAI): The OpenAI client instance.
        config (ApiConfiguration): The API configuration instance.
        question (str): The question to be enriched.
        logger (logging.Logger): The logger instance.

    Returns:
        str: The enriched question.

    Raises:
        BadRequestError: If the API request fails.
    """
    messages = [
        {"role": "system", "content": OPENAI_PERSONA_PROMPT},
        {"role": "user", "content": ENRICHMENT_PROMPT + "Question: " + question},
    ]
    logger.info("Making API request to OpenAI...")
    logger.info("Request payload: %s", messages)

    response = call_openai_chat(client, messages, config, logger)
    logger.info("API response received: %s", response)

    return response

def process_questions(client: AzureOpenAI, config: ApiConfiguration, questions: List[str], processed_question_chunks: List[Dict[str, Any]], logger: logging.Logger) -> List[TestResult]:
    """
    Processes a list of test questions and evaluates their relevance based on their similarity to pre-processed question chunks.

    Args:
        client (AzureOpenAI): The OpenAI client instance.
        config (ApiConfiguration): The API configuration instance.
        questions (List[str]): The list of test questions to be processed.
        processed_question_chunks (List[Dict[str, Any]]): The list of pre-processed question chunks.
        logger (logging.Logger): The logger instance.

    Returns:
        List[TestResult]: A list of test results, each containing the original question, its enriched version, and its relevance to the pre-processed chunks.
    """
    question_results: List[TestResult] = []
    
    for question in questions:
        question_result = TestResult()
        question_result.question = question
        question_result.enriched_question_summary = generate_enriched_question(client, config, question, logger)
        embedding = get_text_embedding(client, config, question_result.enriched_question_summary, logger)

        best_hit_relevance = 0  # To track the highest similarity score
        best_hit_summary = None  # To track the summary corresponding to the highest similarity

        for chunk in processed_question_chunks:
            if chunk and isinstance(chunk, dict) :  
                ada_embedding = chunk.get("ada_v2")
                similarity = cosine_similarity(ada_embedding, embedding)

                if similarity > SIMILARITY_THRESHOLD:
                    question_result.hit = True

                # Check if this is the best match so far
                if similarity > best_hit_relevance:
                    best_hit_relevance = similarity
                    best_hit_summary = chunk.get("summary")

        # Set the best hit relevance and summary for the question result
        question_result.hit_relevance = best_hit_relevance
        question_result.hit_summary = best_hit_summary

        question_results.append(question_result)

    logger.debug("Total tests processed: %s", len(question_results))
    return question_results


# Function to read processed chunks from the source directory
def read_processed_chunks(source_dir: str) -> List[Dict[str, Any]]:
    """
    Reads and processes JSON files from a specified source directory.

    Args:
        source_dir (str): The path to the source directory containing JSON files.

    Returns:
        List[Dict[str, Any]]: A list of dictionaries containing the processed JSON data.

    Raises:
        FileNotFoundError: If the source directory or a JSON file is not found.
        IOError: If an I/O error occurs while reading a JSON file.
    """
    processed_question_chunks: List[Dict[str, Any]] = []
    try:
        for filename in os.listdir(source_dir):
            if filename.endswith(".json"):
                file_path = os.path.join(source_dir, filename)
                with open(file_path, "r", encoding="utf-8") as f:
                    chunk = json.load(f)
                    processed_question_chunks = chunk
    except (FileNotFoundError, IOError) as e:
        logger.error(f"Error reading files: {e}")
        raise
    
    if not processed_question_chunks:
        logger.error("Processed question chunks are None or empty.")
    
    return processed_question_chunks

# Function to save the results and generated questions
def save_results(test_destination_dir: str, question_results: List[TestResult], test_mode: str) -> None:
    # Define the output structure with the specified columns
    """
    Saves the test results to a JSON file in the specified destination directory.

    Args:
        test_destination_dir (str): The path to the directory where the test results will be saved.
        question_results (List[TestResult]): A list of TestResult objects containing the test results.
        test_mode (str): The test mode to be used in the output file name.

    Returns:
        None
    """
    output_data = [
        {
            "question": result.question,
            "enriched_question": result.enriched_question_summary, 
            "hit": result.hit,
            "summary": result.hit_summary, 
            "hitRelevance": result.hit_relevance,  
        }
        for result in question_results
    ]

    current_datetime = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    output_file = os.path.join(test_destination_dir, f"test_output_v2_{test_mode}_{current_datetime}.json")

    try:
        with open(output_file, "w", encoding="utf-8") as f:
            json.dump(output_data, f, indent=4)
        logger.info(f"Test results saved to: {output_file}")
    except IOError as e:
        logger.error(f"Error saving results: {e}")
        raise



# Main test-running function
def run_tests(config: ApiConfiguration, test_destination_dir: str, source_dir: str, num_questions: int = 100, questions: List[str] = None, persona_strategy: PersonaStrategy = None) -> None:
    """
    Runs tests using the provided configuration, test destination directory, source directory, and questions.

    Args:
        config (ApiConfiguration): The configuration for the API.
        test_destination_dir (str): The path to the directory where the test results will be saved.
        source_dir (str): The directory containing the source files.
        num_questions (int): The number of questions to generate using the persona strategy.
        questions (List[str]): A list of questions to be processed.
        persona_strategy (PersonaStrategy): The persona strategy to use for generating questions.

    Returns:
        None
    """
    client = configure_openai_for_azure(config)

    if not test_destination_dir:
        logger.error("Test data folder not provided")
        raise ValueError("Test destination directory not provided")
    
    if persona_strategy:
        questions = persona_strategy.generate_questions(client, config, NUM_QUESTIONS, logger)

    if not questions:
        logger.error("Generated questions are None or empty. Exiting the test.")
        return
    # Determine the test mode based on the strategy
    test_mode = persona_strategy.__class__.__name__.replace('PersonaStrategy', '').lower()

    processed_question_chunks = read_processed_chunks(source_dir)
    question_results = process_questions(client, config, questions, processed_question_chunks, logger)
    save_results(test_destination_dir, question_results, test_mode)
****************************************

****************************************
BoxerEval\tests\BoxerDataTest_v3.py
****************************************
# Copyright (c) 2024 Braid Technologies Ltd
"""
Question Generation (Persona):
Upgrades to `gpt-4o` for persona-based question generation.
    
Similarity Embedding:
Retains `text-embedding-ada-002` for embedding and similarity computations.
    
Evaluation LLM:
No evaluation LLM is included.
"""

# Standard Library Imports
import logging
import os
import json
import sys
from logging import Logger
from typing import List, Dict, Any
import numpy as np
from numpy.linalg import norm
import datetime


# Third-Party Packages
from openai import AzureOpenAI, OpenAIError, BadRequestError, APIConnectionError
from tenacity import retry, wait_random_exponential, stop_after_attempt, retry_if_not_exception_type

# Add the project root and scripts directory to the Python path
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)

# Local Modules
from common.ApiConfiguration import ApiConfiguration
from common.common_functions import get_embedding
from PersonaStrategy import DeveloperPersonaStrategy, TesterPersonaStrategy, BusinessAnalystPersonaStrategy, PersonaStrategy

# Constants
SIMILARITY_THRESHOLD = 0.8
MAX_RETRIES = 15
NUM_QUESTIONS = 100

OPENAI_PERSONA_PROMPT =  "You are an AI assistant helping an application developer understand generative AI. You explain complex concepts in simple language, using Python examples if it helps. You limit replies to 50 words or less. If you don't know the answer, say 'I don't know'. If the question is not related to building AI applications, Python, or Large Language Models (LLMs), say 'That doesn't seem to be about AI'."
ENRICHMENT_PROMPT = "You will be provided with a question about building applications that use generative AI technology. Write a 50 word summary of an article that would be a great answer to the question. Consider enriching the question with additional topics that the question asker might want to understand. Write the summary in the present tense, as though the article exists. If the question is not related to building AI applications, Python, or Large Language Models (LLMs), say 'That doesn't seem to be about AI'.\n"
FOLLOW_UP_PROMPT =  "You will be provided with a summary of an article about building applications that use generative AI technology. Write a question of no more than 10 words that a reader might ask as a follow up to reading the article."
FOLLOW_UP_ON_TOPIC_PROMPT = "You are an AI assistant helping a team of developers understand AI. You explain complex concepts in simple language. Respond 'yes' if the follow-up question is about AI, otherwise respond 'no'."

# Setup Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Function to configure the Azure OpenAI API client
def configure_openai_for_azure(config: ApiConfiguration) -> AzureOpenAI:
    """
    Configures OpenAI for Azure using the provided ApiConfiguration.

    Args:
        config (ApiConfiguration): The ApiConfiguration object containing the necessary settings.

    Returns:
        AzureOpenAI: An instance of AzureOpenAI configured with the provided settings.
    """
    return AzureOpenAI(
        azure_endpoint=config.resourceEndpoint, 
        api_key=config.apiKey.strip(),
        api_version=config.apiVersion
    )

# Class to hold test results
class TestResult:
    def __init__(self) -> None:
        """
        Initializes a new instance of the TestResult class.
        
        Sets the initial state of the test result, including the question, enriched question, 
        hit status, hit relevance, hit summary, follow-up question, and follow-up topic.
        
        Args:
            None
        
        Returns:
            None
        """
        self.question: str = ""
        self.enriched_question_summary: str = ""
        self.hit: bool = False
        self.hit_relevance: float = 0.0
        self.follow_up: str = ""  # Adding followUp field
        self.follow_up_on_topic: str = ""  # Adding followUpOnTopic field

# Function to call the OpenAI API with retry logic
@retry(wait=wait_random_exponential(min=5, max=15), stop=stop_after_attempt(MAX_RETRIES), retry=retry_if_not_exception_type(BadRequestError))
def call_openai_chat(client: AzureOpenAI, messages: List[Dict[str, str]], config: ApiConfiguration, logger: logging.Logger) -> str:
    """
    Retries the OpenAI chat API call with exponential backoff and retry logic.

    :param client: An instance of the AzureOpenAI class.
    :type client: AzureOpenAI
    :param messages: A list of dictionaries representing the messages to be sent to the API.
    :type messages: List[Dict[str, str]]
    :param config: An instance of the ApiConfiguration class.
    :type config: ApiConfiguration
    :param logger: An instance of the logging.Logger class.
    :type logger: logging.Logger
    :return: The content of the first choice in the API response.
    :rtype: str
    :raises RuntimeError: If the finish reason in the API response is not 'stop', 'length', or an empty string.
    :raises OpenAIError: If there is an error with the OpenAI API.
    :raises APIConnectionError: If there is an error with the API connection.
    """
    try:
        response = client.chat.completions.create(
            model=config.azureDeploymentName,
            messages=messages,
            temperature=0.7,
            max_tokens=config.maxTokens,
            top_p=0.0,
            frequency_penalty=0,
            presence_penalty=0,
            timeout=config.openAiRequestTimeout,
        )
        content = response.choices[0].message.content
        finish_reason = response.choices[0].finish_reason

        if finish_reason not in {"stop", "length", ""}:
            logger.warning("Unexpected stop reason: %s", finish_reason)
            logger.warning("Content: %s", content)
            logger.warning("Consider increasing max tokens and retrying.")
            raise RuntimeError("Unexpected finish reason in API response.")

        return content

    except (OpenAIError, APIConnectionError) as e:
        logger.error(f"Error: {e}")
        raise

# Function to retrieve text embeddings using OpenAI API with retry logic
@retry(wait=wait_random_exponential(min=5, max=15), stop=stop_after_attempt(MAX_RETRIES), retry=retry_if_not_exception_type(BadRequestError))
def get_text_embedding(client: AzureOpenAI, config: ApiConfiguration, text: str, logger: Logger) -> np.ndarray:
    """
    Retrieves the text embedding for a given text using the OpenAI API.

    Args:
        client (AzureOpenAI): The OpenAI client instance.
        config (ApiConfiguration): The API configuration instance.
        text (str): The text for which to retrieve the embedding.
        logger (Logger): The logger instance.

    Returns:
        np.ndarray: The text embedding as a numpy array.

    Raises:
        OpenAIError: If an error occurs while retrieving the text embedding.
    """
    try:
        embedding = get_embedding(text, client, config)
        return np.array(embedding)
    except OpenAIError as e:
        logger.error(f"Error getting text embedding: {e}")
        raise

# Function to calculate cosine similarity between two vectors
def cosine_similarity(a: np.ndarray, b: np.ndarray) -> float:
    """
    Calculates the cosine similarity between two vectors.

    Args:
        a (np.ndarray): The first vector.
        b (np.ndarray): The second vector.

    Returns:
        float: The cosine similarity between the two vectors.

    Raises:
        ValueError: If the input vectors are not numpy arrays or convertible to numpy arrays.
        ValueError: If the input vectors do not have the same shape.
        ValueError: If either of the input vectors is a zero vector.
    """
    try:
        a, b = np.array(a), np.array(b)
    except Exception:
        raise ValueError("Input vectors must be numpy arrays or convertible to numpy arrays")

    if a.shape != b.shape:
        raise ValueError("Input vectors must have the same shape")

    dot_product = np.dot(a, b)
    a_norm, b_norm = norm(a), norm(b)

    if a_norm == 0 or b_norm == 0:
        raise ValueError("Input vectors must not be zero vectors")

    return dot_product / (a_norm * b_norm)

# Function to generate enriched questions using OpenAI API
@retry(wait=wait_random_exponential(min=5, max=15), stop=stop_after_attempt(MAX_RETRIES), retry=retry_if_not_exception_type(BadRequestError))
def generate_enriched_question(client: AzureOpenAI, config: ApiConfiguration, question: str, logger: logging.Logger) -> str:
    """
    Generates an enriched question using the OpenAI API.

    Args:
        client (AzureOpenAI): The OpenAI client instance.
        config (ApiConfiguration): The API configuration instance.
        question (str): The question to be enriched.
        logger (logging.Logger): The logger instance.

    Returns:
        str: The enriched question.

    Raises:
        BadRequestError: If the API request fails.
    """
    messages = [
        {"role": "system", "content": OPENAI_PERSONA_PROMPT},
        {"role": "user", "content": ENRICHMENT_PROMPT + "Question: " + question},
    ]
    logger.info("Making API request to OpenAI...")
    logger.info("Request payload: %s", messages)

    response = call_openai_chat(client, messages, config, logger)
    logger.info("API response received: %s", response)

    return response

def generate_enriched_question(client: AzureOpenAI, config: ApiConfiguration, question: str, logger: logging.Logger) -> str:
    messages = [
        {"role": "system", "content": OPENAI_PERSONA_PROMPT},
        {"role": "user", "content": ENRICHMENT_PROMPT + "Question: " + question},
    ]
    logger.info("Making API request to OpenAI...")
    logger.info("Request payload: %s", messages)

    response = call_openai_chat(client, messages, config, logger)
    logger.info("API response received: %s", response)

    return response


def generate_follow_up_question(client: AzureOpenAI, config: ApiConfiguration, text: str, logger: logging.Logger) -> str:
    messages = [
        {"role": "system", "content": FOLLOW_UP_PROMPT},
        {"role": "user", "content": text},
    ]
    response = call_openai_chat(client, messages, config, logger)
    return response


def assess_follow_up_on_topic(client: AzureOpenAI, config: ApiConfiguration, follow_up: str, logger: logging.Logger) -> str:
    messages = [
        {"role": "system", "content": FOLLOW_UP_ON_TOPIC_PROMPT},
        {"role": "user", "content": follow_up},
    ]
    response = call_openai_chat(client, messages, config, logger)
    return response

def process_questions(client: AzureOpenAI, config: ApiConfiguration, questions: List[str], processed_question_chunks: List[Dict[str, Any]], logger: logging.Logger) -> List[TestResult]:
    """
    Processes a list of test questions and evaluates their relevance based on their similarity to pre-processed question chunks.

    Args:
        client (AzureOpenAI): The OpenAI client instance.
        config (ApiConfiguration): The API configuration instance.
        questions (List[str]): The list of test questions to be processed.
        processed_question_chunks (List[Dict[str, Any]]): The list of pre-processed question chunks.
        logger (logging.Logger): The logger instance.

    Returns:
        List[TestResult]: A list of test results, each containing the original question, its enriched version, and its relevance to the pre-processed chunks.
    """
    question_results: List[TestResult] = []
    
    for question in questions:
        question_result = TestResult()
        question_result.question = question
        question_result.enriched_question_summary = generate_enriched_question(client, config, question, logger)  # Generate enriched question summary
        
        embedding = get_text_embedding(client, config, question_result.enriched_question_summary, logger)  # Get embedding for the enriched question

        best_hit_relevance = 0  # To track the highest similarity score
        best_hit_summary = None  # To track the summary corresponding to the highest similarity

        # Iterate through the processed chunks to find the best hit
        for chunk in processed_question_chunks:
            if chunk and isinstance(chunk, dict):
                ada_embedding = chunk.get("ada_v2")
                similarity = cosine_similarity(ada_embedding, embedding)

                if similarity > SIMILARITY_THRESHOLD:
                    question_result.hit = True

                # Check if this is the best match so far
                if similarity > best_hit_relevance:
                    best_hit_relevance = similarity
                    best_hit_summary = chunk.get("summary")

        # Set the best hit relevance and summary for the question result
        question_result.hit_relevance = best_hit_relevance
        question_result.hit_summary = best_hit_summary

        # Now, generate the follow-up question if a best hit summary exists
        if question_result.hit_summary:
            question_result.follow_up = generate_follow_up_question(client, config, question_result.hit_summary, logger)  # Generate follow-up question
            question_result.follow_up_on_topic = assess_follow_up_on_topic(client, config, question_result.follow_up, logger)  # Assess if follow-up question is on-topic

        question_results.append(question_result)

    logger.debug("Total tests processed: %s", len(question_results))
    return question_results

# Function to read processed chunks from the source directory
def read_processed_chunks(source_dir: str) -> List[Dict[str, Any]]:
    """
    Reads and processes JSON files from a specified source directory.

    Args:
        source_dir (str): The path to the source directory containing JSON files.

    Returns:
        List[Dict[str, Any]]: A list of dictionaries containing the processed JSON data.

    Raises:
        FileNotFoundError: If the source directory or a JSON file is not found.
        IOError: If an I/O error occurs while reading a JSON file.
    """
    processed_question_chunks: List[Dict[str, Any]] = []
    try:
        for filename in os.listdir(source_dir):
            if filename.endswith(".json"):
                file_path = os.path.join(source_dir, filename)
                with open(file_path, "r", encoding="utf-8") as f:
                    chunk = json.load(f)
                    processed_question_chunks = chunk
    except (FileNotFoundError, IOError) as e:
        logger.error(f"Error reading files: {e}")
        raise
    
    if not processed_question_chunks:
        logger.error("Processed question chunks are None or empty.")
    
    return processed_question_chunks

# Function to save the results and generated questions
def save_results(test_destination_dir: str, question_results: List[TestResult], test_mode: str) -> None:
    """
    Saves the test results to a JSON file in the specified destination directory.

    Args:
        test_destination_dir (str): The path to the directory where the test results will be saved.
        question_results (List[TestResult]): A list of TestResult objects containing the test results.
        test_mode (str): The test mode to be used in the output file name.

    Returns:
        None
    """
    output_data = [
        {
            "question": result.question,
            "enriched_question": result.enriched_question_summary, 
            "hit": result.hit,
            "summary": result.hit_summary, 
            "hitRelevance": result.hit_relevance,
            "follow_up": result.follow_up,  # Add follow_up to the output
            "follow_up_on_topic": result.follow_up_on_topic  # Add follow_up_on_topic to the output
        }
        for result in question_results
    ]

    current_datetime = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    output_file = os.path.join(test_destination_dir, f"test_output_v3_{test_mode}_{current_datetime}.json")

    try:
        with open(output_file, "w", encoding="utf-8") as f:
            json.dump(output_data, f, indent=4)
        logger.info(f"Test results saved to: {output_file}")
    except IOError as e:
        logger.error(f"Error saving results: {e}")
        raise

# Main test-running function
def run_tests(config: ApiConfiguration, test_destination_dir: str, source_dir: str, num_questions: int = 100, questions: List[str] = None, persona_strategy: PersonaStrategy = None) -> None:
    """
    Runs tests using the provided configuration, test destination directory, source directory, and questions.

    Args:
        config (ApiConfiguration): The configuration for the API.
        test_destination_dir (str): The path to the directory where the test results will be saved.
        source_dir (str): The directory containing the source files.
        num_questions (int): The number of questions to generate using the persona strategy.
        questions (List[str]): A list of questions to be processed.
        persona_strategy (PersonaStrategy): The persona strategy to use for generating questions.

    Returns:
        None
    """
    client = configure_openai_for_azure(config)

    if not test_destination_dir:
        logger.error("Test data folder not provided")
        raise ValueError("Test destination directory not provided")
    
    if persona_strategy:
        questions = persona_strategy.generate_questions(client, config, NUM_QUESTIONS, logger)

    if not questions:
        logger.error("Generated questions are None or empty. Exiting the test.")
        return
    # Determine the test mode based on the strategy
    test_mode = persona_strategy.__class__.__name__.replace('PersonaStrategy', '').lower()

    processed_question_chunks = read_processed_chunks(source_dir)
    question_results = process_questions(client, config, questions, processed_question_chunks, logger)
    save_results(test_destination_dir, question_results, test_mode)
****************************************

****************************************
BoxerEval\tests\BoxerDataTest_v4.py
****************************************
# Copyright (c) 2024 Braid Technologies Ltd

"""
Question Generation (Persona):
Continues with `gpt-4o` for persona-based question generation.
    
Similarity Embedding:
Still uses `text-embedding-ada-002` for similarity comparisons.
    
Evaluation LLM:
Introduces `gemini-1.5-pro` as the evaluation LLM to assess the quality of GPT-4o outputs.
"""

# Standard Library Imports
import logging
import os
import json
import sys
from logging import Logger
from typing import List, Dict, Any
import numpy as np
from numpy.linalg import norm
import datetime


# Third-Party Packages
from openai import AzureOpenAI, OpenAIError, BadRequestError, APIConnectionError
from tenacity import retry, wait_random_exponential, stop_after_attempt, retry_if_not_exception_type
from GeminiEvaluator import GeminiEvaluator

# Add the project root and scripts directory to the Python path
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)

# Local Modules
from common.ApiConfiguration import ApiConfiguration
from common.common_functions import get_embedding
from PersonaStrategy import DeveloperPersonaStrategy, TesterPersonaStrategy, BusinessAnalystPersonaStrategy, PersonaStrategy

# Constants
SIMILARITY_THRESHOLD = 0.8
MAX_RETRIES = 15
NUM_QUESTIONS = 100

OPENAI_PERSONA_PROMPT =  "You are an AI assistant helping an application developer understand generative AI. You explain complex concepts in simple language, using Python examples if it helps. You limit replies to 50 words or less. If you don't know the answer, say 'I don't know'. If the question is not related to building AI applications, Python, or Large Language Models (LLMs), say 'That doesn't seem to be about AI'."
ENRICHMENT_PROMPT = "You will be provided with a question about building applications that use generative AI technology. Write a 50 word summary of an article that would be a great answer to the question. Consider enriching the question with additional topics that the question asker might want to understand. Write the summary in the present tense, as though the article exists. If the question is not related to building AI applications, Python, or Large Language Models (LLMs), say 'That doesn't seem to be about AI'.\n"
FOLLOW_UP_PROMPT =  "You will be provided with a summary of an article about building applications that use generative AI technology. Write a question of no more than 10 words that a reader might ask as a follow up to reading the article."
FOLLOW_UP_ON_TOPIC_PROMPT = "You are an AI assistant helping a team of developers understand AI. You explain complex concepts in simple language. Respond 'yes' if the follow-up question is about AI, otherwise respond 'no'."

# Setup Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

gemini_evaluator = GeminiEvaluator()  #initiating an instance of the GeminiEvaluator

# Function to configure the Azure OpenAI API client
def configure_openai_for_azure(config: ApiConfiguration) -> AzureOpenAI:

    """
    Configures OpenAI for Azure using the provided ApiConfiguration.

    Args:
        config (ApiConfiguration): The ApiConfiguration object containing the necessary settings.

    Returns:
        AzureOpenAI: An instance of AzureOpenAI configured with the provided settings.
    """
    return AzureOpenAI(
        azure_endpoint=config.resourceEndpoint, 
        api_key=config.apiKey.strip(),
        api_version=config.apiVersion
    )

# Class to hold test results
class TestResult:
    def __init__(self) -> None:

        """
        Initializes a new instance of the TestResult class.

        Sets the initial state of the test result, including the question, enriched question, 
        hit status, hit relevance, hit summary, follow-up question, and follow-up topic.
        
        Args:
            None
        
        Returns:
            None
        """
        self.question: str = ""
        self.enriched_question_summary: str = ""
        self.hit: bool = False
        self.hit_relevance: float = 0.0
        self.follow_up: str = ""  # Adding followUp field
        self.follow_up_on_topic: str = ""  # Adding followUpOnTopic field
        self.gemini_evaluation: str = ""  # Field to store Gemini LLM evaluation

# Function to call the OpenAI API with retry logic
@retry(wait=wait_random_exponential(min=5, max=15), stop=stop_after_attempt(MAX_RETRIES), retry=retry_if_not_exception_type(BadRequestError))
def call_openai_chat(client: AzureOpenAI, messages: List[Dict[str, str]], config: ApiConfiguration, logger: logging.Logger) -> str:
    """
    Retries the OpenAI chat API call with exponential backoff and retry logic.

    :param client: An instance of the AzureOpenAI class.
    :type client: AzureOpenAI
    :param messages: A list of dictionaries representing the messages to be sent to the API.
    :type messages: List[Dict[str, str]]
    :param config: An instance of the ApiConfiguration class.
    :type config: ApiConfiguration
    :param logger: An instance of the logging.Logger class.
    :type logger: logging.Logger
    :return: The content of the first choice in the API response.
    :rtype: str
    :raises RuntimeError: If the finish reason in the API response is not 'stop', 'length', or an empty string.
    :raises OpenAIError: If there is an error with the OpenAI API.
    :raises APIConnectionError: If there is an error with the API connection.
    """

    try:
        response = client.chat.completions.create(
            model=config.azureDeploymentName,
            messages=messages,
            temperature=0.7,
            max_tokens=config.maxTokens,
            top_p=0.0,
            frequency_penalty=0,
            presence_penalty=0,
            timeout=config.openAiRequestTimeout,
        )
        content = response.choices[0].message.content
        finish_reason = response.choices[0].finish_reason

        if finish_reason not in {"stop", "length", ""}:
            logger.warning("Unexpected stop reason: %s", finish_reason)
            logger.warning("Content: %s", content)
            logger.warning("Consider increasing max tokens and retrying.")
            raise RuntimeError("Unexpected finish reason in API response.")

        return content

    except (OpenAIError, APIConnectionError) as e:
        logger.error(f"Error: {e}")
        raise


# Function to retrieve text embeddings using OpenAI API with retry logic
@retry(wait=wait_random_exponential(min=5, max=15), stop=stop_after_attempt(MAX_RETRIES), retry=retry_if_not_exception_type(BadRequestError))
def get_text_embedding(client: AzureOpenAI, config: ApiConfiguration, text: str, logger: Logger) -> np.ndarray:
    """
    Retrieves the text embedding for a given text using the OpenAI API.

    Args:
        client (AzureOpenAI): The OpenAI client instance.
        config (ApiConfiguration): The API configuration instance.
        text (str): The text for which to retrieve the embedding.
        logger (Logger): The logger instance.

    Returns:
        np.ndarray: The text embedding as a numpy array.

    Raises:
        OpenAIError: If an error occurs while retrieving the text embedding.
    """

    try:
        embedding = get_embedding(text, client, config)
        return np.array(embedding)
    except OpenAIError as e:
        logger.error(f"Error getting text embedding: {e}")
        raise

# Function to calculate cosine similarity between two vectors
def cosine_similarity(a: np.ndarray, b: np.ndarray) -> float:
    """
    Calculates the cosine similarity between two vectors.

    Args:
        a (np.ndarray): The first vector.
        b (np.ndarray): The second vector.

    Returns:
        float: The cosine similarity between the two vectors.

    Raises:
        ValueError: If the input vectors are not numpy arrays or convertible to numpy arrays.
        ValueError: If the input vectors do not have the same shape.
        ValueError: If either of the input vectors is a zero vector.
    """

    try:
        a, b = np.array(a), np.array(b)
    except Exception:
        raise ValueError("Input vectors must be numpy arrays or convertible to numpy arrays")

    if a.shape != b.shape:
        raise ValueError("Input vectors must have the same shape")

    dot_product = np.dot(a, b)
    a_norm, b_norm = norm(a), norm(b)

    if a_norm == 0 or b_norm == 0:
        raise ValueError("Input vectors must not be zero vectors")

    return dot_product / (a_norm * b_norm)

# Function to generate enriched questions using OpenAI API
@retry(wait=wait_random_exponential(min=5, max=15), stop=stop_after_attempt(MAX_RETRIES), retry=retry_if_not_exception_type(BadRequestError))
def generate_enriched_question(client: AzureOpenAI, config: ApiConfiguration, question: str, logger: logging.Logger) -> str:
    """
    Generates an enriched question using the OpenAI API.

    Args:
        client (AzureOpenAI): The OpenAI client instance.
        config (ApiConfiguration): The API configuration instance.
        question (str): The question to be enriched.
        logger (logging.Logger): The logger instance.

    Returns:
        str: The enriched question.

    Raises:
        BadRequestError: If the API request fails.
    """
    messages = [
        {"role": "system", "content": OPENAI_PERSONA_PROMPT},
        {"role": "user", "content": ENRICHMENT_PROMPT + "Question: " + question},
    ]
    logger.info("Making API request to OpenAI...")
    logger.info("Request payload: %s", messages)

    response = call_openai_chat(client, messages, config, logger)
    logger.info("API response received: %s", response)

    return response

def generate_enriched_question(client: AzureOpenAI, config: ApiConfiguration, question: str, logger: logging.Logger) -> str:
    """
    Generates an enriched question using the OpenAI API.

    Args:
        client (AzureOpenAI): The OpenAI client instance.
        config (ApiConfiguration): The API configuration instance.
        question (str): The question to be enriched.
        logger (logging.Logger): The logger instance.

    Returns:
        str: The enriched question.

    Raises:
        BadRequestError: If the API request fails.
    """
    messages = [
        {"role": "system", "content": OPENAI_PERSONA_PROMPT},
        {"role": "user", "content": ENRICHMENT_PROMPT + "Question: " + question},
    ]
    logger.info("Making API request to OpenAI...")
    logger.info("Request payload: %s", messages)

    response = call_openai_chat(client, messages, config, logger)
    logger.info("API response received: %s", response)

    return response


def generate_follow_up_question(client: AzureOpenAI, config: ApiConfiguration, text: str, logger: logging.Logger) -> str:
    """
    Generates a follow-up question using the OpenAI API.

    Args:
        client (AzureOpenAI): The OpenAI client instance.
        config (ApiConfiguration): The API configuration instance.
        text (str): The text to generate a follow-up question about.
        logger (logging.Logger): The logger instance.

    Returns:
        str: The follow-up question.

    Raises:
        BadRequestError: If the API request fails.
    """
    messages = [
        {"role": "system", "content": FOLLOW_UP_PROMPT},
        {"role": "user", "content": text},
    ]
    response = call_openai_chat(client, messages, config, logger)
    return response


def assess_follow_up_on_topic(client: AzureOpenAI, config: ApiConfiguration, follow_up: str, logger: logging.Logger) -> str:
    """
    Checks if a follow-up question is about AI using the OpenAI API.

    Args:
        client (AzureOpenAI): The OpenAI client instance.
        config (ApiConfiguration): The API configuration instance.
        follow_up (str): The follow-up question to assess.
        logger (logging.Logger): The logger instance.

    Returns:
        str: 'yes' if the follow-up question is about AI, 'no' otherwise.

    Raises:
        BadRequestError: If the API request fails.
    """
   
    messages = [
        {"role": "system", "content": FOLLOW_UP_ON_TOPIC_PROMPT},
        {"role": "user", "content": follow_up},
    ]
    response = call_openai_chat(client, messages, config, logger)
    return response

def process_questions(client: AzureOpenAI, config: ApiConfiguration, questions: List[str], processed_question_chunks: List[Dict[str, Any]], logger: logging.Logger) -> List[TestResult]:
    """
    Processes a list of test questions and evaluates their relevance based on their similarity to pre-processed question chunks.

    Args:
        client (AzureOpenAI): The OpenAI client instance.
        config (ApiConfiguration): The API configuration instance.
        questions (List[str]): The list of test questions to be processed.
        processed_question_chunks (List[Dict[str, Any]]): The list of pre-processed question chunks.
        logger (logging.Logger): The logger instance.

    Returns:
        List[TestResult]: A list of test results, each containing the original question, its enriched version, and its relevance to the pre-processed chunks.
    """
    question_results: List[TestResult] = []
    
    for question in questions:
        question_result = TestResult()
        question_result.question = question
        question_result.enriched_question_summary = generate_enriched_question(client, config, question, logger)  # Generate enriched question summary
        
        embedding = get_text_embedding(client, config, question_result.enriched_question_summary, logger)  # Get embedding for the enriched question

        best_hit_relevance = 0  # To track the highest similarity score
        best_hit_summary = None  # To track the summary corresponding to the highest similarity

        # Iterate through the processed chunks to find the best hit
        for chunk in processed_question_chunks:
            if chunk and isinstance(chunk, dict):
                ada_embedding = chunk.get("ada_v2")
                similarity = cosine_similarity(ada_embedding, embedding)

                if similarity > SIMILARITY_THRESHOLD:
                    question_result.hit = True

                # Check if this is the best match so far
                if similarity > best_hit_relevance:
                    best_hit_relevance = similarity
                    best_hit_summary = chunk.get("summary")

        # Set the best hit relevance and summary for the question result
        question_result.hit_relevance = best_hit_relevance
        question_result.hit_summary = best_hit_summary

        # Now, generate the follow-up question if a best hit summary exists
        if question_result.hit_summary:
            question_result.follow_up = generate_follow_up_question(client, config, question_result.hit_summary, logger)  # Generate follow-up question
            question_result.follow_up_on_topic = assess_follow_up_on_topic(client, config, question_result.follow_up, logger)  # Assess if follow-up question is on-topic

        
        # Use Gemini to evaluate the Azure OpenAI enriched summary
        question_result.gemini_evaluation = gemini_evaluator.evaluate(
            question_result.question,  # This is the original question
            question_result.enriched_question_summary # This is the summary generated by Azure OpenAI
            ) 

        question_results.append(question_result)

    logger.debug("Total tests processed: %s", len(question_results))
    return question_results

# Function to read processed chunks from the source directory
def read_processed_chunks(source_dir: str) -> List[Dict[str, Any]]:
    """
    Reads and processes JSON files from a specified source directory.

    Args:
        source_dir (str): The path to the source directory containing JSON files.

    Returns:
        List[Dict[str, Any]]: A list of dictionaries containing the processed JSON data.

    Raises:
        FileNotFoundError: If the source directory or a JSON file is not found.
        IOError: If an I/O error occurs while reading a JSON file.
    """
    processed_question_chunks: List[Dict[str, Any]] = []
    try:
        for filename in os.listdir(source_dir):
            if filename.endswith(".json"):
                file_path = os.path.join(source_dir, filename)
                with open(file_path, "r", encoding="utf-8") as f:
                    chunk = json.load(f)
                    processed_question_chunks = chunk
    except (FileNotFoundError, IOError) as e:
        logger.error(f"Error reading files: {e}")
        raise
    
    if not processed_question_chunks:
        logger.error("Processed question chunks are None or empty.")
    
    return processed_question_chunks

# Function to save the results and generated questions
def save_results(test_destination_dir: str, question_results: List[TestResult], test_mode: str) -> None:
    """
    Saves the test results to a JSON file in the specified destination directory.

    Args:
        test_destination_dir (str): The path to the directory where the test results will be saved.
        question_results (List[TestResult]): A list of TestResult objects containing the test results.
        test_mode (str): The test mode to be used in the output file name.

    Returns:
        None

    Raises:
        IOError: If an I/O error occurs while writing the JSON file.
    """
    output_data = [
        {
            "question": result.question,
            "enriched_question": result.enriched_question_summary, 
            "hit": result.hit,
            "summary": result.hit_summary, 
            "hitRelevance": result.hit_relevance,
            "follow_up": result.follow_up,  # Add follow_up to the output
            "follow_up_on_topic": result.follow_up_on_topic,  # Add follow_up_on_topic to the output
            "gemini_evaluation": result.gemini_evaluation  # Add Gemini evaluation to the output
        }
        for result in question_results
    ]

    current_datetime = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    output_file = os.path.join(test_destination_dir, f"test_output_v4_{test_mode}_{current_datetime}.json")

    try:
        with open(output_file, "w", encoding="utf-8") as f:
            json.dump(output_data, f, indent=4)
        logger.info(f"Test results saved to: {output_file}")
    except IOError as e:
        logger.error(f"Error saving results: {e}")
        raise

# Main test-running function
def run_tests(config: ApiConfiguration, test_destination_dir: str, source_dir: str, num_questions: int = 100, questions: List[str] = None, persona_strategy: PersonaStrategy = None) -> None:
    """
    Runs tests using the provided configuration, test destination directory, source directory, and questions.

    Args:
        config (ApiConfiguration): The configuration for the API.
        test_destination_dir (str): The path to the directory where the test results will be saved.
        source_dir (str): The directory containing the source files.
        num_questions (int): The number of questions to generate using the persona strategy.
        questions (List[str]): A list of questions to be processed.
        persona_strategy (PersonaStrategy): The persona strategy to use for generating questions.

    Returns:
        None
    """
    client = configure_openai_for_azure(config)

    if not test_destination_dir:
        logger.error("Test data folder not provided")
        raise ValueError("Test destination directory not provided")
    
    if persona_strategy:
        questions = persona_strategy.generate_questions(client, config, NUM_QUESTIONS, logger)

    if not questions:
        logger.error("Generated questions are None or empty. Exiting the test.")
        return
    # Determine the test mode based on the strategy
    test_mode = persona_strategy.__class__.__name__.replace('PersonaStrategy', '').lower()

    processed_question_chunks = read_processed_chunks(source_dir)
    question_results = process_questions(client, config, questions, processed_question_chunks, logger)
    save_results(test_destination_dir, question_results, test_mode)
****************************************

****************************************
BoxerEval\tests\BoxerDataTest_v5.py
****************************************
# Copyright (c) 2024 Braid Technologies Ltd

"""
Question Generation (Persona):
Keeps using `gpt-4o` for persona-based question generation.
    
Similarity Embedding:
Upgraded to `text-embedding-3-large` for improved embedding precision and similarity calculations.
    
Evaluation LLM:
Continues with `gemini-1.5-pro` for evaluating the responses generated by GPT-4o.
"""

# Standard Library Imports
import logging
import os
import json
import sys
from logging import Logger
from typing import List, Dict, Any
import numpy as np
from numpy.linalg import norm
import datetime


# Third-Party Packages
from openai import AzureOpenAI, OpenAIError, BadRequestError, APIConnectionError
from tenacity import retry, wait_random_exponential, stop_after_attempt, retry_if_not_exception_type
from GeminiEvaluator import GeminiEvaluator

# Add the project root and scripts directory to the Python path
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)

# Local Modules
from common.ApiConfiguration import ApiConfiguration
from common.common_functions import get_embedding
from PersonaStrategy import DeveloperPersonaStrategy, TesterPersonaStrategy, BusinessAnalystPersonaStrategy, PersonaStrategy

# Constants
SIMILARITY_THRESHOLD = 0.8          # Defines the minimum similarity threshold for a question to be considered a hit
MAX_RETRIES = 15                    # Maximum number of retries for API calls
NUM_QUESTIONS = 100                 # Number of questions to be generated per test

# OpenAI prompts used for persona generation, enrichment, and follow-up question generation
OPENAI_PERSONA_PROMPT =  "You are an AI assistant helping an application developer understand generative AI. You explain complex concepts in simple language, using Python examples if it helps. You limit replies to 50 words or less. If you don't know the answer, say 'I don't know'. If the question is not related to building AI applications, Python, or Large Language Models (LLMs), say 'That doesn't seem to be about AI'."
ENRICHMENT_PROMPT = "You will be provided with a question about building applications that use generative AI technology. Write a 50 word summary of an article that would be a great answer to the question. Consider enriching the question with additional topics that the question asker might want to understand. Write the summary in the present tense, as though the article exists. If the question is not related to building AI applications, Python, or Large Language Models (LLMs), say 'That doesn't seem to be about AI'.\n"
FOLLOW_UP_PROMPT =  "You will be provided with a summary of an article about building applications that use generative AI technology. Write a question of no more than 10 words that a reader might ask as a follow up to reading the article."
FOLLOW_UP_ON_TOPIC_PROMPT = "You are an AI assistant helping a team of developers understand AI. You explain complex concepts in simple language. Respond 'yes' if the follow-up question is about AI, otherwise respond 'no'."

# Setup Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

gemini_evaluator = GeminiEvaluator()  ## Initialize an instance of the GeminiEvaluator for response evaluation

# Function to configure the Azure OpenAI API client
def configure_openai_for_azure(config: ApiConfiguration, task: str) -> AzureOpenAI:
    """
    Configures OpenAI for Azure using the provided ApiConfiguration.
    
    Args:
        config (ApiConfiguration): The ApiConfiguration object containing the necessary settings.
        task (str): The task for which OpenAI is being configured ("chat" or "embedding").
        
    Returns:
        AzureOpenAI: An instance of AzureOpenAI configured with the correct settings.
    """
    if task == "chat":
        return AzureOpenAI(
            azure_endpoint=config.resourceChatCompletionEndpoint,
            api_key=config.apiKey.strip(),
            api_version=config.apiVersion
        )
    elif task == "embedding":
        return AzureOpenAI(
            azure_endpoint=config.resourceEmbeddingEndpoint,
            api_key=config.apiKey.strip(),
            api_version=config.apiVersion
        )

# Class to hold test results
class TestResult:
    def __init__(self) -> None:

        """
        Initializes a new instance of the TestResult class.

        Sets the initial state of the test result, including the question, enriched question, 
        hit status, hit relevance, hit summary, follow-up question, and follow-up topic.
        
        Args:
            None
        
        Returns:
            None
        """
        self.question: str = ""                             # Original question
        self.hit_relevance: float = 0.0                     # Relevance score of the hit
        self.enriched_question_summary: str = ""            # Summary of the enriched question   
        self.hit: bool = False                              # Whether the question was considered a hit based on similarity
        self.hit_relevance: float = 0.0                     # Relevance score of the hit
        self.follow_up: str = ""                            # Adding followUp field
        self.follow_up_on_topic: str = ""                   # Adding followUpOnTopic field
        self.gemini_evaluation: str = ""                    # Field to store Gemini LLM evaluation

# Function to call the OpenAI API with retry logic
@retry(wait=wait_random_exponential(min=5, max=15), stop=stop_after_attempt(MAX_RETRIES), retry=retry_if_not_exception_type(BadRequestError))
def call_openai_chat(chat_client: AzureOpenAI, messages: List[Dict[str, str]], config: ApiConfiguration, logger: logging.Logger) -> str:
    """
    Retries the OpenAI chat API call with exponential backoff and retry logic.

    :param chat_client: An instance of the AzureOpenAI class.
    :type chat_client: AzureOpenAI
    :param messages: A list of dictionaries representing the messages to be sent to the API.
    :type messages: List[Dict[str, str]]
    :param config: An instance of the ApiConfiguration class.
    :type config: ApiConfiguration
    :param logger: An instance of the logging.Logger class.
    :type logger: logging.Logger
    :return: The content of the first choice in the API response.
    :rtype: str
    :raises RuntimeError: If the finish reason in the API response is not 'stop', 'length', or an empty string.
    :raises OpenAIError: If there is an error with the OpenAI API.
    :raises APIConnectionError: If there is an error with the API connection.
    """
    try:
        response = chat_client.chat.completions.create(
            model=config.azureDeploymentName,
            messages=messages,
            temperature=0.7,
            max_tokens=config.maxTokens,
            top_p=0.0,
            frequency_penalty=0,
            presence_penalty=0,
            timeout=config.openAiRequestTimeout,
        )
        content = response.choices[0].message.content
        finish_reason = response.choices[0].finish_reason

        if finish_reason not in {"stop", "length", ""}:
            logger.warning("Unexpected stop reason: %s", finish_reason)
            logger.warning("Content: %s", content)
            logger.warning("Consider increasing max tokens and retrying.")
            raise RuntimeError("Unexpected finish reason in API response.")

        return content

    except (OpenAIError, APIConnectionError) as e:
        logger.error(f"Error: {e}")
        raise


# Function to retrieve text embeddings using OpenAI API with retry logic
@retry(wait=wait_random_exponential(min=5, max=15), stop=stop_after_attempt(MAX_RETRIES), retry=retry_if_not_exception_type(BadRequestError))
def get_text_embedding(embedding_client: AzureOpenAI, config: ApiConfiguration, text: str, logger: Logger) -> np.ndarray:
    """
    Retrieves the text embedding for a given text using the OpenAI API.

    Args:
        embedding_client (AzureOpenAI): The OpenAI client instance.
        config (ApiConfiguration): The API configuration instance.
        text (str): The text for which to retrieve the embedding.
        logger (Logger): The logger instance.

    Returns:
        np.ndarray: The text embedding as a numpy array.

    Raises:
        OpenAIError: If an error occurs while retrieving the text embedding.
    """
    try:
        embedding = get_embedding(text, embedding_client, config)
        return np.array(embedding)
    except OpenAIError as e:
        logger.error(f"Error getting text embedding: {e}")
        raise

# Function to calculate cosine similarity between two vectors
def cosine_similarity(a: np.ndarray, b: np.ndarray) -> float:
    """
    Calculates the cosine similarity between two vectors.

    Args:
        a (np.ndarray): The first vector.
        b (np.ndarray): The second vector.

    Returns:
        float: The cosine similarity between the two vectors.

    Raises:
        ValueError: If the input vectors are not numpy arrays or convertible to numpy arrays.
        ValueError: If the input vectors do not have the same shape.
        ValueError: If either of the input vectors is a zero vector.
    """
    try:
        a, b = np.array(a), np.array(b)
    except Exception:
        raise ValueError("Input vectors must be numpy arrays or convertible to numpy arrays")

    if a.shape != b.shape:
        raise ValueError("Input vectors must have the same shape")

    dot_product = np.dot(a, b)
    a_norm, b_norm = norm(a), norm(b)

    if a_norm == 0 or b_norm == 0:
        raise ValueError("Input vectors must not be zero vectors")

    return dot_product / (a_norm * b_norm)

# Function to generate enriched questions using OpenAI API
@retry(wait=wait_random_exponential(min=5, max=15), stop=stop_after_attempt(MAX_RETRIES), retry=retry_if_not_exception_type(BadRequestError))
def generate_enriched_question(chat_client: AzureOpenAI, config: ApiConfiguration, question: str, logger: logging.Logger) -> str:
    """
    Generates an enriched question using the OpenAI API.

    Args:
        chat_client (AzureOpenAI): The OpenAI client instance.
        config (ApiConfiguration): The API configuration instance.
        question (str): The question to be enriched.
        logger (logging.Logger): The logger instance.

    Returns:
        str: The enriched question.

    Raises:
        BadRequestError: If the API request fails.
    """
    messages = [
        {"role": "system", "content": OPENAI_PERSONA_PROMPT},
        {"role": "user", "content": ENRICHMENT_PROMPT + "Question: " + question},
    ]
    logger.info("Making API request to OpenAI...")
    logger.info("Request payload: %s", messages)

    response = call_openai_chat(chat_client, messages, config, logger)
    logger.info("API response received: %s", response)

    return response


def generate_follow_up_question(chat_client: AzureOpenAI, config: ApiConfiguration, text: str, logger: logging.Logger) -> str:
    """
    Generates a follow-up question using the OpenAI API.

    Args:
        chat_client (AzureOpenAI): The OpenAI client instance.
        config (ApiConfiguration): The API configuration instance.
        text (str): The text to generate a follow-up question about.
        logger (logging.Logger): The logger instance.

    Returns:
        str: The follow-up question.

    Raises:
        BadRequestError: If the API request fails.
    """
    messages = [
        {"role": "system", "content": FOLLOW_UP_PROMPT},
        {"role": "user", "content": text},
    ]
    response = call_openai_chat(chat_client, messages, config, logger)
    return response


def assess_follow_up_on_topic(chat_client: AzureOpenAI, config: ApiConfiguration, follow_up: str, logger: logging.Logger) -> str:
    """
    Checks if a follow-up question is about AI using the OpenAI API.

    Args:
        chat_client (AzureOpenAI): The OpenAI client instance.
        config (ApiConfiguration): The API configuration instance.
        follow_up (str): The follow-up question to assess.
        logger (logging.Logger): The logger instance.

    Returns:
        str: 'yes' if the follow-up question is about AI, 'no' otherwise.

    Raises:
        BadRequestError: If the API request fails.
    """
    messages = [
        {"role": "system", "content": FOLLOW_UP_ON_TOPIC_PROMPT},
        {"role": "user", "content": follow_up},
    ]
    response = call_openai_chat(chat_client, messages, config, logger)
    return response

def process_questions(chat_client: AzureOpenAI, embedding_client: AzureOpenAI, config: ApiConfiguration, questions: List[str], processed_question_chunks: List[Dict[str, Any]], logger: logging.Logger) -> List[TestResult]:
    """
    Processes a list of test questions and evaluates their relevance based on their similarity to pre-processed question chunks.

    Args:
        chat_client (AzureOpenAI): The OpenAI client instance for generating enriched summaries and follow-up questions.
        embedding_client (AzureOpenAI): The OpenAI client instance for generating embeddings.
        config (ApiConfiguration): The API configuration instance.
        questions (List[str]): The list of test questions to be processed.
        processed_question_chunks (List[Dict[str, Any]]): The list of pre-processed question chunks.
        logger (logging.Logger): The logger instance.

    Returns:
        List[TestResult]: A list of test results, each containing the original question, its enriched version, its relevance to the pre-processed chunks, the follow-up question, and whether the follow-up question is on-topic.

    Raises:
        BadRequestError: If the API request fails.
    """
    # Initialize an empty list to store the results of each processed question.
    question_results: List[TestResult] = []
    
    # Loop through each question in the provided list of questions.
    for question in questions:
        # Create a new TestResult object for the current question to store its results.
        question_result = TestResult()
        question_result.question = question     # Store the original question

        question_result.enriched_question_summary = generate_enriched_question(chat_client, config, question, logger)  # Generate enriched question summary
        
        # Obtain the text embedding for the enriched question using OpenAI's embedding model.
        embedding = get_text_embedding(embedding_client, config, question_result.enriched_question_summary, logger)  # Get embedding for the enriched question

        # Initialize variables to track the highest similarity score and the corresponding summary.
        best_hit_relevance = 0      # To track the highest similarity score
        best_hit_summary = None     # To track the summary corresponding to the highest similarity

        # Iterate through the processed chunks to find the best hit
        for chunk in processed_question_chunks:
            # Ensure the chunk is valid and is a dictionary.
            if chunk and isinstance(chunk, dict):
                gpt4_embedding = chunk.get("embedding")
                similarity = cosine_similarity(gpt4_embedding, embedding)

                # If similarity exceeds the defined threshold, mark the question as a hit
                if similarity > SIMILARITY_THRESHOLD:
                    question_result.hit = True

                # Check if this is the best match so far
                if similarity > best_hit_relevance:
                    best_hit_relevance = similarity
                    best_hit_summary = chunk.get("summary") 

         # Store the highest relevance score and the associated summary in the result.
        question_result.hit_relevance = best_hit_relevance
        question_result.hit_summary = best_hit_summary

        # If a relevant summary (best hit) exists, generate a follow-up question and assess its topic relevance.
        if question_result.hit_summary:
            # Generate a follow-up question based on the best hit summary.  
            question_result.follow_up = generate_follow_up_question(chat_client, config, question_result.hit_summary, logger)

            # Check if the follow-up question is relevant to AI and mark it accordingly.  
            question_result.follow_up_on_topic = assess_follow_up_on_topic(chat_client, config, question_result.follow_up, logger)  
        
        # Use Gemini to evaluate the Azure OpenAI enriched summary
        question_result.gemini_evaluation = gemini_evaluator.evaluate(
            question_result.question,                   # This is the original question
            question_result.enriched_question_summary   # This is the summary generated by Azure OpenAI
            ) 

        # Append the result for the current question to the results list.
        question_results.append(question_result)

    # Log the total number of processed questions for debugging or tracking purposes.
    logger.debug("Total tests processed: %s", len(question_results))

    # Return the list of all test results.
    return question_results

# Function to read processed chunks from the source directory
def read_processed_chunks(source_dir: str) -> List[Dict[str, Any]]:
    """
    Reads and processes JSON files from a specified source directory.

    Args:
        source_dir (str): The path to the source directory containing JSON files.

    Returns:
        List[Dict[str, Any]]: A list of dictionaries containing the processed JSON data.

    Raises:
        FileNotFoundError: If the source directory or a JSON file is not found.
        IOError: If an I/O error occurs while reading a JSON file.
    """
    processed_question_chunks: List[Dict[str, Any]] = []            # Initialize an empty list to hold the chunks.
    try:
        # Loop through all files in the specified directory.
        for filename in os.listdir(source_dir):
            # Check if the file has a '.json' extension.
            if filename.endswith(".json"):
                file_path = os.path.join(source_dir, filename)      # Get the full path to the file.
                # Open the file and load its contents as JSON.
                with open(file_path, "r", encoding="utf-8") as f:
                    chunk = json.load(f)                        # Load JSON data into the chunk variable.
                    processed_question_chunks = chunk           # Store the JSON content in the processed chunks list.

    # Handle file not found or I/O errors that occur during file reading.                
    except (FileNotFoundError, IOError) as e:
        logger.error(f"Error reading files: {e}")
        raise
    
    # If no chunks were processed, log a warning.
    if not processed_question_chunks:
        logger.error("Processed question chunks are None or empty.")
    
    return processed_question_chunks

# Function to save the results and generated questions
def save_results(test_destination_dir: str, question_results: List[TestResult], test_mode: str) -> None:
    """
    Saves the test results to a JSON file in the specified destination directory.

    Args:
        test_destination_dir (str): The path to the directory where the test results will be saved.
        question_results (List[TestResult]): A list of TestResult objects containing the test results.
        test_mode (str): The test mode to be used in the output file name.

    Returns:
        None

    Raises:
        IOError: If an I/O error occurs while writing the JSON file.
    """
    output_data = [
        {
            "question": result.question,                                # Original question.
            "enriched_question": result.enriched_question_summary,      # Enriched question summary.
            "hit": result.hit,                                          # Whether it was a hit or not (based on similarity).
            "summary": result.hit_summary,                              # The best-matching pre-processed summary.
            "hitRelevance": result.hit_relevance,                       # Relevance score for the best hit.
            "follow_up": result.follow_up,                              # Follow-up question generated.
            "follow_up_on_topic": result.follow_up_on_topic,            # Whether the follow-up is on-topic.
            "gemini_evaluation": result.gemini_evaluation               # Evaluation result from Gemini.
        }
        for result in question_results                                  # Iterate over each TestResult and serialize it.
    ]

    # Generate a unique filename for the output based on the current timestamp and test mode.
    current_datetime = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    output_file = os.path.join(test_destination_dir, f"test_output_v5_{test_mode}_{current_datetime}.json")

    try:
        # Write the output data to the specified file as JSON.
        with open(output_file, "w", encoding="utf-8") as f:
            json.dump(output_data, f, indent=4)
        logger.info(f"Test results saved to: {output_file}")
    
    # Handle any I/O errors that might occur during writing.
    except IOError as e:
        logger.error(f"Error saving results: {e}")
        raise

# Main test-running function
def run_tests(config: ApiConfiguration, test_destination_dir: str, source_dir: str, num_questions: int = 100, questions: List[str] = None, persona_strategy: PersonaStrategy = None) -> None:
    """
    Runs tests using the provided configuration, test destination directory, source directory, and questions.

    Args:
        config (ApiConfiguration): The configuration for the API.
        test_destination_dir (str): The path to the directory where the test results will be saved.
        source_dir (str): The directory containing the source files.
        num_questions (int): The number of questions to generate using the persona strategy.
        questions (List[str]): A list of questions to be processed.
        persona_strategy (PersonaStrategy): The persona strategy to use for generating questions.

    Returns:
        None
    """
    # Initialize the OpenAI clients for both chat completions and embeddings.
    chat_client = configure_openai_for_azure(config, "chat")
    embedding_client = configure_openai_for_azure(config, "embedding")

    # Ensure that a test destination directory is provided, raise an error if not.
    if not test_destination_dir:
        logger.error("Test data folder not provided")                       # Log error message.
        raise ValueError("Test destination directory not provided")         # Raise exception
    
    if persona_strategy:
        questions = persona_strategy.generate_questions(chat_client, config, NUM_QUESTIONS, logger)

    if not questions:
        logger.error("Generated questions are None or empty. Exiting the test.")
        return
    # Determine the test mode based on the strategy
    test_mode = persona_strategy.__class__.__name__.replace('PersonaStrategy', '').lower()

    processed_question_chunks = read_processed_chunks(source_dir)
    question_results = process_questions(chat_client,embedding_client, config, questions, processed_question_chunks, logger)
    save_results(test_destination_dir, question_results, test_mode)
****************************************

****************************************
BoxerEval\tests\GeminiEvaluator.py
****************************************
# Copyright (c) 2024 Braid Technologies Ltd

# Imports
import google.generativeai as genai
import os

class GeminiEvaluator:
    def __init__(self):
        """
        Initialize the GeminiEvaluator class.
        
        This class provides functions for evaluating the quality of summaries generated by a large language model (LLM). 
        The primary task is to evaluate how effectively the summary captures the core information from the original content and addresses the user's query.
        """
        # Fetch the API key from the environment variables to authenticate with Gemini LLM
        self.api_key = os.getenv("GEMINI_API_KEY")

        # Set the endpoint for the Gemini LLM
        self.endpoint = "https://generativelanguage.googleapis.com"

        # Set the API key for the Google Generative AI library (used for interacting with Gemini LLM)
        genai.api_key = self.api_key

        # Set the system instruction prompt for the evaluation
        self.system_instruction_prompt_eval = f"""Prompt: 
        You are a professional LLM evaluation judge assessing the quality of summaries generated by a large language model (LLM). 
        Your primary task is to evaluate how effectively the summary captures the core information from the original content and addresses the user's query.

        *** Instructions ***
        As a summary evaluator, follow these steps:

        - Understand the Question: Carefully read the original content to understand the key points and context.
        - Assess the Summary: Review the summary generated by the LLM, checking for its relevance, coherence, and completeness.
        - Rate the Summary: 
        1: Irrelevant or incoherent.
        2: Partially relevant but incomplete.
        3: Mostly relevant and coherent.
        4: Fully relevant and coherent.

        *** Response Format ***
        Return just the score as an integer (1, 2, 3, or 4).
        """

    def evaluate(self, original_content: str, summary: str) -> str:
        """
        Evaluates the quality of a summary based on the original content using the Gemini LLM.
        
        Args:
            original_content (str): The original text content that needs to be summarized.
            summary (str): The summary generated by the LLM that needs to be evaluated.
        
        Returns:
            str: The evaluation score as an integer value (1-4), assessing the summary's quality.
        """
        # Create a GenerativeModel object using the specified Gemini model and system instruction
        model = genai.GenerativeModel("models/gemini-1.5-pro", system_instruction=self.system_instruction_prompt_eval)
        
        # Create an evaluation prompt, providing both the original content and the summary
        evaluation_prompt = f"""
        Question: {original_content}
        Summary: {summary}
        """
         # Generate a response from the Gemini LLM using the evaluation prompt
        response = model.generate_content(evaluation_prompt)
        
        # Return the evaluation score text, which is expected to be an integer (1-4)
        return response.text
****************************************

****************************************
BoxerEval\tests\PersonaStrategy.py
****************************************
# Copyright (c) 2024 Braid Technologies Ltd

# Import necessary modules and libraries
from abc import ABC, abstractmethod
from typing import List
import logging
from openai import AzureOpenAI
import os
import sys

# Add the project root and scripts directory to the Python path
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)

# Import common configurations and functions
from common.ApiConfiguration import ApiConfiguration  # API configuration management
from common.common_functions import get_embedding  # Function for getting embeddings
from openai import AzureOpenAI, OpenAIError, BadRequestError, APIConnectionError  # Exception handling for OpenAI API
from BoxerDataTest_v1 import call_openai_chat  # Function to call OpenAI chat model


# Setup Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Constants for Persona Prompts
DEVELOPER_PROMPT = "You are a programmer interested in the details of writing applications that use an LLM in Python."
TESTER_PROMPT = "You are a tester who wants to know how to assess and ensure quality in an application that uses LLM technology."
BUSINESS_ANALYST_PROMPT = "You are a business analyst interested in how people can apply LLM technology to solve business problems."

# Abstract class for Persona Strategies
class PersonaStrategy(ABC):
    @abstractmethod
    def generate_questions(self, chat_client: AzureOpenAI, config: ApiConfiguration, num_questions: int, logger: logging.Logger) -> List[str]:
        """
        Abstract method to generate a list of questions based on a specific persona.

        Args:
            chat_client (AzureOpenAI): An instance of the AzureOpenAI class.
            config (ApiConfiguration): An instance of the ApiConfiguration class.
            num_questions (int): The number of questions to generate.
            logger (logging.Logger): Logger for capturing process information.

        Returns:
            List[str]: A list of questions generated based on the persona.
        """
        pass  # Abstract method to be implemented by subclasses

    def _generate_questions(self, chat_client: AzureOpenAI, config: ApiConfiguration, prompt: str, num_questions: int, logger: logging.Logger) -> List[str]:
        """
    Generates a list of questions based on a prompt.

    Args:
        chat_client (AzureOpenAI): An instance of the AzureOpenAI class.
        config (ApiConfiguration): An instance of the ApiConfiguration class.
        prompt (str): The prompt to use when generating the questions.
        num_questions (int): The number of questions to generate.
        logger (logging.Logger): An instance of the logging.Logger class.

    Returns:
        List[str]: A list of questions generated based on the prompt.
        """
        # Prepare the messages to be sent to the OpenAI chat API
        messages = [
            {"role": "system", "content": prompt},
            {"role": "user", "content": f"Generate {num_questions} questions about this topic."},
        ]
        # Log the prompt that will be used for generating questions
        logger.info("Generating questions with the following prompt: %s", prompt)

        # Call the OpenAI chat model and retrieve the response
        response = call_openai_chat(chat_client, messages, config, logger)

        # Split the response into individual questions and filter out empty ones
        questions = response.split('\n')
        return [q for q in questions if q.strip()]
    
# Concrete class for Developer Persona Strategy    
class DeveloperPersonaStrategy(PersonaStrategy):
    def generate_questions(self, chat_client: AzureOpenAI, config: ApiConfiguration, num_questions: int, logger: logging.Logger) -> List[str]:
        """
    Generates a list of questions based on the developer persona.

    Args:
        chat_client (AzureOpenAI): An instance of the AzureOpenAI class.
        config (ApiConfiguration): An instance of the ApiConfiguration class.
        num_questions (int): The number of questions to generate.
        logger (logging.Logger): An instance of the logging.Logger class.

    Returns:
        List[str]: A list of questions generated based on the developer persona.
        """
        return self._generate_questions(chat_client, config, DEVELOPER_PROMPT, num_questions, logger)

# Concrete class for Tester Persona Strategy
class TesterPersonaStrategy(PersonaStrategy):
    def generate_questions(self, chat_client: AzureOpenAI, config: ApiConfiguration, num_questions: int, logger: logging.Logger) -> List[str]:
        """
    Generates a list of questions based on the tester persona.

    Args:
        chat_client (AzureOpenAI): An instance of the AzureOpenAI class.
        config (ApiConfiguration): An instance of the ApiConfiguration class.
        num_questions (int): The number of questions to generate.
        logger (logging.Logger): An instance of the logging.Logger class.

    Returns:
        List[str]: A list of questions generated based on the tester persona.
        """
        return self._generate_questions(chat_client, config, TESTER_PROMPT, num_questions, logger)

# Concrete class for Business Analyst Persona Strategy
class BusinessAnalystPersonaStrategy(PersonaStrategy):
    def generate_questions(self, chat_client: AzureOpenAI, config: ApiConfiguration, num_questions: int, logger: logging.Logger) -> List[str]:
        """
    Generates a list of questions based on the business analyst persona.

    Args:
        chat_client (AzureOpenAI): An instance of the AzureOpenAI class.
        config (ApiConfiguration): An instance of the ApiConfiguration class.
        num_questions (int): The number of questions to generate.
        logger (logging.Logger): An instance of the logging.Logger class.

    Returns:
        List[str]: A list of questions generated based on the business analyst persona.
        """
        return self._generate_questions(chat_client, config, BUSINESS_ANALYST_PROMPT, num_questions, logger)
****************************************

****************************************
BoxerEval\tests\run_BoxerDataTest.py
****************************************
# Copyright (c) 2024 Braid Technologies Ltd
# Standard Library Imports
import os
import sys
import logging
from typing import List, Dict, Any

# Add the project root and scripts directory to the Python path
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)

# Local Imports
from BoxerDataTest_v1 import run_tests                           # use this for v1
# from BoxerDataTest_v2 import run_tests                             # use this for v2
from common.ApiConfiguration import ApiConfiguration

# Setup Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Define the list of questions
questions: List[str] = [
    'How are LLMs different from traditional AI models?',
    'What is a Large Language Model (LLM)?',
    'What is natural language processing (NLP)?',
    'What are prompt engineering techniques and how do they work?',
    'What is the difference between supervised, unsupervised, and reinforcement learning?',
    'How can LLMs be used for chatbots?',
    'What are the considerations for using LLMs in voice assistants?',
    "What are the pricing models for popular LLM services like OpenAI's GPT?",
    "How does OpenAI's GPT-4 compare to other models like Google's BERT?",
    "How do I use Hugging Face's Transformers library?",
    'How does NLP relate to LLMs?',
    'What are the methods for implementing sentiment analysis using LLMs?',
    'What are the computational requirements for training an LLM?',
    'How do I handle bias in training data?',
    'How can LLMs assist in language translation applications?',
    'What are the techniques for chaining LLM responses for complex tasks?',
    'What is the role of LLMs in automated code generation?',
    'What is the role of the Hugging Face Model Hub in working with LLMs?',
    'How can LLMs be used for content generation, such as blog posts or articles?',
    'How can LLMs be used for data extraction from unstructured text?',
    'How do I fine-tune a pre-trained LLM on my own dataset?',
    'How do I use TensorFlow or PyTorch with LLMs?',
    'What is transfer learning and how does it apply to LLMs?',
    'How do emerging models like GPT-4.5 or GPT-5 compare to GPT-4?',
    'How much data do I need to train or fine-tune an LLM effectively?',
    'How do I implement contextual understanding in my LLM-based application?',
    'What are some common use cases for LLMs in applications?',
    'How do LLMs process and generate text?',
    'What are the steps to create a question-answering system with an LLM?',
    'What are the latest advancements in LLM technology?',
    'What are the most popular LLMs available today (eg GPT-4, BERT, T5)?',
    'How are LLMs trained?',
    'What future applications and improvements are expected for LLMs?',
    'What are the uses of LLMs in customer service?',
    'What are the common issues faced when integrating LLMs?',
    'What datasets are commonly used for training LLMs?',
    'What are the best practices for scaling LLM infrastructure?',
    'How do I gather and use user feedback to improve my LLM-based application?',
    'What are the GDPR implications of using LLMs?',
    'How do LLMs work?',
    'What are the privacy concerns when using LLMs?',
    'What are the risks of using LLMs and how can I mitigate them?',
    'What are the key components of an LLM?',
    'How do I scale an LLM-based application to handle increased traffic?',
    'What is the process for deploying an LLM-based application?',
    'What are some common performance bottlenecks when using LLMs?',
    'How have other developers solved common problems with LLMs?',
    'How do I monitor and maintain an LLM-based application in production?',
    'How can I use LLMs for specific domain applications, like medical or legal?',
    'What metrics should I use to evaluate the performance of my LLM?',
    'How do I handle API rate limits when using a hosted LLM service?',
    'What are the best courses or tutorials for learning to use LLMs?',
    'How do I evaluate the performance of different LLMs?',
    'How can LLMs benefit the education sector?',
    'What cloud services are recommended for hosting LLM-based applications?',
    'How can I use an LLM to summarize text?',
    'How can I minimize the cost of API usage for LLMs?',
    'What techniques can I use to improve the accuracy of my LLM?',
    'What are the methods to evaluate the relevance of LLM responses?',
    'What are the legal implications of using LLMs in different industries?',
    'What are the ethical considerations when using LLMs in applications?',
    'How can I optimize the performance of an LLM in production?',
    'How can I personalize LLM interactions for individual users?',
    'How is the field of LLMs expected to evolve over the next 5 years?',
    'How often should I update or retrain my LLM?',
    'How do I measure the quality of the generated text?',
    'Can I use pre-trained models or do I need to train my own from scratch?',
    'How can I use load balancing with LLMs?',
    'How are LLMs used in the healthcare industry?',
    'What security measures should I implement when using LLMs?',
    'What are the best tools for annotating and preparing training data?',
    'How can I customize the behavior of an LLM to better fit my application?',
    'How can I contribute to the development of open-source LLM projects?',
    'What online communities and forums are best for learning about LLMs?',
    'What are the copyright considerations for content generated by LLMs?',
    'How do I manage version control for my LLM models?',
    'What are some successful case studies of LLM integration?',
    'What are the applications of LLMs in finance?',
    'What strategies can I use to make LLM responses more engaging?',
    'What libraries or frameworks are available for working with LLMs in Python?',
    'How can I use Docker to deploy LLM-based applications?',
    'What factors should I consider when choosing an LLM for my application?',
    'How do I estimate the cost of using an LLM in my application?',
    'What are the signs that my LLM needs retraining?',
    'What are the cost considerations when choosing between different LLM providers?',
    'How can I ensure that my LLM is not producing biased or harmful content?',
    'How do I integrate an LLM into my Python application?',
    'How can I ensure my use of LLMs complies with industry regulations?',
    'How do I manage user data responsibly in an LLM-based application?',
    'How do LLMs apply to the entertainment and media industry?',
    'How do I protect my LLM from adversarial attacks?',
    'How do I debug issues with LLM-generated content?',
    'How can I optimize the response time of an LLM in my application?',
    'How can I ensure secure communication between my application and the LLM API?',
    'How can I reduce the latency of LLM responses?',
    'How do I determine the size of the model I need?What are the trade-offs between smaller and larger models?',
    'What caching strategies can I use to improve LLM response times?',
    'How can I track and fix inaccuracies in LLM responses?',
    'What are the best practices for managing API keys and authentication?'
    ]

# Configuration setup
config = ApiConfiguration()
test_destination_dir = "D:/Braid Technologies/BraidTechnologiesRepo/WorkedExamples/BoxerTest/test output/"
source_dir = "D:/Braid Technologies/BraidTechnologiesRepo/WorkedExamples/BoxerTest/data/"

# Ensure the test output directory exists
try:
    os.makedirs(test_destination_dir, exist_ok=True)
    logger.info(f"Test output directory ensured at: {test_destination_dir}")
except OSError as e:
    logger.error(f"Failed to create test output directory: {e}")
    raise

# Run the tests with error handling
try:
    logger.info("Starting the test process...")
    run_tests(config, test_destination_dir, source_dir, questions)
    logger.info("Test process completed successfully.")
except Exception as e:
    logger.error(f"An error occurred during testing: {e}")
    raise
****************************************

****************************************
BoxerEval\tests\TestRunner.py
****************************************
# Copyright (c) 2024 Braid Technologies Ltd

import logging
import os
import sys

# Set up logging to display information about the execution of the script

# Get the current directory (tests folder)
current_dir = os.path.dirname(os.path.abspath(__file__))
# Get the parent directory (BoxerTests root)
parent_dir = os.path.dirname(current_dir)
# Add the parent directory to the Python path
sys.path.insert(0, parent_dir)

# Import necessary modules and classes for running the tests
from BoxerDataTest_v5 import run_tests, call_openai_chat, configure_openai_for_azure
from common.ApiConfiguration import ApiConfiguration
from PersonaStrategy import DeveloperPersonaStrategy, TesterPersonaStrategy, BusinessAnalystPersonaStrategy
from openai import AzureOpenAI, OpenAIError, BadRequestError, APIConnectionError

# Setup Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def TestRunner():
    """
    Runs tests using the provided configuration, test destination directory, source directory, and questions.

    This script provides a command-line interface to run tests using the BoxerDataTest_v2 module.
    Depending on the user's choice, it can run static question tests or persona-based tests.

    Parameters:
        None

    Returns:
        None
    """
    
    # Initialize the API configuration
    config = ApiConfiguration()

    # For running chat completions tests
    chat_client = configure_openai_for_azure(config, "chat")
    
    # For running embeddings tests
    embedding_client = configure_openai_for_azure(config, "embedding")

    # Define the directories for test output and data sources
    test_destination_dir = "D:/Braid Technologies/BraidTechnologiesRepo/WorkedExamples/BoxerTest/test output/"
    source_dir = "D:/Braid Technologies/BraidTechnologiesRepo/WorkedExamples/BoxerTest/data/"

    try:
        # Ensure the test output directory exists, create if it doesn't
        os.makedirs(test_destination_dir, exist_ok=True)
        logger.info(f"Test output directory ensured at: {test_destination_dir}")
    except OSError as e:
        # Log an error if the directory cannot be created
        logger.error(f"Failed to create test output directory: {e}")
        raise

    # Provide the user with options to choose the test mode
    print("Choose a test mode:")
    print("1. Static Questions")
    print("2. Developer Persona")
    print("3. Tester Persona")
    print("4. Business Analyst Persona")
    choice = input("Enter your choice: ")

    # Run tests based on the user's choice
    if choice == '1':
        questions = [
            'How are LLMs different from traditional AI models?',
            'What is a Large Language Model (LLM)?',
            'What is natural language processing (NLP)?',
            'What are prompt engineering techniques and how do they work?',
            'What is the difference between supervised, unsupervised, and reinforcement learning?',
            'How can LLMs be used for chatbots?',
            'What are the considerations for using LLMs in voice assistants?',
            "What are the pricing models for popular LLM services like OpenAI's GPT?",
            "How does OpenAI's GPT-4 compare to other models like Google's BERT?",
            "How do I use Hugging Face's Transformers library?",
            'How does NLP relate to LLMs?',
            'What are the methods for implementing sentiment analysis using LLMs?',
            'What are the computational requirements for training an LLM?',
            'How do I handle bias in training data?',
            'How can LLMs assist in language translation applications?',
            'What are the techniques for chaining LLM responses for complex tasks?',
            'What is the role of LLMs in automated code generation?',
            'What is the role of the Hugging Face Model Hub in working with LLMs?',
            'How can LLMs be used for content generation, such as blog posts or articles?',
            'How can LLMs be used for data extraction from unstructured text?',
            'How do I fine-tune a pre-trained LLM on my own dataset?',
            'How do I use TensorFlow or PyTorch with LLMs?',
            'What is transfer learning and how does it apply to LLMs?',
            'How do emerging models like GPT-4.5 or GPT-5 compare to GPT-4?',
            'How much data do I need to train or fine-tune an LLM effectively?',
            'How do I implement contextual understanding in my LLM-based application?',
            'What are some common use cases for LLMs in applications?',
            'How do LLMs process and generate text?',
            'What are the steps to create a question-answering system with an LLM?',
            'What are the latest advancements in LLM technology?',
            'What are the most popular LLMs available today (eg GPT-4, BERT, T5)?',
            'How are LLMs trained?',
            'What future applications and improvements are expected for LLMs?',
            'What are the uses of LLMs in customer service?',
            'What are the common issues faced when integrating LLMs?',
            'What datasets are commonly used for training LLMs?',
            'What are the best practices for scaling LLM infrastructure?',
            'How do I gather and use user feedback to improve my LLM-based application?',
            'What are the GDPR implications of using LLMs?',
            'How do LLMs work?',
            'What are the privacy concerns when using LLMs?',
            'What are the risks of using LLMs and how can I mitigate them?',
            'What are the key components of an LLM?',
            'How do I scale an LLM-based application to handle increased traffic?',
            'What is the process for deploying an LLM-based application?',
            'What are some common performance bottlenecks when using LLMs?',
            'How have other developers solved common problems with LLMs?',
            'How do I monitor and maintain an LLM-based application in production?',
            'How can I use LLMs for specific domain applications, like medical or legal?',
            'What metrics should I use to evaluate the performance of my LLM?',
            'How do I handle API rate limits when using a hosted LLM service?',
            'What are the best courses or tutorials for learning to use LLMs?',
            'How do I evaluate the performance of different LLMs?',
            'How can LLMs benefit the education sector?',
            'What cloud services are recommended for hosting LLM-based applications?',
            'How can I use an LLM to summarize text?',
            'How can I minimize the cost of API usage for LLMs?',
            'What techniques can I use to improve the accuracy of my LLM?',
            'What are the methods to evaluate the relevance of LLM responses?',
            'What are the legal implications of using LLMs in different industries?',
            'What are the ethical considerations when using LLMs in applications?',
            'How can I optimize the performance of an LLM in production?',
            'How can I personalize LLM interactions for individual users?',
            'How is the field of LLMs expected to evolve over the next 5 years?',
            'How often should I update or retrain my LLM?',
            'How do I measure the quality of the generated text?',
            'Can I use pre-trained models or do I need to train my own from scratch?',
            'How can I use load balancing with LLMs?',
            'How are LLMs used in the healthcare industry?',
            'What security measures should I implement when using LLMs?',
            'What are the best tools for annotating and preparing training data?',
            'How can I customize the behavior of an LLM to better fit my application?',
            'How can I contribute to the development of open-source LLM projects?',
            'What online communities and forums are best for learning about LLMs?',
            'What are the copyright considerations for content generated by LLMs?',
            'How do I manage version control for my LLM models?',
            'What are some successful case studies of LLM integration?',
            'What are the applications of LLMs in finance?',
            'What strategies can I use to make LLM responses more engaging?',
            'What libraries or frameworks are available for working with LLMs in Python?',
            'How can I use Docker to deploy LLM-based applications?',
            'What factors should I consider when choosing an LLM for my application?',
            'How do I estimate the cost of using an LLM in my application?',
            'What are the signs that my LLM needs retraining?',
            'What are the cost considerations when choosing between different LLM providers?',
            'How can I ensure that my LLM is not producing biased or harmful content?',
            'How do I integrate an LLM into my Python application?',
            'How can I ensure my use of LLMs complies with industry regulations?',
            'How do I manage user data responsibly in an LLM-based application?',
            'How do LLMs apply to the entertainment and media industry?',
            'How do I protect my LLM from adversarial attacks?',
            'How do I debug issues with LLM-generated content?',
            'How can I optimize the response time of an LLM in my application?',
            'How can I ensure secure communication between my application and the LLM API?',
            'How can I reduce the latency of LLM responses?',
            'How do I determine the size of the model I need?What are the trade-offs between smaller and larger models?',
            'What caching strategies can I use to improve LLM response times?',
            'How can I track and fix inaccuracies in LLM responses?',
            'What are the best practices for managing API keys and authentication?'
        ]
        run_tests(config, test_destination_dir, source_dir, questions=questions)
        
    elif choice == '2':
        # Developer persona-based testing
        strategy = DeveloperPersonaStrategy()
        run_tests(config, test_destination_dir, source_dir, persona_strategy=strategy)

    elif choice == '3':
        # Tester persona-based testing
        strategy = TesterPersonaStrategy()
        run_tests(config, test_destination_dir, source_dir, persona_strategy=strategy)

    elif choice == '4':
        # Business analyst persona-based testing
        strategy = BusinessAnalystPersonaStrategy()
        run_tests(config, test_destination_dir, source_dir, persona_strategy=strategy)

    else:
        # Handle invalid input
        print("Invalid choice. Exiting.")
        return


if __name__ == "__main__":
    # Run the TestRunner function if the script is executed as the main program
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)

    try:
        TestRunner()
    except Exception as e:
        # Log any exceptions that occur during the test execution
        logger.error(f"An error occurred during testing: {e}")
        raise
****************************************

****************************************
BoxerEval\tests\__init__.py
****************************************

****************************************

****************************************
Cascade\public\popup.html
****************************************
<!DOCTYPE html>
<!-- Copyright Braid Technologies Ltd, 2024  -->
<html lang="en">

   <title>Cascade</title>
   <meta content="" name="Cascade from Braid Technologies Ltd">
   <meta name="author" content="Braid Technologies Ltd">

	<style type="text/css" >
	body {
	  min-width: 400px; /* your desired width */
	  max-width: 400;
	}

   input[type=text] {
      width: 100%;
      padding: 8px 4px;
      margin: 4px 0;
      box-sizing: border-box;
   }    
	</style >

   <head>
	   <title>Cascade</title>	  
	   <script src="./axios.js"></script>      
   	<script src="./popup.js"></script>   
   </head>

   <body>
	   <h3>Cascade from Braid Technologies</h1>
      <input id = "key" type="text" 
         placeholder="Enter the key from your contact at Braid." 
         size="156"
         > 
      &nbsp;
      <p id="summarytext">Waiting.</p>
      &nbsp;
      <p id="classificationtext">Waiting.</p>
   </body>

</html>
****************************************

****************************************
Cascade\src\content.ts
****************************************

declare var artoo: any;
declare var chrome: any;
declare var axios: any;

let haveStartedScrape = false;

/**
 * Function to handle unhandled promise rejections by logging a warning message,
 * resetting a flag 'haveStartedScrape' to false, and sending error messages to the background script.
 * Also prevents the default handling of the rejection event.
 * 
 * @param event - The PromiseRejectionEvent object containing information about the unhandled promise rejection.
 */
function suppressUnhandledPromiseRejection (event: PromiseRejectionEvent) {
   console.warn(`Unhandled promise rejection: ${event.reason}`); 
 
   haveStartedScrape = false;

   chrome.runtime.sendMessage({type: "Summary", text: "Sorry, we encountered an error reading this page."}); 
   chrome.runtime.sendMessage({type: "Classification", text: "Sorry, we encountered an error reading this page."}); 

   // Prevent the default handling (such as outputting the
   // error to the console)
   event.preventDefault();
}


/**
 * Function that performs a series of actions to summarize and classify text content.
 * It periodically sends messages to the Chrome runtime for summarization and classification progress.
 * Retrieves text content from the webpage, summarizes it using an external API, and then classifies the summary.
 * Utilizes internal organization modules for scraping, summarization, and classification.
 * @param key - A string key used for internal operations.
 */
function startScrape (key: string) : void {

    let NN = 1024*100; // we only have an 8k buffer, 100k string is 12 calls to LLM then another to summarise that. 
    let haveSummary = false;
    let baseSummaryText = "Summarising ...";
    let haveClassification = false;
    let baseClassificationText = "Classifying ...";
    let allText = "";

    // This interval loop sends progress messages 
    let interval = setInterval (() => {

      if (!haveSummary || !haveClassification) {

         if (!haveSummary) {
            baseSummaryText = baseSummaryText + ".";
            chrome.runtime.sendMessage({type: "Summary", text: baseSummaryText});       
         }

         if (!haveClassification) {
            baseClassificationText = baseClassificationText + ".";
            chrome.runtime.sendMessage({type: "Classification", text: baseClassificationText});       
         }

      }
      else {
         clearInterval (interval);
      }
    }, 1000);

    // This timeout does the actual scrape  
    setTimeout (() => {

      try {
         window.addEventListener("unhandledrejection", suppressUnhandledPromiseRejection);

         // First try to get all plain text, if that doesnt work, get the headers
         // If that doesnt work, scarape all divs (like 'the guardian' website)
         var scraped = artoo.scrape('p', 'text');
         if (scraped.length === 0) {
            for (var i = 0; i < 6; i++) {
               scraped = scraped = artoo.scrape('h' + i.toString(), 'text');
            }
         }
         if (scraped.length === 0) {
            scraped = artoo.scrape('div', 'text');
         }       
      
         allText = scraped.join(' \n');

         if (allText.length > NN) 
            allText = allText.substring(0, NN);

         window.removeEventListener("unhandledrejection", suppressUnhandledPromiseRejection);         
      }
      catch {
         window.removeEventListener("unhandledrejection", suppressUnhandledPromiseRejection);          
         allText = "";
      }

      var summarizeQuery = 'https://braid-api.azurewebsites.net/api/summarize?session=' + key.toString();
      var classifyQuery = 'https://braid-api.azurewebsites.net/api/classify?session=' + key.toString();

      axios.post(summarizeQuery, {
         request: {
            text: allText
         },
         headers: {
            'Content-Type': 'application/json'
         }
      }).then ((summaryRes: any) => {
         haveSummary = true;          
         if (summaryRes.status === 200) {
            chrome.runtime.sendMessage({type: "Summary", text: summaryRes.data.summary});
            var classifications = ["Business", "Technology", "Politics", "Health", "Sport"];

            axios.post(classifyQuery, {
               request: {
                  text: summaryRes.data.summary,
                  classifications: classifications
               },
               headers: {
                  'Content-Type': 'application/json'
               }
            }).then ((classifyRes: any) => {
               haveClassification = true;          
               if (classifyRes.status === 200) {
                  chrome.runtime.sendMessage({type: "Classification", text: classifyRes.data.classification});
               } 
               else {
                  chrome.runtime.sendMessage({type: "Classification", text: "Sorry, could not fetch a classification from the Waterfall server."}); 
               }
               // whenever we finish scraping - either successfully or a fail - we allow the user to start another one
               haveStartedScrape = false;
            })
            .catch ((e : any) => {     
               haveClassification = true;  
               console.error (e);   
               chrome.runtime.sendMessage({type: "Classification", text: "Sorry, could not fetch a classification from the Waterfall server."});  
               // whenever we finish scraping - either successfully or a fail - we allow the user to start another one
               haveStartedScrape = false;

            });        
         } 
         else {
            haveSummary = true;  
            haveClassification = true;   
            chrome.runtime.sendMessage({type: "Summary", text: "Sorry, could not fetch a summary from the Waterfall server."}); 
            chrome.runtime.sendMessage({type: "Classification", text: "Sorry, could not fetch a classification from the Waterfall server."}); 
            // whenever we finish scraping - either successfully or a fail - we allow the user to start another one
            haveStartedScrape = false;

         }
      })
      .catch ((e: any) => {     
         haveSummary = true;  
         haveClassification = true;
         console.error (e);   
         chrome.runtime.sendMessage({type: "Summary", text: "Sorry, could not fetch a summary from the Waterfall server."});                 
         chrome.runtime.sendMessage({type: "Classification", text: "Sorry, could not fetch a classification from the Waterfall server."}); 
         // whenever we finish scraping - either successfully or a fail - we allow the user to start another one
         haveStartedScrape = false;

      });   

    }, 500);

}


// Listen to messages from the popup.js script 
chrome.runtime.onMessage.addListener(function (message: any) {
	
   console.log ("Got message");   

   if (message.type === "Key" && !haveStartedScrape) {
      console.log ("Starting scrape");
      haveStartedScrape = true;
      startScrape (message.text);
   }
});    

console.log ("Content script loaded");

//startScrape ("49b65194-26e1-4041-ab11-4078229f478a");
****************************************

****************************************
CommonPy\.pytest_cache\CACHEDIR.TAG
****************************************
Signature: 8a477f597d28d172789f06886806bc55
# This file is a cache directory tag created by pytest.
# For information about cache directory tags, see:
#	https://bford.info/cachedir/spec.html
****************************************

****************************************
CommonPy\.pytest_cache\README.md
****************************************
# pytest cache directory #

This directory contains data from the pytest's cache plugin,
which provides the `--lf` and `--ff` options, as well as the `cache` fixture.

**Do not** commit this to version control.

See [the docs](https://docs.pytest.org/en/stable/how-to/cache.html) for more information.
****************************************

****************************************
CommonPy\src\chunk_repository_api.py
****************************************
'''Module to store data in the Chunk table of the Apis '''
# Copyright (c) 2024 Braid Technologies Ltd

# Standard Library Imports
import os
import logging
import datetime
import json
import requests
from requests.adapters import HTTPAdapter, Retry

from .storable_types import IStorableQuerySpec
from .chunk_repository_api_types import IStoredChunk, IStoredEmbedding, IStoredTextRendering
from .type_utilities import safe_dict_to_object, safe_cast

# Set up logging to display information about the execution of the script
logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)
logging.getLogger().setLevel(logging.DEBUG)

SESSION_KEY = os.environ['SessionKey']

headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110',
    'Content-Type': 'application/json',
    'Accept': 'application/json'
}

waterfall_application_name = 'Waterfall'
boxer_application_name = 'Boxer'
chunk_class_name = 'Chunk'
chunk_schema_version = '1'

class ChunkRepository:
    '''
    Class providing load, save, and existence check for files in the Braid Cosmos database.
    '''

    def __init__(self):

        self.session = requests.Session()
        retries = Retry(total=5, backoff_factor=1,
                        status_forcelist=[500, 502, 503, 504])
        self.session.mount('https://', HTTPAdapter(max_retries=retries))

        models_url = f'https://braid-api.azurewebsites.net/api/EnumerateModels?session={
            SESSION_KEY}'
        json_input = {
            'request': ''
        }

        response = self.session.post(
            models_url, json=json_input, headers=headers)

        if response.status_code == 200:
            data = response.json()
            self.default_model = data['defaultId']
            self.default_embedding_model = data['defaultEmbeddingId']

        else:
            raise RuntimeError('Error returned from API:' + response.text)

    def save(self, chunk: IStoredChunk) -> bool:
        '''
        Save the provided item to the database.

        Parameters:
           functional_key (str): functionalKey to use for the record
           chunk (IStoredChunk): The content to be saved.
        '''
        logger.debug('Saving: %s', chunk.id)

        utc_time = datetime.datetime.now(datetime.timezone.utc)
        utc_time_string = utc_time.strftime('%Y-%m-%d %H:%M:%S %Z')

        chunk.amended = utc_time_string

        # we need to turn embedded objects into JSON by converting to dictionaries
        chunk_as_json = IStoredChunk(chunk)
        if chunk.storedEmbedding:
            chunk_as_json.storedEmbedding = chunk.storedEmbedding.__dict__
        if chunk.storedTitle:
            chunk_as_json.storedTitle = chunk.storedTitle.__dict__
        if chunk.storedSummary:
            chunk_as_json.storedSummary = chunk.storedSummary.__dict__

        chunk_url = f'https://braid-api.azurewebsites.net/api/SaveChunk?session={
        #chunk_url = f'http://localhost:7071/api/SaveChunk?session={
            SESSION_KEY}'
        json_input = {
            'request': chunk_as_json.__dict__
        }

        response = self.session.post(
            chunk_url, json=json_input, headers=headers)

        if response.status_code == 200:
            logger.debug('Saved: %s', chunk.id)
            return True

        logger.debug('failed save: %s', chunk.id)
        return False

    def find(self, functional_key: str) -> IStoredChunk:
        '''
        Load content from the database based on the provided context and functional key.
        If the file exists in the output location, its contents are read and returned as a string.
        If the record is not found, return None

        Parameters:
           functional_key (str): functionalKey to use for the record

        Returns:
           item (IStoredChunk): The loaded content or None
        '''

        spec: IStorableQuerySpec = IStorableQuerySpec()
        spec.id = None
        spec.functionalSearchKey = functional_key
        logger.debug('Finding: %s', functional_key)

        # chunk_url = f'https://braid-api.azurewebsites.net/api/FindChunk?session={
        chunk_url = f'http://localhost:7071/api/FindChunk?session={
            SESSION_KEY}'
        json_input = {
            'request': spec.__dict__
        }

        response = self.session.post(
            chunk_url, json=json_input, headers=headers)

        if response.status_code == 200:

            response_json = json.loads(response.text)

            # Convert the main class and nested classes from JSON to Python classes
            summary_obj = safe_dict_to_object(response_json['storedSummary'])
            safe_summary = safe_cast(summary_obj, IStoredTextRendering)

            title_obj = safe_dict_to_object(response_json['storedTitle'])
            safe_title = safe_cast(title_obj, IStoredTextRendering)

            embedding_obj = safe_dict_to_object(
                response_json['storedEmbedding'])
            safe_embedding = safe_cast(embedding_obj, IStoredEmbedding)

            # Glue them together into one Python class
            response_json['storedEmbedding'] = safe_embedding
            response_json['storedSummary'] = safe_summary
            response_json['storedTitle'] = safe_title

            response_obj = safe_dict_to_object(response_json)
            safe_response: IStoredChunk = safe_cast(response_obj, IStoredChunk)



            logger.debug('Found: %s', functional_key)
            return safe_response

        logger.debug('Failed to find: %s', functional_key)
        return None

    def load(self, record_id: str) -> IStoredChunk:
        '''
        Load content from the database based on the provided context and key.
        If the file exists in the output location, its contents are read and returned as a string.
        If the record is not found, return None

        Parameters:
           record_id (str): key to use for the record

        Returns:
           item (IStoredChunk): The loaded content or None
        '''

        spec: IStorableQuerySpec = IStorableQuerySpec()
        spec.id = record_id
        spec.functionalSearchKey = None
        logger.debug('Finding: %s', record_id)

        # chunk_url = f'https://braid-api.azurewebsites.net/api/FindChunk?session={
        chunk_url = f'http://localhost:7071/api/GetChunk?session={
            SESSION_KEY}'
        json_input = {
            'request': spec.__dict__
        }

        response = self.session.post(
            chunk_url, json=json_input, headers=headers)

        if response.status_code == 200:

            response_json = json.loads(response.text)

            # Convert the main class and nested classes from JSON dictionaries to Python classes
            response_obj = safe_dict_to_object(response_json)
            safe_response: IStoredChunk = safe_cast(response_obj, IStoredChunk)

            summary_obj = safe_dict_to_object(response_json['storedSummary'])
            safe_summary = safe_cast(summary_obj, IStoredTextRendering)

            embedding_obj = safe_dict_to_object(
                response_json['storedEmbedding'])
            safe_embedding = safe_cast(embedding_obj, IStoredEmbedding)

            # Glue them together into one Python class
            safe_response.storedEmbedding = safe_embedding
            safe_response.storedSummary = safe_summary

            logger.debug('Loaded: %s', record_id)
            return safe_response

        logger.debug('Failed to load: %s', record_id)
        return None

    def remove(self, record_id: str) -> bool:
        '''
        Removes a record with the specified key from database

        Parameters:
           id (str): primary key to use for the record

        Returns:
           bool: True if the record is removed, False otherwise.
        '''
        spec: IStorableQuerySpec = IStorableQuerySpec()
        spec.id = record_id
        spec.functionalSearchKey = None
        logger.debug('Removing: %s', id)

        # chunk_url = f'https://braid-api.azurewebsites.net/api/FindChunk?session={
        chunk_url = f'http://localhost:7071/api/RemoveChunk?session={
            SESSION_KEY}'
        json_input = {
            'request': spec.__dict__
        }

        response = self.session.post(
            chunk_url, json=json_input, headers=headers)

        if response.status_code == 200:
            logger.debug('Removed: %s', record_id)
            return True

        logger.debug('Failed to remove: %s', record_id)
        return False

    def exists(self, functional_key: str) -> bool:
        '''
        Checks if a record with the specified key and context exists in the database

        Parameters:
           functional_key (str): functionalKey to use for the record

        Returns:
           bool: True if the record exists, False otherwise.
        '''
        spec: IStorableQuerySpec = IStorableQuerySpec()
        spec.id = None
        spec.functionalSearchKey = functional_key
        logger.debug('Checking existence of: %s', functional_key)

        # chunk_url = f'https://braid-api.azurewebsites.net/api/FindChunk?session={
        chunk_url = f'http://localhost:7071/api/FindChunk?session={
            SESSION_KEY}'
        json_input = {
            'request': spec.__dict__
        }

        response = self.session.post(
            chunk_url, json=json_input, headers=headers)

        if response.status_code == 200:
            logger.debug('Found: %s', functional_key)
            return True

        logger.debug('Failed to find: %s', functional_key)
        return False
****************************************

****************************************
CommonPy\src\chunk_repository_api_types.py
****************************************
# Generated by ts2python version 0.7.5 on 2024-11-05 13:56:28.905808
# pylint: disable=invalid-name
"""
Defines several class structures for storing and querying
data related to embeddings and text renderings.

Classes:
    IStoredEmbedding: representing an embedding with a model ID
        and a list of float values.
    IStoredTextRendering: representing a text rendering with a
        model ID and text content.
    IStoredChunk: Inherits from IStorable, representing a chunk of data with
        additional attributes for functional key, parent chunk ID, original
        text, and related stored embeddings and text renderings.
    IStoredChunkQuerySpec: specifying query parameters for
        stored chunks, including a functional key.
"""

from typing import Union, List
from .type_utilities import safe_cast
from .storable_types import IStorable


class IStoredEmbedding:
    """
    A TypedDict representing a stored embedding.

    Attributes:
       modelId (str): The identifier for the model associated with the embedding.
       embedding (List[float]): A list of float values representing the embedding.
    """
    modelId: str
    embedding: List[float]

    def __init__(self, other=None):
        if other:
            self.modelId = other.modelId
            self.embedding = other.embedding
        else:
            self.modelId = None
            self.embedding = None


def create_embedding(embedding: List[float], model: str) -> IStoredEmbedding:
    ''' Utility function to create an embedding '''
    rendering: IStoredEmbedding = IStoredEmbedding()
    rendering.embedding = embedding
    rendering.modelId = model


class IStoredTextRendering:
    """
    A TypedDict representing a text rendering.

    Attributes:
       modelId (str): The identifier for the model associated with the text rendering.
       text (str): The content of the text rendering.
    """
    modelId: str
    text: str

    def __init__(self, other=None):
        if other:
            self.modelId = other.modelId
            self.text = other.text
        else:
            self.modelId = None
            self.text = None


def create_text_rendering(text: str, model: str) -> IStoredTextRendering:
    ''' Utility function to create a text rendering '''
    rendering: IStoredTextRendering = IStoredTextRendering()
    rendering.text = text
    rendering.modelId = model

    return rendering


class IStoredChunk(IStorable):
    """
    Represents a stored chunk of data with various attributes.

    Attributes:
    parentChunkId (Union[str, None]): The ID of the parent chunk, if any.
    originalText (Union[str, None]): The original text content of the chunk.
    storedEmbedding (Union[IStoredEmbedding, None]): An optional stored embedding associated with the chunk.
    storedSummary (Union[IStoredTextRendering, None]): An optional stored summary text rendering.
    storedTitle (Union[IStoredTextRendering, None]): An optional stored title text rendering.
    relatedChunks (Union[List[str], None]): A list of IDs of related chunks, if any.
    """
    parentChunkId: Union[str, None]
    originalText: Union[str, None]
    storedEmbedding: Union[IStoredEmbedding, None]
    storedSummary: Union[IStoredTextRendering, None]
    storedTitle: Union[IStoredTextRendering, None]
    url: Union[str, None]
    relatedChunks: Union[List[str], None]

    def __init__(self, other=None):
        super().__init__(other)

        if other:
            self.parentChunkId = other.parentChunkId
            self.originalText = other.originalText
            self.storedEmbedding = safe_cast(
                other.storedEmbedding, IStoredEmbedding)
            self.storedSummary = safe_cast(
                other.storedSummary, IStoredTextRendering)
            self.storedTitle = safe_cast(
                other.storedTitle, IStoredTextRendering)
            if other.relatedChunks:
                self.relatedChunks = other.relatedChunks[:]
            else:
                self.relatedChunks = None
            self.url = other.url
        else:
            self.parentChunkId = None
            self.originalText = None
            self.storedEmbedding = None
            self.storedSummary = None
            self.storedTitle = None
            self.relatedChunks = None
            self.url = None
****************************************

****************************************
CommonPy\src\page_repository_api.py
****************************************
'''Module to store data in the Page table of the Apis '''
# Copyright (c) 2024 Braid Technologies Ltd

# Standard Library Imports
import os
import logging
import datetime
import requests
from requests.adapters import HTTPAdapter, Retry
import zlib
import base64

from .page_repository_api_types import IStoredPage

page_class_name = 'Page'
page_schema_version = '1'

# Set up logging to display information about the execution of the script
logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)
logging.getLogger().setLevel(logging.DEBUG)

SESSION_KEY = os.environ['SessionKey']

headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110',
    'Content-Type': 'application/json',
    'Accept': 'application/json'
}

waterfall_application_name = 'Waterfall'
boxer_application_name = 'Boxer'
chunk_class_name = 'Chunk'
chunk_schema_version = '1'


class PageRepository:
    '''
    Class providing save & load for Pages in the Braid Cosmos database.
    '''

    def __init__(self):

        self.session = requests.Session()
        retries = Retry(total=5, backoff_factor=1,
                        status_forcelist=[500, 502, 503, 504])
        self.session.mount('https://', HTTPAdapter(max_retries=retries))

    def save(self, page: IStoredPage) -> bool:
        '''
        Save the provided item to the database.

        Parameters:
           page (IStoredPage): The content to be saved.
        '''
        logger.debug('Saving: %s', page.id)

        utc_time = datetime.datetime.now(datetime.timezone.utc)
        utc_time_string = utc_time.strftime('%Y-%m-%d %H:%M:%S %Z')

        page.amended = utc_time_string

        # page_url = f'https://braid-api.azurewebsites.net/api/SavePage?session={
        page_url = f'http://localhost:7071/api/SavePage?session={
            SESSION_KEY}'
        json_input = {
            'request': page.__dict__
        }

        response = self.session.post(
            page_url, json=json_input, headers=headers)

        if response.status_code == 200:
            logger.debug('Saved: %s', page.id)
            return True

        logger.debug('failed save: %s', page.id)
        return False

    def load(self, record_id: str) -> str:
        '''
        Load content from the database based on the provided key.
        If the file exists in the output location, its contents are read and returned as a string.
        If the record is not found, return None

        Parameters:
           record_id (str): key to use for the record

        Returns:
           str - HTML for the page or None
        '''

        logger.debug('Finding: %s', record_id)

        # page_url = f'https://braid-api.azurewebsites.net/api/GetPage?session={
        page_url = f'http://localhost:7071/api/GetPage?session={
            SESSION_KEY}&id={record_id}'

        response = self.session.post(
            page_url, headers=headers)

        if response.status_code == 200:
            return response.text

        logger.debug('Failed to load: %s', record_id)
        return None

def compress_string(input_str: str) -> str:
    """Compress a string using deflate and encode in Base64.
    
    Parameters:
        input_str (str): The string to compress and encode.
        
    Returns:
        str: The compressed and base64-encoded string.
    """
    # Convert string to bytes using UTF-8 encoding
    data = input_str.encode('utf-8')
    # Compress the data
    compressed = zlib.compress(data)
    # Encode the compressed data in base64
    base64_encoded = base64.b64encode(compressed).decode('ascii')
    return base64_encoded

def read_file_to_string(file_path: str) -> str:
    """Read the contents of a file into a string using UTF-8 encoding.
    
    Parameters:
        file_path (str): Path to the file to read
        
    Returns:
        str: Contents of the file as a string
        
    Raises:
        FileNotFoundError: If the file doesn't exist
        IOError: If there's an error reading the file
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            return file.read()
    except FileNotFoundError:
        logger.error(f"File not found: {file_path}")
        raise
    except IOError as e:
        logger.error(f"Error reading file {file_path}: {str(e)}")
        raise

def make_page_from_file(application_id: str,
                   context_id: str,
                   functional_search_key: str,
                   class_name: str,
                   schema_version: str,
                   page_id: str,
                   dir_name: str, file_name: str) -> IStoredPage:

    utc_time = datetime.datetime.now(datetime.timezone.utc)
    utc_time_string = utc_time.strftime('%Y-%m-%d %H:%M:%S %Z')

    html = read_file_to_string(os.path.join(dir_name, file_name))

    page: IStoredPage = IStoredPage()
    page.id = page_id
    page.applicationId = application_id
    page.contextId = context_id
    page.functionalSearchKey = functional_search_key
    page.userId = None
    page.created = utc_time_string
    page.amended = utc_time_string
    page.className = class_name
    page.schemaVersion = schema_version
    page.html = compress_string(html)

    return page
****************************************

****************************************
CommonPy\src\page_repository_api_types.py
****************************************
# Generated by ts2python version 0.7.5 on 2024-11-05 13:56:28.905808
# pylint: disable=invalid-name
"""
Defines several class structures for storing and querying
data related to embeddings and text renderings.

Classes:
    IStoredPage: Inherits from IStorable, representing a chunk of data with
        an additional attributes for html.
"""

from typing import Union
from .storable_types import IStorable

class IStoredPage(IStorable):
    """
    Represents a stored chunk of data with various attributes.

    Attributes:
    html (Union[str, None]): Html content of the page, if any.
    """
    html: Union[str, None]

    def __init__(self, other=None):
        super().__init__(other)

        if other:
            self.html = other.html
        else:
            self.html = None
****************************************

****************************************
CommonPy\src\storable_types.py
****************************************
# Generated by ts2python version 0.7.5 on 2024-11-05 13:56:28.905808
# pylint: disable=invalid-name
"""
Defines several class structures for storing and querying data.

Classes:
    IStorable: A base class with common attributes for storable entities,
        including identifiers, timestamps, and schema version.
"""

from typing import Union

class IStorable:
    """
    A base class for storable entities with common attributes.

    Attributes:
     id (Union[str, None]): The unique identifier for the entity, which can be None.
     applicationId (str): The identifier for the application associated with the entity.
     contextId (Union[str, None]): The identifier for the context, which can be None.
     functionalSearchKey (str): A key used to identify the chunk functionally.  Can be None.
     userId (Union[str, None]): The identifier for the user, which can be None.
     created (datetime): The timestamp when the entity was created.
     amended (datetime): The timestamp when the entity was last modified.
     className (str): The name of the class.
     schemaVersion (str): The version of the schema used by the entity.
    """
    id: Union[str, None]
    applicationId: str
    contextId: Union[str, None]
    functionalSearchKey: Union[str, None]
    userId: Union[str, None]
    created: str
    amended: str
    className: str
    schemaVersion: str

    def __init__(self, other=None):
        if other:
            self.id = other.id
            self.applicationId = other.applicationId
            self.contextId = other.contextId
            self.functionalSearchKey = other.functionalSearchKey
            self.userId = other.userId
            self.created = other.created
            self.amended = other.amended
            self.className = other.className
            self.schemaVersion = other.schemaVersion
        else:
            self.id = None
            self.applicationId = None
            self.contextId = None
            self.functionalSearchKey = None
            self.userId = None
            self.created = None
            self.amended = None
            self.className = None
            self.schemaVersion = None

class IStorableQuerySpec:
    """
    A class for specifying query parameters for storables.

    Attributes:
     id (str): The primary key used to identify the chunk.
     functionalSearchKey (str) if id in None, functional key can be used.
    """
    id: str
    functionalSearchKey: str

    def __init__(self, other=None):
        if other:
            self.id = other.id
            self.functionalSearchKey = other.functionalSearchKey
        else:
            self.id = None
            self.functionalSearchKey = None


class IStorableOperationResult:
    """
    Defines the results of a storable operation - true or false.
    """

    ok: bool

    def __init__(self, other=None):
        if other:
            self.ok = other.ok
        else:
            self.ok = None
****************************************

****************************************
CommonPy\src\type_utilities.py
****************************************
"""
Utility to change a dictionary to an object - used in mapping from JSON back to object types after web requests
"""


class DictToObject:
    """
    Converts a dictionary into an object by setting attributes for each key-value pair.

    Attributes are dynamically created based on the dictionary's keys, allowing
    for easy access to the dictionary's data as object attributes.

    Parameters:
       dictionary (dict): The dictionary to be converted into an object.
    """

    def __init__(self, dictionary):
        if dictionary:
            for key, value in dictionary.items():
                setattr(self, key, value)


def safe_dict_to_object(val, default=None) -> object:
    """
    Safely converts a dictionary into an object by setting attributes for each key-value pair.

    Attributes are dynamically created based on the dictionary's keys, allowing
    for easy access to the dictionary's data as object attributes.

    Parameters:
       dictionary (dict): The dictionary to be converted into an object. If this is None, None is returned
    """

    obj = default

    try:
        if val:
           obj = DictToObject(val)
    except (ValueError, TypeError):
        return obj

    return obj


def safe_cast(val, to_type, default=None) -> object:
    """
    Safely casts a value to a specified type, returning a default value if casting fails.

    Parameters:
       val: The value to be cast.
       to_type: The type to which the value should be cast.
       default: The value to return if casting fails (default is None).

    Returns:
       The value cast to the specified type, or the default value if casting fails.
    """

    obj = default

    try:
        if val:        
           return to_type(val)
    except (ValueError, TypeError):
        return obj
****************************************

****************************************
CommonPy\src\__init__.py
****************************************

****************************************

****************************************
CommonPy\test\chunk_repository_test.py
****************************************
''' Tests for the DB API '''
# Copyright (c) 2024 Braid Technologies Ltd

# Standard Library Imports
import os
import sys
import logging
import uuid
import datetime

from src.chunk_repository_api import ChunkRepository, IStoredChunk, IStoredEmbedding, IStoredTextRendering

test_root = os.path.dirname(__file__)
parent = os.path.abspath(os.path.join(test_root, '..'))
src_dir = os.path.join(parent, 'src')
sys.path.extend([parent, src_dir])

# Set up logging to display information about the execution of the script
logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)
logger.setLevel(logging.ERROR)

utc_time = datetime.datetime.now(datetime.timezone.utc)
utc_time_string = utc_time.strftime('%Y-%m-%d %H:%M:%S %Z')

embedding: IStoredEmbedding = IStoredEmbedding()
embedding.embedding = [1.0, 2.0]
embedding.modelId = 'MadeUpEmbeddingModel'

summary: IStoredTextRendering = IStoredTextRendering()
summary.text = 'Summary text'
summary.modelId = 'MadeUpModel'

title: IStoredTextRendering = IStoredTextRendering()
title.text = 'Title text'
title.modelId = 'MadeUpModel'

master_chunk: IStoredChunk = IStoredChunk()
master_chunk.id = str(uuid.uuid4())
master_chunk.applicationId = 'TestApplication'
master_chunk.contextId = 'TestContext'
master_chunk.functionalSearchKey = 'TestKey' + str(uuid.uuid4())
master_chunk.userId = None
master_chunk.created = utc_time_string
master_chunk.amended = utc_time_string
master_chunk.className = 'madeUpClass'
master_chunk.schemaVersion = '1'
master_chunk.parentChunkId = None
master_chunk.originalText = 'Original test'
master_chunk.storedEmbedding = embedding
master_chunk.storedSummary = summary
master_chunk.storedTitle = title
master_chunk.relatedChunks = [str(uuid.uuid4()), str(uuid.uuid4())]


def test_basic():
    ''' Test construction '''
    repository = ChunkRepository()
    assert repository  # If we get here without exceptions we are ok


def test_does_not_exist():
    ''' Test non-existence '''
    test_path = 'fail_test.html'

    repository = ChunkRepository()
    exists = repository.exists(test_path)

    assert not exists


def test_save():
    ''' Test save '''

    repository = ChunkRepository()
    saved = repository.save(master_chunk)

    assert saved


def test_save_exists():
    ''' Test save & then that it exists '''

    repository = ChunkRepository()
    saved = repository.save(master_chunk)

    exists = False

    if saved:
        exists = repository.exists(master_chunk.functionalSearchKey)

    assert saved
    assert exists


def test_save_find():
    ''' Test save & then that it can be loaded '''

    repository = ChunkRepository()
    saved = repository.save(master_chunk)

    loaded = False

    if saved:
        loaded = repository.find(master_chunk.functionalSearchKey)

    assert saved
    assert loaded
    assert loaded.storedEmbedding.embedding == master_chunk.storedEmbedding.embedding
    assert loaded.storedSummary.text == master_chunk.storedSummary.text
****************************************

****************************************
CommonPy\test\page_repository_test.py
****************************************
''' Tests for the DB API '''
# Copyright (c) 2024 Braid Technologies Ltd

# Standard Library Imports
import os
import sys
import logging
import uuid

from src.page_repository_api import (
    PageRepository, make_page_from_file)

test_root = os.path.dirname(__file__)
parent = os.path.abspath(os.path.join(test_root, '..'))
src_dir = os.path.join(parent, 'src')
sys.path.extend([parent, src_dir])

# Set up logging to display information about the execution of the script
logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)
logger.setLevel(logging.ERROR)

page = make_page_from_file('TestApplication', 
                           'TestContext', 
                           'TestKey' + str(uuid.uuid4()), 
                           'madeUpClass', 
                           '1', 
                           str(uuid.uuid4()),
                           test_root, 
                           'page_test.html')

def test_basic():
    ''' Test construction '''
    repository = PageRepository()
    assert repository  # If we get here without exceptions we are ok


def test_does_not_exist():
    ''' Test non-existence '''
    test_path = 'fail_test.html'

    repository = PageRepository()
    exists = repository.load(test_path)

    assert not exists


def test_save():
    ''' Test save '''

    repository = PageRepository()
    saved = repository.save(page)

    assert saved


def test_save_load():
    ''' Test save & then that it can be loaded '''

    repository = PageRepository()
    saved = repository.save(page)

    loaded = False

    if saved:
        loaded = repository.load(page.id)

    assert saved
    assert loaded
****************************************
