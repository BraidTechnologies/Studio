****************************************
Api\test\querymodel.test.ts
****************************************
'use strict';
// Copyright Braid Technologies Ltd, 2024


import { expect } from 'expect';
import { describe, it } from 'mocha';

declare var process: any;

import { EEnvironment } from '../../CommonTs/src/IEnvironment';
import { getEnvironment } from '../../CommonTs/src/IEnvironmentFactory';
import { EChunkRepository } from '../../CommonTs/src/EnrichedChunk';
import { QueryModelApi } from '../../CommonTs/src/QueryModelApi';
import { IConversationElement, IEnrichedResponse, EConversationRole, IGenerateQuestionQuery, IQuestionGenerationResponse } from '../../CommonTs/src/EnrichedQuery';


let personaPrompt = "You are an AI assistant helping an application developer understand generative AI. You explain complex concepts in simple language, using Python examples if it helps. You limit replies to 50 words or less. If you don't know the answer, say 'I don't know'. If the question is not related to building AI applications, Python, or Large Language Models (LLMs), say 'That doesn't seem to be about AI'.";
let enrichmentDocumentPrompt = "You will be provided with a question about generative AI. Write a 50 word summary of an article that would be a great answer to the question. Enrich the summary with additional topics that the question asker might want to understand. Write the summary in the present tense, as though the article exists. If the question is not related to building AI applications, Python, or Large Language Models (LLMs), say 'That doesn't seem to be about AI'. \n\n ###The Question:";
let question = "What are the main user interface considerations for building an application using an LLM?"

let questionGenerationPrompt = "You will be provided with a short summary of article about building applications that use generative AI technology. Write a question of no more than 10 words that a reader might after they have read the article. \n\n ###The Summary of the Article:";
let summary = "Financial services will adopt generative AI, powered by large language models (LLMs), faster than expected. LLMs can create new content by training on vast amounts of unstructured data, with unlimited computational power. This transformation has the potential to revolutionize the financial services market, going beyond traditional AI/ML capabilities.";

let priorQuestions = ["How does an LLM work?", "What are LLMs bad at?"];
let priorAnswers = ["Large Language Models (LLMs) use transformers, relying on self-attention mechanisms to understand word relationships in text. Trained on vast data, they predict the next word in a sequence by analyzing context. Over time, they learn language patterns, enabling them to generate coherent, context-aware responses.", 
   "LLMs struggle with reasoning, understanding context deeply, and handling ambiguous or nuanced inputs. They may generate incorrect or nonsensical information confidently, lack real-world awareness, and can't verify facts. They also have limited capacity for long-term memory and can be biased based on their training data."];


describe("QueryModel", async function () {

   it("Needs to make a simple query.", async function () {

      let api = new QueryModelApi(getEnvironment(EEnvironment.kLocal), process.env.SessionKey.toString());
      let query = {
         repositoryId: EChunkRepository.kBoxer,
         personaPrompt: personaPrompt,
         enrichmentDocumentPrompt: enrichmentDocumentPrompt,
         history: new Array<IConversationElement>(),
         question: question,
         similarityThreshold: 0.4,
         maxCount: 2
      };

      let response = await api.queryModelWithEnrichment(query);

      let typedResponse: IEnrichedResponse = response as IEnrichedResponse;
      expect(typeof response === 'undefined').toBe(false);
      expect(typedResponse.answer.length > 0).toBe(true);      
      expect(typedResponse.chunks.length > 0).toBe(true);    
      if (typedResponse.chunks.length > 1)   {
         expect(typedResponse.chunks[0].relevance >= typedResponse.chunks[1].relevance).toBe(true);   
      }

   }).timeout(20000);

   it("Needs to make a query with history.", async function () {

      let api = new QueryModelApi(getEnvironment(EEnvironment.kLocal), process.env.SessionKey.toString());
      let query = {
         repositoryId: EChunkRepository.kBoxer,
         personaPrompt: personaPrompt,
         enrichmentDocumentPrompt: enrichmentDocumentPrompt,
         history: [{role: EConversationRole.kUser, content: priorQuestions[0]}, 
                   {role: EConversationRole.kAssistant, content: priorAnswers[0]}, 
                   {role: EConversationRole.kUser, content: priorQuestions[1]},
                   {role: EConversationRole.kAssistant, content: priorAnswers[1]}],
         question: question,
         similarityThreshold: 0.5,
         maxCount: 2
      };

      let response = await api.queryModelWithEnrichment(query);

      expect(typeof response === 'undefined').toBe(false);

      let typedResponse: IEnrichedResponse = response as IEnrichedResponse;      
      expect(typedResponse.answer.length > 0).toBe(true);      
      expect(typedResponse.chunks.length > 0).toBe(true);    
      if (typedResponse.chunks.length > 1)   {
         expect(typedResponse.chunks[0].relevance >= typedResponse.chunks[1].relevance).toBe(true);   
      }

   }).timeout(20000);

   it("Needs to generate a questions based on a summary", async function () {

      let api = new QueryModelApi(getEnvironment(EEnvironment.kLocal), process.env.SessionKey.toString());
      let query = {
         personaPrompt: personaPrompt,
         questionGenerationPrompt: questionGenerationPrompt,
         summary: summary
      };

      let response = await api.generateQuestion(query);

      expect(typeof response === 'undefined').toBe(false);
      expect((response as IQuestionGenerationResponse).question.length > 0).toBe(true);      

   }).timeout(20000);   
});
****************************************

****************************************
Api\test\storable.ts
****************************************
'use strict';
// Copyright Braid Technologies Ltd, 2024

import { expect } from 'expect';

import { IStorable } from '../../CommonTs/src/IStorable';
import { IStorableRepostoryApiWrapper } from '../../CommonTs/src/StorableRepositoryApi'; 

export function randomInt(min : number, max: number) : number {
   return Math.floor(Math.random() * (max - min)) + min;
}

export function randomKey () : string {
   return randomInt (0, 1000000000).toString();
}

export async function saveLoadRemove<TApi extends IStorableRepostoryApiWrapper> (api: TApi, record: IStorable) : Promise<boolean> {

   let saved = await api.save (record);    
   let loaded = await api.load (record.id as string);
   let removed = await api.remove (record.id as string);
   
   expect (saved === true).toEqual (true);
   expect (loaded && (loaded.id === record.id)).toBe (true);
   expect (removed === true).toEqual (true);

   return (saved === true) && (loaded?.id === record.id) && (removed === true);
}

export async function saveFindRemove<TApi extends IStorableRepostoryApiWrapper> (api: TApi, record: IStorable) : Promise<boolean> {

   let saved = await api.save (record);    
   let loaded = await api.find (record.functionalSearchKey as string);
   let removed = await api.remove (record.id as string);
   
   expect (saved === true).toEqual (true);
   expect (loaded && (loaded.id === record.id)).toBe (true);
   expect (removed === true).toEqual (true);

   return (saved === true) && (loaded?.id === record.id) && (removed === true);
}

export async function failSave <TApi extends IStorableRepostoryApiWrapper> (api: TApi, record: IStorable) : Promise<boolean> {

   let saved = await api.save (record);    
   expect (saved === false).toEqual (true);

   return (saved === false);
}
****************************************

****************************************
Api\test\summarise.test.ts
****************************************
'use strict';
// Copyright Braid Technologies Ltd, 2024

import { expect } from 'expect';
import { describe, it } from 'mocha';
import axios from 'axios';

import {getEnvironment} from '../../CommonTs/src/IEnvironmentFactory';
import { EEnvironment } from '../../CommonTs/src/IEnvironment';
import { ISummariseRequest, ISummariseResponse } from "../../CommonTs/src/SummariseApi.Types";

declare var process: any;

describe("Summarise", async function () {

   async function validSummaryCall (apiUrl: string, text: string) : Promise<string | undefined> {

      let summary: string | undefined = undefined;
      let summariseRequest: ISummariseRequest = {
         text: text,
         lengthInWords: 50
      }

      try {
         let response = await axios.post(apiUrl, {
           request: summariseRequest,
           headers: {
              'Content-Type': 'application/json'
           }
         });

         summary = (response.data as ISummariseResponse).summary;
         console.log (summary);
  
      } catch (e: any) {       

         console.error (e);           
      }   
      
      return summary;
   }

   async function invalidSummaryCall (apiUrl: string, text: string) : Promise <Boolean> {
   
      var response: any;
      let caught = false;

      try {
         response = await axios.get(apiUrl, {
         });

      } catch (e: any) {       
         caught = true;
      }     

      return caught;
   }   

   it("Needs to fail if session key is incorrect", async function () {

      let sampleText : string | undefined = "My name is Jon and I am founding an AI project acceleration company." ;      
      let environment = getEnvironment(EEnvironment.kLocal);

      let apiUrl = environment.summariseApi() + "?session=" + "thiswillfail";

      let caught = await invalidSummaryCall (apiUrl, sampleText);

      expect (caught).toBe (true) ;     

   }).timeout(20000);

   it("Needs to fail if session key is incorrect against production", async function () {

      let sampleText : string | undefined = "My name is Jon and I am founding an AI project acceleration company." ;      
      let environment = getEnvironment(EEnvironment.kProduction);

      let apiUrl = environment.summariseApi() + "?session=" + "thiswillfail";

      let caught = await invalidSummaryCall (apiUrl, sampleText);

      expect (caught).toBe (true) ;     

   }).timeout(20000);

   it("Needs to summarise a simple message", async function () {

      let sampleText = "My name is Jon and I am founding an AI project acceleration company." ;      
      let environment = getEnvironment(EEnvironment.kLocal);

      let apiUrl = environment.summariseApi() + "?session=" + process.env.SessionKey.toString();

      let summary = await validSummaryCall (apiUrl, sampleText);

      expect (summary && summary?.length > 0).toBe (true) ;     

   }).timeout(20000);

   
   it("Needs to summarise a long message", async function () {

      let baseText = "My name is Jon and I am founding an AI project acceleration company." ;  
      let sampleText = baseText;  
      for (var i = 0; i < 1000; i++)  {
         sampleText = sampleText + " " + baseText;
      }

      let environment = getEnvironment(EEnvironment.kLocal);

      let apiUrl = environment.summariseApi() + "?session=" + process.env.SessionKey.toString();

      let summary = await validSummaryCall (apiUrl, sampleText);

      expect (summary && summary?.length > 0).toBe (true) ;     

   }).timeout(20000);   

   
   it("Needs to summarise a simple message against production", async function () {

      let sampleText = "My name is Jon and I am founding an AI project acceleration company." ;      
      let environment = getEnvironment(EEnvironment.kProduction);

      let apiUrl = environment.summariseApi() + "?session=" + process.env.SessionKey.toString();

      let summary = await validSummaryCall (apiUrl, sampleText);

      expect (summary && summary?.length > 0).toBe (true) ;     

   }).timeout(20000);

   it("Needs to summarise a long message against production", async function () {

      let baseText = "My name is Jon and I am founding an AI project acceleration company." ;  
      let sampleText = baseText;  
      for (var i = 0; i < 500; i++)  {
         sampleText = sampleText + " " + baseText;
      }

      let environment = getEnvironment(EEnvironment.kProduction);

      let apiUrl = environment.summariseApi() + "?session=" + process.env.SessionKey.toString();

      let summary = await validSummaryCall (apiUrl, sampleText);

      expect (summary && summary?.length > 0).toBe (true) ;     

   }).timeout(10000);    

});
****************************************

****************************************
Api\test\suppresssummarisefail.test.ts
****************************************
'use strict';
// Copyright Braid Technologies Ltd, 2024


import { expect } from 'expect';
import { describe, it } from 'mocha';
import axios from 'axios';

import {getEnvironment} from '../../CommonTs/src/IEnvironmentFactory';
import { EEnvironment } from '../../CommonTs/src/IEnvironment';
import { ISuppressSummariseFailRequest, ISuppressSummariseFailResponse, ESuppressSummariseFail } from "../../CommonTs/src/SuppressSummariseFailApi.Types";

declare var process: any;

let summariseFails = ["Im sorry, but it seems that the text you provided does not contain any main body information. It consists of web page navigation and cookie details. Please provide a different text for summarization.",
  "The given text is not the main body of the page and does not contain any relevant information for summarizing. It appears to be a website navigation menu and does not provide any meaningful content to summarize.",
  "There is no relevant information to summarise as the text appears to be a website navigation menu and includes irrelevant information such as contact information and other web page elements.",
  "Im sorry, but I cannot summarize the given text as the relevant information is not clear. It seems to be a mixture of web page navigation items, company descriptions, and consent form options for selecting cookies on a website. Please provide a specific body of text that you woild like me to summarise.",
  "I apologize for the inconvenience, but it appears that the text provided is not suitable for generating a meaningful summary. It contains irrelevant information or is incomplete. If you can provide a more specific and complete text, I would be happy to assist you in summasising other content.",
  "There is no main body of text.",
  "I apologize for the inconvenience, but there is no main body of text, I cannot provide a summary."]

describe("SuppressSummariseFail", async function () {

   async function validCall (apiUrl: string, text: string, length: number) : Promise<string | undefined> {

      let failCode: string | undefined = undefined;
      let summariseRequest: ISuppressSummariseFailRequest = {
         text: text,
         lengthInWords: 50
      }

      try {
         let response = await axios.post(apiUrl, {
           request: summariseRequest,
           headers: {
              'Content-Type': 'application/json'
           }
         });

         failCode = (response.data as ISuppressSummariseFailResponse).isValidSummary;
  
      } catch (e: any) {       

         console.error (e);           
      }   
      
      return failCode;
   }

   async function invalidCall (apiUrl: string, text: string) : Promise <Boolean> {
   
      var response: any;
      let caught = false;

      try {
         response = await axios.get(apiUrl, {
         });

      } catch (e: any) {       
         caught = true;
      }     

      return caught;
   }   

   it("Needs to fail if session key is incorrect", async function () {

      let sampleText : string | undefined = summariseFails[0] ;      
      let environment = getEnvironment(EEnvironment.kLocal);

      let apiUrl = environment.suppressSummariseFail() + "?session=" + "thiswillfail";

      let caught = await invalidCall (apiUrl, sampleText);

      expect (caught).toBe (true) ;     

   }).timeout(20000);

   it("Needs to suppress example fails", async function () {

      for (let i = 0; i < summariseFails.length; i++) {   
         let sampleText = summariseFails[i];

         let environment = getEnvironment(EEnvironment.kLocal);
  
         let apiUrl = environment.suppressSummariseFail() + "?session=" + process.env.SessionKey.toString();

         let failCode = await validCall (apiUrl, sampleText, 10);

         expect (failCode && failCode?.length > 0).toBe (true) ;  
         expect (failCode).toBe (ESuppressSummariseFail.kNo.toString()) ;           
      }   

   }).timeout(20000);

   it("Needs to fail if session key is incorrect", async function () {

      let sampleText : string | undefined = summariseFails[0] ;      
      let environment = getEnvironment(EEnvironment.kProduction);

      let apiUrl = environment.suppressSummariseFail() + "?session=" + "thiswillfail";

      let caught = await invalidCall (apiUrl, sampleText);

      expect (caught).toBe (true) ;     

   }).timeout(20000);

   it("Needs to suppress example fails against production", async function () {

      for (let i = 0; i < summariseFails.length; i++) {   
         let sampleText = summariseFails[i];

         let environment = getEnvironment(EEnvironment.kProduction);
  
         let apiUrl = environment.suppressSummariseFail() + "?session=" + process.env.SessionKey.toString();

         let failCode = await validCall (apiUrl, sampleText, 10);

         expect (failCode && failCode?.length > 0).toBe (true) ;  
         let noValue = ESuppressSummariseFail.kNo;
         expect (failCode == noValue).toBe (true) ;           
      }   

   }).timeout(20000);

});
****************************************

****************************************
Api\src\functions\AzureStorableApi.ts
****************************************
'use strict';
// Copyright Braid Technologies Ltd, 2024

// 3rd party imports
import { HttpRequest, HttpResponseInit, InvocationContext } from "@azure/functions";

// Internal imports
import { isSessionValid, sessionFailResponse, notFoundResponse } from "./Utility";
import { IStorable, IStorableQuerySpec, IStorableMultiQuerySpec, IStorableOperationResult} from "../../../CommonTs/src/IStorable";
import {AzureLogger, findStorable, loadStorable, saveStorable, removeStorable, 
        loadRecentStorables, ICosmosStorableParams, StorableTransformer} from './CosmosStorableApi';

// A transformer function that can be applied to a storable to transform it in some way to the HTTP response
export type StorableResponseTransformer = (storable: IStorable) => HttpResponseInit;

// A transformer function that can be applied to a storable to transform it in some way to the HTTP response
export type StorableArrayResponseTransformer = (storable: Array<IStorable>) => HttpResponseInit;

// Applies a transformer function to a storable if it is provided.
function applyTransformer (storable: IStorable, transformer: StorableResponseTransformer | undefined) : HttpResponseInit {

   if (transformer)
      return transformer (storable);

   return {
      status: 200,
      body: JSON.stringify(storable)
   };
}

// Applies a transformer function to a storable array if it is provided.
function applyArrayTransformer (storable: Array<IStorable>, transformer: StorableArrayResponseTransformer | undefined) : HttpResponseInit {

   if (transformer)
      return transformer (storable);   

   return {
      status: 200,
      body: JSON.stringify(storable)
   };
}

/**
 * Asynchronous function to load an Storable based on the provided request and context.
 * Validates the session key from the request query parameters and removes the Storable if the session key matches predefined keys.
 * Logs the validation and removal status, returning an HTTP response with the appropriate status and message.
 * 
 * @param request - The HTTP request containing the session key and Storable data.
 * @param params The parameters required for saving the record, including partition key and collection path.
 * @param context - The context object for logging and error handling.
 * @param transformer - An optional transformer function to apply to the loaded storable.
 * @param resultTransformer - An optional transformer function to apply to the result storable.
 * @returns A promise of an HTTP response indicating the status of the removal operation.
 */
export async function findStorableApi(request: HttpRequest, 
   params: ICosmosStorableParams, 
   context: InvocationContext,
   transformer: StorableTransformer | undefined = undefined,
   resultTransformer: StorableResponseTransformer | undefined = undefined): Promise<HttpResponseInit> {

   if (isSessionValid(request, context)) {

      try {      
         let jsonRequest = await request.json();
         let spec = (jsonRequest as any).request as IStorableQuerySpec;

         let logger = new AzureLogger(context);

         let result = await findStorable (spec.functionalSearchKey, params, logger, transformer);
         if (result)
            context.log("Found:" + result.id);
         else
            context.log("Found nothing.");
         
         if (result)
            return applyTransformer (result, resultTransformer);
         else {
            return notFoundResponse ();
         }
      }
      catch (e: any) {
         context.error ("Failed find:" + e?.toString());
         return {
            status: 500,
            body: "Failed find."
         };
      }
   }
   else {
      context.error("Failed session validation");           
      return sessionFailResponse();
   }
};

/**
 * Asynchronous function to load an Storable based on the provided request and context.
 * Validates the session key from the request query parameters and removes the Storable if the session key matches predefined keys.
 * Logs the validation and removal status, returning an HTTP response with the appropriate status and message.
 * 
 * @param request - The HTTP request containing the session key and Storable data.
 * @param params The parameters required for saving the record, including partition key and collection path.
 * @param context - The context object for logging and error handling.
 * @param transformer - An optional transformer function to apply to the loaded storable.
 * @param resultTransformer - An optional transformer function to apply to the result storable.
 * @returns A promise of an HTTP response indicating the status of the removal operation.
 */
export async function getStorableApi(request: HttpRequest, 
   params: ICosmosStorableParams, 
   context: InvocationContext,
   transformer: StorableTransformer | undefined = undefined,
   resultTransformer: StorableResponseTransformer | undefined = undefined): Promise<HttpResponseInit> {

   if (isSessionValid(request, context)) {

      try {      
         let jsonRequest = await request.json();
         let spec = (jsonRequest as any).request as IStorableQuerySpec;

         return await getStorableApiCommon (spec, params, context, transformer, resultTransformer);
      }
      catch (e: any) {
         context.error ("Failed load:" + e?.toString());
         return {
            status: 500,
            body: "Failed load."
         };
      }
   }
   else {
      context.error("Failed session validation");           
      return sessionFailResponse();
   }
};

/**
 * Asynchronous function to load an Storable based on the provided request and context.
 * Returns the Storable if the id matches a record in the database.
 * *Note* This function does not validate the session key. we are not proptecting GPU costs & we want browsers to be able to retrueve directly without the session key appearing in the URL parameters. 
 * @param request - The HTTP request containing the session key and Storable data.
 * @param params The parameters required for saving the record, including partition key and collection path.
 * @param context - The context object for logging and error handling.
 * @param transformer - An optional transformer function to apply to the loaded storable.
 * @param resultTransformer - An optional transformer function to apply to the result storable.
 * @returns A promise of an HTTP response indicating the status of the removal operation.
 */
export async function getStorableApiFromQuery(request: HttpRequest,
   params: ICosmosStorableParams,
   context: InvocationContext,
   transformer: StorableTransformer | undefined = undefined,
   resultTransformer: StorableResponseTransformer | undefined = undefined): Promise<HttpResponseInit> {

   let requestedId: string | undefined = undefined;

   for (const [key, value] of request.query.entries()) {
      if (key === 'id')
         requestedId = value;
   }

   let spec: IStorableQuerySpec = {
      id: requestedId,
      functionalSearchKey: undefined
   };

   try {
      return await getStorableApiCommon(spec, params, context, transformer, resultTransformer);
   }
   catch (e: any) {
      context.error("Failed load:" + e?.toString());
      return {
         status: 500,
         body: "Failed load."
      };
   }
};

/**
 * Asynchronous function to load an Storable based on the provided request and context.
 * Returns the Storable if the id matches a record in the database.
 * @param request - The HTTP request containing the session key and Storable data.
 * @param params The parameters required for saving the record, including partition key and collection path.
 * @param context - The context object for logging and error handling.
 * @param transformer - An optional transformer function to apply to the loaded storable.
 * @param resultTransformer - An optional transformer function to apply to the result storable.
 * @returns A promise of an HTTP response indicating the status of the removal operation.
 */
async function getStorableApiCommon(spec: IStorableQuerySpec,
   params: ICosmosStorableParams,
   context: InvocationContext,
   transformer: StorableTransformer | undefined = undefined,
   resultTransformer: StorableResponseTransformer | undefined = undefined): Promise<HttpResponseInit> {

   try {
      let logger = new AzureLogger(context);

      let result = await loadStorable(spec.id, params, logger, transformer);
      if (result)
         context.log("Loaded:" + result.id);
      else
         context.log("Loaded nothing.");

      if (result) {
         return applyTransformer(result, resultTransformer);
      }
      else {
         return notFoundResponse();
      }
   }
   catch (e: any) {
      context.error("Failed load:" + e?.toString());
      return {
         status: 500,
         body: "Failed load."
      };
   }
}

/**
 * Saves a Storable record based on the provided request and context.
 * Validates the session key from the request query parameters against predefined session keys.
 * If the session key is valid, logs the validation status, processes the JSON request, and saves the activity.
 * Returns an HTTP response with a status code and the session key or an error message.
 *
 * @param request - The HTTP request containing the Storable data.
 * @param params The parameters required for saving the record, including partition key and collection path. 
 * @param context - The context for the current invocation.
 * @returns A promise that resolves to an HTTP response with the status and response body.
 */
export async function saveStorableApi (request: HttpRequest,  
   params: ICosmosStorableParams,
   context: InvocationContext): Promise<HttpResponseInit> {


   if (isSessionValid(request, context)) {

      try {
         let jsonRequest = await request.json();
         let spec = (jsonRequest as any).request as IStorable;   

         let logger = new AzureLogger(context);
         await saveStorable(spec, params, logger);

         let result: IStorableOperationResult = {
            ok: true
         }
         return {
            status: 200,
            body: JSON.stringify(result)
         };         
      }
      catch (e: any) {
         context.error("Failed save:" + e?.toString());
         return {
            status: 500,
            body: "Failed save."
         };
      }
   }
   else {
      context.error("Failed session validation");      
      return sessionFailResponse();
   }
};

/**
 * Asynchronous function to handle the removal of an Storable based on the provided request and context.
 * Validates the session key from the request query parameters and removes the Storable if the session key matches predefined keys.
 * Logs the validation and removal status, returning an HTTP response with the appropriate status and message.
 * 
 * @param request - The HTTP request containing the session key and Storable data.
 * @param params The parameters required for saving the record, including partition key and collection path.
 * @param context - The context object for logging and error handling.
 * @returns A promise of an HTTP response indicating the status of the removal operation.
 */
export async function removeStorableApi(request: HttpRequest, 
   params: ICosmosStorableParams, 
   context: InvocationContext): Promise<HttpResponseInit> {


   if (isSessionValid(request, context)) {

      try {      
         let jsonRequest = await request.json();
         let spec = (jsonRequest as any).request as IStorableQuerySpec;   

         let logger = new AzureLogger(context);

         let ok = await removeStorable (spec.id, params, logger);

         let result: IStorableOperationResult = {
            ok: ok
         }
         return {
            status: 200,
            body: JSON.stringify(result)
         };
      }
      catch (e: any) {
         context.error ("Failed remove:" + e?.toString());
         return {
            status: 500,
            body: "Failed remove."
         };
      }
   }
   else {
      context.error("Failed session validation");           
      return sessionFailResponse();
   }
};


/**
 * Asynchronous function to handle retrieving activities based on the provided request and context.
 * 
 * @param request - The HTTP request object containing query parameters.
 * @param params - The parameters required for saving the record, including partition key and collection path.
 * @param context - The invocation context for logging and other operations.
 * @param transformer - An optional transformer function to apply to the loaded storable.
 * @param resultTransformer - An optional transformer function to apply to the result storable array.
 * @returns A promise that resolves to an HTTP response initialization object.
 */
export async function getRecentStorablesApi(request: HttpRequest, 
   params: ICosmosStorableParams,    
   context: InvocationContext,
   transformer: StorableTransformer | undefined = undefined,
   resultTransformer: StorableArrayResponseTransformer | undefined = undefined): Promise<HttpResponseInit> {

   if (isSessionValid(request, context)) {

      let loaded: Array<IStorable> | undefined = undefined;

      try {
         let jsonRequest = await request.json();
         let spec = (jsonRequest as any).request as IStorableMultiQuerySpec;         

         let logger = new AzureLogger(context);

         loaded = await loadRecentStorables (spec, params, logger, transformer);
         for (let i = 0; loaded && i < loaded.length; i++) {
            context.log("Loaded:" + loaded[i].id);
         }

         return applyArrayTransformer (loaded, resultTransformer);         
      }
      catch (e: any) {
         context.log("Failed load recent:" + e?.toString());
         return {
            status: 500,
            body: "Failed load recent."
         };
      }
   }
   else {
      return sessionFailResponse();
   }
};
****************************************

****************************************
Api\src\functions\CheckSession.ts
****************************************
'use strict';
// Copyright Braid Technologies Ltd, 2024
// 'func azure functionapp publish Braid-Api' to publish to Azure
// 'npm start' to run locally

import { app, HttpRequest, HttpResponseInit, InvocationContext } from "@azure/functions";
import { isSessionValid, sessionFailResponse, defaultOkResponse } from "./Utility";

/**
 * Validates the session key provided in the request query parameters.
 * If the session key matches either of the expected session keys stored in the environment variables,
 * logs a success message and returns a 200 status with the session key in the response body.
 * If the session key does not match, logs a failure message and returns a 401 status with an authorization failure message.
 * 
 * @param request - The HTTP request object containing the query parameters.
 * @param context - The invocation context for logging and other context-specific operations.
 * @returns A promise that resolves to an HTTP response object with the appropriate status and body.
 */
export async function checkSession(request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {

   if (isSessionValid(request, context)) {

      return defaultOkResponse();
   }
   else {
      return sessionFailResponse();
   }
};

app.http('CheckSession', {
   methods: ['GET', 'POST'],
   authLevel: 'anonymous',
   handler: checkSession
});
****************************************

****************************************
Api\src\functions\Chunk.ts
****************************************
'use strict';
// Copyright Braid Technologies Ltd, 2024
// 'func azure functionapp publish Braid-Api' to publish to Azure
// 'npm start' to run locally

import { app, HttpRequest, HttpResponseInit, InvocationContext } from "@azure/functions";

import { getDefaultModel } from "../../../CommonTs/src/IModelFactory";
import { IChunkRequest, IChunkResponse } from "../../../CommonTs/src/ChunkApi.Types"
import { sessionFailResponse, defaultErrorResponse } from "./Utility";
import { isSessionValid } from "./Utility";

let model = getDefaultModel();

/**
 * Splits the input text into chunks based on the specified chunk size and overlap words.
 * 
 * @param text The text to be chunked.
 * @param chunkSize The size of each chunk.
 * @param overlapWords The number of overlapping words between consecutive chunks.
 * @returns An array of strings representing the text divided into chunks.
 */
function chunkText(text: string, chunkSize: number | undefined, overlapWords: number | undefined): Array<string> {

   let chunks = model.chunkText(text, chunkSize, overlapWords);

   return chunks;
}

/**
 * Asynchronous function to chunk text based on the requested session key and input text.
 * 
 * @param request - The HTTP request object containing the text to be chunked.
 * @param context - The context object for the function invocation.
 * @returns A promise that resolves to an HTTP response with the chunks or an error message.
 */ 

export async function chunk(request: HttpRequest, context: InvocationContext): Promise < HttpResponseInit > {

   let text: string | undefined = undefined;
   let overlapWords : number | undefined = undefined;
   let chunkSize : number | undefined = undefined;   
   let chunks = new Array<string>();

   if (isSessionValid(request, context)) {

      try {
         let jsonRequest = await request.json();
         context.log(jsonRequest);

         let spec = (jsonRequest as any).request as IChunkRequest;
         text = spec.text;
         chunkSize = spec.chunkSize;         
         overlapWords = spec.overlapWords;         

         if (text)
            chunks = chunkText(text, chunkSize, overlapWords);

         let body: IChunkResponse = {
            chunks: chunks
         }

         context.log (body)
         return {
            status: 200, // Ok
            body: JSON.stringify(body)
         };
      }
      catch(error: any) {

         context.error ("Error chunking text:", error);
         return defaultErrorResponse();
      }
   }
   else {
      context.error ("Session validation failed.");      
      return sessionFailResponse();
   }
};

app.http('Chunk', {
   methods: ['GET', 'POST'],
   authLevel: 'anonymous',
   handler: chunk
});
****************************************

****************************************
Api\src\functions\Classify.ts
****************************************
'use strict';
// Copyright Braid Technologies Ltd, 2024
// 'func azure functionapp publish Braid-Api to publish to Azure
// 'npm start' to run locally

import { app, HttpRequest, HttpResponseInit, InvocationContext } from "@azure/functions";
import axios from 'axios';
import axiosRetry from 'axios-retry';
import { isSessionValid, sessionFailResponse, defaultErrorResponse, invalidRequestResponse } from "./Utility";
import { IClassifyRequest, IClassifyResponse } from "../../../CommonTs/src/ClassifyApi.Types";

/**
 * Decodes the initial classification string to a human-readable format.
 * 
 * @param initial - The initial classification string to decode.
 * @returns The decoded classification in a human-readable format, or "Unknown" if not found.
 */
function decodeClassification(initial: string, classifications: Array<string>): string {

   for (let i = 0; i < classifications.length; i++) {
      if (initial.includes(classifications[i])) {
         if (classifications[i] === "CurrentAffairs")
            return "Current Affairs";
         return classifications[i];
      }
   }

   return "Unknown";
}

/**
 * Asynchronously classifies the given text into one of the predefined subject areas using an AI assistant.
 * 
 * @param text The text to be classified.
 * @returns A Promise that resolves to a string representing the classification result.
 */
async function singleShotClassify(text: string, classifications: Array<string>): Promise<string> {

   // Up to 5 retries if we hit rate limit
   axiosRetry(axios, {
      retries: 5,
      retryDelay: axiosRetry.exponentialDelay,
      retryCondition: (error) => {
         return error?.response?.status === 429 || axiosRetry.isNetworkOrIdempotentRequestError(error);
      }
   });

   let response = await axios.post('https://studiomodels.openai.azure.com/openai/deployments/StudioLarge/chat/completions?api-version=2024-06-01', {
      messages: [
         {
            role: 'system',
            content: "You are an asistant that can classify text into one of the following subjects: "
               + classifications.join(",") + "."
               + "Try to classify the subject of the following text. The classification is a single word from the list "
               + classifications.join(",")
               + ". If you cannot classify it well, answer 'Unknown'."
         },
         {
            role: 'user',
            content: text
         }
      ]
   },
      {
         headers: {
            'Content-Type': 'application/json',
            'api-key': process.env.AzureAiKey
         }
      }
   );

   let decoded = decodeClassification(response.data.choices[0].message.content, classifications);

   return (decoded);
}


/**
 * Handles the classification of text based on the provided session key and text content.
 * 
 * @param request - The HTTP request object containing the query parameters and JSON data.
 * @param context - The invocation context for logging and other context-specific operations.
 * @returns A Promise that resolves to an HTTP response with the classification result or an error message.
 */
export async function classify(request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {

   let text: string | undefined = undefined;
   let classifications: Array<string> | undefined = undefined;

   if (isSessionValid(request, context)) {
      try {
         let jsonRequest = await request.json();
         context.log (jsonRequest);
         
         let spec = (jsonRequest as any).request as IClassifyRequest;
         text = spec.text;
         classifications = spec.classifications;

         if ((text && text.length > 0)
         && (classifications && classifications.length > 0)) {

            let summaryClassification = await singleShotClassify(text, classifications);

            let classificationResponse : IClassifyResponse = {
               classification: summaryClassification
            }
            
            context.log (classificationResponse);

            return {
               status: 200, // Ok
               body: JSON.stringify(classificationResponse)
            };
         }
         else {
            context.error ("Error classifying text: Text or classifications not provided.");
            return invalidRequestResponse("Text or classifications not provided.");
         }
      }
      catch (e: any) {
         context.error ("Error classifying text:", e);
         return defaultErrorResponse();
      }
   }
   else {
      context.error ("Sessionvalidation failed.");         
      return sessionFailResponse();
   }
};

app.http('Classify', {
   methods: ['GET', 'POST'],
   authLevel: 'anonymous',
   handler: classify
});
****************************************

****************************************
Api\src\functions\CosmosRepositoryApi.ts
****************************************
'use strict';
// Copyright Braid Technologies Ltd, 2024

// 3rd party imports
var crypto = require("crypto");

/**
 * Generates an authorization token using the provided master key for the given verb, resource type, resource ID, and date.
 * 
 * @param verb The HTTP verb for the request.
 * @param resourceType The type of the resource being accessed.
 * @param resourceId The ID of the resource being accessed.
 * @param date The date of the request.
 * @param masterKey The master key used for generating the token.
 * @returns The encoded authorization token.
 */
export function getAuthorizationTokenUsingMasterKey(verb: string, resourceType: string, resourceId: string, date: string, masterKey: string) {

   var key = Buffer.from(masterKey, "base64");

   var text = (verb || "").toLowerCase() + "\n" +
      (resourceType || "").toLowerCase() + "\n" +
      (resourceId || "") + "\n" +
      date.toLowerCase() + "\n" +
      "" + "\n";

   var body = Buffer.from(text, "utf8");
   var signature = crypto.createHmac("sha256", key).update(body).digest("base64");

   var MasterToken = "master";

   var TokenVersion = "1.0";

   var encoded = encodeURIComponent("type=" + MasterToken + "&ver=" + TokenVersion + "&sig=" + signature);

   return encoded;
}


/**
 * Generates an activity token for authorization using the provided verb, time, and key.
 * 
 * @param verb The HTTP verb for the request.
 * @param time The timestamp for the request.
 * @param path - path for which we need a token 
 * @param key The master key for authorization.
 * @returns The generated authorization token for the activity.
 */
export function storableToken(verb: string, time: string, path: string, key: string) {

   //throwIfUndefined(key);
   return getAuthorizationTokenUsingMasterKey(verb, "docs", path, time, key);
}

/**
 * Generates an authorization token for deleting an activity using the master key.
 * 
 * @param time The current time in lowercase.
 * @param collectionPath - path to the collection in Cosmos * 
 * @param key The master key used for authorization.
 * @param id The ID of the activity to be deleted.
 * @returns The authorization token for the delete operation.
 */
export function makeStorableDeleteToken(time: string, collectionPath: string, key: string, id: string) {

   return storableToken ("delete", time, collectionPath + "/docs/" + id, key);
}

/**
 * Generates a post activity token using the provided time and key.
 * 
 * @param time The timestamp for the token generation.
 * @param collectionPath - path to the collection in Cosmos
 * @param key The key used for generating the token.
 * @returns The post activity token.
 */
export function makeStorablePostToken(time: string, collectionPath: string, key: string) {

   return storableToken("post", time, collectionPath, key);
}

/**
 * Creates a header object for a POST to a table with the specified key, time, and partition key.
 * @param key The authorization key for the table.
 * @param time The timestamp for the operation.
 * @param partitionKey The default partition key for the table.
 * @returns An object containing the necessary header for the POST.
 */
export function makePostHeader(key: string, time: string, partitionKey: string): object {
   return {
      "Authorization": key,
      "Content-Type": "application/json",
      "Accept": "application/json",
      "x-ms-date": time,
      "x-ms-version": "2018-12-31",
      "Cache-Control": "no-cache",
      "x-ms-documentdb-is-upsert": "True",
      "x-ms-documentdb-partitionkey": "[\"" + partitionKey + "\"]",
      "x-ms-consistency-level": "Eventual"
   };
}

/**
 * Creates header for a delete activity request.
 * 
 * @param key - The authorization key.
 * @param time - The timestamp.
 * @param partitionKey - The default partition key.
 * @returns An object containing the header for the delete activity request.
 */
export function makeDeleteHeader(key: string, time: string, partitionKey: string): object {
   return {
      "Authorization": key,
      "Accept": "application/json",
      "x-ms-date": time,
      "x-ms-version": "2018-12-31",
      "Cache-Control": "no-cache",
      "x-ms-documentdb-partitionkey": "[\"" + partitionKey + "\"]",
      "x-ms-consistency-level": "Eventual"
   };
}

/**
 * Creates a header object for a POST activity query with the specified key, time, and default partition key.
 * @param key The authorization key for the query.
 * @param time The timestamp for the query.
 * @param partitionKey The default partition key for the query.
 * @returns An object containing the necessary headers for the POST activity query.
 */
export function makePostQueryHeader(key: string, time: string, partitionKey: string): object {
   return {
      "Authorization": key,
      "Content-Type": "application/query+json",
      "Accept": "application/json",
      "x-ms-date": time,
      "x-ms-version": "2018-12-31",
      "Cache-Control": "no-cache",
      "x-ms-documentdb-partitionkey": "[\"" + partitionKey + "\"]",
      "x-ms-consistency-level": "Eventual",
      "x-ms-documentdb-isquery": "True"
   };
}
****************************************

****************************************
Api\src\functions\CosmosStorableApi.ts
****************************************
'use strict';
// Copyright Braid Technologies Ltd, 2024

// 3rd party imports
import { InvocationContext } from "@azure/functions";
import axios from "axios";

// Internal imports
import { throwIfUndefined } from "../../../CommonTs/src/Asserts";
import { IStorable, IStorableMultiQuerySpec } from "../../../CommonTs/src/IStorable";

const chunkPartitionKey: string = "c02af798a60b48129c5e223e645a9b72";
const chunkCollectionPath = "dbs/Studio/colls/Chunk";
const chunkCollectionName = "Chunk";

const activityPartitionKey: string = "6ea3299d987b4b33a1c0b079a833206f";
const activityCollectionPath = "dbs/Studio/colls/Activity";
const activityCollectionName = "Activity";

const pagePartitionKey: string = "f11a7404e266499a84a58fead932eec4";
const pageCollectionPath = "dbs/Studio/colls/Page";
const pageCollectionName = "Page";

import { makeStorablePostToken, makeStorableDeleteToken, 
   makePostQueryHeader, makePostHeader, makeDeleteHeader } from './CosmosRepositoryApi';

// A transformer function that can be applied to a storable to transform it in some way.
export type StorableTransformer = (storable: IStorable) => IStorable;

// Applies a transformer function to a storable if it is provided.
function applyTransformer (storable: IStorable, transformer: StorableTransformer | undefined) : IStorable {

   if (transformer)
      return transformer (storable);

   return storable;
}

export interface ICosmosStorableParams {
   partitionKey: string;
   collectionPath: string;  
   collectionName: string; 
}

export interface ILoggingContext {
   log (message: string, details: any) : void;
   info (message: string, details: any) : void;   
   warning (message: string, details: any) : void;    
   error (message: string, details: any) : void;    
}

export let chunkStorableAttributes : ICosmosStorableParams = {
   partitionKey: chunkPartitionKey,
   collectionPath: chunkCollectionPath,
   collectionName: chunkCollectionName
}

export let activityStorableAttributes : ICosmosStorableParams = {
   partitionKey: activityPartitionKey,
   collectionPath: activityCollectionPath,
   collectionName: activityCollectionName
}

export let pageStorableAttributes : ICosmosStorableParams = {
   partitionKey: pagePartitionKey,
   collectionPath: pageCollectionPath,
   collectionName: pageCollectionName
}

export class AzureLogger implements ILoggingContext {

   invocationContext: InvocationContext;

   constructor (invocationContext_: InvocationContext) {

      this.invocationContext = invocationContext_;
   }

   log (message: string, details: any) : void {

      return this.invocationContext.log (message, JSON.stringify(details));
   }
   
   info (message: string, details: any) : void {
      return this.invocationContext.info (message, JSON.stringify(details));      
   }
   
   warning (message: string, details: any) : void {
      return this.invocationContext.warn (message, JSON.stringify(details));
   }  
   
   error (message: string, details: any) : void {
      return this.invocationContext.error (message, JSON.stringify(details));      
   }
}

/**
 * Asynchronously finds a Storable from the database.
 * 
 * @param id - The unique identifier of the Storable to be found.
 * @param params - the ICosmosStorableParams for the collection
 * @param context - The invocation context for logging purposes.
 * @param transformer - An optional transformer function to apply to the loaded storable.
 * @returns A Promise that resolves to a boolean indicating the success of the removal operation.
 */
export async function findStorable(id: string | undefined,    
   params: ICosmosStorableParams, 
   context: ILoggingContext,
   transformer: StorableTransformer | undefined = undefined): Promise<IStorable | undefined> {

   if (!id)
      return undefined;
   
   let dbkey = process.env.CosmosApiKey;

   let done = new Promise<IStorable | undefined>(function (resolve, reject) {

      let time = new Date().toUTCString();

      throwIfUndefined(dbkey); // Keep compiler happy, should not be able to get here with actual undefined key.       
      let key = makeStorablePostToken(time, params.collectionPath, dbkey);
      let headers = makePostQueryHeader(key, time, params.partitionKey);

      let query = "SELECT * FROM " + params.collectionName + " a WHERE a.functionalSearchKey = @id";

      axios.post('https://braidstudio.documents.azure.com:443/' + params.collectionPath + '/docs/',
         {
            "query": query,
            "parameters": [
               {
                  "name": "@id",
                  "value": id
               }
            ]
         },
         {
            headers: headers
         })
         .then((resp: any) => {

            let responseRecords = resp.data.Documents;
            let storedRecord = responseRecords[0] as IStorable;

            context.log ("Loaded storable:", storedRecord.id);
            resolve(applyTransformer(storedRecord, transformer));
         })
         .catch((error: any) => {

            context.error ("Error calling database:", error);
            reject(undefined);
         });
   });

   return done;
}

/**
 * Asynchronously loads a Storable from the database.
 * 
 * @param id - The unique identifier of the Storable to be removed.
 * @param params - the ICosmosStorableParams for the collection
 * @param context - The invocation context for logging purposes.
 * @param transformer - An optional transformer function to apply to the loaded storable.
 * @returns A Promise that resolves to a boolean indicating the success of the removal operation.
 */
export async function loadStorable(id: string | undefined, 
   params: ICosmosStorableParams, 
   context: ILoggingContext,
   transformer: StorableTransformer | undefined = undefined): Promise<IStorable | undefined> {

   if (!id)
      return undefined;
   
   let dbkey = process.env.CosmosApiKey;

   let done = new Promise<IStorable | undefined>(function (resolve, reject) {

      let time = new Date().toUTCString();

      throwIfUndefined(dbkey); // Keep compiler happy, should not be able to get here with actual undefined key.       
      let key = makeStorablePostToken(time, params.collectionPath, dbkey);
      let headers = makePostQueryHeader(key, time, params.partitionKey);

      let query = "SELECT * FROM " + params.collectionName + " a WHERE a.id = @id";

      axios.post('https://braidstudio.documents.azure.com:443/' + params.collectionPath + '/docs/',
         {
            "query": query,
            "parameters": [
               {
                  "name": "@id",
                  "value": id
               }
            ]
         },
         {
            headers: headers
         })
         .then((resp: any) => {

            let responseRecords = resp.data.Documents;
            let storedRecord = responseRecords[0] as IStorable;

            context.log ("Loaded storable:", storedRecord.id);
            resolve(applyTransformer(storedRecord, transformer));
         })
         .catch((error: any) => {

            context.error ("Error calling database:", error);
            reject(undefined);
         });
   });

   return done;
}

/**
 * Saves a storable record to a Cosmos database.
 * 
 * @param record The storable record to be saved.
 * @param params The parameters required for saving the record, including partition key and collection path.
 * @param context The logging context for capturing log messages during the save operation.
 * @returns A Promise that resolves to a boolean indicating the success of the save operation.
 */
export async function saveStorable(record: IStorable, params: ICosmosStorableParams, context: ILoggingContext): Promise<boolean> {

   let dbkey = process.env.CosmosApiKey;

   let done = new Promise<boolean>(function (resolve, reject) {

      let time = new Date().toUTCString();
      let stream = JSON.stringify(record);
      let document = JSON.parse(stream);

      throwIfUndefined(dbkey); // Keep compiler happy, should not be able to get here with actual undefined key. 
      let key = makeStorablePostToken(time, params.collectionPath, dbkey as string);
      let headers = makePostHeader(key, time, params.partitionKey);

      document.partition = params.partitionKey; // Dont need real partitions until 10 GB ... 

      axios.post('https://braidstudio.documents.azure.com:443/' + params.collectionPath + '/docs/',
         document,
         {
            headers: headers
         })
         .then((resp: any) => {

            context.log("Saved storable:", record.id);
            resolve(true);
         })
         .catch((error: any) => {

            context.error("Error calling database:", error);
            reject(false);
         });
   });

   return done;
}

/**
 * Asynchronously removes a Storable from the database.
 * 
 * @param id - The unique identifier of the Storable to be removed.
 * @param params - the ICosmosStorableParams for the collection
 * @param context - The invocation context for logging purposes.
 * @returns A Promise that resolves to a boolean indicating the success of the removal operation.
 */
export async function removeStorable(id: string | undefined, params: ICosmosStorableParams, context: ILoggingContext): Promise<boolean> {

   if (!id)
      return false;
   
   let dbkey = process.env.CosmosApiKey;

   let done = new Promise<boolean>(function (resolve, reject) {

      let time = new Date().toUTCString();
      throwIfUndefined(dbkey); // Keep compiler happy, should not be able to get here with actual undefined key. 
      let key = makeStorableDeleteToken (time, params.collectionPath, dbkey, id);
      let headers = makeDeleteHeader(key, time, params.partitionKey);
        
      let deletePath = 'https://braidstudio.documents.azure.com:443/' + params.collectionPath + '/docs/'+ id;

      axios.delete(deletePath,
         {
            headers: headers
         })
         .then((resp: any) => {

            context.log("Removed storable:", id);
            resolve(true);
         })
         .catch((error: any) => {
            context.error ("Error calling database:", error);
            reject(false);
         });
   });

   return done;
}

/**
 * Asynchronously loads recent activities based on the provided query specifications.
 * 
 * @param querySpec - The query specifications including the limit and className.
 * @param params - the ICosmosStorableParams for the collection
 * @param context - The invocation context for logging and tracing.
 * @param transformer - An optional transformer function to apply to the loaded storable.
 * @returns A promise that resolves to an array of storable objects representing the loaded activities.
 */
export async function loadRecentStorables(querySpec: IStorableMultiQuerySpec, 
   params: ICosmosStorableParams, 
   context: ILoggingContext,
   transformer: StorableTransformer | undefined = undefined): Promise<Array<IStorable>> {

   let dbkey = process.env.CosmosApiKey;

   let done = new Promise<Array<IStorable>>(function (resolve, reject) {

      let time = new Date().toUTCString();

      throwIfUndefined(dbkey); // Keep compiler happy, should not be able to get here with actual undefined key.       
      let key = makeStorablePostToken(time, params.collectionPath, dbkey);
      let headers = makePostQueryHeader(key, time, params.partitionKey);

      let query = "SELECT * FROM " + params.collectionName + " a WHERE a.className = @className ORDER BY a.created DESC OFFSET 0 LIMIT " + querySpec.limit.toString();

      axios.post('https://braidstudio.documents.azure.com:443/' + params.collectionPath + '/docs/',
         {
            "query": query,
            "parameters": [
               {
                  "name": "@className",
                  "value": querySpec.className
               }
            ]
         },
         {
            headers: headers
         })
         .then((resp: any) => {

            let responseRecords = resp.data.Documents;
            let storedRecords = new Array<IStorable>();

            for (let i = 0; i < responseRecords.length; i++) {
               storedRecords.push(applyTransformer(responseRecords[i], transformer));
               context.log ("Loaded storable:", storedRecords[i].id);               
            }
            resolve(storedRecords);
         })
         .catch((error: any) => {

            context.error ("Error calling database:", error);
            reject(new Array<IStorable>());
         });
   });

   return done;
}
****************************************

****************************************
Api\src\functions\Embed.ts
****************************************
'use strict';
// Copyright Braid Technologies Ltd, 2024
// 'func azure functionapp publish Braid-Api' to publish to Azure
// 'npm start' to run locally

import { app, HttpRequest, HttpResponseInit, InvocationContext } from "@azure/functions";
import axios from 'axios';
import axiosRetry from 'axios-retry';

import { isSessionValid, sessionFailResponse, defaultErrorResponse, invalidRequestResponse } from "./Utility";
import { getDefaultModel } from "../../../CommonTs/src/IModelFactory";
import { recursiveSummarize } from "./Summarize";
import { IEmbedRequest, IEmbedResponse } from "../../../CommonTs/src/EmbedApi.Types";

let model = getDefaultModel();

/**
 * Asynchronously calculates the embedding for the given text using the Azure AI service.
 * 
 * @param text The text for which the embedding needs to be calculated.
 * @returns A Promise that resolves to an array of numbers representing the calculated embedding.
 */
export async function calculateEmbedding(text: string): Promise<Array<number>> {

   // Up to 5 retries if we hit rate limit
   axiosRetry(axios, {
      retries: 5,
      retryDelay: axiosRetry.exponentialDelay,
      retryCondition: (error) => {
         return error?.response?.status === 429 || axiosRetry.isNetworkOrIdempotentRequestError(error);
      }
   });


   let response = await axios.post('https://studiomodels.openai.azure.com/openai/deployments/StudioEmbeddingLarge/embeddings?api-version=2024-06-01', {
      input: text,
   },
      {
         headers: {
            'Content-Type': 'application/json',
            'api-key': process.env.AzureAiKey
         }
      }
   );

   let embedding = response.data.data[0].embedding as Array<number>;

   return (embedding);
}


/**
 * Embed function processes a request to embed text data using CalculateEmbedding function.
 * 
 * @param request - The HTTP request containing the text data to embed.
 * @param context - The context object for logging and validation.
 * @returns A Promise that resolves to an HTTP response with the embedding or an authorization error.
 */
export async function embed(request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {

   let text: string | undefined = undefined;

   if (isSessionValid(request, context)) {

      try {
         let jsonRequest = await request.json();
         context.log(jsonRequest);
         let spec = (jsonRequest as any).request as IEmbedRequest;
         text = spec.text;

         if ((text && text.length > 0)) {

            // If the text is bigger than available context, we have to summarise it
            if (!model.fitsInContext(text)) {
               text = await recursiveSummarize(text, 0, model.contextWindowSize)

               context.log("Summarised");
            }

            let embeddingResponse : IEmbedResponse = {
               embedding: await calculateEmbedding(text)
            };

            return {
               status: 200, // Ok
               body: JSON.stringify(embeddingResponse)
            };
         }
         else {
            context.error("Error embedding text:");
            return invalidRequestResponse("Text not provided.");
         }         
      }
      catch (e: any) {
         context.error("Error embedding text:", e);
         return defaultErrorResponse();
      }   
   }
   else {
      context.error ("Sessionvalidation failed.");         
      return sessionFailResponse();
   }
};

app.http('Embed', {
   methods: ['GET', 'POST'],
   authLevel: 'anonymous',
   handler: embed
});
****************************************

****************************************
Api\src\functions\EnrichedChunkRepositoryFactory.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd

// Internal imports
import { IEnrichedChunkRepository } from "./IEnrichedChunkRepository";
import { EnrichedChunkRepositoryFile } from "./EnrichedChunkRepositoryFile";

export function getEnrichedChunkRepository () : IEnrichedChunkRepository {
   return new EnrichedChunkRepositoryFile();   
}
****************************************

****************************************
Api\src\functions\EnrichedChunkRepositoryFile.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd

import { IEnrichedChunkRepository } from "./IEnrichedChunkRepository";
import { calculateEmbedding } from "./Embed";
import { IChunkQueryRelevantToUrlSpec, IChunkQueryRelevantToSummarySpec, IEnrichedChunk, IEnrichedChunkSummary } from "../../../CommonTs/src/EnrichedChunk";
import { IRelevantEnrichedChunk, IChunkQuerySpec } from "../../../CommonTs/src/EnrichedChunk";
import { throwIfUndefined } from "../../../CommonTs/src/Asserts";
import enrichedChunksFile from "../../api_embeddings_lite.json";

/**
 * Calculates the cosine similarity between two vectors.
 * @param vector1 The first vector.
 * @param vector2 The second vector.
 * @returns The cosine similarity score.
 */
function cosineSimilarity(vector1: number[], vector2: number[]): number {
   if (vector1.length !== vector2.length) {
      throw new Error("Vector dimensions must match for cosine similarity calculation.");
   }

   const dotProduct = vector1.reduce((acc, val, index) => acc + val * vector2[index], 0);
   const magnitude1 = Math.sqrt(vector1.reduce((acc, val) => acc + val ** 2, 0));
   const magnitude2 = Math.sqrt(vector2.reduce((acc, val) => acc + val ** 2, 0));

   if (magnitude1 === 0 || magnitude2 === 0) {
      throw new Error("Magnitude of a vector must be non-zero for cosine similarity calculation.");
   }

   return dotProduct / (magnitude1 * magnitude2);
}

const youTubeHostname = "www.youtube.com";
const gitHubHostname = "github.com";

/**
 * Compares two URLs to determine if they are from the same source.
 * 
 * @param url1 - The first URL to compare.
 * @param url2 - The second URL to compare.
 * @returns True if the URLs are from the same source, false otherwise.
 */
export function lookLikeSameSource(url1: string, url2: string): boolean {

   const URLLeft = new URL(url1);
   const URLRight = new URL(url2);

   // Youtube format URL
   // https://www.youtube.com/watch?v=l5mG4z343qg&t=00h00m00s
   // To compare two YouTube URLs we look at the ?v= parameter for the video ID
   if (URLLeft.hostname === (youTubeHostname) && URLRight.hostname === (youTubeHostname)) {
      const videoLeft = URLLeft.searchParams.get('v');
      const videoRight = URLRight.searchParams.get('v');

      if (videoLeft === videoRight)
         return true;
      else
         return false;

   }

   // GitHub format URL
   // https://github.com/organisation/repo/...
   // To compare two GitHub URLs we look at the first two path paramters   
   const pathLeft = URLLeft.pathname.split('/').slice(1);
   const pathRight = URLRight.pathname.split('/').slice(1);

   if (URLLeft.hostname === (gitHubHostname) && URLRight.hostname === (gitHubHostname)
      && (pathLeft.length >= 2) && (pathRight.length >= 2)) {

      if (pathLeft[0] === pathRight[0] && pathLeft[1] === pathRight[1])
         return true;
      else
         return false;
   }

   // To compare two Web URLs we look at the first path paramters  
   if ((URLLeft.hostname === URLRight.hostname) &&
      (pathLeft.length >= 1) && (pathRight.length >= 1)) {

      if (pathLeft[0] === pathRight[0])
         return true;
      else
         return false;
   }

   return false;
}

/**
 * Finds the index of the entry with the lowest relevance in the given array of IRelevantEnrichedChunk objects.
 * If a URL is provided, it checks for entries with the same source and replaces if a better one is found.
 * @param urlIn The URL to compare with the chunk URLs.
 * @param current An array of IRelevantEnrichedChunk objects to search for the lowest relevance.
 * @returns The index of the entry with the lowest relevance, or -1 if the array is empty.
 */
function lowestOfCurrent(urlIn: string | undefined, current: Array<IRelevantEnrichedChunk>): number {

   if (current.length === 0)
      return -1;

   let lowestRelevance = current[0].relevance;
   let lowestIndex = 0;
   let sameSource = false;
   let sameIndex = -1;

   if (urlIn) {
      for (let i = 1; i < current.length; i++) {
         if (lookLikeSameSource(urlIn, current[i].chunk?.url)) {
            sameSource = true;
            sameIndex = i;
         }
      }
   }

   if (sameSource) {

      // If we have an entry from the same source, replace if the new one looks better
      let comp = current[sameIndex].relevance;

      if (typeof comp !== 'undefined' && typeof lowestRelevance !== 'undefined') {

         let currentRelevance = current[sameIndex].relevance;

         if ((typeof comp !== 'undefined' && typeof currentRelevance !== 'undefined')
            && (comp < currentRelevance)) {
            lowestIndex = sameIndex;
         }
      }
   }
   else {
      // Else replace the lowest relevance entry
      for (let i = 1; i < current.length; i++) {

         let comp = current[i].relevance;

         if (typeof comp !== 'undefined' && typeof lowestRelevance !== 'undefined') {

            if (comp < lowestRelevance) {
               lowestRelevance = comp;
               lowestIndex = i;
            }
         }
      }
   }

   return lowestIndex;
}

/**
 * Replaces a candidate enriched chunk in the current array if it meets certain criteria.
 * 
 * @param candidate - The candidate enriched chunk to be considered for replacement.
 * @param spec - The query specification defining the maximum count and similarity threshold.
 * @param urlIn - The URL to compare with the candidate's URL for source similarity.
 * @param current - The array of current relevant enriched chunks to evaluate for replacement.
 * @returns True if the candidate is successfully replaced, false otherwise.
 */
function replaceIfBeatsCurrent(candidate: IRelevantEnrichedChunk,
   spec: IChunkQuerySpec,
   urlIn: string | undefined,
   current: Array<IRelevantEnrichedChunk>): boolean {

   // If we have a reference source, check if its just the same source as our reference e.g. different chunk of a Youtube video
   // If it is, we bail 
   if (urlIn && lookLikeSameSource(candidate.chunk.url, urlIn)) {
      return false;
   }

   // Now check we are not piling up multiple references to the same source
   // If it is, we bail 
   for (let i = 0; i < current.length; i++) {
      if (lookLikeSameSource(candidate.chunk.url, current[i].chunk.url))
         return false;
   }

   // If the array can grow we just add the new candidate
   if (current.length < spec.maxCount) {
      if (typeof candidate.relevance !== 'undefined' && candidate.relevance >= spec.similarityThreshold) {
         current.push(candidate);
      }
      return true;
   }

   // Else we do a search and insert the new one if it is better than a current candidate
   let lowestIndex = lowestOfCurrent(candidate.chunk.url, current);
   let currentLowest = current[lowestIndex];

   if (typeof currentLowest.relevance !== 'undefined'
      && typeof candidate.relevance !== 'undefined') {
      if (currentLowest.relevance < candidate.relevance && candidate.relevance >= spec.similarityThreshold) {
         current[lowestIndex] = candidate;
         return true;
      }
   }

   return false;
}


export class EnrichedChunkRepositoryFile implements IEnrichedChunkRepository {

   /**
    * lookupRelevantFromSummary 
    * look to see of we have similar content to the text in the summary field of the query
    */
   async lookupRelevantFromSummary(spec: IChunkQueryRelevantToSummarySpec): Promise<Array<IRelevantEnrichedChunk>> {

      let enrichedChunks = enrichedChunksFile as Array<IEnrichedChunk>;
      let accumulator = new Array<IRelevantEnrichedChunk>();

      let validEmbedding = await calculateEmbedding (spec.summary);

      for (let i = 0; i < enrichedChunks.length; i++) {

         let embedding = enrichedChunks[i].embedding;
         if (embedding) {
            let validIndexedEmbedding: number[];
            throwIfUndefined(embedding);
            validIndexedEmbedding = embedding;

            let relevance = Number(cosineSimilarity(validEmbedding, validIndexedEmbedding).toPrecision(2));

            let candidate: IRelevantEnrichedChunk = {
               chunk: {
                  url: enrichedChunks[i].url,
                  summary: enrichedChunks[i].summary,
                  text: ""
               },
               relevance: relevance
            };

            let changed = replaceIfBeatsCurrent(candidate, spec, undefined, accumulator);
         }
      }

      function compareFn (a: IRelevantEnrichedChunk, b: IRelevantEnrichedChunk) : number {
         return b.relevance - a.relevance;
      }

      accumulator.sort (compareFn);
      
      return accumulator;
   }

   /**
    * lookupRelevantfromUrl 
    * look to see of we have similar content to a given URL from other sources
    */
   async lookupRelevantFromUrl(spec: IChunkQueryRelevantToUrlSpec): Promise<Array<IRelevantEnrichedChunk>> {

      let enrichedChunks = enrichedChunksFile as Array<IEnrichedChunk>;
      let targetChunk: IEnrichedChunk | undefined = undefined;
      let accumulator = new Array<IRelevantEnrichedChunk>();

      let validTargetChunk: IEnrichedChunk;
      let validEmbedding: number[];

      for (let i = 0; i < enrichedChunks.length && !targetChunk; i++) {
         let url = enrichedChunks[i].url;
         if (url == spec.url) {
            targetChunk = enrichedChunks[i];
            break;
         }
      }

      if (!targetChunk || !targetChunk.embedding)
         return accumulator;

      throwIfUndefined(targetChunk);
      validTargetChunk = targetChunk;
      throwIfUndefined(validTargetChunk.embedding);
      validEmbedding = validTargetChunk.embedding;

      for (let i = 0; i < enrichedChunks.length && targetChunk; i++) {

         let embedding = enrichedChunks[i].embedding;
         if (embedding) {
            let validIndexedEmbedding: number[];
            throwIfUndefined(embedding);
            validIndexedEmbedding = embedding;

            let relevance = Number(cosineSimilarity(validEmbedding, validIndexedEmbedding).toPrecision(2));

            let candidate: IRelevantEnrichedChunk = {
               chunk: {
                  url: enrichedChunks[i].url,
                  summary: enrichedChunks[i].summary,
                  text: ""
               },
               relevance: relevance
            };

            let changed = replaceIfBeatsCurrent(candidate, spec, spec.url, accumulator);
         }
      }

      return accumulator;
   }

   /**
    * lookupFromUrl 
    * look to see of we have similar content to a given URL from other sources
    */
   async lookupFromUrl(spec: IChunkQueryRelevantToUrlSpec): Promise<IEnrichedChunkSummary | undefined> {

      let enrichedChunks = enrichedChunksFile as Array<IEnrichedChunk>;
      let accumulator : IEnrichedChunkSummary | undefined = undefined;
   
      for (let i = 0; i < enrichedChunks.length && !accumulator; i++) {
         let url = enrichedChunks[i].url;
         if (url == spec.url) {
            let targetChunk = { 
               url: enrichedChunks[i].url,
               summary: enrichedChunks[i].summary,
               text: enrichedChunks[i].text
            };
            accumulator = targetChunk;
            break;
         }
      }

      return accumulator;
   }   
}
****************************************

****************************************
Api\src\functions\EnumerateModels.ts
****************************************
'use strict';
// Copyright Braid Technologies Ltd, 2024
// 'func azure functionapp publish Braid-Api' to publish to Azure
// 'npm start' to run locally

import { app, HttpRequest, HttpResponseInit, InvocationContext } from "@azure/functions";

import { getDefaultModel } from "../../../CommonTs/src/IModelFactory";
import { IEnumerateModelsRequest, IEnumerateModelsResponse} from "../../../CommonTs/src/EnumerateModelsApi.Types"
import { sessionFailResponse, defaultErrorResponse } from "./Utility";
import { isSessionValid } from "./Utility";

let model = getDefaultModel();



/**
 * Asynchronous function to send back details of installed models - used to keep Python code consistent with Typescript 
 * 
 * @param request - The HTTP request object .
 * @param context - The context object for the function invocation.
 * @returns A promise that resolves to an HTTP response with the model details or an error message.
 */ 

export async function enumerateModels(request: HttpRequest, context: InvocationContext): Promise < HttpResponseInit > {

   if (isSessionValid(request, context)) {

      try {
         let jsonRequest = await request.json();
         context.log(jsonRequest);

         let model = getDefaultModel();

         let spec = (jsonRequest as any).request as IEnumerateModelsRequest;        

         let body: IEnumerateModelsResponse = {
            defaultId: model.deploymentName,
            defaultEmbeddingId: model.embeddingDeploymentName,
            largeId: model.deploymentName,
            largeEmbeddingId: model.embeddingDeploymentName,            
            smallId: model.deploymentName,
            smallEmbeddingId: model.embeddingDeploymentName,            
         }

         context.log (body)
         return {
            status: 200, // Ok
            body: JSON.stringify(body)
         };
      }
      catch(error: any) {

         context.error ("Error finding models:", error);
         return defaultErrorResponse();
      }
   }
   else {
      context.error ("Session validation failed.");      
      return sessionFailResponse();
   }
};

app.http('EnumerateModels', {
   methods: ['GET', 'POST'],
   authLevel: 'anonymous',
   handler: enumerateModels
});
****************************************

****************************************
Api\src\functions\EnumerateRepositories.ts
****************************************
'use strict';
// Copyright Braid Technologies Ltd, 2024
// 'func azure functionapp publish Braid-Api' to publish to Azure
// 'npm start' to run locally

import { app, HttpRequest, HttpResponseInit, InvocationContext } from "@azure/functions";

import { IEnumerateRepositoriesRequest, IEnumerateReposotoriesResponse} from "../../../CommonTs/src/EnumerateModelsApi.Types"
import { sessionFailResponse, defaultErrorResponse } from "./Utility";
import { isSessionValid } from "./Utility"
import { EChunkRepository } from "../../../CommonTs/src/EnrichedChunk";



/**
 * Asynchronous function to send back details of installed repositories - used to keep Python code consistent with Typescript 
 * 
 * @param request - The HTTP request object .
 * @param context - The context object for the function invocation.
 * @returns A promise that resolves to an HTTP response with the respository details or an error message.
 */ 

export async function enumerateRepositories(request: HttpRequest, context: InvocationContext): Promise < HttpResponseInit > {

   if (isSessionValid(request, context)) {

      try {
         let jsonRequest = await request.json();
         context.log(jsonRequest);

         let spec = (jsonRequest as any).request as IEnumerateRepositoriesRequest;        

         let body: IEnumerateReposotoriesResponse = {
            repositoryIds: [EChunkRepository.kBoxer]            
         }

         context.log (body)
         return {
            status: 200, // Ok
            body: JSON.stringify(body)
         };
      }
      catch(error: any) {

         context.error ("Error finding repositories:", error);
         return defaultErrorResponse();
      }
   }
   else {
      context.error ("Session validation failed.");      
      return sessionFailResponse();
   }
};

app.http('EnumerateRepositories', {
   methods: ['GET', 'POST'],
   authLevel: 'anonymous',
   handler: enumerateRepositories
});
****************************************

****************************************
Api\src\functions\FindEnrichedChunks.ts
****************************************
'use strict';
// Copyright Braid Technologies Ltd, 2024
// 'func azure functionapp publish Braid-Api' to publish to Azure
// 'npm start' to run locally

import { app, HttpRequest, HttpResponseInit, InvocationContext } from "@azure/functions";
import { IChunkQueryRelevantToUrlSpec, IChunkQueryRelevantToSummarySpec } from "../../../CommonTs/src/EnrichedChunk";
import { isSessionValid, sessionFailResponse, defaultErrorResponse } from "./Utility";
import { getEnrichedChunkRepository } from "./EnrichedChunkRepositoryFactory";

export async function FindRelevantEnrichedChunksFromSummary(request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {

   if (isSessionValid(request, context)) {

      try {
         let spec: IChunkQueryRelevantToSummarySpec = (await (request.json() as any)).data as IChunkQueryRelevantToSummarySpec;

         let repository = getEnrichedChunkRepository();

         let chunks = await repository.lookupRelevantFromSummary (spec);

         return {
            status: 200, // Ok
            body: JSON.stringify (chunks)
         };
      }
      catch (e) {
         return defaultErrorResponse();
      }      
   }
   else {
      return sessionFailResponse();
   }
};

export async function FindRelevantEnrichedChunksFromUrl (request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {

   if (isSessionValid(request, context)) {

      try {
         let spec: IChunkQueryRelevantToUrlSpec = (await (request.json() as any)).data as IChunkQueryRelevantToUrlSpec;

         let repository = getEnrichedChunkRepository();

         let chunks = await repository.lookupRelevantFromUrl (spec);

         return {
            status: 200, // Ok
            body: JSON.stringify (chunks)
         };
      }
      catch (e) {
         return defaultErrorResponse();
      }
   }
   else {
      return sessionFailResponse();
   }
};

export async function FindEnrichedChunkFromUrl (request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {

   if (isSessionValid(request, context)) {

      try {
         let spec: IChunkQueryRelevantToUrlSpec = (await (request.json() as any)).data as IChunkQueryRelevantToUrlSpec;

         let repository = getEnrichedChunkRepository();

         let chunks = await repository.lookupFromUrl (spec);

         return {
            status: 200, // Ok
            body: JSON.stringify (chunks)
         };
      }
      catch (e) {
         return defaultErrorResponse();
      }
   }
   else {
      return sessionFailResponse();
   }
};

app.http('FindRelevantEnrichedChunksFromSummary', {
   methods: ['GET', 'POST'],
   authLevel: 'anonymous',
   handler: FindRelevantEnrichedChunksFromSummary
});

app.http('FindRelevantEnrichedChunksFromUrl', {
   methods: ['GET', 'POST'],
   authLevel: 'anonymous',
   handler: FindRelevantEnrichedChunksFromUrl
});

app.http('FindEnrichedChunkFromUrl', {
   methods: ['GET', 'POST'],
   authLevel: 'anonymous',
   handler: FindEnrichedChunkFromUrl
});
****************************************

****************************************
Api\src\functions\FindTheme.ts
****************************************
'use strict';
// Copyright Braid Technologies Ltd, 2024
// 'func azure functionapp publish Braid-Api' to publish to Azure
// 'npm start' to run locally

import { app, HttpRequest, HttpResponseInit, InvocationContext } from "@azure/functions";
import axios from 'axios';
import axiosRetry from 'axios-retry';

import { sessionFailResponse, defaultErrorResponse, isSessionValid, invalidRequestResponse } from "./Utility";

import { IFindThemeRequest, IFindThemeResponse } from "../../../CommonTs/src/FindThemeApi.Types";
import { throwIfUndefined } from "../../../CommonTs/src/Asserts";

let minimumTextLength = 64;

/**
 * Asynchronous function to find a common theme from a number of paragraphs of text.
 * Makes a POST request to an Azure endpoint to get the most common theme in the provided text.
 * Utilizes axios for HTTP requests and axiosRetry for up to 5 retries in case of rate limit errors.
 * @param text The text containing paragraphs to analyze for a common theme.
 * @param length The length for the theme text to return.
 * @returns A Promise that resolves to the most common theme found in the text.
 */
async function findThemeCall(text: string, length: number): Promise<string> {

   // Up to 5 retries if we hit rate limit
   axiosRetry(axios, {
      retries: 5,
      retryDelay: axiosRetry.exponentialDelay,
      retryCondition: (error) => {
         return error?.response?.status === 429 || axiosRetry.isNetworkOrIdempotentRequestError(error);
      }
   });

   let response = await axios.post('https://studiomodels.openai.azure.com/openai/deployments/StudioLarge/chat/completions?api-version=2024-06-01', {
      messages: [
         {
            role: 'system',
            content: "You are an AI asistant that finds a common theme from a number of pararaphs of text in "
               + length.toString() + " words or less. Please find the most common theme in the following text in "
               + length.toString() + " words. Do not start your reply with the phrase 'The most common theme in the text is'. Translate to English if necessary. "
         },
         {
            role: 'user',
            content: text
         }
      ],
   },
      {
         headers: {
            'Content-Type': 'application/json',
            'api-key': process.env.AzureAiKey
         }
      }
   );

   return (response.data.choices[0].message.content);
}

/**
 * Finds a theme from the provided text based on certain criteria.
 * Validates the session key and returns an HTTP response with the theme summary or an authorization error message.
 * @param request - The HTTP request containing the text and session key.
 * @param context - The invocation context for logging and validation.
 * @returns A promise of an HTTP response with the theme summary or an authorization error message.
 */
export async function findTheme(request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {

   let text: string | undefined = undefined;
   let length: number | undefined = undefined;
   let theme: string | undefined = undefined;
   const defaultLength = 15;

   if (isSessionValid(request, context)) {
      
      try {
         let jsonRequest = await request.json();
         context.log(jsonRequest);
         let themeSpec = (jsonRequest as any).request as IFindThemeRequest;                                        

         text = themeSpec.text;
         length = themeSpec.length;

         if (text && text.length >= minimumTextLength && length > 0) {

            let definitelyText: string = text;
            let definitelyLength: number = length ? length : defaultLength;
            theme = await findThemeCall(definitelyText, definitelyLength);

            throwIfUndefined (theme);
            let themeResponse : IFindThemeResponse = {
               theme: theme
            }
            context.log (themeResponse);

            return {
               status: 200, // Ok
               body: JSON.stringify (themeResponse)
            };      
         }
         else {
            context.error ("Text is below minimum length or invalid length for theme.");            
            return invalidRequestResponse ("Text is below minimum length or invalid length for theme.")
         }
      }
      catch (e: any) {
         context.error (e);
         return defaultErrorResponse();
      }      
   }
   else {
      context.error ("Session validation failed.");         
      return sessionFailResponse();
   }
};

app.http('FindTheme', {
   methods: ['GET', 'POST'],
   authLevel: 'anonymous',
   handler: findTheme
});
****************************************

****************************************
Api\src\functions\GenerateFluidToken.ts
****************************************
'use strict';
// Copyright Braid Technologies Ltd, 2024
// 'func azure functionapp publish Braid-Api' to publish to Azure
// 'npm start' to run locally


import { app, HttpRequest, HttpResponseInit, InvocationContext } from "@azure/functions";
//import { ScopeType } from "@fluidframework/protocol-definitions/lib";
import { generateToken } from "@fluidframework/server-services-client";

import { isSessionValid, sessionFailResponse, defaultErrorResponse } from "./Utility";
import { IFluidTokenRequest } from "../../../CommonTs/src/Fluid";

const key = process.env.ConversationKey;
const tenantId = "b9576484-5c2e-4613-bfdf-039948cdd521";

// WARNING - this is a redefinition of a type from inside the Fluid library. Does not seem to be exported at present, and we need it. 
//
export enum ScopeType {
	/**
	 * Read access is supported on the Container/Document
	 */
	DocRead = "doc:read",

	/**
	 * Write access is supported on the Container/Document
	 */
	DocWrite = "doc:write",

	/**
	 * User can generate new summaries operations
	 */
	SummaryWrite = "summary:write",
}

export async function generateFluidToken(request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {

   if (isSessionValid(request, context)) {

      if (!tenantId) {
         context.error ("No Fluid tenant ID found.")         
         return sessionFailResponse();
      }   

      if (!key) {
         context.error ("No Fluid key found.")
         return sessionFailResponse();
      }    

      try {
         let jsonRequest = await request.json();
         let fluidRequest = (jsonRequest as any).data as IFluidTokenRequest;

         // tenantId, documentId, userId and userName are required parameters
         const documentId = fluidRequest.documentId;
         const userId = fluidRequest.userId;
         const userName = fluidRequest.userName;
         const local = fluidRequest.local;

         let user = { name: userName, id: userId };

         context.log ("Generating token for:" + JSON.stringify(fluidRequest) + " tenantId:" + tenantId);

         // Generate the token returned by an ITokenProvider implementation to use with the AzureClient.
         const token = generateToken(      
            local? "local" : tenantId,
            documentId,
            key,
            [ScopeType.DocRead, ScopeType.DocWrite, ScopeType.SummaryWrite],
            user
            );

         return  {
            status: 200,
            body: token
         }; 
      }
      catch(error: any) {

         context.error ("Error generating Fluid token:", error);
         return defaultErrorResponse();
      }

     
   }
   else {
      return sessionFailResponse();
   }
};

app.http('GenerateFluidToken', {
   methods: ['GET', 'POST'],
   authLevel: 'anonymous',
   handler: generateFluidToken
});
****************************************

****************************************
Api\src\functions\GenerateQuestion.ts
****************************************
'use strict';
// Copyright Braid Technologies Ltd, 2024
// 'func azure functionapp publish Braid-Api' to publish to Azure
// 'npm start' to run locally

import { app, HttpRequest, HttpResponseInit, InvocationContext } from "@azure/functions";
import axios from 'axios';
import axiosRetry from 'axios-retry';

import { EConversationRole, IConversationElement,IQuestionGenerationResponse, IGenerateQuestionQuery} from "../../../CommonTs/src/EnrichedQuery";

import { isSessionValid, sessionFailResponse, defaultErrorResponse} from "./Utility";

async function askModel(query: IGenerateQuestionQuery): Promise<IQuestionGenerationResponse> {

   // Up to 5 retries if we hit rate limit
   axiosRetry(axios, {
      retries: 5,
      retryDelay: axiosRetry.exponentialDelay,
      retryCondition: (error) => {
         return error?.response?.status === 429 || axiosRetry.isNetworkOrIdempotentRequestError(error);
      }
   });

   let systemPromptElement: IConversationElement = { role: EConversationRole.kSystem, content: query.personaPrompt };
   let questionElement: IConversationElement = { role: EConversationRole.kUser, content: query.questionGenerationPrompt + " " + query.summary};

   let fullPrompt: Array<IConversationElement> = new Array<IConversationElement>();
   fullPrompt.push(systemPromptElement);
   fullPrompt.push(questionElement);

   let directPromise = axios.post('https://studiomodels.openai.azure.com/openai/deployments/StudioLarge/chat/completions?api-version=2024-06-01', {
      messages: fullPrompt,
   },
      {
         headers: {
            'Content-Type': 'application/json',
            'api-key': process.env.AzureAiKey
         }
      }
   );

   const directResponse = await directPromise;

   let question = (directResponse.data.choices[0].message.content);

   let queryResponse: IQuestionGenerationResponse = {
      question: question
   }

   return queryResponse;
}


export async function generateQuestion(request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {

   if (isSessionValid(request, context)) {

      try {
         let jsonRequest = await request.json();
                  
         let query = (jsonRequest as any)?.data as IGenerateQuestionQuery;

         context.log (query);
         let response = await askModel(query);
         let responseText = JSON.stringify(response);
         context.log (responseText);

         return {
            status: 200, // Ok
            body: responseText
         };
      }
      catch (e: any) {
         context.error (e);
         return defaultErrorResponse();
      }
   }
   else {
      return sessionFailResponse();
   }
};

app.http('GenerateQuestion', {
   methods: ['GET', 'POST'],
   authLevel: 'anonymous',
   handler: generateQuestion
});
****************************************

****************************************
Api\src\functions\IEnrichedChunkRepository.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd

// Internal import
import {IRelevantEnrichedChunk, IChunkQueryRelevantToSummarySpec, IEnrichedChunkSummary, IChunkQueryRelevantToUrlSpec} from '../../../CommonTs/src/EnrichedChunk';

export const kDefaultSearchChunkCount: number = 2;
export const kDefaultMinimumCosineSimilarity = 0.5;

export interface IEnrichedChunkRepository  {

   /**
    * lookupRelevantFromSummary 
    * look to see of we have similar content 
    */      
   lookupRelevantFromSummary (spec: IChunkQueryRelevantToSummarySpec) : Promise<Array<IRelevantEnrichedChunk>>;

   /**
    * lookupRelevantfromUrl 
    * look to see of we have similar content from other sources
    */   
   lookupRelevantFromUrl (spec: IChunkQueryRelevantToUrlSpec) : Promise<Array<IRelevantEnrichedChunk>>;  

   /**
    * lookupFromUrl 
    * find the whole chunk given its URL
    */   
   lookupFromUrl (spec: IChunkQueryRelevantToUrlSpec) : Promise<IEnrichedChunkSummary | undefined>;     
}
****************************************

****************************************
Api\src\functions\LoginWithLinkedIn.ts
****************************************
'use strict';
// Copyright Braid Technologies Ltd, 2024
// 'func azure functionapp publish Braid-Api' to publish to Azure
// 'npm start' to run locally

import axios from "axios";
import * as QueryString from "qs";

import { app, HttpRequest, HttpResponseInit, InvocationContext } from "@azure/functions";
import { getDefaultEnvironment } from "../../../CommonTs/src/IEnvironmentFactory";
import { EEnvironment } from "../../../CommonTs/src/IEnvironment";

export async function LoginWithLinkedIn(request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {

   let requestedSession: string | null = null;

   for (const [key, value] of request.query.entries()) {
      if (key === 'session')
         requestedSession = value;
   }

   if ((requestedSession === process.env.SessionKey) || (requestedSession === process.env.SessionKey2)) {

      context.log("Passed session key validation:" + requestedSession);

      return redirectToLinkedIn(request, context);
   }
   else {
      context.log("Failed session key validation:" + requestedSession);

      return {
         status: 401, // Unauthorised
         body: "Authorization check failed."
      };
   }
};

app.http('LoginWithLinkedIn', {
   methods: ['GET', 'POST'],
   authLevel: 'anonymous',
   handler: LoginWithLinkedIn
});

/**
 * Redirects the user to LinkedIn for authentication using the Authorization Code Flow.
 * 
 * @param request - The HTTP request object containing query parameters.
 * @param context - The invocation context for the Azure Function.
 * @returns A promise that resolves to an HTTP response object with a status of 302 for redirection,
 *          headers containing the redirect location, and a body message of 'Redirecting...'.
 */
async function redirectToLinkedIn(request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {

   // Put all the query parameters into the 'state' parameter, where can retrieve them later
   const queryAsObject = Object.fromEntries(request.query.entries());
   const stringifiedQuery = JSON.stringify(queryAsObject);

   let environment = getDefaultEnvironment();

   // https://learn.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow?context=linkedin%2Fcontext&tabs=HTTPS1
   var clientID = process.env.LinkedInAppId;
   var redirectUrl = environment.authFromLinkedInApi();
   var scope = 'openid profile email';
   var state = stringifiedQuery;
   var redirect = "https://www.linkedin.com/oauth/v2/authorization?response_type=code&client_id="
      + clientID + "&redirect_uri=" + redirectUrl + "&scope=" + scope + "&state=" + state;

   return {
      status: 302,
      headers: {
         'Location': redirect
      },
      body: 'Redirecting...'
   };
}

/**
 * Asynchronously redirects back to the home page with the full path after processing LinkedIn authentication.
 * 
 * @param code The authorization code received in the authentication process.
 * @param session The session identifier.
 * @param conversation The conversation identifier.
 * @param secret The secret key for authentication.
 * @param context The invocation context for logging and tracing.
 * @returns An object containing the redirection status, headers, and body for the response.
 */
async function redirectBackHomeWithFullPath(code: string, session: string, conversation: string, secret: string, context: InvocationContext) {

   let environment = getDefaultEnvironment();

   try {

      const accessConfig = {
         headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
         }
      }

      // https://learn.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow?context=linkedin%2Fcontext&tabs=HTTPS1
      // grant_type	string	The value of this field should always be: authorization_code	Yes
      // code	string	The authorization code you received in Step 2.	Yes
      // client_id	string	The Client ID value generated in Step 1.	Yes
      // client_secret	string	The Secret Key value generated in Step 1. See the Best Practices Guide for ways to keep your client_secret value secure.	Yes
      // redirect_uri	url	The same redirect_uri value that you passed in the previous step.	Yes

      var data = {
         grant_type: 'authorization_code',
         code: code,
         client_id: process.env.LinkedInAppId,
         client_secret: process.env.LinkedInSecret,
         redirect_uri: environment.authFromLinkedInApi()
      };

      const accessRes = await axios.post('https://www.linkedin.com/oauth/v2/accessToken', QueryString.stringify(data), accessConfig);

      var access_token = accessRes.data.access_token;

      const profileConfig = {
         headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Authorization': `Bearer ${access_token}`
         }
      }

      const profileRes = await axios.get(' https://api.linkedin.com/v2/userinfo', profileConfig);

      var redirect = environment.boxerHome() + "#&session=" + session +
         "&conversation=" + encodeURIComponent(conversation) +
         "&email=" + encodeURIComponent(profileRes.data.email) +
         "&name=" + encodeURIComponent(profileRes.data.name) +
         "&secret=" + encodeURIComponent(secret);

      return {
         status: 302,
         headers: {
            'Location': redirect
         },
         body: 'Redirecting...'
      }

   } catch (err) {

      console.error(err);

      return {
         status: 500
      };
   }
}

/**
* Process the authentication from LinkedIn based on the provided request and context.
* 
* @param request - The HTTP request containing query parameters for session, code, conversation, and secret.
* @param context - The invocation context for the Azure Function.
* @returns A promise that resolves to an HTTP response initialization object.
*/
async function processAuthFromLinkedIn(request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {

   let code: string | null = null;
   let state: string | null = null;
   let parsedState: JSON | null = null;
   let session: string | null = null;
   let secret: string | null = null;
   let conversation: string = "";     // COnversation can actually be an emptry string. 

   for (const [key, value] of request.query.entries()) {
      if (key === 'state')
         state = value;
      if (key === 'code')
         code = value;
   }

   // Pull all the state variables out of the 'state' parameter, where we put them on doing the redurect to LinkedIn
   if (state) {
      parsedState = JSON.parse(state);
      if (parsedState) {
         session = (parsedState as any).session;
         conversation = (parsedState as any).conversation;
         secret = (parsedState as any).secret;
      }
   }

   if (((session === process.env.SessionKey) || (session === process.env.SessionKey2))
      && code && secret) {

      return await redirectBackHomeWithFullPath(code, session, conversation, secret, context);
   } else {
      return {
         status: 400
      };
   }
}
app.http('ProcessAuthFromLinkedIn', {
   methods: ['GET', 'POST'],
   authLevel: 'anonymous',
   handler: processAuthFromLinkedIn
});
****************************************

****************************************
Api\src\functions\QueryModelWithEnrichment.ts
****************************************
'use strict';
// Copyright Braid Technologies Ltd, 2024
// 'func azure functionapp publish Braid-Api' to publish to Azure
// 'npm start' to run locally

import { app, HttpRequest, HttpResponseInit, InvocationContext } from "@azure/functions";
import axios from 'axios';
import axiosRetry from 'axios-retry';

import { EConversationRole, IConversationElement, IEnrichedQuery, IEnrichedResponse } from "../../../CommonTs/src/EnrichedQuery";
import { IRelevantEnrichedChunk } from "../../../CommonTs/src/EnrichedChunk";
import { getDefaultModel } from "../../../CommonTs/src/IModelFactory";

import { getEnrichedChunkRepository } from "./EnrichedChunkRepositoryFactory";
import { isSessionValid, sessionFailResponse, defaultErrorResponse} from "./Utility";

let model = getDefaultModel();
let minimumEnrichmentTokens = 50; // we use 50 word summaries. if we get half this, the key is too short for a meaningful search. 

/**
 * Asynchronously sends an enriched query to a model for processing and returns an enriched response.
 * 
 * @param query - The enriched query object containing details for the model to process.
 * @returns A promise that resolves to an enriched response object with the model's answer and relevant enriched chunks.
 */
export async function askModel(query: IEnrichedQuery): Promise<IEnrichedResponse> {

   // Up to 5 retries if we hit rate limit
   axiosRetry(axios, {
      retries: 5,
      retryDelay: axiosRetry.exponentialDelay,
      retryCondition: (error) => {
         return error?.response?.status === 429 || axiosRetry.isNetworkOrIdempotentRequestError(error);
      }
   });

   let systemPromptElement: IConversationElement = { role: EConversationRole.kSystem, content: query.personaPrompt };
   let questionElement: IConversationElement = { role: EConversationRole.kUser, content: query.question };
   let enrichedElement: IConversationElement = { role: EConversationRole.kUser, content: query.enrichmentDocumentPrompt + " " + query.question };

   let fullPrompt: Array<IConversationElement> = new Array<IConversationElement>();
   fullPrompt.push(systemPromptElement);
   fullPrompt = fullPrompt.concat(query.history);
   fullPrompt.push(questionElement);

   let directPromise = axios.post('https://studiomodels.openai.azure.com/openai/deployments/StudioLarge/chat/completions?api-version=2024-06-01', {
      messages: fullPrompt,
   },
      {
         headers: {
            'Content-Type': 'application/json',
            'api-key': process.env.AzureAiKey
         }
      }
   );

   let enrichmentPrompt: Array<IConversationElement> = new Array<IConversationElement>();
   enrichmentPrompt.push(systemPromptElement);
   enrichmentPrompt = enrichmentPrompt.concat(query.history);
   enrichmentPrompt.push(enrichedElement);

   let enrichmentPromise = axios.post('https://studiomodels.openai.azure.com/openai/deployments/StudioLarge/chat/completions?api-version=2024-06-01', {
      messages: enrichmentPrompt,
   },
      {
         headers: {
            'Content-Type': 'application/json',
            'api-key': process.env.AzureAiKey
         }
      }
   );

   const [directResponse, enrichedResponse] = await Promise.all ([directPromise, enrichmentPromise]);

   let answer = (directResponse.data.choices[0].message.content);
   let imagined = (enrichedResponse.data.choices[0].message.content);

   let tokens = model.estimateTokens (imagined);
   let chunks = new Array<IRelevantEnrichedChunk>();

   if (tokens >= minimumEnrichmentTokens) {
      let repository = getEnrichedChunkRepository();

      let spec = {
         repositoryId: query.repositoryId,
         summary: imagined,
         maxCount: query.maxCount,
         similarityThreshold: query.similarityThreshold
      }

      chunks = await repository.lookupRelevantFromSummary (spec);
   }

   let queryResponse: IEnrichedResponse = {
      answer: answer,
      chunks: chunks
   }

   return queryResponse;
}

/**
 * Handles a query with enrichment by validating the session and processing the request.
 * @param request - The HTTP request containing the query data.
 * @param context - The context for the function invocation.
 * @returns A promise that resolves to an HTTP response with the query result.
 */
export async function queryModelWithEnrichment(request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {

   let jsonRequest = await request.json();

   if (isSessionValid(request, context)) {

      try {
         let query = (jsonRequest as any)?.data as IEnrichedQuery;

         context.log (query);
         let response = await askModel(query);
         let responseText = JSON.stringify(response);
         context.log (responseText);

         return {
            status: 200, // Ok
            body: responseText
         };
      }
      catch (e: any) {
         context.error (e);
         return defaultErrorResponse();
      }
   }
   else {
      return sessionFailResponse();
   }
};

app.http('QueryModelWithEnrichment', {
   methods: ['GET', 'POST'],
   authLevel: 'anonymous',
   handler: queryModelWithEnrichment
});
****************************************

****************************************
Api\src\functions\StorableActivity.ts
****************************************
'use strict';
// Copyright Braid Technologies Ltd, 2024
// 'func azure functionapp publish Braid-Api' to publish to Azure 
// 'npm start' to run locally

// 3rd party imports
import { app, HttpRequest, HttpResponseInit, InvocationContext } from "@azure/functions";
import { activityStorableAttributes } from "./CosmosStorableApi";
import { getStorableApi as getStorableApi, removeStorableApi, saveStorableApi, getRecentStorablesApi } from "./AzureStorableApi";

app.http('GetActivity', {
   methods: ['POST'],
   authLevel: 'anonymous',
   handler: getActivity
});

/**
 * Saves an activity record based on the provided request and context.
 * Validates the session key from the request query parameters against predefined session keys.
 * If the session key is valid, logs the validation status, processes the JSON request, and saves the activity.
 * Returns an HTTP response with a status code and the session key or an error message.
 *
 * @param request - The HTTP request containing the activity data.
 * @param context - The context for the current invocation.
 * @returns A promise that resolves to an HTTP response with the status and response body.
 */
export async function getActivity(request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {
   
   return getStorableApi (request, activityStorableAttributes, context);
};

app.http('SaveActivity', {
   methods: ['POST'],
   authLevel: 'anonymous',
   handler: saveActivity
});

/**
 * Saves an activity record based on the provided request and context.
 * Validates the session key from the request query parameters against predefined session keys.
 * If the session key is valid, logs the validation status, processes the JSON request, and saves the activity.
 * Returns an HTTP response with a status code and the session key or an error message.
 *
 * @param request - The HTTP request containing the activity data.
 * @param context - The context for the current invocation.
 * @returns A promise that resolves to an HTTP response with the status and response body.
 */
export async function saveActivity(request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {
   
   return saveStorableApi (request, activityStorableAttributes, context);
};

app.http('RemoveActivity', {
   methods: ['POST'],
   authLevel: 'anonymous',
   handler: removeActivity
});

/**
 * Asynchronously removes an activity using the provided HTTP request and invocation context.
 * 
 * @param request - The HTTP request containing the activity information.
 * @param context - The context in which the activity removal is taking place.
 * @returns A promise that resolves to an HttpResponseInit object representing the removal operation result.
 */
export async function removeActivity(request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {

   return removeStorableApi (request, activityStorableAttributes, context);
}

app.http('GetActivities', {
   methods: ['GET', 'POST'],
   authLevel: 'anonymous',
   handler: getRecentActivities
});

export async function getRecentActivities(request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {

   return getRecentStorablesApi (request, activityStorableAttributes, context);
}
****************************************

****************************************
Api\src\functions\StorableChunk.ts
****************************************
'use strict';
// Copyright Braid Technologies Ltd, 2024
// 'func azure functionapp publish Braid-Api' to publish to Azure 
// 'npm start' to run locally

// 3rd party imports
import { app, HttpRequest, HttpResponseInit, InvocationContext } from "@azure/functions";

// Internal imports
import { chunkStorableAttributes } from './CosmosStorableApi';
import { findStorableApi, removeStorableApi, saveStorableApi, getStorableApi, getRecentStorablesApi } from "./AzureStorableApi";

app.http('GetChunk', {
   methods: ['GET', 'POST'],
   authLevel: 'anonymous',
   handler: getChunk
});

/**
 * Loads a Chunk record based on the provided request and context.
 * Validates the session key from the request query parameters against predefined session keys.
 * If the session key is valid, logs the validation status, processes the JSON request, and loads the Chunk.
 * Returns an HTTP response with a status code and the session key or an error message.
 *
 * @param request - The HTTP request containing the Chunk data.
 * @param context - The context for the current invocation.
 * @returns A promise that resolves to an HTTP response with the status and response body.
 */
export async function getChunk(request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {
   
   return getStorableApi (request, chunkStorableAttributes, context);
};

app.http('FindChunk', {
   methods: ['GET', 'POST'],
   authLevel: 'anonymous',
   handler: findChunk
});

/**
 * Loads a Chunk record based on the provided request and context.
 * Validates the session key from the request query parameters against predefined session keys.
 * If the session key is valid, logs the validation status, processes the JSON request, and loads the Chunk.
 * Returns an HTTP response with a status code and the session key or an error message.
 *
 * @param request - The HTTP request containing the Chunk data.
 * @param context - The context for the current invocation.
 * @returns A promise that resolves to an HTTP response with the status and response body.
 */
export async function findChunk(request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {
   
   return findStorableApi (request, chunkStorableAttributes, context);
};

app.http('SaveChunk', {
   methods: ['POST'],
   authLevel: 'anonymous',
   handler: saveChunk
});

/**
 * Saves a chunk record based on the provided request and context.
 * Validates the session key from the request query parameters against predefined session keys.
 * If the session key is valid, logs the validation status, processes the JSON request, and saves the chunk.
 * Returns an HTTP response with a status code and the session key or an error message.
 *
 * @param request - The HTTP request containing the chunk data.
 * @param context - The context for the current invocation.
 * @returns A promise that resolves to an HTTP response with the status and response body.
 */
export async function saveChunk(request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {

   return saveStorableApi (request, chunkStorableAttributes, context);
};

app.http('RemoveChunk', {
   methods: ['POST'],
   authLevel: 'anonymous',
   handler: removeChunk
});

/**
 * Asynchronously removes a chunk using the provided HTTP request and invocation context.
 * 
 * @param request - The HTTP request containing information about the chunk to be removed.
 * @param context - The invocation context for logging and error handling.
 * @returns A promise that resolves to an HttpResponseInit object representing the result of the removal operation.
 */
export async function removeChunk(request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {

   return removeStorableApi (request, chunkStorableAttributes, context);
}

app.http('GetChunks', {
   methods: ['GET', 'POST'],
   authLevel: 'anonymous',
   handler: getRecentChunks
});

/**
 * Asynchronously retrieves recent chunks based on the provided HTTP request and invocation context.
 * @param request - The HTTP request object containing the necessary data.
 * @param context - The invocation context for the function execution.
 * @returns A promise that resolves to an HttpResponseInit object representing the response.
 */
export async function getRecentChunks(request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {

   return getRecentStorablesApi (request, chunkStorableAttributes, context);
}
****************************************

****************************************
Api\src\functions\StorablePage.ts
****************************************
'use strict';
// Copyright Braid Technologies Ltd, 2024
// 'func azure functionapp publish Braid-Api' to publish to Azure 
// 'npm start' to run locally

// 3rd party imports
import { app, HttpRequest, HttpResponseInit, InvocationContext } from "@azure/functions";

// Internal imports
import { pageStorableAttributes } from './CosmosStorableApi';
import { getStorableApiFromQuery, saveStorableApi } from "./AzureStorableApi";
import { IStorable } from "../../../CommonTs/src/IStorable";
import { IStoredPage } from "../../../CommonTs/src/PageRepositoryApi.Types";
import { decompressString } from "../../../CommonTs/src/Compress";

// A transformer function that can be applied to a storable to transform it to decompress the html field
function decompressHtml (storable: IStorable) : IStorable {

   let storedPage: IStoredPage = storable as IStoredPage;

   if (storedPage.html)
      storedPage.html = decompressString (storedPage.html);

   return storedPage;
}

// A transformer function that can be applied to a storable to transform it to send the html field as the HTTP response
function sendHtml (storable: IStorable) : HttpResponseInit {

   let storedPage: IStoredPage = storable as IStoredPage;

   return {
      status: 200,
      headers: {
         "Content-Type": "text/html"
      },
      body: storedPage.html
   };
}

app.http('GetPage', {
   methods: ['GET', 'POST'],
   authLevel: 'anonymous',
   handler: getPage
});

/**
 * Loads a Page record based on the provided request and context.
 * Validates the session key from the request query parameters against predefined session keys.
 * If the session key is valid, logs the validation status, processes the JSON request, and loads the Chunk.
 * Returns an HTTP response with a status code and the session key or an error message.
 *
 * @param request - The HTTP request containing the Chunk data.
 * @param context - The context for the current invocation.
 * @returns A promise that resolves to an HTTP response with the status and response body.
 */
export async function getPage(request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {
   
   return await getStorableApiFromQuery (request, pageStorableAttributes, context, decompressHtml, sendHtml);
};

app.http('SavePage', {
   methods: ['POST'],
   authLevel: 'anonymous',
   handler: savePage
});

/**
 * Saves a Page record based on the provided request and context.
 * Validates the session key from the request query parameters against predefined session keys.
 * If the session key is valid, logs the validation status, processes the JSON request, and saves the chunk.
 * Returns an HTTP response with a status code and the session key or an error message.
 *
 * @param request - The HTTP request containing the chunk data.
 * @param context - The context for the current invocation.
 * @returns A promise that resolves to an HTTP response with the status and response body.
 */
export async function savePage(request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {

   return saveStorableApi (request, pageStorableAttributes, context);
};
****************************************

****************************************
Api\src\functions\StudioForTeams.ts
****************************************
'use strict';
// Copyright Braid Technologies Ltd, 2024
// 'func azure functionapp publish Braid-Api' to publish to Azure
// 'npm start' to run locally

import { app, HttpRequest, HttpResponseInit, InvocationContext } from "@azure/functions";

import { IStudioBoxerRequest, IStudioBoxerResponseEnrichment} from "../../../CommonTs/src/StudioApi.Types";
import { IEnrichedQuery, EStandardPrompts } from "../../../CommonTs/src/EnrichedQuery";
import { defaultErrorResponse, invalidRequestResponse } from "./Utility";
import { askModel } from "./QueryModelWithEnrichment";
import { EChunkRepository } from "../../../CommonTs/src/EnrichedChunk";
import { kDefaultMinimumCosineSimilarity } from "./IEnrichedChunkRepository";

function makeIconPath (url: string) : string {
   // https://dev.to/derlin/get-favicons-from-any-website-using-a-hidden-google-api-3p1e
   var urlParts = new URL(url);
   return 'https://www.google.com/s2/favicons?domain=' + urlParts.hostname + '&sz=32';
}

/**
 * Handles a boxer query request by processing the provided question and generating a response with enrichments.
 * 
 * @param request - The HTTP request containing the query information.
 * @param context - The context for the function invocation.
 * @returns A promise that resolves to an HTTP response with the processed query response and enrichments.
 */
export async function boxerQuery(request: HttpRequest, context: InvocationContext): Promise < HttpResponseInit > {

   try {

      const question = request.query.get('question') || (await request.text());  

      if (question) {
         context.log(question);

         // Translate from the simple MSTeams API to the one we use in Boxer app allowing more enrichments
         let passOnSpec: IEnrichedQuery = {

            repositoryId : EChunkRepository.kBoxer,
            similarityThreshold: kDefaultMinimumCosineSimilarity,
            maxCount: 4,
            personaPrompt: EStandardPrompts.kOpenAiPersonaPrompt,
            enrichmentDocumentPrompt: EStandardPrompts.kEnrichmentPrompt,
            question: question,
            history: []
         }

         // Call common function - common the Boxer back end and to Teams API
         let passedResponse = await askModel (passOnSpec);
      
         // Translate back from the enriched Boxer app format to simpler MSTeams API 
         let enrichments: Array<IStudioBoxerResponseEnrichment> = new Array<IStudioBoxerResponseEnrichment> ();

         let answer: IStudioBoxerResponseEnrichment = { 
            id: "1",
            url: "",
            summary: passedResponse.answer,
            title: question,            
            iconUrl: makeIconPath ("https://braidapps.io")
         };
         enrichments.push(answer);      

         for (let i = 0; i < passedResponse.chunks.length; i++) {
            let enrichment: IStudioBoxerResponseEnrichment = { 
               id: (i+2).toString(),
               url:  passedResponse.chunks[i].chunk.url,
               summary: passedResponse.chunks[i].chunk.summary,
               title: question +  " - Link#" + (i+1).toString(),
               iconUrl: makeIconPath (passedResponse.chunks[i].chunk.url)
            };
            enrichments.push(enrichment);
         }

         const res: HttpResponseInit = {
            status: 200,
            jsonBody: enrichments
         };

         context.log (res.jsonBody);

         return res;
      }
      else {
         context.error ("No 'question' parameter found.");   
         return invalidRequestResponse ("No 'question' parameter found.");           
      }
   }
   catch(error: any) {

      context.error ("Error calling Boxer:", error);
      return defaultErrorResponse();
   }
};

app.http('StudioForTeams-Boxer', {
   methods: ['GET', 'POST'],
   authLevel: 'anonymous',
   handler: boxerQuery
});
****************************************

****************************************
Api\src\functions\Summarize.ts
****************************************
'use strict';
// Copyright Braid Technologies Ltd, 2024
// 'func azure functionapp publish Braid-Api' to publish to Azure
// 'npm start' to run locally

import { app, HttpRequest, HttpResponseInit, InvocationContext } from "@azure/functions";
import axios from 'axios';
import axiosRetry from 'axios-retry';

import { getDefaultModel } from "../../../CommonTs/src/IModelFactory";
import { isSessionValid, sessionFailResponse, defaultErrorResponse, invalidRequestResponse } from "./Utility";
import { ISummariseRequest, ISummariseResponse } from "../../../CommonTs/src/SummariseApi.Types";

let minimumTextLength = 64;
let model = getDefaultModel();

/**
 * Splits the input text into chunks of maximum size defined by the model
 * 
 * @param text The text to be chunked.
 * @param overlapwords - how may words to put in overlap of chunks
 * @returns An array of strings, each representing a chunk of the input text.
 */
function chunkText(text: string, overlapWords: number): Array<string> {

   let chunks = model.chunkText(text, undefined, overlapWords);

   return chunks;
}

/**
 * Asynchronously summarizes the given text using an AI assistant.
 * 
 * @param text The text to be summarized.
 * @param words The number of words to use for the summary.
 * @returns A Promise that resolves to the summarized text.
 */
async function singleShotSummarize(text: string, words: number): Promise<string> {

   // Up to 5 retries if we hit rate limit
   axiosRetry(axios, {
      retries: 5,
      retryDelay: axiosRetry.exponentialDelay,
      retryCondition: (error) => {
         return error?.response?.status === 429 || axiosRetry.isNetworkOrIdempotentRequestError(error);
      }
   });

   let wordString = Math.floor (words).toString();
   let content = "You are an AI asistant that summarises text in "
      + wordString +
      " words or less. You ignore text that look like to be web page navigation, javascript, or other items that are not the main body of the text. Please summarise the following text in "
      + wordString + " words.  Translate to English if necessary. "
   console.log(content)

   let response = await axios.post('https://studiomodels.openai.azure.com/openai/deployments/StudioLarge/chat/completions?api-version=2024-06-01', {
      messages: [
         {
            role: 'system',
            content: content
         },
         {
            role: 'user',
            content: text
         }
      ],
   },
      {
         headers: {
            'Content-Type': 'application/json',
            'api-key': process.env.AzureAiKey
         }
      }
   );

   return (response.data.choices[0].message.content);
}

/**
 * Asynchronously generates a recursive summary of the input text based on the specified level and word limit.
 * 
 * @param text The text to be summarized.
 * @param level The current level of recursion.
 * @param words The maximum number of words in the summary.
 * @returns A Promise that resolves to the generated summary string.
 */
export async function recursiveSummarize(text: string, level: number, words: number): Promise<string> {

   let overallSummary: string | undefined = undefined;
   let chunks = chunkText(text, 0);
   let summaries = new Array<string>();

   let recursizeSummarySize = model.contextWindowSize / 5 / 10; // 5 tokens per word, and we compress by a factor of 10

   if (chunks.length > 1) {
      // If the text was > threshold, we break it into chunks.
      // Here we look over each chunk to generate a summary for each
      for (var i = 0; i < chunks.length; i++) {

         let summary = await singleShotSummarize(chunks[i], recursizeSummarySize);
         summaries.push(summary);
      }
   }
   else {
      let summary = await singleShotSummarize(chunks[0], words);
      summaries.push(summary);
   }

   // If we made multiple summaries, we join them all up 
   if (chunks.length > 1) {
      let joinedSummaries = summaries.join(" ");
      overallSummary = await recursiveSummarize(joinedSummaries, level + 1, words);
   }
   else {
      overallSummary = summaries[0];
   }

   return overallSummary;
}

/**
 * Asynchronous function to summarize text based on the requested session key and input text.
 * 
 * @param request - The HTTP request object containing the text to be summarized.
 * @param context - The context object for the function invocation.
 * @returns A promise that resolves to an HTTP response with the summarized text or an error message.
 */
export async function summarize(request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {

   let text: string | undefined = undefined;
   let words: number = 50;
   let overallSummary: string | undefined = undefined;

   if (isSessionValid(request, context)) {

      try {
         let jsonRequest = await request.json();
         context.log(jsonRequest);

         let summariseSpec = (jsonRequest as any).request as ISummariseRequest;

         text = summariseSpec.text;
         words = summariseSpec.lengthInWords ? Math.floor(Number(summariseSpec.lengthInWords)) : 50;

         if (text && text.length >= minimumTextLength && words > 0) {
            let definitelyText: string = text;
            overallSummary = await recursiveSummarize(definitelyText, 0, words);

            let summariseResponse: ISummariseResponse = {
               summary: overallSummary
            }

            context.log(summariseResponse);

            return {
               status: 200, // Ok
               body: JSON.stringify(summariseResponse)
            };
         }
         else {
            context.error("Text is below minimum length or invalid length for summary.");
            return invalidRequestResponse("Text is below minimum length or invalid length for summary.")
         }
      }
      catch (e: any) {
         context.error(e);
         return defaultErrorResponse();
      }
   }
   else {
      context.error("Session validation failed.");
      return sessionFailResponse();
   }
};

app.http('Summarize', {
   methods: ['GET', 'POST'],
   authLevel: 'anonymous',
   handler: summarize
});
****************************************

****************************************
Api\src\functions\SuppressSummariseFail.ts
****************************************
'use strict';
// Copyright Braid Technologies Ltd, 2024
// 'func azure functionapp publish Braid-Api' to publish to Azure
// 'npm start' to run locally

import { app, HttpRequest, HttpResponseInit, InvocationContext } from "@azure/functions";
import axios from 'axios';
import axiosRetry from 'axios-retry';

import { isSessionValid, sessionFailResponse, defaultErrorResponse } from "./Utility";
import { ISuppressSummariseFailRequest, ISuppressSummariseFailResponse, ESuppressSummariseFail } from "../../../CommonTs/src/SuppressSummariseFailApi.Types";

let minimumTextLength = 64;

/**
 * Asynchronous function to find a common theme from a number of paragraphs of text.
 * Makes a POST request to an Azure endpoint to get the most common theme in the provided text.
 * Utilizes axios for HTTP requests and axiosRetry for up to 5 retries in case of rate limit errors.
 * @param text The text containing paragraphs to analyze for a common theme.
 * @param length The length for the theme text to return.
 * @returns A Promise that resolves to the most common theme found in the text.
 */
async function suppressSummariseFailCall(text: string, length: number): Promise<ESuppressSummariseFail> {

   // Up to 5 retries if we hit rate limit
   axiosRetry(axios, {
      retries: 5,
      retryDelay: axiosRetry.exponentialDelay,
      retryCondition: (error) => {
         return error?.response?.status === 429 || axiosRetry.isNetworkOrIdempotentRequestError(error);
      }
   });

   let response = await axios.post('https://studiomodels.openai.azure.com/openai/deployments/StudioLarge/chat/completions?api-version=2024-06-01', {
      messages: [
         {
            role: 'system',
            content: "You are an AI asistant that reviews the work of a summariser. The summariser occasionally cannot find the main body of the text to summarise. The summariser may apologise for this, or may say there is not enough relevant information to summarise, or may state the text contains only web page navigation, all of which are failed summaries."
               + " Please review the following summary and reply 'No' if the summariser has not been able to create a good summary of a body of text, otherwise reply 'Yes'."
         },
         {
            role: 'user',
            content: text
         }
      ],
   },
      {
         headers: {
            'Content-Type': 'application/json',
            'api-key': process.env.AzureAiKey
         }
      }
   );

   return (response.data.choices[0].message.content === ESuppressSummariseFail.kNo ? ESuppressSummariseFail.kNo : ESuppressSummariseFail.kYes);
}

/**
 * Finds a theme from the provided text based on certain criteria.
 * Validates the session key and returns an HTTP response with the theme summary or an authorization error message.
 * @param request - The HTTP request containing the text and session key.
 * @param context - The invocation context for logging and validation.
 * @returns A promise of an HTTP response with the theme summary or an authorization error message.
 */
export async function suppressSummariseFail(request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {

   let text: string | undefined = undefined;
   let length: number | undefined = undefined;
   let overallSummary: ESuppressSummariseFail | undefined = undefined;
   const defaultLength = 15;

   if (isSessionValid(request, context)) {

      try {
         let jsonRequest = await request.json();
         context.log(jsonRequest);

         let summariseSpec = (jsonRequest as any).request as ISuppressSummariseFailRequest;   
         text = summariseSpec.text;
         length = summariseSpec.lengthInWords;

         if (!text || text.length < minimumTextLength) {
            overallSummary = ESuppressSummariseFail.kNo;
         }
         else {

            let definitelyText: string = text;
            let definitelyLength: number = length ? length : defaultLength;
            overallSummary = await suppressSummariseFailCall(definitelyText, definitelyLength);
         }

         let summariseResponse : ISuppressSummariseFailResponse = {
            isValidSummary: overallSummary
         }

         context.log (summariseResponse);
         return {
            status: 200, // Ok
            body: JSON.stringify (summariseResponse)
         };
      }
      catch (e: any) {
         context.error (e);
         return defaultErrorResponse();          
      }
   }
   else {
      context.error ("Session validation failed.");          
      return sessionFailResponse();
   }
};

app.http('SuppressSummariseFail', {
   methods: ['GET', 'POST'],
   authLevel: 'anonymous',
   handler: suppressSummariseFail
});
****************************************

****************************************
Api\src\functions\Utility.ts
****************************************
'use strict';
// Copyright Braid Technologies Ltd, 2024
// 'func azure functionapp publish Braid-Api' to publish to Azure
// 'npm start' to run locally

import { HttpRequest, HttpResponseInit, InvocationContext } from "@azure/functions";

/**
 * Checks if the session provided in the request is valid based on the session keys stored in the environment variables.
 * @param request - The HTTP request object containing the query parameters.
 * @param context - The invocation context for logging and additional context information.
 * @returns True if the session is valid, false otherwise.
 */
export function isSessionValid(request: HttpRequest, context: InvocationContext): boolean {

   let requestedSession: string | undefined = undefined;

   for (const [key, value] of request.query.entries()) {
      if (key === 'session')
         requestedSession = value;
   }

   if ((requestedSession === process.env.SessionKey) || (requestedSession === process.env.SessionKey2)) {
      context.log("Passed session key validation:" + requestedSession);
      return true;
   }
   else {
      context.log("Failed session key validation:" + requestedSession);
      return false;
   }
};

/**
 * Generates an HTTP response object indicating a session failure.
 * 
 * @returns {HttpResponseInit} The HTTP response object with a status code of 401 (Unauthorised) and a message "Authorization check failed."
 */

export function sessionFailResponse(): HttpResponseInit {

   return {
      status: 401, // Unauthorised
      body: "Authorization check failed."
   };
}

/**
 * Generates a default HTTP response with status code 200 (Ok) and a body of "Ok".
 * 
 * @returns {HttpResponseInit} The default HTTP response object with status code and body.
 */
export function defaultOkResponse(): HttpResponseInit {

   return {
      status: 200, // Ok
      body: "Ok"
   };
}

/**
 * Generates a default HTTP response for server errors.
 * Returns a response with status code 500 (Server error) and a message indicating an unexpected problem.
 * @returns {HttpResponseInit} The default error response object
 */
export function defaultErrorResponse(): HttpResponseInit {

   return {
      status: 500, // Server error
      body: "The server encountered an unpexcted problem."
   };
}

export function invalidRequestResponse(str: string): HttpResponseInit {

   return {
      status: 400, // Invalid request
      body: "Invalid request:" + str
   };
}

export function notFoundResponse(): HttpResponseInit {

   return {
      status: 404, // Not Found
      body: ""
   };
}
****************************************

****************************************
ApiTest\.pytest_cache\CACHEDIR.TAG
****************************************
Signature: 8a477f597d28d172789f06886806bc55
# This file is a cache directory tag created by pytest.
# For information about cache directory tags, see:
#	https://bford.info/cachedir/spec.html
****************************************

****************************************
ApiTest\.pytest_cache\README.md
****************************************
# pytest cache directory #

This directory contains data from the pytest's cache plugin,
which provides the `--lf` and `--ff` options, as well as the `cache` fixture.

**Do not** commit this to version control.

See [the docs](https://docs.pytest.org/en/stable/how-to/cache.html) for more information.
****************************************

****************************************
ApiTest\test\chunk_test.py
****************************************
'''
Test module for the text chunking API endpoint.
This module contains test cases for the text chunking API endpoint,
covering various scenarios including:
- Valid chunking requests with specified size and overlap
- Invalid requests with missing parameters
- Edge cases with very small or large chunk sizes

This module contains integration tests for the /chunk endpoint, which is responsible
for splitting input text into smaller chunks with configurable size and overlap.
The tests verify the API's response format and basic functionality.

Environment Variables Required:
    - SessionKey: Authentication token for API access
'''

import pytest
import requests
import os


# Configure the base URL for the API.
BASE_URL = 'http://localhost:7071/api'
SESSION_KEY = os.environ['SessionKey']

# Construct the full URL to the /chunk endpoint
chunk_url = f'{BASE_URL}/chunk?session=' + SESSION_KEY

# Example test data based on the provided schema
@pytest.fixture
def chunk_request_data():
    return {
        'text': 'This is a sample text to be chunked.',
        'chunkSize': 5,
        'overlapWords': 2
    }

def test_chunk_endpoint(chunk_request_data):

    wrapped = {
        'request' : chunk_request_data
    }

    # Send a POST request
    response = requests.post(chunk_url, json=wrapped, timeout=10)

    # Assert that the response status code is 200
    assert response.status_code == 200

    # Parse the response JSON
    response_data = response.json()

    # Assert the presence of expected keys in the response data
    assert 'chunks' in response_data

    assert len(response_data['chunks']) > 0

if __name__ == '__main__':
    pytest.main()
****************************************

****************************************
ApiTest\test\classify_test.py
****************************************
'''
Test module for the classification API endpoint.

This module contains test cases for the /classify endpoint, including:
- Successful classification requests with valid data
- Error handling for invalid classification requests
- Validation of response format and content

The tests require a valid session key in the environment variables
and a running API server at the configured BASE_URL.
'''

import pytest
import requests
import os

# Configure the base URL for the API.
BASE_URL = 'http://localhost:7071/api'
SESSION_KEY = os.environ['SessionKey']

# Sample data based on the definitions
classify_request_data = {
    'text': 'Great, fabulous, magnificent, awesome, brilliant, great, love it, smashed it',
    'classifications': ['Positive', 'Negative', 'Neutral']
}

response_data = {
    'classification': 'Positive'
}

# Construct the full URL to the /classify endpoint
classify_url = f'{BASE_URL}/classify?session=' + SESSION_KEY

def test_classification_request():
    '''Test sending a classification request to the API.'''
    wrapped = {
        'request' : classify_request_data
    }
    response = requests.post(classify_url, json=wrapped, timeout=10)
    assert response.status_code == 200
    response_json = response.json()
    assert 'classification' in response_json
    assert response_json['classification'] in classify_request_data['classifications']

@pytest.mark.parametrize('invalid_data', [
    {'text': 'Example', 'classifications': None},  # Missing classifications
    {'text': '', 'classifications': ['Positive']},  # Empty text
    {'classifications': ['Positive', 'Negative']},  # Missing text
    {'text': 'Example text', 'classifications': []}  # Empty classifications
])
def test_invalid_classification_request(invalid_data):
    '''Test classification requests with invalid data.'''
    wrapped = {
        'request' : invalid_data
    }
    response = requests.post(classify_url, json=wrapped, timeout=10)
    assert response.status_code == 400  # Assuming the API returns 400 for bad requests

if __name__ == '__main__':
    pytest.main()
****************************************

****************************************
ApiTest\test\embed_test.py
****************************************
'''
Test module for the embedding API endpoint.

This module contains test cases to verify the functionality of the /embed endpoint,
which generates vector embeddings from text input. Tests cover both valid and invalid
request scenarios, verifying response structures and error handling.

Test cases:
- test_embedding_request_structure: Validates successful embedding generation
- test_invalid_request_structure: Verifies proper handling of malformed requests
'''

import pytest
import requests
import os


# Configure the base URL for the API. 
BASE_URL = 'http://localhost:7071/api'  
SESSION_KEY = os.environ['SessionKey']

# Construct the full URL to the /chunk endpoint
embed_url = f'{BASE_URL}/embed?session=' + SESSION_KEY

def test_embedding_request_structure():

    # Define a valid request payload according to the JSON schema
    valid_request = {
        'text': 'This is a test string for generating embeddings'
    }

    wrapped = {
        'request' : valid_request
    }     

    # Simulate sending the request to the API
    response = requests.post(embed_url, json=wrapped)

    # Check for successful response
    assert response.status_code == 200, f'Unexpected status code: {response.status_code}'

    # Validate response structure
    response_data = response.json()

    # Check if embedding is a list
    assert isinstance(response_data.get('embedding'), list), 'Response embedding is not a list'

    # Check if all elements in embedding are numbers
    assert all(isinstance(x, (int, float)) for x in response_data['embedding']), 'Embedding contains non-numeric elements'

def test_invalid_request_structure():
    
    # Define an invalid request with missing 'text' field
    invalid_request = {
        'wrong_field': 'This should cause an error'
    }
    wrapped = {
        'request' : invalid_request
    }   
    # Simulate sending the request to the API
    response = requests.post(embed_url, json=wrapped)

    # Expecting a 400 status code for bad request
    assert response.status_code == 400, f'Expected 400 status for invalid request, got {response.status_code}'


if __name__ == '__main__':
    pytest.main()
****************************************

****************************************
ApiTest\test\enumerate_models_test.py
****************************************
'''
Test module for the enumerate_models API endpoint.

This module contains test cases for validating the schema and functionality of the
enumerate_models endpoint, which provides information about available AI models and
their corresponding embedding models. Tests cover both request/response schema
validation and actual API interaction.

The module validates:
- IEnumerateModelsRequest schema
- IEnumerateModelsResponse schema
- API endpoint functionality
- Error handling for invalid responses
'''

import pytest
import requests
import os
import jsonschema

# Configure the base URL for the API.
BASE_URL = 'http://localhost:7071/api'
SESSION_KEY = os.environ['SessionKey']

# Construct the full URL to the /enumerateModels endpoint
enumerate_models_url = f'{BASE_URL}/enumerateModels?session=' + SESSION_KEY

# Load the API schema from the file
ENUMERATE_MODELS_API_SCHEMA = {
    'definitions': {
        'IEnumerateModelsRequest': {
            'type': 'object',
            'additionalProperties': False,
            'title': 'IEnumerateModelsRequest',
            'description': 'Interface for the EnumerateModels request object.'
        },
        'IEnumerateModelsResponse': {
            'type': 'object',
            'properties': {
                'defaultId': {'type': 'string'},
                'defaultEmbeddingId': {'type': 'string'},
                'largeId': {'type': 'string'},
                'largeEmbeddingId': {'type': 'string'},
                'smallId': {'type': 'string'},
                'smallEmbeddingId': {'type': 'string'}
            },
            'required': ['defaultId', 'defaultEmbeddingId', 'largeId', 'largeEmbeddingId', 'smallId', 'smallEmbeddingId'],
            'additionalProperties': False
        }
    }
}

def validate_enumerate_models_schema(instance, schema_name) -> bool:
    '''Utility function to validate a JSON instance against a schema definition.'''
    schema = {'$ref': f'#/definitions/{schema_name}'}

    jsonschema.validate(instance=instance, schema={'$schema': 'http://json-schema.org/draft-07/schema#', **ENUMERATE_MODELS_API_SCHEMA, **schema})

def test_ienumerate_models_request_valid():
    '''Test for a valid IEnumerateModelsRequest object.'''
    request_instance = {}
    validate_enumerate_models_schema(request_instance, 'IEnumerateModelsRequest')

def test_ienumerate_models_response_valid():
    '''Test for a valid IEnumerateModelsResponse object.'''
    response_instance = {
        'defaultId': 'default-id',
        'defaultEmbeddingId': 'default-embedding-id',
        'largeId': 'large-id',
        'largeEmbeddingId': 'large-embedding-id',
        'smallId': 'small-id',
        'smallEmbeddingId': 'small-embedding-id'
    }
    validate_enumerate_models_schema(response_instance, 'IEnumerateModelsResponse')

def test_ienumerate_models_response_missing_fields():
    '''Test for IEnumerateModelsResponse object missing required fields.'''
    response_instance = {
        'defaultId': 'default-id'
        # Missing other required fields
    }
    with pytest.raises(jsonschema.exceptions.ValidationError):
        validate_enumerate_models_schema(response_instance, 'IEnumerateModelsResponse')

def test_ienumerate_models_response_additional_fields():
    '''Test for IEnumerateModelsResponse object with additional fields that should be disallowed.'''
    response_instance = {
        'defaultId': 'default-id',
        'defaultEmbeddingId': 'default-embedding-id',
        'largeId': 'large-id',
        'largeEmbeddingId': 'large-embedding-id',
        'smallId': 'small-id',
        'smallEmbeddingId': 'small-embedding-id',
        'extraField': 'extra'  # Additional field not defined in schema
    }
    with pytest.raises(jsonschema.exceptions.ValidationError):
        validate_enumerate_models_schema(response_instance, 'IEnumerateModelsResponse')

def test_enumerate_request():
    '''Test sending an enumerate request to the API.'''
    wrapped = {
        'request' : ''
    }       
    response = requests.post(enumerate_models_url, json=wrapped)
    assert response.status_code == 200
    response_json = response.json()
    validate_enumerate_models_schema(response_json, 'IEnumerateModelsResponse')

if __name__ == '__main__':
    pytest.main()
****************************************

****************************************
ApiTest\test\enumerate_repositories_test.py
****************************************
'''
Test module for the EnumerateRepositories API endpoint.

This module contains test cases to verify the functionality of the EnumerateRepositories
API endpoint, which returns a list of available repository IDs. It includes schema 
validation and basic HTTP response testing.

Environment Requirements:
    - SessionKey: Must be set as an environment variable
'''

import pytest
import requests
import os
import jsonschema

# Configure the base URL for the API.
BASE_URL = 'http://localhost:7071/api'
SESSION_KEY = os.environ['SessionKey']

# Construct the full URL to the /enumerateRepositories endpoint
enumerate_repositories_url = f'{
    BASE_URL}/enumerateRepositories?session=' + SESSION_KEY

# Load the API schema from the file
ENUMERATE_REPOSITORIES_API_SCHEMA = {
    'definitions': {
        'IEnumerateRepositoriesRequest': {
            'type': 'object',
            'additionalProperties': False,
            'title': 'IEnumerateRepositoriesRequest',
            'description': 'Interface for the EnumerateRepositories request object.'
        },
        'IEnumerateRepositoriesResponse': {
            'type': 'object',
            'properties': {
                'repositoryIds': {'type': 'array'}
            },
            'required': ['repositoryIds'],
            'additionalProperties': False
        }
    }
}

# Test helper function to validate a response against a schema definition


def validate_response_vs_schema(schema_definition, response_data):
    try:
        jsonschema.validate(instance=response_data, schema=schema_definition)
    except jsonschema.exceptions.ValidationError as ve:
        pytest.fail(f'Response did not match schema: {ve.message}')

# Test function for the 'EnumeratRepositories' API response.


def test_enumerate_repositories():
    # Load the response schema
    response_schema = ENUMERATE_REPOSITORIES_API_SCHEMA[
        'definitions']['IEnumerateRepositoriesResponse']

    # Prepare a mocked request that matches the IEnumerateModelsRequest schema
    wrapped = {}  # This API doesn't require any specific request properties
    response = requests.post(enumerate_repositories_url, json=wrapped)
    assert response.status_code == 200
    response_json = response.json()

    # Validate the response against the schema
    validate_response_vs_schema(response_schema, response_json)


if __name__ == '__main__':
    pytest.main()
****************************************

****************************************
ApiTest\test\find_theme_test.py
****************************************
"""
Test module for the /findtheme API endpoint.

This module contains test cases to verify the functionality of the theme finding API,
including validation of request parameters and response formats. Tests cover both
valid requests and error scenarios for missing required fields.

Endpoints tested:
    - POST /findtheme: Analyzes text to identify themes
"""

import pytest
import requests
import os


# Configure the base URL for the API.
BASE_URL = 'http://localhost:7071/api'
SESSION_KEY = os.environ['SessionKey']

# Construct the full URL to the /chunk endpoint
find_theme_url = f"{BASE_URL}/findtheme?session=" + SESSION_KEY

@pytest.fixture
def valid_request_data():
    return {
        "text": "Sample text input about magazines, books, literature, moves, films, records, CDs, vinyl, newspapers.",
        "length": 123
    }

def test_find_theme_with_valid_request(valid_request_data):
    wrapped = {
        'request' : valid_request_data
    }
    response = requests.post(find_theme_url, json=wrapped)
    assert response.status_code == 200, "Expected status code 200 for a valid request"
    data = response.json()
    assert "theme" in data, "Response should contain 'theme'"

def test_find_theme_with_missing_text():
    request_data = {
        "length": 123
    }
    wrapped = {
        'request' : request_data
    }
    response = requests.post(find_theme_url, json=wrapped)
    assert response.status_code == 400, "Expected status code 400 for missing 'text'"

def test_find_theme_with_missing_length():
    request_data = {
        "text": "Sample text input"
    }
    wrapped = {
        'request' : request_data
    }
    response = requests.post(find_theme_url, json=wrapped)
    assert response.status_code == 400, "Expected status code 400 for missing 'length'"    

if __name__ == "__main__":
    pytest.main()
****************************************

****************************************
ApiTest\test\page_repository_test.py
****************************************
import pytest
import requests
import os

# Configure the base URL for the API.
BASE_URL = 'http://localhost:7071/api'
SESSION_KEY = os.environ['SessionKey']

# Construct the full URL to the /chunk endpoint
get_page_url = f"{BASE_URL}/getpage?session=" + SESSION_KEY

# Sample data for testing
sample_successful_html = "<html><body>Sample Page</body></html>"

def test_get_page_success():
    url = get_page_url+ '&id=769686001'

    response = requests.get(url)
    assert response.status_code == 200

def test_get_page_missing_param():
    url = get_page_url

    # Missing required 'id' parameter
    response = requests.get(url)
    assert response.status_code == 404
****************************************

****************************************
ApiTest\test\studio_test.py
****************************************
'''
Test module for the Studio Boxer API endpoints.

This module contains test cases and helper functions to validate the behavior
of the Studio Boxer API, including:
- Response schema validation
- Enrichment structure validation
- Error handling for invalid requests
- Integration tests for the StudioForTeams-Boxer endpoint

Dependencies:
    - pytest
    - requests
    - jsonschema
'''

import pytest
import requests
import os
import jsonschema


# Configure the base URL for the API.
BASE_URL = 'http://localhost:7071/api'
SESSION_KEY = os.environ['SessionKey']

# Test helper function to validate a response against a schema definition


def validate_response_vs_schema(schema_definition, response_data):
    try:
        jsonschema.validate(instance=response_data, schema=schema_definition)
    except jsonschema.exceptions.ValidationError as ve:
        pytest.fail(f'Response did not match schema: {ve.message}')


@pytest.mark.skip(reason='Helper function, not a test')
def test_IStudioBoxerResponseEnrichment_structure(enrichment_data):

   print(str(enrichment_data))

   # Check for required fields
   assert 'id' in enrichment_data
   assert 'summary' in enrichment_data

   # Check if fields are strings
   assert isinstance(enrichment_data['id'], str)
   assert isinstance(enrichment_data['summary'], str)

   if 'url' in enrichment_data:
      assert isinstance(enrichment_data['url'], str)
   if 'iconUrl' in enrichment_data:
      assert isinstance(enrichment_data['iconUrl'], str)
      print(enrichment_data['iconUrl'])
   if 'title' in enrichment_data:
      assert isinstance(enrichment_data['title'], str)


@pytest.mark.skip(reason='Helper function, not a test')
def test_IStudioBoxerResponse_structure(response_data):

    # Check if 'enrichments' is a list
    assert isinstance(response_data, list)

    # Validate each enrichment
    for enrichment in response_data:
        test_IStudioBoxerResponseEnrichment_structure(enrichment)


# Construct the full URL to the /enumerateRepositories endpoint
studio_boxer_url = f'{BASE_URL}/StudioForTeams-Boxer'

# Load the API schema from the file
STUDIO_FOR_TEAMS_BOXER_API_SCHEMA = {
    'definitions': {
        'IStudioBoxerResponse': {
            'type': 'array'
        }
    }
}

# Test function for the 'StudioBoxer' API .


def test_studio_boxer():
    # Load the response schema
    response_schema = STUDIO_FOR_TEAMS_BOXER_API_SCHEMA['definitions']['IStudioBoxerResponse']

   # Prepare a mocked request that matches the IEnumerateModelsRequest schema
    params = {'question': 'What is the purpose of an LLM?'}

    response = requests.post(studio_boxer_url, params=params)
    assert response.status_code == 200
    response_json = response.json()

    # Validate the response against the schema
    validate_response_vs_schema(response_schema, response_json)
    test_IStudioBoxerResponse_structure(response_json)


def test_invalid_studio_request():
    # Test how the API handles invalid request data
   invalid_data = {'wrong_field': 'Some value'}
   response = requests.post(studio_boxer_url, params=invalid_data)
   # Assuming a bad request returns status code 400
   assert response.status_code == 400


if __name__ == '__main__':
    pytest.main()
****************************************

****************************************
ApiTest\test\summarise_test.py
****************************************
'''
Test module for the summarization API endpoint.

This module contains test cases for the text summarization API endpoint,
covering various scenarios including:
- Valid summarization requests with specified length
- Requests without length specification
- Invalid requests with missing text
- Empty requests

The tests verify both successful responses and proper error handling.
'''

import pytest
import requests
import os

# Configure the base URL for the API.
BASE_URL = 'http://localhost:7071/api'
SESSION_KEY = os.environ['SessionKey']


def summarise_endpoint_url():
    # Construct the full URL for the summary endpoint
    return f'{BASE_URL}/Summarize?session=' + SESSION_KEY


def test_valid_summarise_request():
    # Test case for a valid summarization request
    payload = {
        'text': 'This is a text that needs to be summarized and in order for this to work it needs to be over the minumum text length.',
        'lengthInWords': 10
    }
    wrapped = {
        'request': payload
    }
    response = requests.post(summarise_endpoint_url(), json=wrapped)
    assert response.status_code == 200
    data = response.json()
    assert 'summary' in data
    assert isinstance(data['summary'], str)
    # Further checks can be added based on expected summary content


def test_summarise_request_without_length():
    # Test case with the text but no lengthInWords
    payload = {
        'text': 'This text needs summarization but without specifying the length.'
    }
    wrapped = {
        'request': payload
    }
    response = requests.post(summarise_endpoint_url(),
                             json=wrapped, timeout=10)
    assert response.status_code == 200
    data = response.json()
    assert 'summary' in data
    assert isinstance(data['summary'], str)


def test_summarise_request_missing_text():
    # This should fail because 'text' is a required field
    payload = {
        'lengthInWords': 10
    }
    wrapped = {
        'request': payload
    }
    response = requests.post(summarise_endpoint_url(),
                             json=wrapped, timeout=10)
    assert response.status_code == 400  # Assuming the API returns a 400 Bad Request
    # Additional logic to verify error message can be added here


def test_empty_summarise_request():
    # Test case with an empty payload
    payload = {}
    response = requests.post(summarise_endpoint_url(),
                             json=payload, timeout=10)
    assert response.status_code == 500  # Empty request should fail


if __name__ == '__main__':
    pytest.main()
****************************************

****************************************
ApiTest\.pytest_cache\v\cache\lastfailed
****************************************
{}
****************************************

****************************************
ApiTest\.pytest_cache\v\cache\nodeids
****************************************
[
  "test/page_repository_test.py::test_get_page_missing_param",
  "test/page_repository_test.py::test_get_page_success"
]
****************************************

****************************************
ApiTest\.pytest_cache\v\cache\stepwise
****************************************
[]
****************************************

****************************************
Boxer\core\ActivityRecord.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd

import { IStorable } from '../../CommonTs/src/IStorable';

export const activityRecordClassName = "IStoredActivity";
export const activityRecordSchemaNumber = 1;

// ActivityRecord - has several derived classes according to different activity types. 
export interface IStoredActivity extends IStorable {

}

export const urlActivityRecordClassName = "IStoredUrlActivity";
export const urlActivityRecordSchemaNumber = "1";

// ActivityRecord - activity details plus the URL they clicked on 
export interface IStoredUrlActivity extends IStoredActivity {
   
   url: string;
}

export const urlLikeActivityRecordClassName = "IStoredLikeUrlActivity";
export const urlLikeActivityRecordSchemaNumber = "1";

// ActivityRecord - URL activity details plus a flag to say like (unlike if false) 
export interface IStoredLikeUrlActivity extends IStoredUrlActivity {
   
   like: boolean;
}

export const messageActivityRecordClassName = "IStoredMessageActivity";
export const messageActivityRecordSchemaNumber = "1";

// ActivityRecord - activity details plus the URL they clicked on 
export interface IStoredMessageActivity extends IStoredActivity {
   
   message: string;
}

export function makeDateUTC(rhs: Date) : Date {
   let d = new Date (rhs);
   d.setMilliseconds(0); // MSecs are not used in UTC, and Cosmos DB recommends UTC
   return d;
}
****************************************

****************************************
Boxer\core\ActivityRepository.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd

// 3rd party imports
import axios from "axios";

// Internal imports
import { IStoredActivity, IStoredUrlActivity, IStoredLikeUrlActivity, IStoredMessageActivity, urlActivityRecordClassName, urlLikeActivityRecordClassName, messageActivityRecordClassName } from './ActivityRecord';
import { SessionKey } from "./Keys";
import { IActivityRepository } from "./IActivityRepository";

import { getDefaultEnvironment } from "../../CommonTs/src/IEnvironmentFactory";
import { ActivityRepostoryApi} from '../../CommonTs/src/ActivityRepositoryApi';


// ActivityRepositoryCosmos 
export class ActivityRepositoryCosmos implements IActivityRepository {

   private _sessionKey: string;

   /**
    * Create an ActivityRepository object 
    * @param sessionKey_ - joining key
    */
   public constructor(sessionKey_: SessionKey) {

      this._sessionKey = sessionKey_.toString();
   }


   async save (record : IStoredActivity) : Promise<boolean> {
      
      let environment = getDefaultEnvironment ()  
      
      let api = new ActivityRepostoryApi (environment, this._sessionKey);

      return api.save (record);      
   }

   async loadRecentUrlActivity (count : number) : Promise<Array<IStoredActivity>> {
      
      let clicks = await this.loadRecent (count, urlActivityRecordClassName);
      let likes = await this.loadRecent (count, urlLikeActivityRecordClassName);    
      
      let all = clicks.concat (likes);

      return all;
   }

   async loadRecentMessages (count : number) : Promise<Array<IStoredActivity>> {
      return this.loadRecent (count, messageActivityRecordClassName);
   }

   async loadRecent (limit : number, className: string) : Promise<Array<IStoredActivity>> {
      
      let environment = getDefaultEnvironment ()  
      
      let api = new ActivityRepostoryApi (environment, this._sessionKey);

      // we downcast IStoredActivity bcs we know it is one
      let storedRecords : Array <IStoredActivity> = await api.recent ({ limit: limit, className: className}) as Array <IStoredActivity>; 
   
      return storedRecords;
   }

   async removeMessageRecord (recordId: string) : Promise<boolean> {

      let environment = getDefaultEnvironment ()  
      
      let api = new ActivityRepostoryApi (environment, this._sessionKey);

      return api.remove (recordId);
   }
}
****************************************

****************************************
Boxer\core\AIConnection.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd
import axios from "axios";

// Local
import { SessionKey } from "./Keys";
import { Message } from './Message';
import { Persona } from './Persona';
import { EIcon } from './Icons';
import { EConfigNumbers, EConfigStrings } from './ConfigStrings';
import { throwIfUndefined } from './Asserts';
import { AssertionFailedError } from "./Errors";
import { getDefaultKeyGenerator } from "./IKeyGeneratorFactory";

import { getDefaultEnvironment } from '../../CommonTs/src/IEnvironmentFactory';
import { EChunkRepository, IRelevantEnrichedChunk} from '../../CommonTs/src/EnrichedChunk';
import { EStandardPrompts } from "../../CommonTs/src/EnrichedQuery";

import { EConversationRole, IConversationElement, IEnrichedQuery, IEnrichedResponse, IGenerateQuestionQuery, IQuestionGenerationResponse } from '../../CommonTs/src/EnrichedQuery';
import { QueryModelApi } from '../../CommonTs/src/QueryModelApi';

// We allow for the equivalent of 10 minutes of chat. 10 mins * 60 words = 600 words = 2400 tokens. 
const kMaxTokens : number= 4096;

export class AIConnection {

   private _activeCallCount: number; 
   private _queryModelApi : QueryModelApi;

   /**
    * Create an AIConnection object 
    */
   constructor(sessionKey_: SessionKey) {

      this._activeCallCount = 0;  
      this._queryModelApi = new QueryModelApi (getDefaultEnvironment (), sessionKey_.toString())
   }  

   // Makes an Axios call to call web endpoint
   // Make two queries - one to get the answer to the direct question, another to ask for a reference summary. 
   // The reference summary is then used to look up good articles to add to the response.  
   async makeEnrichedCall  (responseShell: Message, query: IEnrichedQuery) : Promise<Message | undefined> {

      let response = await this._queryModelApi.queryModelWithEnrichment (query);

      if (response) {
         this.streamResponse (responseShell, response);
      }
          
      return responseShell;                                                                            
   }    

   // Asks the LLM for a question that relates to the context  
   async makeFollowUpCall  (summary: string) : Promise<Message | undefined> {
      
      let followUpQuery = AIConnection.buildQueryForQuestionPrompt (summary);

      let response = await this._queryModelApi.generateQuestion (followUpQuery);

      if (response) {
         let keyGenerator = getDefaultKeyGenerator();
         return new Message (keyGenerator.generateKey(), EConfigStrings.kLLMGuid, undefined, 
                             response.question, new Date()); 
      }
      return undefined;                                                                       
   } 

   
   /**
    * Asynchronously streams the enriched response to update the message shell with chunks and live updates.
    * This is a confidence trick - e give the appearance of streaming, not the actuality. 
    * Only reason is that we are going to shutt off dedicated client & move to an API model - so real streaming wont be processsed here. 
    * 
    * @param responseShell - The message shell to be updated with the enriched response.
    * @param response - The enriched response containing answer and relevant enriched chunks.
    * @returns A promise that resolves with the updated message shell after streaming the response.
    */
   private async streamResponse  (responseShell: Message, response: IEnrichedResponse) : Promise<Message> {

      let done = new Promise<Message>(async function(resolve, reject) {

         let responseChunks = response.chunks;

         let shellChunks = new Array<IRelevantEnrichedChunk>();
         shellChunks.length = responseChunks.length;

         for (let i = 0; i < responseChunks.length; i++) {

            let shellEmbed = {chunk: {
                  url: responseChunks[i].chunk.url,
                  summary: responseChunks[i].chunk.summary,
                  text: responseChunks[i].chunk.text
               }, 
               relevance: responseChunks[i].relevance};
            shellChunks[i] = shellEmbed;
         }

         responseShell.chunks = shellChunks;
         let index = 0;
         let maxIndex = 6; 

         let interval = setInterval ( () => {

            switch (index) {
               case 0:
                  let text1 = response.answer.slice (0, response.answer.length / 2);
                  responseShell.liveUpdateText (text1, true);
                  break;  
               case 1:
                  let text2 = response.answer;
                  responseShell.liveUpdateText (text2, true);                     
                  break;                                      
               case 2:
                  if (responseChunks.length > 0) {
                     shellChunks[0].chunk.summary = responseChunks[0].chunk.summary.slice (0, responseChunks[0].chunk.summary.length / 2);
                     responseShell.liveUpdateChunks (shellChunks, true);               
                  }       
                  break;
               case 3:
                  if (responseChunks.length > 1)                  {
                     shellChunks[1].chunk.summary = responseChunks[1].chunk.summary.slice (0, responseChunks[0].chunk.summary.length / 2);  
                     responseShell.liveUpdateChunks (shellChunks, true);                              
                  }             
                  break;  
               case 4:
                  if (responseChunks.length > 0)              { 
                     shellChunks[0].chunk.summary = responseChunks[0].chunk.summary;     
                     responseShell.liveUpdateChunks (shellChunks, true);                              
                  }                                     
                  break;   
               case 5:
                  if (responseChunks.length > 1)          {        
                     shellChunks[1].chunk.summary = responseChunks[1].chunk.summary;    
                     responseShell.liveUpdateChunks (shellChunks, true);            
                  }       
                  break;         
               default:
                  break;                                                 
            }

            index++;
            if (index === maxIndex) {
               responseShell.liveUpdateChunks (shellChunks, false); 
               resolve (responseShell);
               clearInterval(interval);
            }

         }, 100); 
      });

      return done;
   }

   isBusy () {
      return this._activeCallCount !== 0;
   }

   static buildEnrichmentQuery (messages: Array<Message>, authors: Map<string, Persona>): IEnrichedQuery {

      let history = new Array<IConversationElement> ();
      let question = "";    

      var start = AIConnection.findEarliestMessageIndexWithinTokenLimit(messages, authors);

      for (let i = start; i < messages.length; i++) {

         let message = messages[i];

         if (AIConnection.isRequestForLLM(message, authors)) {

            // The last message contains the question. 
            if (i === messages.length -1) {
               // Remove the name of our LLM
               let edited = message.text.replace (EConfigStrings.kLLMRequestSignature, "");   
               
               // Expand 'LLM' to Large Language Model (LLM) as that seems to make a big difference to document hits 
               // This includes some common typos
               let lookFor = [EConfigStrings.kPromptLookFor1, EConfigStrings.kPromptLookFor2, ,
                              EConfigStrings.kPromptLookFor4, EConfigStrings.kPromptLookFor5, EConfigStrings.kPromptLookFor6
                             ] as Array<string>;
               
               let replaceWith = [EConfigStrings.kPromptReplaceWith1, EConfigStrings.kPromptReplaceWith2, EConfigStrings.kPromptReplaceWith3,
                                 EConfigStrings.kPromptReplaceWith4, EConfigStrings.kPromptReplaceWith5, EConfigStrings.kPromptReplaceWith6
                                ] as Array<string>;
               
               for (let i = 0; i < lookFor.length; i++) {
                  if (edited.includes (lookFor[i])) 
                     edited = edited.replace (lookFor[i], replaceWith[i]);
               }             
               
               question = edited;      
            } 
            else {
               // else we just remove the name of our LLM
               let edited = message.text.replace (EConfigStrings.kLLMRequestSignature, "");
               let entry = { role: EConversationRole.kUser, content: edited };
               history.push (entry);
            }
         }

         if (AIConnection.isFromLLM(message, authors)) {
            
            let entry = { role: EConversationRole.kAssistant, content: message.text };
            history.push (entry);     

            for (let j = 0; j < message.chunks.length; j++) {
               let entry = { role: EConversationRole.kAssistant, content: message.chunks[j].chunk.summary };
               history.push (entry);
            }                   
         }         

      }

      let query = {
         repositoryId: EChunkRepository.kBoxer,
         personaPrompt: EStandardPrompts.kOpenAiPersonaPrompt,
         enrichmentDocumentPrompt: EStandardPrompts.kEnrichmentPrompt,
         question : question,
         history: history,
         maxCount: 2,
         similarityThreshold : 0.4
      } 

      return query; 
   }   

   static buildQueryForQuestionPrompt (summary: string): IGenerateQuestionQuery {

      let query = {
         personaPrompt: EStandardPrompts.kOpenAiPersonaPrompt,
         questionGenerationPrompt: EStandardPrompts.kGenerateAQuestionPrompt,
         summary: summary
      } 

      return query; 
   }   

   static buildTranscript (messages: Array<Message>, authors: Map<string, Persona>): string {

      let builtQuery : string = "";
   

      var start = AIConnection.findEarliestMessageIndexWithinTokenLimit(messages, authors);

      for (let i = start; i < messages.length; i++) {

         let message = messages[i];

         if (AIConnection.isFromLLM(message, authors)) {
            
            builtQuery = builtQuery + EConfigStrings.kLLMName + ":" + message.text + "\n";
         }            
         else {
            let author = authors.get (message.authorId);
            if (!author)
               author = Persona.unknown();

            builtQuery = builtQuery + author.name + ":" + message.text + "\n";
         }      
      }

      return builtQuery; 
   }  
    

   private static findEarliestMessageIndexWithinTokenLimit (messages: Array<Message>, authors: Map<string, Persona>) : number {

      if (messages.length == 0)      
         throw new AssertionFailedError ("Message array is zero length.");
      if (messages.length == 1)
         return 0;

      let tokenAccumulator = 0;
      let iLowest = 0;
      let lowestIndex = Math.max (0, messages.length - EConfigNumbers.kMaxMessagesBack)

      for (let i = messages.length - 1; i >= lowestIndex && tokenAccumulator < kMaxTokens; i--) {

         tokenAccumulator += messages[i].tokens;

         if (tokenAccumulator < kMaxTokens)
            iLowest = i;
      }      
      return iLowest;
   }

   /**
    * is a message from the LLM - look at the author ID
    */
   static isFromLLM (message: Message, authors: Map<string, Persona>) : boolean {

      let author = Persona.safeAuthorLookup (authors, message.authorId);
      throwIfUndefined (author);

      return (author.icon === EIcon.kLLMPersona);
   }


   /**
    * is a message invoking the LLM - look at the author, and if the message contains the LLM name 
    */
   static isRequestForLLM (message: Message, authors: Map<string, Persona>) : boolean {

      let author = Persona.safeAuthorLookup (authors, message.authorId);
      throwIfUndefined (author);

      return (author.icon === EIcon.kPersonPersona) && 
      (message.text.includes (EConfigStrings.kLLMRequestSignature) || message.text.includes (EConfigStrings.kLLMRequestSignatureLowerCase));
   }

  /**
    * is a message an attempt to invoke the LLM - look at the author, and if the message contains miss-spellings of LLM name 
    */
   static mightBeMissTypedRequestForLLM (message: Message, authors: Map<string, Persona>) : boolean {

      if (this.isRequestForLLM (message, authors))
         return false;

      let author = Persona.safeAuthorLookup (authors, message.authorId);
      throwIfUndefined (author);

      return (author.icon === EIcon.kPersonPersona) && 
         (message.text.includes (EConfigStrings.kLLMNearRequestSignature) || message.text.includes (EConfigStrings.kLLMNearRequestSignatureLowerCase));
   }   
}
****************************************

****************************************
Boxer\core\ApiCalls.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd
import axios from "axios";

// Local
import { SessionKey } from "./Keys";
import { logApiError } from "./Logging";
import { EConfigStrings } from "./ConfigStrings";
import { EConfigNumbers } from "./ConfigStrings";
import { ISummariseRequest, ISummariseResponse} from "../../CommonTs/src/SummariseApi.Types"


export async function makeSummaryCall (session: SessionKey, text: string) : Promise<string | undefined> {

   let summary: string | undefined = undefined;
   let apiUrl: string = EConfigStrings.kSummariseUrl;
   
   apiUrl = apiUrl + '?session=' + session.toString();
   let request: ISummariseRequest = {
      text: text,
      lengthInWords: EConfigNumbers.kSummaryLengthWords
   };

   try {
      let response = await axios.post(apiUrl, {
        request: request,
        headers: {
           'Content-Type': 'application/json'
        }
      });

      summary = (response.data as ISummariseResponse).summary;

   } catch (e: any) {       

      logApiError ("Error calling Summarize API:", e);           
   }   
   
   return summary;
}
****************************************

****************************************
Boxer\core\Asserts.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd

import { AssertionFailedError} from './Errors';

export const throwIfUndefined: <T, >(x: T | undefined) => asserts x is T = x => {
   if (typeof x === "undefined") throw new AssertionFailedError ("Object is undefined.");
}

export const throwIfNull: <T, >(x: T | null) => asserts x is T = x => {
   if (x === null) throw new AssertionFailedError ("Object is null.");
}
****************************************

****************************************
Boxer\core\BoxerFluidConnection.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd

import { SharedMap } from "fluid-framework";import { Persona } from './Persona';

import { FluidClientProps } from "../../CommonTs/src/FluidTokenProvider";

import { Message } from './Message';
import { SharedEmbedding } from "./SharedEmbedding";
import { FluidConnection } from './FluidConnection';
import { CaucusOf } from './CaucusFramework';
import { throwIfUndefined } from './Asserts'; 
import { EConfigStrings } from "./ConfigStrings";
import { EIcon } from "./Icons";

const containerSchema = {
   initialObjects: {
      participantMap: SharedMap,
      messageMap: SharedMap,
      sharedEmbeddingMap: SharedMap,
      configuration: SharedMap
   }
};

// MessageBotFluidConnection - concrete derived class of FluidConnection
// connects the fluid connection to two local caucuses - one for participants, another for messages
export class BraidFluidConnection extends FluidConnection {

   _initialObjects: any;
   _localUser: Persona;
   _participantCaucus: CaucusOf<Persona> | undefined;
   _messageCaucus: CaucusOf<Message> | undefined;
   _sharedEmbeddingCaucus: CaucusOf<SharedEmbedding> | undefined;
   _interval: NodeJS.Timeout | undefined;

   constructor(localUser_: Persona) {

      super();

      this._initialObjects = undefined;
      this._participantCaucus = undefined;
      this._messageCaucus = undefined;   
      this._sharedEmbeddingCaucus = undefined;
      this._localUser = localUser_; 
      this._interval = undefined;
   }

   schema() : any {
      return containerSchema;
   }

   // This menas the list of Messages is ordered by send time ascending
   compareFn (a: Message, b: Message) : number {
      return a.sentAt.getTime() - b.sentAt.getTime();
   }

   setupLocalCaucuses (initialObjects_: any) : void {

      this._initialObjects = initialObjects_;

      // Create caucuses so they exist when observers are notified of connection
      this._participantCaucus = new CaucusOf<Persona>(initialObjects_.participantMap as SharedMap);
      this._messageCaucus = new CaucusOf<Message>(initialObjects_.messageMap as SharedMap, this.compareFn);  
      this._sharedEmbeddingCaucus = new CaucusOf<SharedEmbedding> (initialObjects_.sharedEmbeddingMap as SharedMap)
      
      this.setInitialValues(this._participantCaucus, this._messageCaucus);

      let self = this;

      this._interval = setInterval(() => {
         throwIfUndefined(self._participantCaucus);
         throwIfUndefined(self._messageCaucus);         
         checkAddAddSelfToAudience(self._participantCaucus, self._messageCaucus, self._localUser);
       }, 10000);
   }

   disconnectLocalCaucuses () : void {
      clearInterval (this._interval);
   }

   participantCaucus(): CaucusOf<Persona> {
      throwIfUndefined (this._participantCaucus);
      return this._participantCaucus;
   }

   messageCaucus(): CaucusOf<Message> {
      throwIfUndefined (this._messageCaucus);
      return this._messageCaucus;
   }    

   sharedEmbeddingCaucus(): CaucusOf<SharedEmbedding> {
      throwIfUndefined (this._sharedEmbeddingCaucus);
      return this._sharedEmbeddingCaucus;
   } 

   resetMessages () : void {

      throwIfUndefined (this._messageCaucus);      
      this._messageCaucus.removeAll ();    
      
      throwIfUndefined (this._participantCaucus);  
      this._participantCaucus.removeAll ();

      throwIfUndefined (this._sharedEmbeddingCaucus);  
      this._sharedEmbeddingCaucus.removeAll ();      

      this.setInitialValues (this._participantCaucus, 
                             this._messageCaucus);
   }

   private setInitialValues (participantCaucus: CaucusOf<Persona>,  
                             messageCaucus: CaucusOf<Message>): void {
    
      checkAddAddSelfToAudience (participantCaucus, messageCaucus, this._localUser);

      // Add the Bot persona if its not already there
      let isStored = participantCaucus.has(EConfigStrings.kLLMGuid);

      if (! isStored ) {

         let botPersona = new Persona (EConfigStrings.kLLMGuid, EConfigStrings.kLLMName, EConfigStrings.kLLMName, EIcon.kLLMPersona, undefined, new Date());
         participantCaucus.add (botPersona.id, botPersona);            
      }
   } 
}

function checkAddAddSelfToAudience (participantCaucus: CaucusOf<Persona>, 
   messageCaucus: CaucusOf<Message>,
   localUser: Persona): void {

   let isStored = participantCaucus.has(localUser.id);

   if (! isStored ) {      
      
      // We look at all participants looking for someine with the same email as us. 
      // If we find one, we do a 'glare' comparison to consistently pick a winner, and the loser of the
      // 'glare' comparison sets their details to those of the winner. 
      let currentParticipants = participantCaucus.currentAsArray();
      let found = false;

      for (let i = 0; i < currentParticipants.length && !found; i++) {        
         if ((localUser.email === currentParticipants[i].email ) && 
             (localUser.name === currentParticipants[i].name )) { 
            
            found = true;
            localUser.id = currentParticipants[i].id; // Need to push the new ID back into our local copy
         }
      }

      if (!found) {
         // Connect our own user ID to the participant caucus if we are not already in it (or our email is)
         participantCaucus.add (localUser.id, localUser);             
      }
   } 
   else {
      // Check the right name is stored - name changes when the user logs in 
      let stored = participantCaucus.get(localUser.id);         
      if ((stored.name !== localUser.name) || (stored.email !== localUser.email)) {
         participantCaucus.add (localUser.id, localUser);                 
      }        
   }
}
****************************************

****************************************
Boxer\core\CaucusFramework.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd
import { SharedMap, IValueChanged } from "fluid-framework";

import { debounce } from './Debounce';
import { MDynamicStreamable } from './StreamingFramework';
import { Interest, NotificationFor, Notifier } from './NotificationFramework';
import { throwIfUndefined } from "./Asserts";

export type compareFn<T> = (left: T, right: T) => number;

export class CaucusOf<AType extends MDynamicStreamable> extends Notifier {

   public static caucusMemberAddedNotificationId = "caucusMemberAdded";
   public static caucusMemberAddedInterest = new Interest(CaucusOf.caucusMemberAddedNotificationId);

   public static caucusMemberChangedNotificationId = "caucusMemberChanged";
   public static caucusMemberChangedInterest = new Interest(CaucusOf.caucusMemberChangedNotificationId);

   public static caucusMemberRemovedNotificationId = "caucusMemberRemoved";
   public static caucusMemberRemovedInterest = new Interest(CaucusOf.caucusMemberRemovedNotificationId);

   private _localMap: Map<string, AType>;
   private _localArray: Array<AType>;
   private _shared: SharedMap;
   private _comparator: compareFn<AType> | null;
   private _isCachedArrayDirty: boolean;

   constructor(shared_: SharedMap, comparator_: compareFn<AType> | null = null) {
      super();

      this._shared = shared_;
      this._localMap = new Map<string, AType>();
      this._localArray = new Array<AType>;
      this._comparator = comparator_;
      this._isCachedArrayDirty = true;

      (this._shared as any).on("valueChanged", (changed: IValueChanged, local: boolean, target: SharedMap) => {

         if (local) { 
            return;
         }

         this.doNotification(changed.previousValue !== undefined, target.has(changed.key), changed.key);

      });

      let self = this;
      
      // This functions as a kickstarter for initial load - changes made by other parties before we were connected are not classed as 'remote'
      // so we have to kick the UI
      function kickStart() {
         self.doNotification(false, false, undefined);
      }
      const kickStarted = debounce(() => {kickStart.bind(this)}, 250);
      kickStarted();
   }

   private doNotification(hadPrevious_: boolean, hasTarget_: boolean, key_: string | undefined): void {

      if (hadPrevious_) {

         if (hasTarget_) {

            this.notifyObservers(CaucusOf.caucusMemberChangedInterest, 
               new NotificationFor<string>(CaucusOf.caucusMemberChangedInterest, 
                  key_ as string));

            if (key_) {
               let element = this._shared.get(key_);      
               throwIfUndefined (element);
            
               let object = MDynamicStreamable.resurrect(element) as AType;                  
               this.updateCache (object); 
            }
            else {
               this._isCachedArrayDirty = true;   
            }
         }
         else {

            this.notifyObservers(CaucusOf.caucusMemberRemovedInterest, 
               new NotificationFor<string>(CaucusOf.caucusMemberRemovedInterest, 
                  key_ as string));

            this._isCachedArrayDirty = true;                   
         }
      } else {

         this.notifyObservers(CaucusOf.caucusMemberAddedInterest, 
            new NotificationFor<string>(CaucusOf.caucusMemberAddedInterest, 
               key_ as string));

         this._isCachedArrayDirty = true;                
      }
   }

   has(key_: string): boolean {

      return this._shared.has(key_);
   }

   add(key_: string, element_: AType): void {

      let stream = element_.flatten ();

      this._shared.set(key_, stream);   
      this._isCachedArrayDirty = true;         
   }

   remove (key_: string): boolean {

      let result = this._shared.delete(key_);
      if (result)
         this._isCachedArrayDirty = true;  
      return result;    
   }

   amend(key: string, element: AType) {

      let stream = element.flatten();

      this._shared.set(key, stream);

      this.updateCache (element);    
   }

   get (key_: string) : AType {

      let element = this._shared.get(key_);
      
      throwIfUndefined (element);

      let object = MDynamicStreamable.resurrect(element) as AType;

      return object;
   }

   removeAll (): void {
      
      this._shared.clear();
      this._localMap.clear();
      this._localArray = new Array<AType>();
      this._isCachedArrayDirty = true;      

      this.doNotification(false, false, undefined);   
   }

   current(): Map<string, AType> {

      this._localMap.clear();

      this._shared.forEach((value: any, key: string, map: Map<string, any>) => {

         let object = MDynamicStreamable.resurrect(value) as AType;

         this._localMap.set(key, object);
      }); 

      return this._localMap;
   }

   currentAsArray(): Array<AType> {

      if (this._isCachedArrayDirty) {

         // Truncate the array, then refill from the shared map.
         this._localArray.length = 0;

         this._shared.forEach((value: any, key: string, map: Map<string, any>) => {

            let object = MDynamicStreamable.resurrect(value) as AType;

            this._localArray.push(object);
         }); 

         // Sort it if a comparison function is present
         let comparator = this._comparator;

         this._localArray.sort((a, b) => {
            if (comparator)
               return comparator (a, b);
            else 
               return 0;
         });

         this._isCachedArrayDirty = false;
      }

      return this._localArray;
   }

   synchFrom ( map_: Map<string, AType>) : void {

      var deleteSet: Array<string> = new Array<string>();

      // accumulate a list of things to delete, dont delete as we go bcs it messes up iteration
      this._shared.forEach((value: any, key: string) => {
         if (!map_.get (key)) {
            deleteSet.push(key);
         }
      });

      // delete them once we have completed iteration
      deleteSet.forEach((id: string, index: number) => {
         this._shared.delete(id);
      });

      // Now update items in the shared map that are different in the input map 
      map_.forEach((value: any, key: string) => {

         let elementShared: string | undefined = this._shared.get(key);

         let elementNew: string = value.flatten();

         if (!elementShared) {
            this.add (key, value);
         }
         else
         if (elementShared !== elementNew) {
            this.amend(key, value);
         }
      });

      this._isCachedArrayDirty = true;
   }

   private updateCache (item: AType): Array<AType> {

      let found = false;

      if (this._comparator && this._localArray) {
         let i = this.binarySearch (this._localArray, item, this._comparator);
         if (i !== -1) {
            this._localArray[i] = item;
            found = true;
         }
      }

      if (!found) {
         this._isCachedArrayDirty = true;
      }

      return this.currentAsArray();
   }

   binarySearch(arr: Array<AType>, element: AType, compare_fn: compareFn<AType>) : number {

      let m = 0;
      let n = arr.length - 1;
      
      while (m <= n) {
          let k = (n + m) >> 1;
          let cmp = compare_fn(element, arr[k]);
          if (cmp > 0) {
             m = k + 1;
          } 
          else 
          if (cmp < 0) {
             n = k - 1;
          } 
          else {
             return k;
          }
      }
      return -1;
   }   
}
****************************************

****************************************
Boxer\core\ConfigStrings.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd

export enum EConfigStrings {

   kCoreLogCategory = "Core",
   kApiLogCategory = "API",
   kDbLogCategory = "DB",   

   kFontNameForTextWrapCalculation = "12pt Segoe UI",

   kHomeRelativeUrl= "/aibot.html",   

   kCheckSessionUrl = "https://braid-api.azurewebsites.net/api/CheckSession",       
   kSummariseUrl = "https://braid-api.azurewebsites.net/api/Summarize",     
   kCheckSessionLocalUrl = "http://localhost:7071/api/CheckSession",        
   kSummariseLocalUrl = "http://localhost:7071/api/Summarize",        
   
   kAzureTenantId = "b9576484-5c2e-4613-bfdf-039948cdd521",
   kAzureProductionFluidHost = "https://eu.fluidrelay.azure.com",
   kAzureLocalFluidHost = "http://localhost:7070",

   kLLMName = 'Boxer',
   kLLMNameLowerCase = 'boxer',   
   kLLMGuid = "313aafdb-a05c-4dc7-98d0-4db7f28f122f",
   kLLMRequestSignature = '@Boxer',
   kLLMRequestSignatureLowerCase = '@boxer',
   kLLMNearRequestSignature = 'Boxer',
   kLLMNearRequestSignatureLowerCase = 'boxer',   
   
   // These are applied serially - watch out for adding terms in early edits that then get replaced again later on
   // Spaces are significant
   kPromptLookFor1 = "an LLM",
   kPromptReplaceWith1 = "a Large Language Model (LLM)",
   kPromptLookFor2 = "LLMs",
   kPromptReplaceWith2 = "Large Language Models (LLMs)",   
   kPromptLookFor3 = " LLM ",
   kPromptReplaceWith3 = " Large Language Model (LLM) ",   
   kPromptLookFor4 = " LLm ",
   kPromptReplaceWith4 = " Large Language Model (LLM) ", 
   kPromptLookFor5 = " lLM ",
   kPromptReplaceWith5 = " Large Language Model (LLM) ",
   kPromptLookFor6 = " LlM ",
   kPromptReplaceWith6 = " Large Language Model (LLM) ",

   // Use these to detect questions where we are not relevant
   kResponseNotRelevantMarker = "That doesn't seem to be about AI",
   kResponseDontKnowMarker = "I don't know",   

   kErrorConnectingToKeyAPI = "Error connecting to the Boxer server.",
   kErrorConnectingToAiAPI = "Error connecting to AI server.",

   kSessionParamName = "session",
   kConversationParamName = "conversation",   
   kEmailParamName = "email",
   kNameParamName = "name",
   kSecretParamName = "secret",

   kCohort1ConversationKey = "eb948951-1b53-460e-a023-26e39895dec6",
   kCohort1Team1ConversationKey = "c43edc61-cedc-43f6-9224-db847d1ed0eb",   
   kCohort1Team2ConversationKey = "1eadf3a2-148d-4afd-b69f-c9f72e824486",
   kCohort1Team3ConversationKey = "121ffdef-ced6-45dd-84be-f16171b8b406",   
   kDemoConversationKey = "c70f4a2d-8a56-42d5-b9ce-88bdc50029c8",

   kAdminUserNames = "Jon Verrier" // Comma seperated list of names, at run time we just check if the user name is included in this list. 
};

export enum EConfigNumbers {
   kInitialHelpfulPromptDelayMsecs = 1000,
   kBoxerChattinessMessageCount = 20,
   kMaximumLinkTextlength = 40,
   kMaximumLinkTextlengthMobile = 30,   
   kHelpfulPromptMinimumGapMins = 10, // At least 10 minutes between AI suggestions
   kMessagePrompt2VBorder = 24,       // How much to allow for top + bottom inset
   kMessagePrompt2HBorder = 24,       // How much to allow for left & right inset
   kMessagePromptLineSpace = 8,       // How much to allow between lines
   kMessagePromptMaxCharacters = 2048,
   kMaxDownloadWaitSeconds = 30,
   kMaxMessagesBack = 20,          // Go up to 20 messages back for context to send to the LLM
   kMaxChatLevel = 4, // 0-4 to set how chatty the AI is
   kMinMessagesforRecap = 5 ,// 5 mesages and we offer a recap at the start,
   kSummaryLengthWords = 50
}

// This is used for local running only, as in browser we cannot access environment variables
// NEVER PUT PRODUCTION SECRETS IN HERE
let KStubEnvironmentVariables = {
   SessionKey : "49b65194-26e1-4041-ab11-4078229f478a",
   ConversationKey : "abcde"
};

export {KStubEnvironmentVariables};
****************************************

****************************************
Boxer\core\Debounce.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd

import { throwIfNull } from "./Asserts";

export function debounce(fn_ : Function, ms_: number) : Function {

   return () => {

      var timer: NodeJS.Timeout | null = null;
      
      const nested = () => {
         throwIfNull(timer);
         clearTimeout(timer);         
         timer = null;
         fn_();
      };

      timer = setTimeout(nested, ms_);
   };
}
****************************************

****************************************
Boxer\core\Embedding.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd

const youTubeHostname = "www.youtube.com";
const gitHubHostname = "github.com";

export function lookLikeSameSource (url1: string, url2: string ) : boolean {

   const URLLeft = new URL (url1);
   const URLRight = new URL (url2);

   // Youtube format URL
   // https://www.youtube.com/watch?v=l5mG4z343qg&t=00h00m00s
   // To compare two YouTube URLs we look at the ?v= parameter for the video ID
   if (URLLeft.hostname === (youTubeHostname) && URLRight.hostname === (youTubeHostname)) {
      const videoLeft = URLLeft.searchParams.get('v');
      const videoRight = URLRight.searchParams.get('v');  
      
      if (videoLeft === videoRight)
         return true;
      else
         return false;

   }

   // GitHub format URL
   // https://github.com/organisation/repo/...
   // To compare two GitHub URLs we look at the first two path paramters   
   const pathLeft = URLLeft.pathname.split('/').slice (1);
   const pathRight = URLRight.pathname.split('/').slice(1);

   if (URLLeft.hostname === (gitHubHostname) && URLRight.hostname === (gitHubHostname) 
      && (pathLeft.length >= 2) && (pathRight.length >= 2)) {

      if (pathLeft[0] === pathRight[0] && pathLeft[1] === pathRight[1])
         return true;
      else
         return false;
   }

   // To compare two Web URLs we look at the first path paramters  
   if ((URLLeft.hostname === URLRight.hostname) && 
       (pathLeft.length >= 1) && (pathRight.length >= 1)) {

         if (pathLeft[0] === pathRight[0])
            return true;
         else
            return false;
   }

   return false;
}
****************************************

****************************************
Boxer\core\EmbeddingFormats.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd

export interface FullEmbedding {
   speaker: string;
   title: string;
   sourceId: string;
   hitTrackingId: string;
   description: string;
   start: string;
   seconds: number;
   text: string;
   summary: string;
   ada_v2: Array<number>;
};

export interface LiteEmbedding {
   url: string;
   summary: string;
   embedding: Array<number>;
};

export type MakeEmbeddingUrlFnLite = (a: LiteEmbedding) => string;
export type MakeEmbeddingUrlFnFull = (a: FullEmbedding) => string;

function makeYouTubeUrl (sourceId: string, startHms: string, seconds: number) : string {

   let a = startHms.split(':'); // split it at the colons

   let h =  a[0], m = a[1], s = a[2];

   return 'https://www.youtube.com/watch?v=' + sourceId + '&t=' + h + 'h' + m + 'm' + s +'s';
} 

function makeGithubUrl (sourceId: string) : string {

   return 'https://github.com/' + sourceId;
} 

function makeWebUrl (sourceId: string) : string {

   return 'https://' + sourceId;
} 

export function makeYouTubeUrlFromFullEmbedding (embedding: FullEmbedding) : string {
   return makeYouTubeUrl (embedding.sourceId, embedding.start, embedding.seconds);        
}

export function  makeGithubUrlFromFullEmbedding (embedding: FullEmbedding) : string {
   return makeGithubUrl (embedding.sourceId);        
}

export function makeHtmlUrlfromFullEmbedding (embedding: FullEmbedding) : string {
   return makeWebUrl (embedding.sourceId);        
}
****************************************

****************************************
Boxer\core\Errors.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd

import { logApiError, logCoreError } from "./Logging";

export class InvalidParameterError extends Error {
   constructor(message?: string) {
      super(message);
      // see: typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html
      Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
      this.name = InvalidParameterError.name; // stack traces display correctly now

      logCoreError ("InvalidParameterError:" + (message ? message : ""), this.cause ? this.cause: "");
   }
}

export class InvalidOperationError extends Error {
   constructor(message?: string) {
      super(message);
      // see: typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html
      Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
      this.name = InvalidOperationError.name; // stack traces display correctly now

      logCoreError ("InvalidOperationError:" + (message ? message : ""), this.cause ? this.cause: "");      
   }
}

export class InvalidStateError extends Error {
   constructor(message?: string) {
      super(message);
      // see: typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html
      Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
      this.name = InvalidStateError.name; // stack traces display correctly now

      logCoreError ("InvalidStateError:" + (message ? message : ""), this.cause ? this.cause: "");      
   }
}

export class ConnectionError extends Error {
   constructor(message?: string) {
      super(message);
      // see: typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html
      Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
      this.name = ConnectionError.name; // stack traces display correctly now

      logApiError ("ConnectionError:" + (message ? message : ""), this.cause ? this.cause: "");      
   }
}

export class EnvironmentError extends Error {
   constructor(message?: string) {
      super(message);
      // see: typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html
      Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
      this.name = EnvironmentError.name; // stack traces display correctly now

      logCoreError ("EnvironmentError:" + (message ? message : ""), this.cause ? this.cause: "");       
   }
}

export class AssertionFailedError extends Error {
   constructor(message?: string) {
      super(message);
      // see: typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html
      Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
      this.name = AssertionFailedError.name; // stack traces display correctly now

      logCoreError ("AssertionFailedError:" + (message ? message : ""), this.cause ? this.cause: "");       
   }
}

/*
 
export class InvalidUnitError extends Error {
   constructor(message?: string) {
      super(message);
      // see: typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html
      Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
      this.name = InvalidUnitError.name; // stack traces display correctly now
   }
}

export class InvalidFormatError extends Error {
   constructor(message?: string) {
      super(message);
      // see: typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html
      Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
      this.name = InvalidFormatError.name; // stack traces display correctly now
   }
}

export class InvalidServerResponseError extends Error {
   constructor(message?: string) {
      super(message);
      // see: typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html
      Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
      this.name = InvalidServerResponseError.name; // stack traces display correctly now
   }
}

*/
****************************************

****************************************
Boxer\core\FluidConnection.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd
import { IFluidContainer, ConnectionState } from "fluid-framework";
import { AzureClient } from "@fluidframework/azure-client";

import { FluidClientProps } from "../../CommonTs/src/FluidTokenProvider";
import { IFluidTokenRequest } from "../../CommonTs/src/Fluid";
import { throwIfUndefined } from "./Asserts";
import { logApiError } from "./Logging";
import { ConnectionError, InvalidOperationError, InvalidStateError} from './Errors';
import { Interest } from './NotificationFramework';
import { SessionKey, ConversationKey } from "./Keys";
import { EConfigStrings } from "./ConfigStrings";
import { getDefaultFluidEnvironment } from "../../CommonTs/src/IEnvironmentFactory";
import { EEnvironment } from "../../CommonTs/src/IEnvironment";

let documentUuid = "b03724b3-4be0-4491-b0fa-43b01ab80d50";

export abstract class FluidConnection {

   public static connectedNotificationId = "connected";
   public static connectedInterest = new Interest(FluidConnection.connectedNotificationId);

   _client: AzureClient | undefined;
   _container: IFluidContainer | undefined;

   constructor() {

      this._client = undefined;
      this._container = undefined;
   }

   async createNew(sessionKey_: SessionKey, forceProduction: boolean): Promise<ConversationKey> {

      try {
         this.setupBeforeConnection (sessionKey_, forceProduction);

         throwIfUndefined (this._client);
         const { container, services } = await this._client.createContainer(this.schema());
         this._container = container;

         let self = this;

         return new Promise<ConversationKey>((resolve, reject) => {
            // Attach container to service and return assigned ID
            const containerIdPromise = container.attach();

            containerIdPromise.then((containerId) => {
               if (this._container) {
                  self.setupAfterConnection(this._container);
               }
               else {
                  logApiError ("FluidConnection is in inconsistent internal state.", null);
                  throw new InvalidStateError("FluidConnection is in inconsistent internal state.");
               }

               resolve (new ConversationKey (containerId));
            }).catch((e: any) => {
               logApiError ("Error connecting to conversation: ", e);               
               reject ();
            });
         });
      }
      catch (e: any) {
         throw new ConnectionError("Error connecting new container to remote data service: " + e ? e.message : "(no details found)");
      }
   }

   async attachToExisting(sessionKey_: SessionKey, conversationKey_: ConversationKey, forceProduction: boolean): Promise<ConversationKey> {

      try {
         this.setupBeforeConnection (sessionKey_, forceProduction);

         throwIfUndefined (this._client);
         const { container, services } = await this._client.getContainer(conversationKey_.toString(), this.schema());
         this._container = container;

         this.setupAfterConnection(this._container);

         return conversationKey_;
      }
      catch (e: any) {
         throw new ConnectionError("Error attaching existing container to remote data service: " + e ? e.message : "(no details found)")
      }
   }

   canDisconnect(): boolean {

      if (!this._container)
         return false;

      var state = this._container.connectionState;
      if (state !== ConnectionState.Connected)
         return false;

      return true;
   }

   isConnected (): boolean {

      return this.canDisconnect();
   }

   async disconnect(): Promise<boolean> {

      if (this.canDisconnect()) {
         if (this._container) {
            await this._container.disconnect();
            this.disconnectLocalCaucuses();
         }

         return true;
      }
      else {
         throw new InvalidOperationError("The remote data service is not connected.")
      }
   }

   // local function to cut down duplication between createNew() and AttachToExisting())
   private setupBeforeConnection(sessionKey_: SessionKey, forceProduction: boolean): void {

      let local = getDefaultFluidEnvironment().name === EEnvironment.kLocal;

      let request: IFluidTokenRequest = {
         local: local,         
         userId: EConfigStrings.kLLMGuid,
         userName: EConfigStrings.kLLMName,
         documentId: documentUuid         
      }

      var clientProps: FluidClientProps = new FluidClientProps(sessionKey_.toString(), request, forceProduction);
      this._client = new AzureClient(clientProps);
   }

   // local function to cut down duplication between createNew() and AttachToExisting())
   private setupAfterConnection(container: IFluidContainer): void {

      // Create caucuses so they exist when observers are notified of connection
      this.setupLocalCaucuses (container.initialObjects);
   }

   abstract schema() : any;
   abstract setupLocalCaucuses(initialObjects: any) : void;
   abstract disconnectLocalCaucuses () : void;
}
****************************************

****************************************
Boxer\core\IActivityRepository.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd

// Internal import
import { IStoredActivity } from './ActivityRecord';

export interface IActivityRepository {

   save (record : IStoredActivity) : Promise<boolean>;
   loadRecentUrlActivity (count : number) : Promise<Array<IStoredActivity>>;
   loadRecentMessages (count : number) : Promise<Array<IStoredActivity>>;  
   removeMessageRecord (messageId: string) : Promise<boolean>;
}
****************************************

****************************************
Boxer\core\IActivityRepositoryFactory.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd

// Internal imports
import { SessionKey } from "./Keys";
import { IActivityRepository } from "./IActivityRepository";
import { ActivityRepositoryCosmos } from "./ActivityRepository";

export function getRecordRepository (sessionKey_: SessionKey) : IActivityRepository {
   return new ActivityRepositoryCosmos(sessionKey_);   
}
****************************************

****************************************
Boxer\core\IAdminRepository.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd

import { Persona} from "./Persona";
import { EConfigStrings } from "./ConfigStrings";

export interface IAdminRepository {

   isAdmin (persona : Persona) : Promise<boolean>; 
}

export function getDetaultAdminRepository(): IAdminRepository {
   return new DefaultAdminRepository();
}

// THis is a local implementation of IAdminRepository that just searches strigs for a well know name
// If it is present, user can be an admin. 
export class DefaultAdminRepository implements IAdminRepository {

   isAdmin (persona : Persona) : Promise<boolean> {
      
      let done = new Promise<boolean>(function(resolve, reject) {

         let isAdmin = (EConfigStrings.kAdminUserNames.includes (persona.name));

         resolve (isAdmin);
      });

      return done;
   }
}
****************************************

****************************************
Boxer\core\Icons.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd

export enum EIcon {

   kPersonPersona = "kPersonPersona", 
   kLLMPersona = "kLLMPersona", 
   kBotPersona = "kBotPersona",   // For backwards compatibility 
   kUnknownPersona = "kUnknownPersona",
   kFromBcd = "kFromBcd"
   
};
****************************************

****************************************
Boxer\core\IKeyGenerator.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd

/// <summary>
/// IKeyGenerator - interface for a class to generate unique keys
/// </summary>
export interface IKeyGenerator {

   generateKey (): string;
   generateSecret(): string;
   couldBeAKey(key: string): boolean;
   saveSecret(secret: string): void;
   matchesSavedSecret (secret: string): boolean;
   haveSavedSecret  () : boolean;
   savedSecret  () : string;
}
****************************************

****************************************
Boxer\core\IKeyGeneratorFactory.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd

import { IKeyGenerator } from './IKeyGenerator';
import { UuidKeyGenerator } from './UuidKeyGenerator';

/// <summary>
/// getDefaultKeyGenerator - returns the key generator
/// </summary>

export function getDefaultKeyGenerator(): IKeyGenerator {
   return new UuidKeyGenerator();
}
****************************************

****************************************
Boxer\core\JoinDetails.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd
import { EConfigStrings } from "./ConfigStrings";
import { SessionKey, ConversationKey } from "./Keys";

import { getDefaultFluidEnvironment } from "../../CommonTs/src/IEnvironmentFactory";
import { EEnvironment } from "../../CommonTs/src/IEnvironment";

var qs = require('qs');

function validateEmail(email_: string) : boolean {
   if (!email_)
      return false;

   const res = /^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/;
   return res.test(String(email_).toLowerCase());
 }

export class JoinDetails {

   private _email: string;
   private _name: string;
   private _session: SessionKey;
   private _conversation: ConversationKey;  
   private _secret: string; 

   /**
    * Create a JoinDetails object. A join details is in the format 'email=xxx@yyy.com&session=guid&conversation=guid' . The email is used to uniquely identify the joiner, the session 
    * specifies a key to use for basic security, conversation is a Fluid UUID
    * It can be valid with a string that looks like an email address, and a session and conversation keys that look like UUIDs
    */
   constructor(trialInput_: string) {
   
      this._session = new SessionKey("");
      this._conversation = new ConversationKey("");      
      this._email = "";
      this._name = "";
      this._secret = "";

      let parsed = qs.parse (trialInput_); 

      this._email = parsed.email ? parsed.email : "";
      this._name = parsed.name ? parsed.name: "";
      this._session = parsed.session ? new SessionKey (parsed.session) : new SessionKey ("");
      this._conversation = parsed.conversation ? new ConversationKey (parsed.conversation) : new ConversationKey ("");  
      this._secret = parsed.secret ? parsed.secret : "";        
   }   
   
   /**
   * set of 'getters' for private variables
   */
   get email(): string  {
      return this._email;
   }
   get name(): string  {
      return this._name;
   }   
   get session(): SessionKey  {
      return this._session;
   }
   get conversation(): ConversationKey  {
      return this._conversation;
   }   
   get secret(): string  {
      return this._secret;
   }     
   toString(): string  {
      return JoinDetails.toString (this._email, this._name, this._session, this._conversation, this._secret);
   }

   canAttemptJoin(): boolean {
      let environment = getDefaultFluidEnvironment();

      // If we are running locally, allow empty conversation key -> this creates a new conversation
      if ((environment.name === EEnvironment.kLocal) && this._conversation.toString().length === 0)
         return this._session.looksValidSessionKey() && validateEmail (this._email);

      return (this._session.looksValidSessionKey() 
         && this._conversation.looksValidConversationKey() 
         && validateEmail (this._email));          
   } 

   static toString (email_: string, name_: string, session_: SessionKey, conversation_: ConversationKey, secret_: string) : string {
      return '&' + EConfigStrings.kEmailParamName + '=' +  email_ 
         + '&' + EConfigStrings.kNameParamName + '=' +  name_ 
         + '&' + EConfigStrings.kSessionParamName + '=' + session_.toString() 
         + '&' + EConfigStrings.kConversationParamName + '=' + conversation_.toString()
         + '&' + EConfigStrings.kSecretParamName + '=' + secret_.toString();
   }

   static makeFromParts (email_: string, name_: string, session_: SessionKey, conversation_: ConversationKey, secret_: string) {

      return new JoinDetails (JoinDetails.toString (email_, name_, session_, conversation_, secret_));
   }
  
}
****************************************

****************************************
Boxer\core\JoinPageValidator.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd
import { SessionKey, ConversationKey } from "./Keys";
import { JoinDetails } from "./JoinDetails";
import { getDefaultKeyGenerator } from "./IKeyGeneratorFactory";

export class JoinPageValidator {

   /**
    * Create an empty JoinPageValidator object 
    */
   constructor() {
   }   

   // Looks at the name and keys provided, and returns true if the data looks ready to join a conversation, else false.
   canAttemptJoin  (email_: string, name_: string, session_: SessionKey, conversation_: ConversationKey) : boolean {

      let details = JoinDetails.makeFromParts (email_, name_, session_, conversation_, "");    

      return details.canAttemptJoin();
   }

   // Looks at the secret returns true if the secret matches the one stored, else false.
   matchesSavedSecret  (secret_: string) : boolean {

      let keyGenerator = getDefaultKeyGenerator();

      return keyGenerator.matchesSavedSecret (secret_);
   }   

   haveSavedSecret  () : boolean {

      let keyGenerator = getDefaultKeyGenerator();

      return keyGenerator.haveSavedSecret ();
   }     

   savedSecret  () : string {

      let keyGenerator = getDefaultKeyGenerator();

      return keyGenerator.savedSecret ();
   }     
}
****************************************

****************************************
Boxer\core\KeyRetriever.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd

import axios from "axios";

// Local
import { logApiError } from "./Logging";
import { EConfigStrings } from './ConfigStrings';
import { ConnectionError } from "./Errors";
import { SessionKey } from "./Keys";

export class KeyRetriever {

   private activeCallCount: number;

   /**
    * Create an empty KeyRetriever object 
    */
   constructor() {
      this.activeCallCount = 0;
   }   

   // Makes an Axios call to request the key
   // If running locally, looks for an environment variable
   async requestKey  (apiUrl_: string, paramName_: string, sessionKey_: SessionKey) : Promise<string> {
     
      /*  Now we use a localhost server bcs it can access environment variables
      // If we are running locally directly in the browser (not via a web server on localhost:)
      // use the stub values - no Production secrets are really stored locally 
      let environment = Environment.environment();
      if (environment === EEnvironment.kLocal) {
         type KStubEnvironmentVariableKey = keyof typeof KStubEnvironmentVariables;
         let memberKeyAsStr: KStubEnvironmentVariableKey = paramName_ as any;
         let checked = KStubEnvironmentVariables[memberKeyAsStr];
         throwIfUndefined(checked);
         return checked;
      }
      */

      this.activeCallCount++;

      var response;

      try {
         response = await axios.get(apiUrl_, {
            params: {
               [paramName_]: sessionKey_.toString()
            },
            withCredentials: false
         });
         this.activeCallCount--; 

      } catch (e: any) {
         
         this.activeCallCount--;
   
         logApiError (EConfigStrings.kErrorConnectingToKeyAPI + ":" + apiUrl_, e?.response?.data);           
      }

      if (!response || !response.data)
         throw new ConnectionError(EConfigStrings.kErrorConnectingToKeyAPI + ":" + apiUrl_);      
      
      return response.data as string;
   }    

   isBusy () {
      return this.activeCallCount !== 0;
   }
}
****************************************

****************************************
Boxer\core\Keys.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd
import { IKeyGenerator } from './IKeyGenerator';
import { getDefaultKeyGenerator } from './IKeyGeneratorFactory';

export class SessionKey {

   private _sessionId: string;

   /**
    * Create a SessionKey object. A join key is a GUID - this class just makes a type wrapper round a string. 
    */
   constructor(trialInput_: string) {

      this._sessionId = trialInput_;      
   }   
   
   /**
   * Does this look like a valid UUID
   */
   looksValidSessionKey(): boolean {
      let keyGenerator : IKeyGenerator = getDefaultKeyGenerator();

      return keyGenerator.couldBeAKey (this._sessionId);
   }

   /**
    * Return a string representation
    */
   toString(): string {
      return this._sessionId;
   }   
}

export class ConversationKey {

   private _conversationId: string;

   /**
    * Create a ConversationKey object. A ConversationKey is a GUID - this class just makes a type wrapper round a string. 
    */
   constructor(trialInput_: string) {

      this._conversationId = trialInput_;      
   }   
   
   /**
   * Does this look like a valid UUID
   */
   looksValidConversationKey(): boolean {

      let keyGenerator : IKeyGenerator = getDefaultKeyGenerator();

      return keyGenerator.couldBeAKey (this._conversationId);
   }

   /**
    * Return a string representation
    */
   toString(): string {
      return this._conversationId;
   }    
   
}
****************************************

****************************************
Boxer\core\Like.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd
 

/**
 * Embeddeding object
 * @param url - link to source on the web.
 * @param summary - text summary (50 words)
 * @param ada_v2: embedding value array. Note this is copied by value to avoid duplicating large arrays.
 * @param timeStamp - when the item is dated from - can be undefined if not known
 * @param relevance - cosine relevance score to a query - can be undefined if the source reference has not been compared yet
 */
export class Like  {
   private _name: string;
   private _when: Date;

   /**
    * Create an empty Like object
    */
   public constructor();

   /**
    * Create a Like object
    * @param name_ - link to source on the web.
    * @param when_ - text summary (50 words)
    */
   public constructor(name_: string, when_: Date);

   /**
    * Create a Like object
    * @param source - object to copy from - should work for JSON format and for real constructed objects
    */
   public constructor(source: Like);

   public constructor(...arr: any[])
   {

      if (arr.length === 0) {
         this._name = ""; 
         this._when = new Date();        
         return;
      }

      var localName: string;
      var localwhen: Date;

      if (arr.length === 1) {
         localName = arr[0]._name;
         localwhen = arr[0]._when;        
      }
      else { 
         localName = arr[0];
         localwhen = arr[1];           
      }

      this._name = localName;
      this._when = localwhen;
   }

   streamOut(): string {

      return JSON.stringify({ name: this._name, when: this._when});
   }

   streamIn(stream: string): void {

      const obj = JSON.parse(stream);

      this.assign(new Like (obj.name, obj.when));   
   }

   /**
   * set of 'getters' for private variables
   */
   get name(): string {
      return this._name;
   }
   get when(): Date {
      return this._when;
   }

   /**
   * set of 'setters' for private variables
   */
   set name(name_: string) {

      this._name = name_;
   }

   set when(when_: Date) {

      this._when = when_;
   }


   /**
    * test for equality - checks all fields are the same. 
    * Uses field values, not identity bcs if objects are streamed to/from JSON, field identities will be different. 
    * @param rhs - the object to compare this one to.  
    */
   equals(rhs: Like): boolean {

      return ((this._name === rhs._name) &&   
         (this._when.getTime() === rhs._when.getTime()));
   }

   /**
    * assignment operator 
    * @param rhs - the object to assign this one from.  
    */
   assign(rhs: Like): Like {

      this._name = rhs._name;
      this._when = new Date (rhs._when);

      return this;
   }
}
****************************************

****************************************
Boxer\core\Logging.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd

import { log, LogLevel, tag } from 'missionlog';
import { EConfigStrings } from './ConfigStrings';


 // Logging handler
 const logger = {
   [LogLevel.ERROR]: (tag, msg, params) => console.error(msg, ...params),
   [LogLevel.WARN]: (tag, msg, params) => console.warn(msg, ...params),
   [LogLevel.INFO]: (tag, msg, params) => console.log(msg, ...params),
   [LogLevel.TRACE]: (tag, msg, params) => console.log(msg, ...params),
   [LogLevel.DEBUG]: (tag, msg, params) => console.log(msg, ...params),
} as Record<LogLevel, (tag: string, msg: unknown, params: unknown[]) => void>;

// Initialise logging
log.init({ application: 'DEBUG', notification: 'DEBUG' }, (level, tag, msg, params) => {
   logger[level as keyof typeof logger](tag, msg, params);
});


export function logCoreError (description: string, details: any) : void {

   logger.ERROR (EConfigStrings.kCoreLogCategory, description, [details]);
}

export function logDbError (description: string, details: any) : void {

   logger.ERROR (EConfigStrings.kDbLogCategory, description, [details]);
}

export function logApiError (description: string, details: any) : void {

   logger.ERROR (EConfigStrings.kApiLogCategory, description, [details]);
}

export function logApiInfo (description: string, details: any) : void {

   logger.INFO (EConfigStrings.kApiLogCategory, description, [details]);
}
****************************************

****************************************
Boxer\core\Media.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd

//==============================//
// Media class
//==============================//
export class Media {  

   listeners: Array<Function>;
   isMobileFormFactorQuery: MediaQueryList;

   /**
    * Initialises repository 
    */
   constructor() {
      this.listeners = new Array();
      this.isMobileFormFactorQuery = window.matchMedia("(max-width: 1023px)");
      this.isMobileFormFactorQuery.addListener(this.onMobileFormFactorChange.bind(this));
   }

   /**
    *
    * isSmallFormFactor - provides a one-time response
    * if the display is at or below mobile form factor boundary.
    */
   isSmallFormFactor(): boolean {

      if (this.isMobileFormFactorQuery.matches) { // If media query matches
         return true;
      } else {
         return false;
      }
   }

  /**
    *
    * onSmallFormFactorChange - local hook on mobile form factor changes. 
    */
   onMobileFormFactorChange(): void {
      var matches: boolean = false;

      if (this.isMobileFormFactorQuery.matches) { // If media query matches
         matches = true;
      } 
      for (var i = 0; i < this.listeners.length; i++) {
         this.listeners[i](matches);
      }
   }

  /**
    *
    * addMobileFormFactorChangeListener - hook on external listeners to be fired if the display transitions across mobile form factor boundary.
    */
   addMobileFormFactorChangeListener(fn: Function) {
      this.listeners.push(fn);
   }
}
****************************************

****************************************
Boxer\core\Message.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd

import GPT4Tokenizer from 'gpt4-tokenizer';

import { InvalidParameterError } from './Errors';
import { throwIfUndefined } from './Asserts';
import { IKeyGenerator } from './IKeyGenerator';
import { getDefaultKeyGenerator } from './IKeyGeneratorFactory';
import { MDynamicStreamable, DynamicStreamableFactory } from "./StreamingFramework";
import { areSameDate, areSameDeepArray } from './Utilities';
import { IRelevantEnrichedChunk } from '../../CommonTs/src/EnrichedChunk';

const keyGenerator: IKeyGenerator = getDefaultKeyGenerator();
const tokenizer = new GPT4Tokenizer({ type: 'gpt3' });

const className = "Message";

export type MessageStreamingHandler = (message: Message, more: boolean) => void;

// Message - text, plus IDs for the message itself, if its a reply, the person who sent it, and a date-time stamp
export class Message extends MDynamicStreamable {
   private _id: string;
   private _authorId: string;
   private _responseToId: string | undefined;
   private _text: string;
   private _sentAt: Date;
   private _chunks: Array<IRelevantEnrichedChunk>;
   private _tokens: number;
   private _isTokenCacheDirty: boolean;
   private _isStreaming: boolean;
   private _streamHandler: MessageStreamingHandler | undefined;

   /**
    * Create an empty Message object - required for particiation in serialisation framework
    */
   public constructor();

   /**
    * Create a Message object
    * @param id_ - id to use to generate uniqueness 
    * @param authorId_ - Id of the person who sent it
    * @param responseToId_ - id of the message to which it is a response, can be undefined
    * @param text_ - the message body
    * @param sentAt - timestamp for last interaction seen by the framework
    */
   public constructor(id_: string | undefined, authorId_: string | undefined, responseToId_: string | undefined, text_: string, sentAt: Date);

   /**
    * Create a Message object
    * @param id_ - id to use to generate uniqueness 
    * @param authorId_ - Id of the person who sent it
    * @param responseToId_ - id of the message to which it is a response, can be undefined
    * @param text_ - the message body
    * @param sentAt - timestamp for last interaction seen by the framework
    * @param chunks_ - relevent knowledge sources that help understand / provide context for the message. 
    */
   public constructor(id_: string | undefined, authorId_: string | undefined, responseToId_: string | undefined, text_: string, sentAt: Date,
      chunks_: Array<IRelevantEnrichedChunk>);

   /**
    * Create a Message object
    * @param message - object to copy from - should work for JSON format and for real constructed objects
    */
   public constructor(message: Message);

   public constructor(...arr: any[]) {

      super();

      if (arr.length === 0) {
         this._id = keyGenerator.generateKey(); // An new Message has a key
         this._authorId = "";                       // But not an author
         this._responseToId = undefined;
         this._text = "";
         this._sentAt = new Date();
         this._chunks = new Array<IRelevantEnrichedChunk>();
         this._tokens = 0;
         this._isTokenCacheDirty = true;
         this._isStreaming = false;
         this._streamHandler = undefined;
         return;
      }

      var localId: string;
      var localAuthorId: string;
      var localResponseToId: string;
      var localText: string;
      var localSentAt: Date;
      var localChunks: Array<IRelevantEnrichedChunk>;

      if (arr.length === 1) {
         localId = arr[0]._id
         localAuthorId = arr[0]._authorId;
         localResponseToId = arr[0]._responseToId;
         localText = arr[0]._text;
         localSentAt = new Date(arr[0]._sentAt);
         localChunks = arr[0]._chunks;
      }
      else if (arr.length === 5) {
         localId = arr[0];
         localAuthorId = arr[1];
         localResponseToId = arr[2];
         localText = arr[3];
         localSentAt = new Date(arr[4]);
         localChunks = new Array<IRelevantEnrichedChunk>();
      }
      else {
         localId = arr[0];
         localAuthorId = arr[1];
         localResponseToId = arr[2];
         localText = arr[3];
         localSentAt = new Date(arr[4]);
         localChunks = arr[5];
      }

      if (!Message.isValidId(localId)) {
         throw new InvalidParameterError("Id:" + localId + '.');
      }

      this._id = localId;
      this._authorId = localAuthorId;
      this._responseToId = localResponseToId;
      this._text = localText;
      this._sentAt = localSentAt;
      this._chunks = localChunks;
      this._tokens = 0;
      this._isTokenCacheDirty = true;
      this._isStreaming = false;
      this._streamHandler = undefined;
   }

   /**
    * Dynamic creation for Streaming framework
    */
   dynamicClassName(): string {

      return className;
   }

   static createDynamicInstance(): MDynamicStreamable {
      return new Message();
   }

   static _dynamicStreamableFactory: DynamicStreamableFactory = new DynamicStreamableFactory(className, Message.createDynamicInstance);
   streamOut(): string {

      return JSON.stringify({
         id: this._id, authorId: this._authorId,
         responseToId: this._responseToId,
         text: this._text, sentAt: this._sentAt,
         chunks: this._chunks,
         tokens: this._tokens,
         isStreaming: this._isStreaming
      });
   }

   streamIn(stream: string): void {

      const obj = JSON.parse(stream);

      let chunks = new Array<IRelevantEnrichedChunk>();
      let objChunks = obj.chunks;

      if (objChunks) {
         for (let i = 0; i < objChunks.length; i++) {
            let newSource = objChunks[i];
            chunks.push(newSource);
         }
      }
      this.assign(new Message(obj.id, obj.authorId, obj.responseToId, obj.text, new Date(obj.sentAt), chunks));

      this._isTokenCacheDirty = true;

      if (obj.tokens && obj.tokens !== 0) {
         this._tokens = obj.tokens;
         this._isTokenCacheDirty = false;
      }

      // This is for backwards compatibility - the 'streaming' concept was introduced after
      // the set of Fluid containers were set up, so it is not stored on many messages. 
      // So we have to check if the attribute exists
      if (typeof obj.isStreaming === "undefined")
         this._isStreaming = false;
      else
         this._isStreaming = obj.isStreaming;
   }

   /**
   * set of 'getters' for private variables
   */
   get id(): string {
      return this._id;
   }
   get authorId(): string {
      return this._authorId;
   }
   get responseToId(): string | undefined {
      return this._responseToId;
   }
   get text(): string {
      return this._text;
   }
   get sentAt(): Date {
      return this._sentAt;
   }
   get chunks(): Array<IRelevantEnrichedChunk> {
      return this._chunks;
   }
   get isDirty(): boolean {
      return this._isTokenCacheDirty;
   }
   get tokens(): number {
      if (this._isTokenCacheDirty) {
         let estimatedTokens = tokenizer.estimateTokenCount(this._text);

         if (this._chunks) {
            for (let i = 0; i < this._chunks.length; i++) {
               estimatedTokens += tokenizer.estimateTokenCount(this._chunks[i].chunk.summary);
            }
         }
         this._tokens = estimatedTokens;
         this._isTokenCacheDirty = false;
      }
      return this._tokens;
   }
   get checkedResponseToId(): string {
      throwIfUndefined(this._responseToId);
      return this._responseToId;
   }
   get isStreaming(): boolean {
      return this._isStreaming;
   }

   /**
   * set of 'setters' for private variables
   */
   set id(id_: string) {
      if (!Message.isValidId(id_)) {
         throw new InvalidParameterError("Id:" + id_ + '.');
      }

      this._id = id_;
   }

   set authorId(authorId_: string) {

      this._authorId = authorId_;
   }

   set text(text_: string) {

      this._text = text_;
      this._isTokenCacheDirty = true;
   }

   set responseToId(responseToId_: string) {

      this._responseToId = responseToId_;
   }

   set sentAt(sentAt_: Date) {

      this._sentAt = new Date(sentAt_);
   }

   set chunks(chunks_: Array<IRelevantEnrichedChunk>) {
      this._chunks = chunks_;
      this._isTokenCacheDirty = true;
   }
   set isStreaming(isStreaming: boolean) {

      this._isStreaming = isStreaming;
   }

   /**
    * is this message unprompted i.e. not a reply.  
    */
   isUnPrompted(): boolean {
      return (typeof (this._responseToId) === "undefined");
   }

   /**
    * force token calculation
    */
   calculateTokens(): number {

      return this.tokens;
   }

   /**
    * Use this when live streaming text from server into a message
    */
   hookLiveAppend(handler: MessageStreamingHandler): void {

      this._isStreaming = true;
      this._streamHandler = handler;
   }

   /**
    * Use this when live streaming text from server into a message
    */
   unhookLiveAppend(): void {

      this._isStreaming = false;
      this._streamHandler = undefined;
   }

   /**
    * Use this when live streaming text from server into a message
    */
   liveUpdateText(text: string, more: boolean): string {

      this.text = text;

      if (this._streamHandler) {
         this._streamHandler(this, more);
      }

      return this.text;
   }

   /**
     * Use this when live streaming chunks from server into a message
     */
   liveUpdateChunks(chunks: Array<IRelevantEnrichedChunk>, more: boolean): string {

      this._chunks = chunks;

      if (this._streamHandler) {
         this._streamHandler(this, more);
      }

      return this.text;
   }

   /**
    * test for equality - checks all fields are the same. 
    * Uses field values, not identity bcs if objects are streamed to/from JSON, field identities will be different. 
    * @param rhs - the object to compare this one to.  
    */
   equals(rhs: Message): boolean {

      return ((this._id === rhs._id) &&
         (this._authorId === rhs._authorId) &&
         ((this._responseToId === undefined && rhs._responseToId === undefined) || (this._responseToId === rhs._responseToId)) &&
         (this._text === rhs._text) &&
         (areSameDate(this._sentAt, rhs._sentAt)) &&
         areSameDeepArray(this._chunks, rhs._chunks));
   }

   /**
    * assignment operator 
    * @param rhs - the object to assign this one from.  
    */
   assign(rhs: Message): Message {
      this._id = rhs._id;
      this._authorId = rhs._authorId;
      this._responseToId = rhs._responseToId;
      this._text = rhs._text;
      this._sentAt = new Date(rhs._sentAt);
      this._chunks = rhs._chunks;
      this._tokens = 0;
      this._isTokenCacheDirty = true;
      this._isStreaming = false;

      return this;
   }

   /**
    * test for valid id 
    * @param id - the string to test
    */
   static isValidId(id_: string): boolean {
      if (!id_) // undefined keys are allowed if user object has not been originated from or saved anywhere persistent
         return true;

      if (id_ && id_.length > 0) // if the id exists, must be > zero length
         return true;

      return (false);
   }
}
****************************************

****************************************
Boxer\core\NotificationFramework.ts
****************************************
// NotificationFramework
// Copyright (c) 2024 Braid Technologies Ltd
/////////////////////////////////////////


/// <summary>
/// Interest -  encapsulates what is being observed - a specific notificationId.
/// </summary>
export class Interest { 

   private _notificationId: string;
   private static noInterest : string  = "nullInterest";

   /**
    * Create a Interest object
    * @param notificationId_ - id of the notification 
    */
   constructor(notificationId_: string);

   /**
    * Create a Interest object
    * @param interest_ - object to copy from - should work for JSON format and for real constructed objects
    */
   public constructor(interest_: Interest);

   /**
    * Create an empty Interest object - required for particiation in serialisation framework
    */
   constructor ();

   constructor(...arr: any[]) { 
      if (arr.length === 0) { // Empty Constructor
         this._notificationId = Interest.noInterest;
         return;
      }
      else {
         if (this.isMyType(arr[0])) { // Copy Constructor
            this._notificationId = arr[0]._notificationId;
         }
         else { // Individual arguments
            this._notificationId = arr[0];
         }
      }
   }

   private isMyType(rhs_: Interest): boolean {
      return rhs_.hasOwnProperty('_notificationId');
   }

   /**
   * set of 'getters' for private variables
   */
   get notificationId(): string  {
      return this._notificationId;
   }

   /**
    * test for equality - checks all fields are the same. 
    * NB must use field values, not identity bcs if objects are streamed to/from JSON, identities will be different. 
    * @param rhs_ - the object to compare this one to.  
    */
   equals(rhs_: Interest): boolean {
      
      return (this._notificationId === rhs_._notificationId);
   }

   /**
    * assignment operator 
    * @param rhs_ - the object to assign this one from.  
    */
   assign(rhs_: Interest): Interest {
      this._notificationId = rhs_._notificationId;

      return this;
   }

   public static createNullInterest () : Interest {
      return new Interest (Interest.noInterest);

   }
}

/// <summary>
/// Notification -  base class for all events. Base carries references to the notifcationId. derived classes add a data package via template class below.
/// Value class - just holds reference to the data, is expected to exist only for the synchronous life of the notification.
/// </summary>
export class Notification {

   private _interest: Interest;

   /**
    * Create a Notification object
    * @param interest_ - the Interest to identify the notification 
    */
   constructor(interest_: Interest);

   /**
    * Create a Notification object
    * @param notification_ - object to copy from - should work for JSON format and for real constructed objects
    */
   public constructor(notification_: Notification);

   /**
    * Create an empty Interest object - required for particiation in serialisation framework
    */
   constructor();

   constructor(...arr: any[]) {
      if (arr.length === 0) { // Empty Contrutructor
         this._interest = Interest.createNullInterest();
         return;
      }
      else {
         if (this.isMyType(arr[0])) { // Copy Contrutructor
            this._interest = new Interest (arr[0]._interest);
         }
         else { // Individual arguments
            this._interest = new Interest (arr[0]);
         }
      }
   }

   private isMyType(rhs_: Notification): boolean {
      return rhs_.hasOwnProperty('_interest');
   }

   /**
   * set of 'getters' for private variables
   */
   get interest (): Interest {
      return this._interest;
   }

   /**
    * test for equality - checks all fields are the same. 
    * Shallow check.
    * @param rhs_ - the object to compare this one to.  
    */
   equals(rhs_: Notification): boolean {

      return (this.interest === rhs_.interest) ||
         (this._interest.equals(rhs_._interest));
   }

   /**
    * assignment operator 
    * @param rhs_ - the object to assign this one from.  
    */
   assign(rhs_: Notification): Notification {
      this._interest = rhs_._interest;

      return this;
   }

}

/// <summary>
/// NotificationFor -  template to specialse Notification by adding an NotificationData class. 
/// Value class - just holds reference to the data, is expected to exist only for the synchronous life of the notification. 
/// If you want data to last longer, add a reference type and the observer will have to save it. 
/// </summary>
export class NotificationFor<EventData> extends Notification
{
   private _eventData: EventData | undefined;


   /**
    * Create an empty NotificationFor<NotificationData>  object - required for particiation in serialisation framework
    */
   constructor();

   /**
    * Create a NotificationFor<NotificationData> object
    * @param notification_ - object to copy from - should work for JSON format and for real constructed objects
    */
   public constructor(notification_: NotificationFor<EventData>);

   /**
    * Create a Notification object
    * @param interest_ - id of the notification 
    * @param eventData_ - the data payload to send with it
    */
   constructor(interest_: Interest, eventData_: EventData) 

   constructor(...arr: any[]) {
      if (arr.length === 0) { // Construct empty
         super();
         this._eventData = undefined;
         return;
      }
      else 
      if (arr.length === 1) { // Copy constructor
         super (arr[0])
         this._eventData = arr[0]._eventData;
      }
      else { // Individual arguments
         super (arr[0])
         this._eventData = arr[1];
      }
   }

   /**
   * set of 'getters' for private variables
   */
   get eventData(): EventData | undefined {
      return this._eventData;
   }

   /**
    * test for equality - checks all fields are the same. 
    * Is a shallow compare if the payload is an object
    * @param rhs_ - the object to compare this one to.  
    */
   equals(rhs_: NotificationFor<EventData>): boolean {

      return (super.equals(rhs_) &&
         (this._eventData === rhs_._eventData));
   }

   /**
    * assignment operator 
    * @param rhs_ - the object to assign this one from.  
    */
   assign(rhs_: NotificationFor<EventData>): NotificationFor<EventData> {
      super.assign(rhs_);
      this._eventData = rhs_._eventData;

      return this;
   }
}

/// <summary>
/// ObserverInterest -  an IObserver plus an Interest . Used by Notifieres to hold a list of things that observers are interested in so it can notify them. 
/// </summary>
export class ObserverInterest {

   private _observer: IObserver | undefined;
   private _interest: Interest;

   /**
    * Create a Interest object
    * @param observer_ - reference to the observer 
    * @param interest_ - the thing it is interested in 
    */
   constructor(observer_: IObserver, interest_: Interest);

   /**
    * Create a ObserverInterest object
    * @param observerInterest_ - object to copy from - should work for JSON format and for real constructed objects
    */
   public constructor(observerInterest_ : ObserverInterest);

   /**
    * Create an empty Interest object - required for particiation in serialisation framework
    */
   constructor();

   constructor(...arr: any[]) {
      if (arr.length === 0) { // Empty constructor
         this._observer = undefined;
         this._interest = Interest.createNullInterest();
         return;
      }
      if (arr.length === 1) { // Copy constructor
         this._observer = arr[0]._observer;
         this._interest = new Interest (arr[0]._interest);
      }
      else { // Indivual arguments
         this._observer = arr[0];
         this._interest = new Interest (arr[1]);
      }
   }

   /**
   * set of 'getters' for private variables
   */
   get observer(): IObserver | undefined {
      return this._observer;
   }
   get interest(): Interest {
      return this._interest;
   }

   /**
    * test for equality - checks all fields are the same. 
    * Shallow compare
    * @param rhs_ - the object to compare this one to.  
    */
   equals(rhs_: ObserverInterest): boolean {

      return ((this._observer === rhs_._observer) && 
         ( (this.interest === rhs_.interest) ||
           (rhs_.interest !== undefined) && (this._interest.equals(rhs_._interest))));
   }

   /**
    * assignment operator 
    * @param rhs_ - the object to assign this one from.  
    */
   assign(rhs_: ObserverInterest): ObserverInterest {
      this._observer = rhs_._observer;
      this._interest = new Interest(rhs_._interest);

      return this;
   }

}

/// <summary>
/// NotificationRouter -  template to act as an intermediary, type-safe router that connects a specific function signature for the method that is called in a notification
/// </summary>
/// 
export type FunctionForNotification = (interest: Interest, data: Notification) => void;

export class NotificationRouter implements IObserver {
   private _function: FunctionForNotification | undefined;

   /**
    * Create empty NotificationRouterFor object
    */
   constructor();

   /**
    * Create a NotificationRouter object
    * @param function_ - function to call on notification 
    */
   constructor(function_: FunctionForNotification);

   /**
    * Create a NotificationRouter  object
    * @param notificationRouter_ - object to copy from - should work for JSON format and for real constructed objects
    */
   public constructor(notificationRouter_: NotificationRouter);

   constructor(...arr: any[]) {
      if (arr.length === 0) { // Construct empty
         this._function = undefined;
         return;
      }
      else {
         if (this.isMyType(arr[0])) { // Copy constructor
            this._function = arr[0]._function;
         }
         else { // Individual arguments
            this._function = arr[0];
         }
      }
   }

   private isMyType(rhs_: FunctionForNotification): boolean {
      return rhs_.hasOwnProperty('_function');
   }

   /**
   * set of 'getters' for private variables
   */
   get function(): FunctionForNotification | undefined {
      return this._function;
   }

   /**
    * test for equality - checks all fields are the same. 
    * Shallow compare
    * @param rhs_ - the object to compare this one to.  
    */
   equals(rhs_: NotificationRouter): boolean {

      return (this._function === rhs_._function);
   }

   /**
    * assignment operator 
    * @param rhs_ - the object to assign this one from.  
    */
   assign(rhs_: NotificationRouter): NotificationRouter {
      this._function = rhs_._function;

      return this;
   }

   notify(interest_: Interest, notification_: Notification): void {

      // pass on to the required method
      if (this._function)
         this._function(interest_, notification_);
   }
}


/// <summary>
/// NotificationRouterFor -  template to act as an intermediary, type-safe router that connects a specific function signature for the method that is called in a notification
/// </summary>
/// 
type FunctionFor<NotificationData> = (interest: Interest, data: NotificationFor<NotificationData>) => void;

export class NotificationRouterFor<NotificationData> implements IObserver
{
   private _function: FunctionFor<NotificationData> | undefined;

   /**
    * Create empty NotificationRouterFor object
    */
   constructor();

   /**
    * Create a NotificationRouterFor object
    * @param function_ - function to call on notification 
    */
   constructor(function_: FunctionFor<NotificationData>);

   /**
    * Create a NotificationRouterFor<NotificationData>  object
    * @param observerRouter - object to copy from - should work for JSON format and for real constructed objects
    */
   public constructor(observerRouter: NotificationRouterFor<NotificationData>);

   constructor(...arr: any[]) {
      if (arr.length === 0) { // Construct empty
         this._function = undefined;
         return;
      }
      else {
         if (this.isMyType (arr[0])) { // Copy constructor
            this._function = arr[0]._function;
         }
         else { // Individual arguments
            this._function = arr[0];
         }
      }
   }

   private isMyType(rhs_: FunctionFor<NotificationData>): boolean {
      return rhs_.hasOwnProperty('_function');
   }

   /**
   * set of 'getters' for private variables
   */
   get function(): FunctionFor<NotificationData> | undefined {
      return this._function;
   }

   /**
    * test for equality - checks all fields are the same. 
    * Shallow compare
    * @param rhs_ - the object to compare this one to.  
    */
   equals(rhs_: NotificationRouterFor<NotificationData>): boolean {

      return (this._function === rhs_._function);
   }

   /**
    * assignment operator 
    * @param rhs_ - the object to assign this one from.  
    */
   assign(rhs_: NotificationRouterFor<NotificationData>): NotificationRouterFor<NotificationData> {
      this._function = rhs_._function;

      return this;
   }

   notify(interest_: Interest, notification_: NotificationFor<NotificationData>): void {

      // pass on to the required method
      if (this._function)
         this._function(interest_, notification_);
   }
}

export interface IObserver {
   notify(interest_: Interest, notification_: Notification): void;
}

export interface INotifier {
   addObserver(observerInterest_: ObserverInterest): void;
   removeObserver(observerInterest_: ObserverInterest): boolean;
   removeAllObservers(): void;
}

/// <summary>
/// Notifier -  class that sends notifications when things change
/// </summary>
export class Notifier implements INotifier {

   private _observerInterests : Array<ObserverInterest>;

   /**
    * Create an empty Notifier object - required for particiation in serialisation framework
    */
   constructor() {
      this._observerInterests = new Array<ObserverInterest>();
   }

   // Operations
   notifyObservers(interest_: Interest, notificationData_: Notification): void {

      //log.debug(tag.notification, "Notification:" + interest_.notificationId + ": " + JSON.stringify (notificationData_));

      for (var i = 0; i < this._observerInterests.length; i++) {

         let interest = this._observerInterests[i].interest;
         let observer = this._observerInterests[i].observer;

         if (interest) {
            if (interest.equals (interest_)) {
               if (observer)
                  observer.notify(interest, notificationData_);
            }
         }
       }
    }

   // Add the supplied observer to the list of observers associated with
   // the supplied interest. 
   addObserver(observerInterest_: ObserverInterest): void {

      const index = this._observerInterests.indexOf(observerInterest_);
      if (index === -1) {
         this._observerInterests.push(observerInterest_);
      }
   }

   // Remove the supplied observer from the list of observers associated
   // with the supplied interest.
   // returns TRUE if it was correctly found
   removeObserver(observerInterest_: ObserverInterest): boolean {

      const index = this._observerInterests.indexOf(observerInterest_);
      if (index > -1) {
         this._observerInterests.splice(index, 1);
         return true;
      }
      return false;
   }

   removeAllObservers(): void {
      this._observerInterests.length = 0
   }

};  //Notifier
****************************************

****************************************
Boxer\core\Persona.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd

import { InvalidParameterError } from './Errors';
import { EIcon } from './Icons';
import { throwIfUndefined } from './Asserts'; 
import { getDefaultKeyGenerator } from './IKeyGeneratorFactory';
import { MDynamicStreamable, DynamicStreamableFactory } from "./StreamingFramework";

const keyGenerator = getDefaultKeyGenerator();

const unknownUuid: string = "88a77968-2525-4b83-b396-352ca83d1680";

const className = "Persona";

// atob works in a browser, implement a fallback if we are in node. 
function callAtob(data_: string, forceShim: boolean): string {

   if (!atob || forceShim) {
      const atob = (data: string) => { return Buffer.from(data, 'base64').toString('binary'); }
      return atob(data_);
   }
   return atob(data_);
}

// Persona - aggregates name, icon type, & timestamp of last time we saw them
// excludes email and other PII so can be passed to client even when describing an individual.
export class Persona extends MDynamicStreamable {
   private _id: string;
   private _name: string;
   private _email: string;
   private _icon: EIcon;
   private _thumbnailB64: string | undefined;
   private _lastSeenAt: Date;

   /**
    * Create an empty Persona object - required for particiation in serialisation framework
    */
   public constructor();

   /**
    * Create a Persona object
    * @param id_ - id to use to generate uniqueness 
    * @param name_ - plain text user name.
    * @param amail_ - email address (unique)
    * @param icon_ - icon to use, from the enum list
    * @param thumbNailB64_ - encoded thumbnail image, can be undefined
    * @param lastSeenAt_ - timestamp for last interaction seen by the framework
    */
   public constructor(id_: string | undefined, name_: string | undefined, email_: string | undefined, icon: EIcon, thumbNailB64_: string | undefined, lastSeenAt_: Date);

   /**
    * Create a Persona object
    * @param persona - object to copy from - should work for JSON format and for real constructed objects
    */
   public constructor(persona: Persona);

   public constructor(...arr: any[])
   {

      super();

      if (arr.length === 0) {
         this._id = keyGenerator.generateKey(); // An new Person has a key
         this._name = "";                       // But not a name or email address
         this._email = "";
         this._icon = EIcon.kUnknownPersona;
         this._thumbnailB64 = undefined;
         this._lastSeenAt = new Date();
         return;
      }

      var localId: string;
      var localName: string;
      var localEmail: string;      
      var localIcon: EIcon;
      var localThumbNailB64: string;
      var localLastSeenAt: Date;

      if (arr.length === 1) {
         localId = arr[0]._id
         localName = arr[0]._name;
         localEmail = arr[0]._email;         
         localIcon = arr[0]._icon;
         localThumbNailB64 = arr[0]._thumbnailB64;
         localLastSeenAt = new Date(arr[0]._lastSeenAt);
      }
      else { 
         localId = arr[0];
         localName = arr[1];
         localEmail = arr[2]
         localIcon = arr[3];         
         localThumbNailB64 = arr[4];
         localLastSeenAt = new Date (arr[5]);
      }

      if (!Persona.isValidId(localId)) {
         throw new InvalidParameterError("Id:" + localId + '.');
      }
      if (!Persona.isValidName(localName)) {
         throw new InvalidParameterError("Name:" + localName + '.');
      }
      if (!Persona.isValidEmail(localEmail)) {
         throw new InvalidParameterError("Email:" + localEmail + '.');
      }
      if (!Persona.isValidThumbnailB64(localThumbNailB64)) {
         throw new InvalidParameterError("Thumbnail:" + localThumbNailB64 + '.');
      }

      this._id = localId;
      this._name = localName;
      this._email = localEmail;
      this._icon = localIcon;
      this._thumbnailB64 = localThumbNailB64;
      this._lastSeenAt = localLastSeenAt;
   }

   /**
    * Dynamic creation for Streaming framework
    */
   dynamicClassName(): string {

      return className;
   }

   static createDynamicInstance(): MDynamicStreamable {
      return new Persona();
   }

   static _dynamicStreamableFactory: DynamicStreamableFactory = new DynamicStreamableFactory(className, Persona.createDynamicInstance);
   streamOut(): string {

      return JSON.stringify({ id: this._id, name: this._name, email: this._email, icon: this._icon, thumbnailB64: this._thumbnailB64, lastSeenAt: this._lastSeenAt });
   }

   streamIn(stream: string): void {

      const obj = JSON.parse(stream);

      let icon: EIcon = ((EIcon as any)[obj.icon]);

      // Backwards compatibility from when we use the case 'Bot' for the LLM
      if (icon === EIcon.kBotPersona) 
         icon = EIcon.kLLMPersona;

      if (icon === undefined)
         throw new InvalidParameterError("Icon:" + obj.icon + '.');

      let name = obj.name;
      let email = obj.email;

      // Backwards compatibility from when we used the email from LinkedIn in the name attribute
      if (name && ((! email) || (email.length === 0))) { 
         email = name;
         name = "";
      }

      this.assign(new Persona (obj.id, name, email, icon, obj.thumbnailB64, new Date(obj.lastSeenAt)));
   }

   /**
   * set of 'getters' for private variables
   */
   get id(): string {
      return this._id;
   }
   get name(): string {
      return this._name;
   }
   get email(): string {
      return this._email;
   }   
   get icon(): EIcon {
      return this._icon;
   }
   get thumbnailB64(): string | undefined {
      return this._thumbnailB64;
   }
   get lastSeenAt(): Date {
      return this._lastSeenAt;
   }
   get checkedThumbnailB64(): string {
      throwIfUndefined (this._thumbnailB64);        
      return this._thumbnailB64;
   }

   /**
   * set of 'setters' for private variables
   */
   set id(id_: string) {
      if (!Persona.isValidId(id_)) {
         throw new InvalidParameterError("Id:" + id_ + '.');
      }

      this._id = id_;
   }

   set name(name_: string) {
      if (!Persona.isValidName(name_)) {
         throw new InvalidParameterError("Name:" + name_ + '.');
      }

      this._name = name_;
   }

   set email(email_: string) {
      if (!Persona.isValidEmail(email_)) {
         throw new InvalidParameterError("Email:" + email_ + '.');
      }

      this._email = email_;
   }

   set icon (icon_: EIcon) {

      this._icon = icon_;
   }

   set thumbnailB64(thumbNailB64_: string) {

      this.setThumbnailB64(thumbNailB64_);
   }

   set lastSeenAt(lastSeenAt_: Date) {

      this._lastSeenAt = new Date(lastSeenAt_);
   }

   /**
    * test for equality - checks all fields are the same. 
    * Uses field values, not identity bcs if objects are streamed to/from JSON, field identities will be different. 
    * @param rhs - the object to compare this one to.  
    */
   equals(rhs: Persona): boolean {
      Persona
      return ((this._id === rhs._id) &&
         ((this._name === undefined && rhs._name == undefined) || (this._name === rhs._name)) &&
         ((this._email === undefined && rhs._email == undefined) || (this._email === rhs._email)) &&         
         (this._icon === rhs._icon) &&         
         ((this._thumbnailB64 === undefined && rhs._thumbnailB64 == undefined) || (this._thumbnailB64 === rhs._thumbnailB64)) &&
         (this.areSameDate (this._lastSeenAt, rhs._lastSeenAt)));
   }

   areSameDate (lhs: Date, rhs : Date) : boolean {
      if (lhs.getTime() === rhs.getTime()) {
         return true;
      }
      return false;
   }

   /**
    * assignment operator 
    * @param rhs - the object to assign this one from.  
    */
   assign(rhs: Persona): Persona {
      this._id = rhs._id;
      this._name = rhs._name;
      this._email = rhs._email;
      this._icon = rhs._icon;
      this._thumbnailB64 = rhs._thumbnailB64;
      this._lastSeenAt = new Date (rhs._lastSeenAt);

      return this;
   }

   /**
    * Set thumbnail with an option to force use of browser shim for B64 encoding 
    */
   setThumbnailB64(thumbNailB64_: string, forceShim_: boolean = false) : void {

      if (!Persona.isValidThumbnailB64(thumbNailB64_, forceShim_)) {
         throw new InvalidParameterError("Thumbnail:" + thumbNailB64_ + '.');
      }

      this._thumbnailB64 = thumbNailB64_;
   }

   /**
    * test for valid id 
    * @param id - the string to test
    */
   static isValidId(id_: string): boolean {
      if (!id_) // undefined keys are allowed if user object has not been originated from or saved anywhere persistent
         return true;

      if (id_ && id_.length > 0) // if the id exists, must be > zero length
         return true;

      return (false);
   }

   /**
    * test for valid name 
    * @param name - the string to test
    */
   static isValidName(name_: string): boolean {

      if (name_ == undefined)
         return false;

      return true; // Currently allow anything for a name, even empty string. 
   }

   /**
    * test for valid email 
    * @param email - the string to test
    */
      static isValidEmail(email_: string): boolean {

         if (email_ == undefined)
            return false;
   
         return true; // Currently allow anything for email, even empty string. 
      }
   /**
    * test for valid thumbnail string 
    * @param thumbnail - the string to test
    */
   static isValidThumbnailB64(thumbNailB64_: string, forceShim_: boolean = false): boolean {


      if (thumbNailB64_ == undefined) // Thumbnail can be undefined it its a predefined ICON
         return true;

      // else must be a valid encoded string
      if (thumbNailB64_.length > 0) { 

         var decoded : string;

         try {
            decoded = callAtob(thumbNailB64_, forceShim_);
         } catch (e) {
            return false;   
         }

         return true;
      }

      return (false);
   }

   private static _unknown: Persona = new Persona(unknownUuid, "Unknown", "", EIcon.kUnknownPersona, undefined, new Date(0));

   /**
    * return persona details for 'unknown'
    */
   static unknown(): Persona {
      return Persona._unknown;
   }


   /**
    * return unknown if the persona cannot be found in the map
    */
      static safeAuthorLookup (audience: Map<string, Persona>, authorId: string) : Persona {
   
      let initial = audience.get (authorId);
   
      if (initial)
         return initial;
      else
         return Persona.unknown()
   }

   /**
    * test if the persona details are the status 'unknown'
    * @param persona - the persona to test 
    */
   static isUnknown(persona: Persona): boolean {
      return (persona === Persona._unknown) ||
         (persona && persona.equals(Persona._unknown));
   }
}
****************************************

****************************************
Boxer\core\Queue.ts
****************************************
/*! Copyright Braid Technologies 2022 */


//==============================//
// Queue class
//==============================//

export class Queue<T> {

      // initialise the queue and offset
   queue: Array<T>;
   offset: number; 

   /**
    * Creates a Queue
    */
   constructor() {
      this.offset = 0
      this.queue = new Array<T>();
   }

   // Returns the length of the queue.
   getLength () : number {
      return (this.queue.length - this.offset);
   }

   // Returns true if the queue is empty, and false otherwise.
   isEmpty () : boolean {
      return (this.queue.length == 0);
   }

   /* Enqueues the specified item. The parameter is:
    *
    * item - the item to enqueue
    */
   enqueue (item: T) {
      this.queue.push(item);
   }

   /* Dequeues an item and returns it. If the queue is empty, the value
    * 'undefined' is returned.
    */
   dequeue (): T | undefined {

      // if the queue is empty, return immediately
      if (this.queue.length == 0) return undefined;

      // store the item at the front of the queue
      let item = this.queue[this.offset];

      // increment the offset and remove the free space if necessary
      if (++(this.offset) * 2 >= this.queue.length) {
         this.queue = this.queue.slice(this.offset);
         this.offset = 0;
      }

      // return the dequeued item
      return item;

   }

   /* Returns the item at the front of the queue (without dequeuing it). If the
    * queue is empty then undefined is returned.
    */
   peek(): T | undefined {
      return (this.queue.length > 0 ? this.queue[this.offset] : undefined);
   }
}
****************************************

****************************************
Boxer\core\SharedEmbedding.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd

import { InvalidParameterError } from './Errors';
import { throwIfUndefined } from './Asserts'; 
import { IKeyGenerator } from './IKeyGenerator';
import { getDefaultKeyGenerator } from './IKeyGeneratorFactory';
import { MDynamicStreamable, DynamicStreamableFactory } from "./StreamingFramework";
import { areSameShallowArray } from './Utilities';
import { Like } from './Like';

var keyGenerator: IKeyGenerator = getDefaultKeyGenerator();

const className = "SharedEmbedding";

// SharedEmbedding - URL, conversation, net like count, emails of who has liked it, emails of who has disliked it. 
export class SharedEmbedding extends MDynamicStreamable {
   private _id: string; 
   private _url: string | undefined;
   private _conversationId: string | undefined;
   private _likes: Array<Like>;

   /**
    * Create an empty Message object - required for particiation in serialisation framework
    */
   public constructor();

   /**
    * Create a SharedEmbedding object
    * @param id_ - id to use to generate uniqueness 
    * @param url_ - URL
    * @param conversationId_ - in which conversation id the 'like' happen
    * @param likes_ - array of names of people that have liked it. 
    */
   public constructor(id_: string | undefined, url_: string | undefined, conversationId_: string | undefined,  
                      likes_: Array<Like> | undefined);

   /**
    * Create a SharedEmbedding object
    * @param sharedEmbedding_ - object to copy from - should work for JSON format and for real constructed objects
    */
   public constructor(sharedEmbedding_: SharedEmbedding);

   public constructor(...arr: any[])
   {
      super();

      var localId: string = "";
      var localUrl: string | undefined = undefined;
      var localConversationId : string | undefined = undefined;
      var localLikes: Array<Like> = new Array<Like> ();        

      if (arr.length === 0) {

         localId = keyGenerator.generateKey(); // A new SharedEmbedding has a key                                     
      }
      else 
      if (arr.length === 1) {

         localId = arr[0]._id
         localUrl = arr[0]._url;
         localConversationId = arr[0]._conversationId;         
         localLikes = arr[0]._likes.slice(0);         
      }
      else if (arr.length === 4) {
         localId = arr[0];
         localUrl = arr[1]; 
         localConversationId = arr[2];     
         if (arr[3])      
            localLikes = arr[3].slice(0);     
      }

      if (!SharedEmbedding.isValidId(localId)) {
         throw new InvalidParameterError("Id:" + localId + '.');
      }

      this._id = localId;    
      this._url = localUrl;
      this._conversationId = localConversationId;
      this._likes = localLikes;           
   }

   /**
    * Dynamic creation for Streaming framework
    */
   dynamicClassName(): string {

      return className;
   }

   static createDynamicInstance(): MDynamicStreamable {
      return new SharedEmbedding();
   }

   static _dynamicStreamableFactory: DynamicStreamableFactory = new DynamicStreamableFactory(className, SharedEmbedding.createDynamicInstance);

   streamOut(): string {

      return JSON.stringify({ id: this._id, url: this._url, conversationId: this._conversationId,
                            likes: this._likes});
   }

   streamIn(stream: string): void {

      const obj = JSON.parse(stream);

      let likes = new Array<Like> (); 

      let objLikes = obj.likes;

      if (objLikes) {
         for (let i = 0; i < objLikes.length; i++) {
            likes.push (new Like (objLikes[i]));
         }      
      }     


      this.assign(new SharedEmbedding (obj.id, obj.url, obj.conversationId, likes));
   }

   /**
   * set of 'getters' for private variables
   */
   get id(): string {
      return this._id;
   }
   get url(): string | undefined {
      return this._url;
   }
   get conversationId(): string | undefined {
      return this._conversationId;
   }   
   get netLikeCount(): number {
      return this._likes.length;
   }
   get likes(): Array<Like> {
      return this._likes;
   }     

   /**
   * set of 'setters' for private variables
   */
   set id(id_: string) {
      if (!SharedEmbedding.isValidId(id_)) {
         throw new InvalidParameterError("Id:" + id_ + '.');
      }

      this._id = id_;
   }

   set url(url_: string | undefined) {

      this._url = url_;
   }

   set conversationId(conversationId_: string | undefined) {

      this._conversationId = conversationId_;
   }   

   set likes (likedBy_: Array<Like>) {
      this._likes = likedBy_.slice(0);     
   }


   /**
    * add a like 
    * @param name - the name of the person who has liked it.  
    */
   like(name: string): void {

      throwIfUndefined (this._url);

      let foundLike = false;
      let likeIndex = -1;

      for (let i = 0; i < this._likes.length && !foundLike; i++) {

         if (this._likes[i].name === name) {
            foundLike = true;
            likeIndex = i;
         }
      }   

      if (foundLike)
         return;
      
      this._likes.push (new Like (name, new Date()))  
   }

   /**
    * remove a like 
    * @param name - the name of the person who has a like.  
    */
   unlike(name: string): void {

      throwIfUndefined (this._url);

      let foundLike = false;
      let likeIndex = -1;

      for (let i = 0; i < this._likes.length && !foundLike; i++) {

         if (this._likes[i].name === name) {
            foundLike = true;
            likeIndex = i;
         }
      }
      
      if (foundLike)
         this._likes.splice(likeIndex, 1);      
   }   

   /*
    * test for a like 
    * @param name - the name of the person who has liked it.  
    */
   isLikedBy (name: string): boolean {

      throwIfUndefined (this._url);

      let foundLike = false;

      for (let i = 0; i < this._likes.length && !foundLike; i++) {

         if (this._likes[i].name === name) {
            foundLike = true;
         }
      }   

      return foundLike;
   }

   /**
    * test for equality - checks all fields are the same. 
    * Uses field values, not identity bcs if objects are streamed to/from JSON, field identities will be different. 
    * @param rhs - the object to compare this one to.  
    */
   equals(rhs: SharedEmbedding): boolean {

      return ((this._id === rhs._id) &&
         ((this._url === undefined && rhs._url === undefined) || (this._url === rhs._url)) &&    
         ((this._conversationId === undefined && rhs._conversationId === undefined) || (this._conversationId === rhs._conversationId)) &&                        
         areSameShallowArray (this._likes, rhs._likes));
   }

   /**
    * assignment operator 
    * @param rhs - the object to assign this one from.  
    */
   assign(rhs: SharedEmbedding): SharedEmbedding {

      this._id = rhs._id;   
      this._url = rhs._url;
      this._conversationId = rhs._conversationId;
      this._likes = rhs._likes.slice(0);      

      return this;
   }

   /**
    * test for valid id 
    * @param id - the string to test
    */
   static isValidId(id_: string): boolean {
      if (!id_) // undefined keys are allowed if user object has not been originated from or saved anywhere persistent
         return true;

      if (id_ && id_.length > 0) // if the id exists, must be > zero length
         return true;

      return (false);
   }
}

export function findInMap (url: string, map: Map<string, SharedEmbedding>) : SharedEmbedding | undefined {

   for (const [key, value] of map) {
      if (value.url === url)
         return value;
   }
   return undefined;
}
****************************************

****************************************
Boxer\core\StreamingFramework.ts
****************************************
/////////////////////////////////////////
// StreamingFramework
// Copyright (c) 2024 Braid Technologies Ltd
/////////////////////////////////////////


/// <summary>
/// MStreamable - root class for all derived types that can stream to and from JSON 
/// </summary>
export abstract class MStreamable {

   constructor() {
   }

   abstract streamOut(): string;
   abstract streamIn(stream: string): void;
}

/// <summary>
/// MDynamicStreamable - root class for all derived types that can stream to and from JSON with dynamic creation based on className stored in the stream
/// </summary>
export abstract class MDynamicStreamable extends MStreamable {

   constructor() {
      super();
   }

   abstract dynamicClassName(): string;

   flatten (): string {

      return JSON.stringify({ className: this.dynamicClassName(), data: this.streamOut() });
   }

   static resurrect(stream: string): MDynamicStreamable | undefined {

      const parsed = JSON.parse(stream);

      let obj = DynamicStreamableFactory.create(parsed.className);

      if (obj)
         obj.streamIn(parsed.data);

      return obj;
   }
}

// Signature for the factory function 
type FactoryFunctionFor<MDynamicStreamable> = () => MDynamicStreamable;

var firstDynamicStreamableFactory: DynamicStreamableFactory | undefined = undefined;

export class DynamicStreamableFactory {

   _className: string;
   _factoryMethod: FactoryFunctionFor<MDynamicStreamable>;
   _nextFactory: DynamicStreamableFactory | undefined;

   constructor(className_: string, factoryMethod_: FactoryFunctionFor<MDynamicStreamable>) {
      this._className = className_;
      this._factoryMethod = factoryMethod_;
      this._nextFactory = undefined;

      if (firstDynamicStreamableFactory === undefined) {
         firstDynamicStreamableFactory = this;
      } else {
         var nextFactory: DynamicStreamableFactory = firstDynamicStreamableFactory;

         while (nextFactory._nextFactory) {
            nextFactory = nextFactory._nextFactory;
         }
         nextFactory._nextFactory = this;
      }
   }

   static create(className: string): MDynamicStreamable | undefined {
      var nextFactory: DynamicStreamableFactory | undefined = firstDynamicStreamableFactory;

      while (nextFactory) {
         if (nextFactory._className === className) {
            return nextFactory._factoryMethod();
         }
         nextFactory = nextFactory._nextFactory;
      }
      return undefined;
   }
}
****************************************

****************************************
Boxer\core\Utilities.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd

import { throwIfUndefined } from './Asserts';

export function areSameDate (lhs: Date | undefined, rhs : Date | undefined) : boolean {

   if (typeof lhs === 'undefined' && typeof rhs === 'undefined') {
      return true;
   }
   if (typeof lhs === 'undefined' && typeof rhs !== 'undefined') {
      return false;
   } 
   if (typeof lhs !== 'undefined' && typeof rhs === 'undefined') {
      return false;
   }        
   throwIfUndefined (lhs);
   throwIfUndefined (rhs);
   if (lhs.getTime() === rhs.getTime()) {
      return true;
   }
   return false;
}

export function areSameShallowArray<T> (lhs: Array<T>, rhs : Array<T>) : boolean {

   if (lhs.length !== rhs.length) {
      return false;
   }        

   for (let i = 0; i < lhs.length; i++) {
      if (lhs[i] !== rhs[i])
         return false;
   }

   return true;
}

export function areSameDeepArray<T> (lhs: Array<T>, rhs : Array<T>) : boolean {

   if (lhs.length !== rhs.length) {
      return false;
   }        

   for (let i = 0; i < lhs.length; i++) {
      if (! (JSON.stringify (lhs[i]) === JSON.stringify (rhs[i])))
         return false;
   }

   return true;
}
****************************************

****************************************
Boxer\core\UuidKeyGenerator.ts
****************************************
// Copyright (c) 2024 Braid Technologies Ltd
import { throwIfNull } from './Asserts';
import { EnvironmentError } from './Errors';
import { IKeyGenerator } from './IKeyGenerator';

let mockStoredSecret = "";

function NumberToUint32Array(f: number) :  Uint32Array {
   
   const buf = new ArrayBuffer(8);
   const floatView = new Float64Array(buf);
   const uintView = new Uint32Array(buf);

   floatView[0] = f;
   const randomValues = new Uint32Array(2);
   randomValues[0] = uintView[0];
   randomValues[1] = uintView[1];

   return randomValues;
}

export class UuidKeyGenerator implements IKeyGenerator {

   generateKey (): string {
      return uuid();
   }

   // Function to generate a random state value
   generateSecret(): string {
      
      // Upper and lower bounds
      const min = 1;
      const max = 100;

      // Generate random number within bounds
      let randomValues = new Uint32Array(2);
      if (typeof window === "undefined") {
         randomValues = NumberToUint32Array (Math.random ());         
      }
      else {
         window.crypto.getRandomValues(randomValues);         
      }

      const secureRandom = min + (randomValues[0] % (max - min + 1));   
      const secureRandomArray = new Array<number>();
      secureRandomArray.push (secureRandom);

      // Encode as UTF-8
      const utf8Encoder = new TextEncoder();
      const utf8Array = utf8Encoder.encode(
        String.fromCharCode.apply(null, secureRandomArray)
      );

      let utf8NumberArray = Array.from(utf8Array);

      // Base64 encode the UTF-8 data     
      return btoa(String.fromCharCode.apply(null, utf8NumberArray)
        .replace(/\+/g, '-')
        .replace(/\//g, '_')
        .replace(/=+$/, ''));
   }      

   couldBeAKey(key: string): boolean {
      return looksLikeUuid (key);
   }

   saveSecret(secret: string): void {

      if (typeof localStorage === 'undefined') {
         mockStoredSecret = secret;
      }
      else {
         localStorage.setItem('secret', secret);
      }
   }

   matchesSavedSecret (secret: string): boolean {

      var stored;

      if (typeof localStorage === 'undefined') {
         stored = mockStoredSecret;
      }
      else {      
         stored = localStorage.getItem('secret');
      }

      return (stored === secret);
   }

   haveSavedSecret  () : boolean {
      var stored;

      if (typeof localStorage === 'undefined') {
         stored = mockStoredSecret;
      }
      else {      
         stored = localStorage.getItem('secret');
      }

      return stored !== null;
   }

   savedSecret  () : string {
      var stored : string;

      if (typeof localStorage === 'undefined') {
         stored = mockStoredSecret;
      }
      else {      
         let fromStorage = localStorage.getItem('secret');
         throwIfNull (fromStorage);
         stored = fromStorage;
      }

      return stored;
   } 

}

function generateUUID() { // Public Domain/MIT

    var d = new Date().getTime();//Timestamp
    var d2 = ((typeof performance !== 'undefined') && performance.now && (performance.now()*1000)) || 0;//Time in microseconds since page-load or 0 if unsupported
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random() * 16;//random number between 0 and 16
        if(d > 0){//Use timestamp until depleted
            r = (d + r)%16 | 0;
            d = Math.floor(d/16);
        } else {//Use microseconds since page-load if supported
            r = (d2 + r)%16 | 0;
            d2 = Math.floor(d2/16);
        }
        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
    });
}

function uuid(): string {

   var newUuid: string = "";
   
   // Check if Blob is supported in Browser as it is not supported in some Safari versions
   if (typeof Blob !== "undefined") {

      let url = URL.createObjectURL(new Blob());
      URL.revokeObjectURL(url);

      if (typeof window === 'undefined') {
         newUuid = url.split(":")[2];
      }
      else {
         switch (window.location.protocol) {
            case 'file:':
               newUuid = url.split("/")[1];
               break;
            case 'http:':
            case 'https:':
            default:
               newUuid = url.split("/")[3];
               break;
         }
      }
   }
   else {

      newUuid = generateUUID();
   }
   
   if (newUuid.length == 0)
      throw new EnvironmentError("Error creating UUID.");

   return newUuid;
}

export function looksLikeUuid(uuid: string): boolean {

   let split = uuid.split('-');

   if ((uuid.length == 36) && (split.length == 5)) {
      return true;
   }

   return false;
}
****************************************

****************************************
Boxer\coverage\ActivityRecord.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for ActivityRecord.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> ActivityRecord.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">96.2% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>76/79</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">90% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>36/40</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">95% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>19/20</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">96.2% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>76/79</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a>
<a name='L94'></a><a href='#L94'>94</a>
<a name='L95'></a><a href='#L95'>95</a>
<a name='L96'></a><a href='#L96'>96</a>
<a name='L97'></a><a href='#L97'>97</a>
<a name='L98'></a><a href='#L98'>98</a>
<a name='L99'></a><a href='#L99'>99</a>
<a name='L100'></a><a href='#L100'>100</a>
<a name='L101'></a><a href='#L101'>101</a>
<a name='L102'></a><a href='#L102'>102</a>
<a name='L103'></a><a href='#L103'>103</a>
<a name='L104'></a><a href='#L104'>104</a>
<a name='L105'></a><a href='#L105'>105</a>
<a name='L106'></a><a href='#L106'>106</a>
<a name='L107'></a><a href='#L107'>107</a>
<a name='L108'></a><a href='#L108'>108</a>
<a name='L109'></a><a href='#L109'>109</a>
<a name='L110'></a><a href='#L110'>110</a>
<a name='L111'></a><a href='#L111'>111</a>
<a name='L112'></a><a href='#L112'>112</a>
<a name='L113'></a><a href='#L113'>113</a>
<a name='L114'></a><a href='#L114'>114</a>
<a name='L115'></a><a href='#L115'>115</a>
<a name='L116'></a><a href='#L116'>116</a>
<a name='L117'></a><a href='#L117'>117</a>
<a name='L118'></a><a href='#L118'>118</a>
<a name='L119'></a><a href='#L119'>119</a>
<a name='L120'></a><a href='#L120'>120</a>
<a name='L121'></a><a href='#L121'>121</a>
<a name='L122'></a><a href='#L122'>122</a>
<a name='L123'></a><a href='#L123'>123</a>
<a name='L124'></a><a href='#L124'>124</a>
<a name='L125'></a><a href='#L125'>125</a>
<a name='L126'></a><a href='#L126'>126</a>
<a name='L127'></a><a href='#L127'>127</a>
<a name='L128'></a><a href='#L128'>128</a>
<a name='L129'></a><a href='#L129'>129</a>
<a name='L130'></a><a href='#L130'>130</a>
<a name='L131'></a><a href='#L131'>131</a>
<a name='L132'></a><a href='#L132'>132</a>
<a name='L133'></a><a href='#L133'>133</a>
<a name='L134'></a><a href='#L134'>134</a>
<a name='L135'></a><a href='#L135'>135</a>
<a name='L136'></a><a href='#L136'>136</a>
<a name='L137'></a><a href='#L137'>137</a>
<a name='L138'></a><a href='#L138'>138</a>
<a name='L139'></a><a href='#L139'>139</a>
<a name='L140'></a><a href='#L140'>140</a>
<a name='L141'></a><a href='#L141'>141</a>
<a name='L142'></a><a href='#L142'>142</a>
<a name='L143'></a><a href='#L143'>143</a>
<a name='L144'></a><a href='#L144'>144</a>
<a name='L145'></a><a href='#L145'>145</a>
<a name='L146'></a><a href='#L146'>146</a>
<a name='L147'></a><a href='#L147'>147</a>
<a name='L148'></a><a href='#L148'>148</a>
<a name='L149'></a><a href='#L149'>149</a>
<a name='L150'></a><a href='#L150'>150</a>
<a name='L151'></a><a href='#L151'>151</a>
<a name='L152'></a><a href='#L152'>152</a>
<a name='L153'></a><a href='#L153'>153</a>
<a name='L154'></a><a href='#L154'>154</a>
<a name='L155'></a><a href='#L155'>155</a>
<a name='L156'></a><a href='#L156'>156</a>
<a name='L157'></a><a href='#L157'>157</a>
<a name='L158'></a><a href='#L158'>158</a>
<a name='L159'></a><a href='#L159'>159</a>
<a name='L160'></a><a href='#L160'>160</a>
<a name='L161'></a><a href='#L161'>161</a>
<a name='L162'></a><a href='#L162'>162</a>
<a name='L163'></a><a href='#L163'>163</a>
<a name='L164'></a><a href='#L164'>164</a>
<a name='L165'></a><a href='#L165'>165</a>
<a name='L166'></a><a href='#L166'>166</a>
<a name='L167'></a><a href='#L167'>167</a>
<a name='L168'></a><a href='#L168'>168</a>
<a name='L169'></a><a href='#L169'>169</a>
<a name='L170'></a><a href='#L170'>170</a>
<a name='L171'></a><a href='#L171'>171</a>
<a name='L172'></a><a href='#L172'>172</a>
<a name='L173'></a><a href='#L173'>173</a>
<a name='L174'></a><a href='#L174'>174</a>
<a name='L175'></a><a href='#L175'>175</a>
<a name='L176'></a><a href='#L176'>176</a>
<a name='L177'></a><a href='#L177'>177</a>
<a name='L178'></a><a href='#L178'>178</a>
<a name='L179'></a><a href='#L179'>179</a>
<a name='L180'></a><a href='#L180'>180</a>
<a name='L181'></a><a href='#L181'>181</a>
<a name='L182'></a><a href='#L182'>182</a>
<a name='L183'></a><a href='#L183'>183</a>
<a name='L184'></a><a href='#L184'>184</a>
<a name='L185'></a><a href='#L185'>185</a>
<a name='L186'></a><a href='#L186'>186</a>
<a name='L187'></a><a href='#L187'>187</a>
<a name='L188'></a><a href='#L188'>188</a>
<a name='L189'></a><a href='#L189'>189</a>
<a name='L190'></a><a href='#L190'>190</a>
<a name='L191'></a><a href='#L191'>191</a>
<a name='L192'></a><a href='#L192'>192</a>
<a name='L193'></a><a href='#L193'>193</a>
<a name='L194'></a><a href='#L194'>194</a>
<a name='L195'></a><a href='#L195'>195</a>
<a name='L196'></a><a href='#L196'>196</a>
<a name='L197'></a><a href='#L197'>197</a>
<a name='L198'></a><a href='#L198'>198</a>
<a name='L199'></a><a href='#L199'>199</a>
<a name='L200'></a><a href='#L200'>200</a>
<a name='L201'></a><a href='#L201'>201</a>
<a name='L202'></a><a href='#L202'>202</a>
<a name='L203'></a><a href='#L203'>203</a>
<a name='L204'></a><a href='#L204'>204</a>
<a name='L205'></a><a href='#L205'>205</a>
<a name='L206'></a><a href='#L206'>206</a>
<a name='L207'></a><a href='#L207'>207</a>
<a name='L208'></a><a href='#L208'>208</a>
<a name='L209'></a><a href='#L209'>209</a>
<a name='L210'></a><a href='#L210'>210</a>
<a name='L211'></a><a href='#L211'>211</a>
<a name='L212'></a><a href='#L212'>212</a>
<a name='L213'></a><a href='#L213'>213</a>
<a name='L214'></a><a href='#L214'>214</a>
<a name='L215'></a><a href='#L215'>215</a>
<a name='L216'></a><a href='#L216'>216</a>
<a name='L217'></a><a href='#L217'>217</a>
<a name='L218'></a><a href='#L218'>218</a>
<a name='L219'></a><a href='#L219'>219</a>
<a name='L220'></a><a href='#L220'>220</a>
<a name='L221'></a><a href='#L221'>221</a>
<a name='L222'></a><a href='#L222'>222</a>
<a name='L223'></a><a href='#L223'>223</a>
<a name='L224'></a><a href='#L224'>224</a>
<a name='L225'></a><a href='#L225'>225</a>
<a name='L226'></a><a href='#L226'>226</a>
<a name='L227'></a><a href='#L227'>227</a>
<a name='L228'></a><a href='#L228'>228</a>
<a name='L229'></a><a href='#L229'>229</a>
<a name='L230'></a><a href='#L230'>230</a>
<a name='L231'></a><a href='#L231'>231</a>
<a name='L232'></a><a href='#L232'>232</a>
<a name='L233'></a><a href='#L233'>233</a>
<a name='L234'></a><a href='#L234'>234</a>
<a name='L235'></a><a href='#L235'>235</a>
<a name='L236'></a><a href='#L236'>236</a>
<a name='L237'></a><a href='#L237'>237</a>
<a name='L238'></a><a href='#L238'>238</a>
<a name='L239'></a><a href='#L239'>239</a>
<a name='L240'></a><a href='#L240'>240</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">65x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">65x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">53x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">49x</span>
<span class="cline-any cline-yes">49x</span>
<span class="cline-any cline-yes">49x</span>
<span class="cline-any cline-yes">49x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">53x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">52x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">51x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">50x</span>
<span class="cline-any cline-yes">50x</span>
<span class="cline-any cline-yes">50x</span>
<span class="cline-any cline-yes">50x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">25x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">25x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">27x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">25x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">33x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">25x</span>
<span class="cline-any cline-yes">25x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">25x</span>
<span class="cline-any cline-yes">24x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">8x</span>
<span class="cline-any cline-yes">8x</span>
<span class="cline-any cline-yes">8x</span>
<span class="cline-any cline-yes">8x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">8x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">58x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">57x</span>
<span class="cline-any cline-yes">55x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">52x</span>
<span class="cline-any cline-yes">7x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">45x</span>
<span class="cline-any cline-yes">44x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">56x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">54x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">69x</span>
<span class="cline-any cline-yes">69x</span>
<span class="cline-any cline-yes">69x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
&nbsp;
import { InvalidParameterError } from './Errors';
import { MDynamicStreamable, DynamicStreamableFactory } from "./StreamingFramework";
import { getDefaultKeyGenerator } from './IKeyGeneratorFactory'; 
&nbsp;
const activityRecordClassName = "ActivityRecord";
const keyGenerator = getDefaultKeyGenerator();
&nbsp;
// ActivityRecord - conversation ID, email of a person and a datestamp. Will have many derived classes according to different activity types. 
export class ActivityRecord extends MDynamicStreamable {
   private _id: string | undefined;
   private _conversationId: string | undefined;
   private _email: string;
   private _happenedAt: Date;
&nbsp;
   /**
    * Create an empty ActivityRecord object - required for particiation in serialisation framework
    */
   public constructor();
&nbsp;
   /**
    * Create a ActivityRecord object
    * @param id_ - id to use to generate uniqueness 
    * @param email_ - plain text email.
    * @param conversationId_ - ID of the conversation in which the event occurred
    * @param happenedAt_ - timestamp for last interaction seen by the framework
    */
   public constructor(id_: string | undefined, conversationId_: string | undefined, email_: string, happenedAt_: Date);
&nbsp;
   /**
    * Create a ActivityRecord object
    * @param activityRecord - object to copy from - should work for JSON format and for real constructed objects
    */
   public constructor(activityRecord: ActivityRecord);
&nbsp;
   public constructor(...arr: any[])
   {
&nbsp;
      super();
&nbsp;
      if (arr.length === 0) {
         this._id = keyGenerator.generateKey(); // A new ActivityRecord has a key
         this._conversationId = undefined;
         this._email = "";     // But not a name 
         this._happenedAt = ActivityRecord.makeDateUTC (new Date());
         return;
      }
&nbsp;
      var localId: string;
      var localConversationId; 
      var localEmail: string;
      var localHappenedAt: Date;
&nbsp;
      if (arr.length === 1) {
         localId = arr[0]._id;
         localConversationId = arr[0]._conversationId;
         localEmail = arr[0]._email;
         localHappenedAt = new Date(arr[0]._happenedAt);
      }
      else { 
         localId = arr[0];
         localConversationId = arr[1];         
         localEmail = arr[2];
         localHappenedAt = new Date (arr[3]);
      }
&nbsp;
      if (!ActivityRecord.isValidId(localId)) {
         throw new InvalidParameterError("iD:" + localId + '.');
      }    
      if (!ActivityRecord.isValidConversationId(localConversationId)) {
         throw new InvalidParameterError("conversationId:" + localConversationId + '.');
      }        
      if (!ActivityRecord.isValidEmail(localEmail)) {
         throw new InvalidParameterError("email:" + localEmail + '.');
      }
&nbsp;
      this._id = localId;
      this._conversationId = localConversationId;
      this._email = localEmail;
      this._happenedAt = ActivityRecord.makeDateUTC (localHappenedAt);     
   }
&nbsp;
   /**
    * Dynamic creation for Streaming framework
    */
   className(): string {
&nbsp;
      return activityRecordClassName;
   }
&nbsp;
   static createDynamicInstance(): MDynamicStreamable {
      return new ActivityRecord();
   }
&nbsp;
   static _dynamicStreamableFactory: DynamicStreamableFactory = new DynamicStreamableFactory(activityRecordClassName, ActivityRecord.createDynamicInstance);
   streamOut(): string {
&nbsp;
      return JSON.stringify({ id: this._id, conversationId: this._conversationId, email: this._email, 
         happenedAt: this._happenedAt.toUTCString() });   // US UTC as Cosmos DB does not really understand dates. 
   }
&nbsp;
   streamIn(stream: string): void {
&nbsp;
      const obj = JSON.parse(stream);
&nbsp;
      this.assign(new ActivityRecord (obj.id, obj.conversationId, obj.email, new Date(obj.happenedAt)));
   }
&nbsp;
   /**
   * set of 'getters' for private variables
   */
   get id(): string | undefined {
      return this._id;
   }
   get conversationId(): string | undefined {
      return this._conversationId;
   }   
   get email(): string {
      return this._email;
   }
   get happenedAt(): Date {
      return this._happenedAt;
   }
&nbsp;
   /**
   * set of 'setters' for private variables
   */
   set id(id_: string) {
&nbsp;
      if (!ActivityRecord.isValidId(id_)) {
         throw new InvalidParameterError("Id:" + id_ + '.');
      }         
      this._id = id_;
   }
&nbsp;
<span class="fstat-no" title="function not covered" >   set c</span>onversationId(conversationId_: string) {
         
<span class="cstat-no" title="statement not covered" >      if (!ActivityRecord.isValidConversationId(conversationId_)) {</span>
<span class="cstat-no" title="statement not covered" >         throw new InvalidParameterError("conversationId:" + conversationId_ + '.');</span>
      }        
<span class="cstat-no" title="statement not covered" >      this._conversationId = conversationId_;</span>
   }
&nbsp;
   set email (email_: string) {
      if (!ActivityRecord.isValidEmail(email_)) {
         throw new InvalidParameterError("Email:" + email_ + '.');
      }
&nbsp;
      this._email = email_;
   }
&nbsp;
   set happenedAt(happenedAt_: Date) {
&nbsp;
      this._happenedAt = ActivityRecord.makeDateUTC (happenedAt_);
   }
&nbsp;
   /**
    * test for equality - checks all fields are the same. 
    * Uses field values, not identity bcs if objects are streamed to/from JSON, field identities will be different. 
    * @param rhs - the object to compare this one to.  
    */
   equals(rhs: ActivityRecord): boolean {
      return ((((typeof this._id === "undefined") &amp;&amp; (<span class="branch-1 cbranch-no" title="branch not covered" >typeof rhs._id === "undefined")</span>) || (this._id === rhs._id)) &amp;&amp;
         (((typeof this._conversationId === "undefined") &amp;&amp; (<span class="branch-4 cbranch-no" title="branch not covered" >typeof rhs._conversationId === "undefined")</span>) || (this._conversationId === rhs._conversationId)) &amp;&amp;      
         (this._email === rhs._email) &amp;&amp;
         (this.areSameDate (this._happenedAt, rhs._happenedAt)));
   }
&nbsp;
   areSameDate (lhs: Date, rhs : Date) : boolean {
&nbsp;
      let l = lhs.getTime();
      let r = rhs.getTime();
&nbsp;
      if (l === r) {
         return true;
      }
      return false;
   }
&nbsp;
   /**
    * assignment operator 
    * @param rhs - the object to assign this one from.  
    */
   assign(rhs: ActivityRecord): ActivityRecord {
      this._id = rhs._id;
      this._conversationId = rhs._conversationId;
      this._email = rhs._email;
      this._happenedAt = new Date (rhs._happenedAt);
&nbsp;
      return this;
   }
&nbsp;
   /**
    * test for valid id 
    * @param id - the string to test
    */
   static isValidId(id_: string): boolean {
      if (!id_) // undefined keys are allowed if user object has not been originated from or saved anywhere persistent
         return true;
&nbsp;
      if (id_ &amp;&amp; id_.length &gt; 0) // if the id exists, must be &gt; zero length
         return true;
&nbsp;
      return (false);
   }
&nbsp;
   /**
    * test for valid id 
    * @param id - the string to test
    */
   static isValidConversationId(conversationId_: string): boolean {
      if (!conversationId_) // undefined keys are allowed if user object has not been originated from or saved anywhere persistent
         return true;
&nbsp;
      if (conversationId_ &amp;&amp; conversationId_.length &gt; 0) // if the id exists, must be &gt; zero length
         return true;
&nbsp;
      return (false);
   }
&nbsp;
   /**
    * test for valid email 
    * @param email - the string to test
    */
   static isValidEmail(email: string): boolean {
&nbsp;
      if (email == undefined)
         return false;
&nbsp;
      return true; // Currently allow anything, even empty string. 
   }
&nbsp;
   static makeDateUTC(rhs: Date) : Date {
      let d = new Date (rhs);
      d.setMilliseconds(0); // MSecs are not used in UTC, and Cosmos DB recommends UTC
      return d;
   }
}
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\ActivityRecordLikeUnlike.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for ActivityRecordLikeUnlike.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> ActivityRecordLikeUnlike.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>27/27</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>6/6</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>10/10</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>27/27</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a>
<a name='L94'></a><a href='#L94'>94</a>
<a name='L95'></a><a href='#L95'>95</a>
<a name='L96'></a><a href='#L96'>96</a>
<a name='L97'></a><a href='#L97'>97</a>
<a name='L98'></a><a href='#L98'>98</a>
<a name='L99'></a><a href='#L99'>99</a>
<a name='L100'></a><a href='#L100'>100</a>
<a name='L101'></a><a href='#L101'>101</a>
<a name='L102'></a><a href='#L102'>102</a>
<a name='L103'></a><a href='#L103'>103</a>
<a name='L104'></a><a href='#L104'>104</a>
<a name='L105'></a><a href='#L105'>105</a>
<a name='L106'></a><a href='#L106'>106</a>
<a name='L107'></a><a href='#L107'>107</a>
<a name='L108'></a><a href='#L108'>108</a>
<a name='L109'></a><a href='#L109'>109</a>
<a name='L110'></a><a href='#L110'>110</a>
<a name='L111'></a><a href='#L111'>111</a>
<a name='L112'></a><a href='#L112'>112</a>
<a name='L113'></a><a href='#L113'>113</a>
<a name='L114'></a><a href='#L114'>114</a>
<a name='L115'></a><a href='#L115'>115</a>
<a name='L116'></a><a href='#L116'>116</a>
<a name='L117'></a><a href='#L117'>117</a>
<a name='L118'></a><a href='#L118'>118</a>
<a name='L119'></a><a href='#L119'>119</a>
<a name='L120'></a><a href='#L120'>120</a>
<a name='L121'></a><a href='#L121'>121</a>
<a name='L122'></a><a href='#L122'>122</a>
<a name='L123'></a><a href='#L123'>123</a>
<a name='L124'></a><a href='#L124'>124</a>
<a name='L125'></a><a href='#L125'>125</a>
<a name='L126'></a><a href='#L126'>126</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">8x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
&nbsp;
import { InvalidParameterError } from './Errors';
import { MDynamicStreamable, DynamicStreamableFactory } from "./StreamingFramework";
import { UrlActivityRecord } from './ActivityRecordUrl';
&nbsp;
const likeUnlikeActivityRecordClassName = "LikeUnlikeActivityRecord";
&nbsp;
// ActivityRecord - activity details plus the URL they clicked on 
export class LikeUnlikeActivityRecord extends UrlActivityRecord {
   private _like: boolean;
&nbsp;
   /**
    * Create an empty LikeUnlikeActivityRecord object - required for particiation in serialisation framework
    */
   public constructor();
&nbsp;
   /**
    * Create a LikeDislikeActivityRecord object
    * @param id_ - id to use to generate uniqueness 
    * @param conversationId_ - ID of the conversation in which the event occurred
    * @param email_ - plain text email.
    * @param happenedAt_ - timestamp for last interaction seen by the framework
    * @param url_ - the URL that was interacted with
    * @param like_ - true if it was a like, false for a dislike. defaults to true. 
    */
   public constructor(id_: string | undefined, conversationId_: string | undefined, email_: string, happenedAt_: Date, url_: string, like_: boolean);
&nbsp;
   /**
    * Create a LikeDislikeActivityRecord object
    * @param activityRecord - object to copy from - should work for JSON format and for real constructed objects
    */
   public constructor(activityRecord: LikeUnlikeActivityRecord);
&nbsp;
   public constructor(...arr: any[])
   {
&nbsp;
      if (arr.length === 0) {
         super();         
         this._like = true;     // default to true
         return;
      }
&nbsp;
      var localLike: boolean;
&nbsp;
      if (arr.length === 1) {         
         super(arr[0]);
         localLike = arr[0].like;
      }
      else { 
         super(arr[0], arr[1], arr[2], arr[3], arr[4]);         
         localLike = arr[5];
      }
&nbsp;
      this._like = localLike;
   }
&nbsp;
   /**
    * Dynamic creation for Streaming framework
    */
   className(): string {
&nbsp;
      return likeUnlikeActivityRecordClassName;
   }
&nbsp;
   static className(): string {
&nbsp;
      return likeUnlikeActivityRecordClassName;
   }
&nbsp;
   static createDynamicInstance(): MDynamicStreamable {
      return new LikeUnlikeActivityRecord();
   }
&nbsp;
   static _dynamicStreamableFactory: DynamicStreamableFactory = new DynamicStreamableFactory(likeUnlikeActivityRecordClassName, LikeUnlikeActivityRecord.createDynamicInstance);
   streamOut(): string {
&nbsp;
      return JSON.stringify({ id: this.id, conversationId: this.conversationId, email: this.email, happenedAt: this.happenedAt, url: this.url, like: this._like});
   }
&nbsp;
   streamIn(stream: string): void {
&nbsp;
      const obj = JSON.parse(stream);
&nbsp;
      this.assign(new LikeUnlikeActivityRecord (obj.id, obj.conversationId, obj.email, new Date(obj.happenedAt), obj.url, obj.like));
   }
&nbsp;
   /**
   * set of 'getters' for private variables
   */
   get like(): boolean {
      return this._like;
   }
&nbsp;
   /**
   * set of 'setters' for private variables
   */
&nbsp;
   set like (like_: boolean) {
&nbsp;
      this._like = like_;
   }
&nbsp;
   /**
    * test for equality - checks all fields are the same. 
    * Uses field values, not identity bcs if objects are streamed to/from JSON, field identities will be different. 
    * @param rhs - the object to compare this one to.  
    */
   equals(rhs: LikeUnlikeActivityRecord): boolean {
      return (super.equals (rhs) &amp;&amp; 
         (this._like === rhs._like));
   }
&nbsp;
&nbsp;
   /**
    * assignment operator 
    * @param rhs - the object to assign this one from.  
    */
   assign(rhs: LikeUnlikeActivityRecord): LikeUnlikeActivityRecord {
      super.assign (rhs);
      this._like = rhs._like;
&nbsp;
      return this;
   }
}
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\ActivityRecordUrl.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for ActivityRecordUrl.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> ActivityRecordUrl.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>35/35</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>12/12</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>11/11</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>35/35</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a>
<a name='L94'></a><a href='#L94'>94</a>
<a name='L95'></a><a href='#L95'>95</a>
<a name='L96'></a><a href='#L96'>96</a>
<a name='L97'></a><a href='#L97'>97</a>
<a name='L98'></a><a href='#L98'>98</a>
<a name='L99'></a><a href='#L99'>99</a>
<a name='L100'></a><a href='#L100'>100</a>
<a name='L101'></a><a href='#L101'>101</a>
<a name='L102'></a><a href='#L102'>102</a>
<a name='L103'></a><a href='#L103'>103</a>
<a name='L104'></a><a href='#L104'>104</a>
<a name='L105'></a><a href='#L105'>105</a>
<a name='L106'></a><a href='#L106'>106</a>
<a name='L107'></a><a href='#L107'>107</a>
<a name='L108'></a><a href='#L108'>108</a>
<a name='L109'></a><a href='#L109'>109</a>
<a name='L110'></a><a href='#L110'>110</a>
<a name='L111'></a><a href='#L111'>111</a>
<a name='L112'></a><a href='#L112'>112</a>
<a name='L113'></a><a href='#L113'>113</a>
<a name='L114'></a><a href='#L114'>114</a>
<a name='L115'></a><a href='#L115'>115</a>
<a name='L116'></a><a href='#L116'>116</a>
<a name='L117'></a><a href='#L117'>117</a>
<a name='L118'></a><a href='#L118'>118</a>
<a name='L119'></a><a href='#L119'>119</a>
<a name='L120'></a><a href='#L120'>120</a>
<a name='L121'></a><a href='#L121'>121</a>
<a name='L122'></a><a href='#L122'>122</a>
<a name='L123'></a><a href='#L123'>123</a>
<a name='L124'></a><a href='#L124'>124</a>
<a name='L125'></a><a href='#L125'>125</a>
<a name='L126'></a><a href='#L126'>126</a>
<a name='L127'></a><a href='#L127'>127</a>
<a name='L128'></a><a href='#L128'>128</a>
<a name='L129'></a><a href='#L129'>129</a>
<a name='L130'></a><a href='#L130'>130</a>
<a name='L131'></a><a href='#L131'>131</a>
<a name='L132'></a><a href='#L132'>132</a>
<a name='L133'></a><a href='#L133'>133</a>
<a name='L134'></a><a href='#L134'>134</a>
<a name='L135'></a><a href='#L135'>135</a>
<a name='L136'></a><a href='#L136'>136</a>
<a name='L137'></a><a href='#L137'>137</a>
<a name='L138'></a><a href='#L138'>138</a>
<a name='L139'></a><a href='#L139'>139</a>
<a name='L140'></a><a href='#L140'>140</a>
<a name='L141'></a><a href='#L141'>141</a>
<a name='L142'></a><a href='#L142'>142</a>
<a name='L143'></a><a href='#L143'>143</a>
<a name='L144'></a><a href='#L144'>144</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">33x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">27x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">25x</span>
<span class="cline-any cline-yes">25x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">27x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">25x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">8x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">16x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">16x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">31x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">27x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
&nbsp;
import { InvalidParameterError } from './Errors';
import { MDynamicStreamable, DynamicStreamableFactory } from "./StreamingFramework";
import { ActivityRecord} from './ActivityRecord';
&nbsp;
const urlActivityRecordClassName = "UrlActivityRecord";
&nbsp;
// ActivityRecord - activity details plus the URL they clicked on 
export class UrlActivityRecord extends ActivityRecord {
   private _url: string;
&nbsp;
   /**
    * Create an empty UrlActivityRecord object - required for particiation in serialisation framework
    */
   public constructor();
&nbsp;
   /**
    * Create a UrlActivityRecord object
    * @param id_ - id to use to generate uniqueness 
    * @param conversationId_ - ID of the conversation in which the event occurred
    * @param email_ - plain text email.
    * @param happenedAt_ - timestamp for last interaction seen by the framework
    * @param url_ - the URL that was interacted with
    */
   public constructor(id_: string | undefined, conversationId_: string | undefined, email_: string, happenedAt_: Date, url_: string);
&nbsp;
   /**
    * Create a UrlActivityRecord object
    * @param urlActivityRecord - object to copy from - should work for JSON format and for real constructed objects
    */
   public constructor(urlActivityRecord: UrlActivityRecord);
&nbsp;
   public constructor(...arr: any[])
   {
&nbsp;
      if (arr.length === 0) {
         super();         
         this._url = "";     // null URL is OK
         return;
      }
&nbsp;
      var localUrl: string;
&nbsp;
      if (arr.length === 1) {         
         super(arr[0]);
         localUrl = arr[0].url;
      }
      else { 
         super(arr[0], arr[1], arr[2], arr[3]);         
         localUrl = arr[4];
      }
&nbsp;
      if (!UrlActivityRecord.isValidUrl(localUrl)) {
         throw new InvalidParameterError("Url:" + localUrl + '.');
      }
&nbsp;
      this._url = localUrl;
   }
&nbsp;
   /**
    * Dynamic creation for Streaming framework
    */
   className(): string {
&nbsp;
      return urlActivityRecordClassName;
   }
&nbsp;
   static className(): string {
&nbsp;
      return urlActivityRecordClassName;
   }
&nbsp;
   static createDynamicInstance(): MDynamicStreamable {
      return new UrlActivityRecord();
   }
&nbsp;
   static _dynamicStreamableFactory: DynamicStreamableFactory = new DynamicStreamableFactory(urlActivityRecordClassName, UrlActivityRecord.createDynamicInstance);
   streamOut(): string {
&nbsp;
      return JSON.stringify({ id: this.id, conversationId: this.conversationId, email: this.email, happenedAt: this.happenedAt, url: this._url});
   }
&nbsp;
   streamIn(stream: string): void {
&nbsp;
      const obj = JSON.parse(stream);
&nbsp;
      this.assign(new UrlActivityRecord (obj.id, obj.conversationId, obj.email, new Date(obj.happenedAt), obj.url));
   }
&nbsp;
   /**
   * set of 'getters' for private variables
   */
   get url(): string {
      return this._url;
   }
&nbsp;
   /**
   * set of 'setters' for private variables
   */
&nbsp;
   set url (url_: string) {
      if (!UrlActivityRecord.isValidUrl(url_)) {
         throw new InvalidParameterError("Url:" + url_ + '.');
      }
&nbsp;
      this._url = url_;
   }
&nbsp;
   /**
    * test for equality - checks all fields are the same. 
    * Uses field values, not identity bcs if objects are streamed to/from JSON, field identities will be different. 
    * @param rhs - the object to compare this one to.  
    */
   equals(rhs: UrlActivityRecord): boolean {
      return (super.equals (rhs) &amp;&amp; 
         (this._url === rhs._url));
   }
&nbsp;
&nbsp;
   /**
    * assignment operator 
    * @param rhs - the object to assign this one from.  
    */
   assign(rhs: UrlActivityRecord): UrlActivityRecord {
      super.assign (rhs);
      this._url = rhs._url;
&nbsp;
      return this;
   }
&nbsp;
   /**
    * test for valid url 
    * @param url_ - the string to test
    */
   static isValidUrl(url_: string): boolean {
&nbsp;
      if (url_ == undefined)
         return false;
&nbsp;
      return true; // Currently allow anything, even empty string. 
   }
}
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\ActivityRepositoryCosmos.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for ActivityRepositoryCosmos.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> ActivityRepositoryCosmos.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">81.81% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>72/88</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">47.36% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>9/19</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">68.18% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>15/22</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">81.6% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>71/87</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a>
<a name='L94'></a><a href='#L94'>94</a>
<a name='L95'></a><a href='#L95'>95</a>
<a name='L96'></a><a href='#L96'>96</a>
<a name='L97'></a><a href='#L97'>97</a>
<a name='L98'></a><a href='#L98'>98</a>
<a name='L99'></a><a href='#L99'>99</a>
<a name='L100'></a><a href='#L100'>100</a>
<a name='L101'></a><a href='#L101'>101</a>
<a name='L102'></a><a href='#L102'>102</a>
<a name='L103'></a><a href='#L103'>103</a>
<a name='L104'></a><a href='#L104'>104</a>
<a name='L105'></a><a href='#L105'>105</a>
<a name='L106'></a><a href='#L106'>106</a>
<a name='L107'></a><a href='#L107'>107</a>
<a name='L108'></a><a href='#L108'>108</a>
<a name='L109'></a><a href='#L109'>109</a>
<a name='L110'></a><a href='#L110'>110</a>
<a name='L111'></a><a href='#L111'>111</a>
<a name='L112'></a><a href='#L112'>112</a>
<a name='L113'></a><a href='#L113'>113</a>
<a name='L114'></a><a href='#L114'>114</a>
<a name='L115'></a><a href='#L115'>115</a>
<a name='L116'></a><a href='#L116'>116</a>
<a name='L117'></a><a href='#L117'>117</a>
<a name='L118'></a><a href='#L118'>118</a>
<a name='L119'></a><a href='#L119'>119</a>
<a name='L120'></a><a href='#L120'>120</a>
<a name='L121'></a><a href='#L121'>121</a>
<a name='L122'></a><a href='#L122'>122</a>
<a name='L123'></a><a href='#L123'>123</a>
<a name='L124'></a><a href='#L124'>124</a>
<a name='L125'></a><a href='#L125'>125</a>
<a name='L126'></a><a href='#L126'>126</a>
<a name='L127'></a><a href='#L127'>127</a>
<a name='L128'></a><a href='#L128'>128</a>
<a name='L129'></a><a href='#L129'>129</a>
<a name='L130'></a><a href='#L130'>130</a>
<a name='L131'></a><a href='#L131'>131</a>
<a name='L132'></a><a href='#L132'>132</a>
<a name='L133'></a><a href='#L133'>133</a>
<a name='L134'></a><a href='#L134'>134</a>
<a name='L135'></a><a href='#L135'>135</a>
<a name='L136'></a><a href='#L136'>136</a>
<a name='L137'></a><a href='#L137'>137</a>
<a name='L138'></a><a href='#L138'>138</a>
<a name='L139'></a><a href='#L139'>139</a>
<a name='L140'></a><a href='#L140'>140</a>
<a name='L141'></a><a href='#L141'>141</a>
<a name='L142'></a><a href='#L142'>142</a>
<a name='L143'></a><a href='#L143'>143</a>
<a name='L144'></a><a href='#L144'>144</a>
<a name='L145'></a><a href='#L145'>145</a>
<a name='L146'></a><a href='#L146'>146</a>
<a name='L147'></a><a href='#L147'>147</a>
<a name='L148'></a><a href='#L148'>148</a>
<a name='L149'></a><a href='#L149'>149</a>
<a name='L150'></a><a href='#L150'>150</a>
<a name='L151'></a><a href='#L151'>151</a>
<a name='L152'></a><a href='#L152'>152</a>
<a name='L153'></a><a href='#L153'>153</a>
<a name='L154'></a><a href='#L154'>154</a>
<a name='L155'></a><a href='#L155'>155</a>
<a name='L156'></a><a href='#L156'>156</a>
<a name='L157'></a><a href='#L157'>157</a>
<a name='L158'></a><a href='#L158'>158</a>
<a name='L159'></a><a href='#L159'>159</a>
<a name='L160'></a><a href='#L160'>160</a>
<a name='L161'></a><a href='#L161'>161</a>
<a name='L162'></a><a href='#L162'>162</a>
<a name='L163'></a><a href='#L163'>163</a>
<a name='L164'></a><a href='#L164'>164</a>
<a name='L165'></a><a href='#L165'>165</a>
<a name='L166'></a><a href='#L166'>166</a>
<a name='L167'></a><a href='#L167'>167</a>
<a name='L168'></a><a href='#L168'>168</a>
<a name='L169'></a><a href='#L169'>169</a>
<a name='L170'></a><a href='#L170'>170</a>
<a name='L171'></a><a href='#L171'>171</a>
<a name='L172'></a><a href='#L172'>172</a>
<a name='L173'></a><a href='#L173'>173</a>
<a name='L174'></a><a href='#L174'>174</a>
<a name='L175'></a><a href='#L175'>175</a>
<a name='L176'></a><a href='#L176'>176</a>
<a name='L177'></a><a href='#L177'>177</a>
<a name='L178'></a><a href='#L178'>178</a>
<a name='L179'></a><a href='#L179'>179</a>
<a name='L180'></a><a href='#L180'>180</a>
<a name='L181'></a><a href='#L181'>181</a>
<a name='L182'></a><a href='#L182'>182</a>
<a name='L183'></a><a href='#L183'>183</a>
<a name='L184'></a><a href='#L184'>184</a>
<a name='L185'></a><a href='#L185'>185</a>
<a name='L186'></a><a href='#L186'>186</a>
<a name='L187'></a><a href='#L187'>187</a>
<a name='L188'></a><a href='#L188'>188</a>
<a name='L189'></a><a href='#L189'>189</a>
<a name='L190'></a><a href='#L190'>190</a>
<a name='L191'></a><a href='#L191'>191</a>
<a name='L192'></a><a href='#L192'>192</a>
<a name='L193'></a><a href='#L193'>193</a>
<a name='L194'></a><a href='#L194'>194</a>
<a name='L195'></a><a href='#L195'>195</a>
<a name='L196'></a><a href='#L196'>196</a>
<a name='L197'></a><a href='#L197'>197</a>
<a name='L198'></a><a href='#L198'>198</a>
<a name='L199'></a><a href='#L199'>199</a>
<a name='L200'></a><a href='#L200'>200</a>
<a name='L201'></a><a href='#L201'>201</a>
<a name='L202'></a><a href='#L202'>202</a>
<a name='L203'></a><a href='#L203'>203</a>
<a name='L204'></a><a href='#L204'>204</a>
<a name='L205'></a><a href='#L205'>205</a>
<a name='L206'></a><a href='#L206'>206</a>
<a name='L207'></a><a href='#L207'>207</a>
<a name='L208'></a><a href='#L208'>208</a>
<a name='L209'></a><a href='#L209'>209</a>
<a name='L210'></a><a href='#L210'>210</a>
<a name='L211'></a><a href='#L211'>211</a>
<a name='L212'></a><a href='#L212'>212</a>
<a name='L213'></a><a href='#L213'>213</a>
<a name='L214'></a><a href='#L214'>214</a>
<a name='L215'></a><a href='#L215'>215</a>
<a name='L216'></a><a href='#L216'>216</a>
<a name='L217'></a><a href='#L217'>217</a>
<a name='L218'></a><a href='#L218'>218</a>
<a name='L219'></a><a href='#L219'>219</a>
<a name='L220'></a><a href='#L220'>220</a>
<a name='L221'></a><a href='#L221'>221</a>
<a name='L222'></a><a href='#L222'>222</a>
<a name='L223'></a><a href='#L223'>223</a>
<a name='L224'></a><a href='#L224'>224</a>
<a name='L225'></a><a href='#L225'>225</a>
<a name='L226'></a><a href='#L226'>226</a>
<a name='L227'></a><a href='#L227'>227</a>
<a name='L228'></a><a href='#L228'>228</a>
<a name='L229'></a><a href='#L229'>229</a>
<a name='L230'></a><a href='#L230'>230</a>
<a name='L231'></a><a href='#L231'>231</a>
<a name='L232'></a><a href='#L232'>232</a>
<a name='L233'></a><a href='#L233'>233</a>
<a name='L234'></a><a href='#L234'>234</a>
<a name='L235'></a><a href='#L235'>235</a>
<a name='L236'></a><a href='#L236'>236</a>
<a name='L237'></a><a href='#L237'>237</a>
<a name='L238'></a><a href='#L238'>238</a>
<a name='L239'></a><a href='#L239'>239</a>
<a name='L240'></a><a href='#L240'>240</a>
<a name='L241'></a><a href='#L241'>241</a>
<a name='L242'></a><a href='#L242'>242</a>
<a name='L243'></a><a href='#L243'>243</a>
<a name='L244'></a><a href='#L244'>244</a>
<a name='L245'></a><a href='#L245'>245</a>
<a name='L246'></a><a href='#L246'>246</a>
<a name='L247'></a><a href='#L247'>247</a>
<a name='L248'></a><a href='#L248'>248</a>
<a name='L249'></a><a href='#L249'>249</a>
<a name='L250'></a><a href='#L250'>250</a>
<a name='L251'></a><a href='#L251'>251</a>
<a name='L252'></a><a href='#L252'>252</a>
<a name='L253'></a><a href='#L253'>253</a>
<a name='L254'></a><a href='#L254'>254</a>
<a name='L255'></a><a href='#L255'>255</a>
<a name='L256'></a><a href='#L256'>256</a>
<a name='L257'></a><a href='#L257'>257</a>
<a name='L258'></a><a href='#L258'>258</a>
<a name='L259'></a><a href='#L259'>259</a>
<a name='L260'></a><a href='#L260'>260</a>
<a name='L261'></a><a href='#L261'>261</a>
<a name='L262'></a><a href='#L262'>262</a>
<a name='L263'></a><a href='#L263'>263</a>
<a name='L264'></a><a href='#L264'>264</a>
<a name='L265'></a><a href='#L265'>265</a>
<a name='L266'></a><a href='#L266'>266</a>
<a name='L267'></a><a href='#L267'>267</a>
<a name='L268'></a><a href='#L268'>268</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
&nbsp;
// 3rd party imports
import axios from "axios";
&nbsp;
// Internal imports
import { throwIfUndefined } from "./Asserts";
import { InvalidParameterError } from "./Errors";
import { Environment, EEnvironment } from "./Environment";
import { EConfigStrings } from "./ConfigStrings";
import { KeyRetriever } from "./KeyRetriever";
import { logDbError, logApiError } from "./Logging";
import { DynamicStreamableFactory } from "./StreamingFramework";
import { ActivityRecord } from './ActivityRecord';
import { UrlActivityRecord } from "./ActivityRecordUrl";
import { MessageActivityRecord } from "./MessageActivityRecord";
import { SessionKey } from "./Keys";
import { IActivityRepository } from "./IActivityRepository";
&nbsp;
const defaultPartitionKey = "6ea3299d987b4b33a1c0b079a833206f";
&nbsp;
var crypto = require("crypto-browserify");  
export var stream = require("stream-browserify");  
&nbsp;
function getAuthorizationTokenUsingMasterKey(verb: string, resourceType: string, resourceId: string, date: string, masterKey: string) {  
&nbsp;
    var key = Buffer.from(masterKey, "base64");  
  
    var text = (verb || <span class="branch-1 cbranch-no" title="branch not covered" >"")</span>.toLowerCase() + "\n" +   
               (resourceType || <span class="branch-1 cbranch-no" title="branch not covered" >"")</span>.toLowerCase() + "\n" +   
               (resourceId || <span class="branch-1 cbranch-no" title="branch not covered" >"")</span> + "\n" +   
               date.toLowerCase() + "\n" +   
               "" + "\n";  
  
    var body = Buffer.from(text, "utf8");  
    var signature = crypto.createHmac("sha256", key).update(body).digest("base64");  
  
    var MasterToken = "master";  
  
    var TokenVersion = "1.0";  
  
    var encoded = encodeURIComponent("type=" + MasterToken + "&amp;ver=" + TokenVersion + "&amp;sig=" + signature);  
&nbsp;
    return encoded;
}
&nbsp;
function activityToken(verb: string, time: string, key: string) { 
&nbsp;
   throwIfUndefined(key);
   return getAuthorizationTokenUsingMasterKey( verb, "docs", "dbs/BraidLms/colls/Activity", time, 
                                               key);
}
&nbsp;
function makePostActivityToken(time: string, key: string) { 
&nbsp;
   return activityToken( "post", time, key);
}
&nbsp;
function <span class="fstat-no" title="function not covered" >makeGetActivityToken(</span>time: string, key: string) { 
&nbsp;
<span class="cstat-no" title="statement not covered" >   return activityToken( "get", time, key);</span>
}
&nbsp;
// ActivityRecord - email of a person and a datestamp. Will have many derived classes according to different activity types. 
export class ActivityRepositoryCosmos implements IActivityRepository {
&nbsp;
   private _dbkey: string | undefined;
   private _sessionKey: SessionKey;
   private _timer: NodeJS.Timeout | undefined;
&nbsp;
   /**
    * Create an ActivityRepository object 
    * @param sessionKey_ - joining key
    */
   public constructor(sessionKey_: SessionKey) {
&nbsp;
      this._dbkey = undefined;
      this._sessionKey = sessionKey_;
      this._timer = undefined;
   }
&nbsp;
<span class="fstat-no" title="function not covered" >   disConnect </span>() : void {
<span class="cstat-no" title="statement not covered" >      if (this._timer) {</span>
<span class="cstat-no" title="statement not covered" >         clearInterval(this._timer);</span>
<span class="cstat-no" title="statement not covered" >         this._timer = undefined;</span>
      }
   }
&nbsp;
   async connect (sessionKey_ : SessionKey) : Promise&lt;string | undefined&gt; {
      let retriever = new KeyRetriever();
      var url: string;
&nbsp;
      <span class="missing-if-branch" title="else path not taken" >E</span>if (Environment.environment() === EEnvironment.kLocal)
         url = EConfigStrings.kRequestLocalCosmosDbKeyUrl;
      else
<span class="cstat-no" title="statement not covered" >         url = EConfigStrings.kRequestCosmosDbKeyUrl;</span>
      
      let self = this;
&nbsp;
      // Set a timer to invalidate the key every 15 mins.
      // This well below the Mongo limit of 30 mins, foces us to keep refreshing
      <span class="missing-if-branch" title="else path not taken" >E</span>if (!self._timer) {
         self._timer = setInterval(<span class="fstat-no" title="function not covered" >() =</span>&gt; { 
<span class="cstat-no" title="statement not covered" >            self._dbkey = undefined;</span>
         }, 15*60*60*1000);         
      }
&nbsp;
      let done = new Promise&lt;string | undefined&gt;(function(resolve, reject) {
         
         retriever.requestKey (url, 
            EConfigStrings.kSessionParamName, 
            sessionKey_)
         .then ((key) =&gt; {
            self._dbkey = key;
            resolve (key);
         })
         .catch (<span class="fstat-no" title="function not covered" >(e</span>rror: any) =&gt; {
<span class="cstat-no" title="statement not covered" >            logApiError ("Error getting database key:", error);   </span>
<span class="cstat-no" title="statement not covered" >            reject(undefined);   </span>
         });
      });
&nbsp;
      return done;
   }
&nbsp;
   async save (record : ActivityRecord) : Promise&lt;boolean&gt; {
      
      let self = this;
&nbsp;
      if (!self._dbkey) {
         await self.connect(self._sessionKey);
      }    
&nbsp;
      let done = new Promise&lt;boolean&gt;(function(resolve, reject) {
&nbsp;
         let time = new Date().toUTCString();
         let stream = record.flatten ();
         let document = JSON.parse(stream);
         document.data = JSON.parse(document.data);
&nbsp;
         throwIfUndefined(self._dbkey); // Keep compiler happy, should not be able to get here with actual undefined key. 
         let key = makePostActivityToken(time, self._dbkey); 
&nbsp;
         document.partition = defaultPartitionKey; // Dont need real partitions until 10 GB ... 
         document.id = document.data.id; // Need to copy ID up from activity object, since MDynamicallyStreamable streams only the class name. 
&nbsp;
         axios.post('https://braidlms.documents.azure.com/dbs/BraidLms/colls/Activity/docs', 
         document,
         {
            headers: {                  
               "Authorization": key,
               "Content-Type": "application/json",    
               "Accept": "application/json",               
               "x-ms-date": time,
               "x-ms-version" : "2018-12-31",
               "Cache-Control": "no-cache",
               "x-ms-documentdb-is-upsert" : "True",
               "x-ms-documentdb-partitionkey" : "[\"" + defaultPartitionKey + "\"]", 
               "x-ms-consistency-level" : "Eventual"
            }              
         })
         .then((resp : any) =&gt; {
&nbsp;
            resolve(true);
         })
         .catch(<span class="fstat-no" title="function not covered" >(e</span>rror: any) =&gt; {   
&nbsp;
<span class="cstat-no" title="statement not covered" >            logDbError ("Error calling database:", error);   </span>
<span class="cstat-no" title="statement not covered" >            reject(false);     </span>
         });  
      });
   
      return done;
   }
&nbsp;
   async loadRecentUrlActivity (count : number) : Promise&lt;Array&lt;ActivityRecord&gt;&gt; {
      return this.loadRecent (count, UrlActivityRecord.className());
   }
&nbsp;
<span class="fstat-no" title="function not covered" >   async </span>loadRecentMessages (count : number) : Promise&lt;Array&lt;ActivityRecord&gt;&gt; {
<span class="cstat-no" title="statement not covered" >      return this.loadRecent (count, MessageActivityRecord.className());</span>
   }
&nbsp;
   createFromDb (record: any) : ActivityRecord {
&nbsp;
      switch (record.className) {
         case UrlActivityRecord.className():
            return new UrlActivityRecord(record.id,
               record._conversationId,
               record.data.email, 
               record.data.happenedAt, 
               record.data.url);
&nbsp;
<span class="branch-1 cbranch-no" title="branch not covered" >         case MessageActivityRecord.className():</span>
<span class="cstat-no" title="statement not covered" >            return new MessageActivityRecord(record.id,</span>
               record._conversationId,
               record.data.email, 
               record.data.happenedAt, 
               record.data.message);   
               
<span class="branch-2 cbranch-no" title="branch not covered" >         default:</span>
<span class="cstat-no" title="statement not covered" >            throw new InvalidParameterError(record);</span>
      }
   }
&nbsp;
   async loadRecent (count : number, className: string) : Promise&lt;Array&lt;ActivityRecord&gt;&gt; {
      
      let self = this;
&nbsp;
      <span class="missing-if-branch" title="if path not taken" >I</span>if (!self._dbkey) {
<span class="cstat-no" title="statement not covered" >         await self.connect(self._sessionKey);</span>
      }
&nbsp;
      let done = new Promise&lt;Array&lt;ActivityRecord&gt;&gt;(function(resolve, reject) {
&nbsp;
         let time = new Date().toUTCString();
         throwIfUndefined(self._dbkey); // Keep compiler happy, should not be able to get here with actual undefined key. 
         let key = makePostActivityToken(time, self._dbkey);         
         let query = "SELECT * FROM Activity a WHERE a.className = @className ORDER BY a.happenedAt DESC OFFSET 0 LIMIT " + count.toString();
&nbsp;
         axios.post('https://braidlms.documents.azure.com/dbs/BraidLms/colls/Activity/docs', 
         {
            "query": query,  
            "parameters": [  
              {  
                "name": "@className",  
                "value": className
              }
            ]  
         },
         {
            headers: {                  
               "Authorization": key,
               "Content-Type": "application/query+json",    
               "Accept": "application/json",               
               "x-ms-date": time,
               "x-ms-version" : "2018-12-31",
               "Cache-Control": "no-cache",
               "x-ms-documentdb-partitionkey" : "[\"" + defaultPartitionKey + "\"]", 
               "x-ms-consistency-level" : "Eventual",
               "x-ms-documentdb-isquery" : "True"
            }              
         })
         .then((resp : any) =&gt; {
&nbsp;
            let responseRecords = resp.data.Documents;
            let records = new Array&lt;ActivityRecord&gt;();
&nbsp;
            for (let i = 0; i &lt; responseRecords.length; i++) {
&nbsp;
               let obj = self.createFromDb (responseRecords[i]);
               records.push (obj);
            }
&nbsp;
            resolve(records);
         })
         .catch(<span class="fstat-no" title="function not covered" >(e</span>rror: any) =&gt; {   
&nbsp;
<span class="cstat-no" title="statement not covered" >            logDbError ("Error calling database:", error);   </span>
<span class="cstat-no" title="statement not covered" >            reject(new Array&lt;ActivityRecord&gt; ());     </span>
         });  
      });
   
      return done;
   }
&nbsp;
}
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\ActivityRepositoryMongo.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for ActivityRepositoryMongo.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> ActivityRepositoryMongo.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">79.41% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>54/68</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">57.14% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>8/14</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">66.66% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>12/18</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">79.1% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>53/67</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line medium'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a>
<a name='L94'></a><a href='#L94'>94</a>
<a name='L95'></a><a href='#L95'>95</a>
<a name='L96'></a><a href='#L96'>96</a>
<a name='L97'></a><a href='#L97'>97</a>
<a name='L98'></a><a href='#L98'>98</a>
<a name='L99'></a><a href='#L99'>99</a>
<a name='L100'></a><a href='#L100'>100</a>
<a name='L101'></a><a href='#L101'>101</a>
<a name='L102'></a><a href='#L102'>102</a>
<a name='L103'></a><a href='#L103'>103</a>
<a name='L104'></a><a href='#L104'>104</a>
<a name='L105'></a><a href='#L105'>105</a>
<a name='L106'></a><a href='#L106'>106</a>
<a name='L107'></a><a href='#L107'>107</a>
<a name='L108'></a><a href='#L108'>108</a>
<a name='L109'></a><a href='#L109'>109</a>
<a name='L110'></a><a href='#L110'>110</a>
<a name='L111'></a><a href='#L111'>111</a>
<a name='L112'></a><a href='#L112'>112</a>
<a name='L113'></a><a href='#L113'>113</a>
<a name='L114'></a><a href='#L114'>114</a>
<a name='L115'></a><a href='#L115'>115</a>
<a name='L116'></a><a href='#L116'>116</a>
<a name='L117'></a><a href='#L117'>117</a>
<a name='L118'></a><a href='#L118'>118</a>
<a name='L119'></a><a href='#L119'>119</a>
<a name='L120'></a><a href='#L120'>120</a>
<a name='L121'></a><a href='#L121'>121</a>
<a name='L122'></a><a href='#L122'>122</a>
<a name='L123'></a><a href='#L123'>123</a>
<a name='L124'></a><a href='#L124'>124</a>
<a name='L125'></a><a href='#L125'>125</a>
<a name='L126'></a><a href='#L126'>126</a>
<a name='L127'></a><a href='#L127'>127</a>
<a name='L128'></a><a href='#L128'>128</a>
<a name='L129'></a><a href='#L129'>129</a>
<a name='L130'></a><a href='#L130'>130</a>
<a name='L131'></a><a href='#L131'>131</a>
<a name='L132'></a><a href='#L132'>132</a>
<a name='L133'></a><a href='#L133'>133</a>
<a name='L134'></a><a href='#L134'>134</a>
<a name='L135'></a><a href='#L135'>135</a>
<a name='L136'></a><a href='#L136'>136</a>
<a name='L137'></a><a href='#L137'>137</a>
<a name='L138'></a><a href='#L138'>138</a>
<a name='L139'></a><a href='#L139'>139</a>
<a name='L140'></a><a href='#L140'>140</a>
<a name='L141'></a><a href='#L141'>141</a>
<a name='L142'></a><a href='#L142'>142</a>
<a name='L143'></a><a href='#L143'>143</a>
<a name='L144'></a><a href='#L144'>144</a>
<a name='L145'></a><a href='#L145'>145</a>
<a name='L146'></a><a href='#L146'>146</a>
<a name='L147'></a><a href='#L147'>147</a>
<a name='L148'></a><a href='#L148'>148</a>
<a name='L149'></a><a href='#L149'>149</a>
<a name='L150'></a><a href='#L150'>150</a>
<a name='L151'></a><a href='#L151'>151</a>
<a name='L152'></a><a href='#L152'>152</a>
<a name='L153'></a><a href='#L153'>153</a>
<a name='L154'></a><a href='#L154'>154</a>
<a name='L155'></a><a href='#L155'>155</a>
<a name='L156'></a><a href='#L156'>156</a>
<a name='L157'></a><a href='#L157'>157</a>
<a name='L158'></a><a href='#L158'>158</a>
<a name='L159'></a><a href='#L159'>159</a>
<a name='L160'></a><a href='#L160'>160</a>
<a name='L161'></a><a href='#L161'>161</a>
<a name='L162'></a><a href='#L162'>162</a>
<a name='L163'></a><a href='#L163'>163</a>
<a name='L164'></a><a href='#L164'>164</a>
<a name='L165'></a><a href='#L165'>165</a>
<a name='L166'></a><a href='#L166'>166</a>
<a name='L167'></a><a href='#L167'>167</a>
<a name='L168'></a><a href='#L168'>168</a>
<a name='L169'></a><a href='#L169'>169</a>
<a name='L170'></a><a href='#L170'>170</a>
<a name='L171'></a><a href='#L171'>171</a>
<a name='L172'></a><a href='#L172'>172</a>
<a name='L173'></a><a href='#L173'>173</a>
<a name='L174'></a><a href='#L174'>174</a>
<a name='L175'></a><a href='#L175'>175</a>
<a name='L176'></a><a href='#L176'>176</a>
<a name='L177'></a><a href='#L177'>177</a>
<a name='L178'></a><a href='#L178'>178</a>
<a name='L179'></a><a href='#L179'>179</a>
<a name='L180'></a><a href='#L180'>180</a>
<a name='L181'></a><a href='#L181'>181</a>
<a name='L182'></a><a href='#L182'>182</a>
<a name='L183'></a><a href='#L183'>183</a>
<a name='L184'></a><a href='#L184'>184</a>
<a name='L185'></a><a href='#L185'>185</a>
<a name='L186'></a><a href='#L186'>186</a>
<a name='L187'></a><a href='#L187'>187</a>
<a name='L188'></a><a href='#L188'>188</a>
<a name='L189'></a><a href='#L189'>189</a>
<a name='L190'></a><a href='#L190'>190</a>
<a name='L191'></a><a href='#L191'>191</a>
<a name='L192'></a><a href='#L192'>192</a>
<a name='L193'></a><a href='#L193'>193</a>
<a name='L194'></a><a href='#L194'>194</a>
<a name='L195'></a><a href='#L195'>195</a>
<a name='L196'></a><a href='#L196'>196</a>
<a name='L197'></a><a href='#L197'>197</a>
<a name='L198'></a><a href='#L198'>198</a>
<a name='L199'></a><a href='#L199'>199</a>
<a name='L200'></a><a href='#L200'>200</a>
<a name='L201'></a><a href='#L201'>201</a>
<a name='L202'></a><a href='#L202'>202</a>
<a name='L203'></a><a href='#L203'>203</a>
<a name='L204'></a><a href='#L204'>204</a>
<a name='L205'></a><a href='#L205'>205</a>
<a name='L206'></a><a href='#L206'>206</a>
<a name='L207'></a><a href='#L207'>207</a>
<a name='L208'></a><a href='#L208'>208</a>
<a name='L209'></a><a href='#L209'>209</a>
<a name='L210'></a><a href='#L210'>210</a>
<a name='L211'></a><a href='#L211'>211</a>
<a name='L212'></a><a href='#L212'>212</a>
<a name='L213'></a><a href='#L213'>213</a>
<a name='L214'></a><a href='#L214'>214</a>
<a name='L215'></a><a href='#L215'>215</a>
<a name='L216'></a><a href='#L216'>216</a>
<a name='L217'></a><a href='#L217'>217</a>
<a name='L218'></a><a href='#L218'>218</a>
<a name='L219'></a><a href='#L219'>219</a>
<a name='L220'></a><a href='#L220'>220</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
&nbsp;
// 3rd party imports
import axios from "axios";
&nbsp;
&nbsp;
// Internal imports
import { throwIfUndefined } from "./Asserts";
import { InvalidParameterError } from "./Errors";
import { Environment, EEnvironment } from "./Environment";
import { EConfigStrings } from "./ConfigStrings";
import { KeyRetriever } from "./KeyRetriever";
import { logDbError, logApiError } from "./Logging";
import { DynamicStreamableFactory } from "./StreamingFramework";
import { ActivityRecord } from './ActivityRecord';
import { UrlActivityRecord } from "./ActivityRecordUrl";
import { MessageActivityRecord } from "./MessageActivityRecord";
import { SessionKey } from "./Keys";
import { IActivityRepository } from "./IActivityRepository";
import { LikeUnlikeActivityRecord } from "./ActivityRecordLikeUnlike";
&nbsp;
&nbsp;
// ActivityRecord - email of a person and a datestamp. Will have many derived classes according to different activity types. 
export class ActivityRepositoryMongo implements IActivityRepository {
&nbsp;
   private _dbkey: string | undefined;
   private _sessionKey: SessionKey;
   private _timer: NodeJS.Timeout | undefined;
&nbsp;
   /**
    * Create an ActivityRepository object 
    * @param sessionKey_ - joining key
    */
   public constructor(sessionKey_: SessionKey) {
&nbsp;
      this._dbkey = undefined;
      this._sessionKey = sessionKey_;
      this._timer = undefined;
   }
&nbsp;
<span class="fstat-no" title="function not covered" >   disConnect </span>() : void {
<span class="cstat-no" title="statement not covered" >      if (this._timer) {</span>
<span class="cstat-no" title="statement not covered" >         clearInterval(this._timer);</span>
<span class="cstat-no" title="statement not covered" >         this._timer = undefined;</span>
      }
   }
&nbsp;
   async connect (sessionKey_ : SessionKey) : Promise&lt;string | undefined&gt; {
      let retriever = new KeyRetriever();
      var url: string;
&nbsp;
      <span class="missing-if-branch" title="else path not taken" >E</span>if (Environment.environment() === EEnvironment.kLocal)
         url = EConfigStrings.kRequestLocalMongoDbKeyUrl;
      else
<span class="cstat-no" title="statement not covered" >         url = EConfigStrings.kRequestMongoDbKeyUrl;</span>
      
      let self = this;
&nbsp;
      // Set a timer to invalidate the key every 15 mins.
      // This well below the Mongo limit of 30 mins, foces us to keep refreshing
      <span class="missing-if-branch" title="else path not taken" >E</span>if (!self._timer) {
         self._timer = setInterval(<span class="fstat-no" title="function not covered" >() =</span>&gt; { 
<span class="cstat-no" title="statement not covered" >            self._dbkey = undefined;</span>
         }, 15*60*60*1000);         
      }
&nbsp;
      let done = new Promise&lt;string | undefined&gt;(function(resolve, reject) {
         
         retriever.requestKey (url, 
            EConfigStrings.kSessionParamName, 
            sessionKey_)
         .then ((key) =&gt; {
            self._dbkey = key;
            resolve (key);
         })
         .catch (<span class="fstat-no" title="function not covered" >(e</span>rror: any) =&gt; {
<span class="cstat-no" title="statement not covered" >            logApiError ("Error getting database key:", error);   </span>
<span class="cstat-no" title="statement not covered" >            reject(undefined);   </span>
         });
      });
&nbsp;
      return done;
   }
&nbsp;
   async save (record : ActivityRecord) : Promise&lt;boolean&gt; {
      
      let self = this;
&nbsp;
      if (!self._dbkey) {
         await self.connect(self._sessionKey);
      }
&nbsp;
      let done = new Promise&lt;boolean&gt;(function(resolve, reject) {
&nbsp;
         let stream = record.streamOut ();
         let document = JSON.parse(stream);
         delete document.id; // Let Mongo put a new ID on for insert
         document.className = record.className(); // Save the class name as we store multiple types of derived class
         let key = self._dbkey;
&nbsp;
         axios.post('https://eu-west-1.aws.data.mongodb-api.com/app/braidlmsclient-fsivu/endpoint/data/v1/action/insertOne', 
         {   
            "dataSource": "mongodb-atlas",
            "database": "BraidLms",
            "collection": "Activity",
            "document": document
          },
          {
             headers: {                  
               'Authorization': `Bearer ${key}`,
               "Content-Type": "application/ejson",                  
               "Accept": "application/json",
            }              
         })
         .then((resp : any) =&gt; {
&nbsp;
            resolve(true);
         })
         .catch(<span class="fstat-no" title="function not covered" >(e</span>rror: any) =&gt; {   
&nbsp;
<span class="cstat-no" title="statement not covered" >            logDbError ("Error calling database:", error);   </span>
<span class="cstat-no" title="statement not covered" >            reject(false);     </span>
         });  
      });
   
      return done;
   }
&nbsp;
   async loadRecentUrlActivity (count : number) : Promise&lt;Array&lt;ActivityRecord&gt;&gt; {
      return this.loadRecent (count, UrlActivityRecord.className());
   }
&nbsp;
<span class="fstat-no" title="function not covered" >   async </span>loadRecentMessages (count : number) : Promise&lt;Array&lt;ActivityRecord&gt;&gt; {
<span class="cstat-no" title="statement not covered" >      return this.loadRecent (count, MessageActivityRecord.className());</span>
   }
&nbsp;
   createFromDb (record: any) : ActivityRecord {
&nbsp;
      switch (record.className) {
         case UrlActivityRecord.className():
            return new UrlActivityRecord(
               record._id.toString(),
               record._conversationId,
               record.email, 
               record.happenedAt, 
               record.url);
&nbsp;
         case LikeUnlikeActivityRecord.className():
            return new LikeUnlikeActivityRecord(
               record._id.toString(),
               record._conversationId,
               record.email, 
               record.happenedAt, 
               record.url,
               record.like);               
&nbsp;
         case MessageActivityRecord.className():
            return new MessageActivityRecord(
               record._id.toString(),
               record._conversationId,
               record.email, 
               record.happenedAt, 
               record.message); 
               
<span class="branch-3 cbranch-no" title="branch not covered" >         default:</span>
<span class="cstat-no" title="statement not covered" >            throw new InvalidParameterError(record);</span>
      }
   }   
&nbsp;
   async loadRecent (count : number, className: string) : Promise&lt;Array&lt;ActivityRecord&gt;&gt; {
      
      let self = this;
&nbsp;
      <span class="missing-if-branch" title="if path not taken" >I</span>if (!self._dbkey) {
<span class="cstat-no" title="statement not covered" >         await self.connect(self._sessionKey);</span>
      }
&nbsp;
      let done = new Promise&lt;Array&lt;ActivityRecord&gt;&gt;(function(resolve, reject) {
&nbsp;
         let key = self._dbkey;
&nbsp;
         axios.post('https://eu-west-1.aws.data.mongodb-api.com/app/braidlmsclient-fsivu/endpoint/data/v1/action/find', 
         {   
            "dataSource": "mongodb-atlas",
            "database": "BraidLms",
            "collection": "Activity",
            "sort": { "happenedAt": -1 },
            "limit": count     
          },
          {
             headers: {                  
               "Content-Type": "application/ejson",                  
               "Accept": "application/json",
               'Authorization': `Bearer ${key}`               
            }              
         })
         .then((resp : any) =&gt; {
&nbsp;
            let responseRecords = resp.data.documents;
            let records = new Array&lt;ActivityRecord&gt;();
&nbsp;
            for (let i = 0; i &lt; responseRecords.length; i++) {
               let obj = self.createFromDb (responseRecords[i]);
               records.push (obj);
            }
&nbsp;
            resolve(records);
         })
         .catch(<span class="fstat-no" title="function not covered" >(e</span>rror: any) =&gt; {   
&nbsp;
<span class="cstat-no" title="statement not covered" >            logDbError ("Error calling database:", error);   </span>
<span class="cstat-no" title="statement not covered" >            reject(new Array&lt;ActivityRecord&gt; ());     </span>
         });  
      });
   
      return done;
   }
&nbsp;
}
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\AIConnection.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for AIConnection.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> AIConnection.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">83.54% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>193/231</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">79.41% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>54/68</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">77.41% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>24/31</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">83.48% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>187/224</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a>
<a name='L94'></a><a href='#L94'>94</a>
<a name='L95'></a><a href='#L95'>95</a>
<a name='L96'></a><a href='#L96'>96</a>
<a name='L97'></a><a href='#L97'>97</a>
<a name='L98'></a><a href='#L98'>98</a>
<a name='L99'></a><a href='#L99'>99</a>
<a name='L100'></a><a href='#L100'>100</a>
<a name='L101'></a><a href='#L101'>101</a>
<a name='L102'></a><a href='#L102'>102</a>
<a name='L103'></a><a href='#L103'>103</a>
<a name='L104'></a><a href='#L104'>104</a>
<a name='L105'></a><a href='#L105'>105</a>
<a name='L106'></a><a href='#L106'>106</a>
<a name='L107'></a><a href='#L107'>107</a>
<a name='L108'></a><a href='#L108'>108</a>
<a name='L109'></a><a href='#L109'>109</a>
<a name='L110'></a><a href='#L110'>110</a>
<a name='L111'></a><a href='#L111'>111</a>
<a name='L112'></a><a href='#L112'>112</a>
<a name='L113'></a><a href='#L113'>113</a>
<a name='L114'></a><a href='#L114'>114</a>
<a name='L115'></a><a href='#L115'>115</a>
<a name='L116'></a><a href='#L116'>116</a>
<a name='L117'></a><a href='#L117'>117</a>
<a name='L118'></a><a href='#L118'>118</a>
<a name='L119'></a><a href='#L119'>119</a>
<a name='L120'></a><a href='#L120'>120</a>
<a name='L121'></a><a href='#L121'>121</a>
<a name='L122'></a><a href='#L122'>122</a>
<a name='L123'></a><a href='#L123'>123</a>
<a name='L124'></a><a href='#L124'>124</a>
<a name='L125'></a><a href='#L125'>125</a>
<a name='L126'></a><a href='#L126'>126</a>
<a name='L127'></a><a href='#L127'>127</a>
<a name='L128'></a><a href='#L128'>128</a>
<a name='L129'></a><a href='#L129'>129</a>
<a name='L130'></a><a href='#L130'>130</a>
<a name='L131'></a><a href='#L131'>131</a>
<a name='L132'></a><a href='#L132'>132</a>
<a name='L133'></a><a href='#L133'>133</a>
<a name='L134'></a><a href='#L134'>134</a>
<a name='L135'></a><a href='#L135'>135</a>
<a name='L136'></a><a href='#L136'>136</a>
<a name='L137'></a><a href='#L137'>137</a>
<a name='L138'></a><a href='#L138'>138</a>
<a name='L139'></a><a href='#L139'>139</a>
<a name='L140'></a><a href='#L140'>140</a>
<a name='L141'></a><a href='#L141'>141</a>
<a name='L142'></a><a href='#L142'>142</a>
<a name='L143'></a><a href='#L143'>143</a>
<a name='L144'></a><a href='#L144'>144</a>
<a name='L145'></a><a href='#L145'>145</a>
<a name='L146'></a><a href='#L146'>146</a>
<a name='L147'></a><a href='#L147'>147</a>
<a name='L148'></a><a href='#L148'>148</a>
<a name='L149'></a><a href='#L149'>149</a>
<a name='L150'></a><a href='#L150'>150</a>
<a name='L151'></a><a href='#L151'>151</a>
<a name='L152'></a><a href='#L152'>152</a>
<a name='L153'></a><a href='#L153'>153</a>
<a name='L154'></a><a href='#L154'>154</a>
<a name='L155'></a><a href='#L155'>155</a>
<a name='L156'></a><a href='#L156'>156</a>
<a name='L157'></a><a href='#L157'>157</a>
<a name='L158'></a><a href='#L158'>158</a>
<a name='L159'></a><a href='#L159'>159</a>
<a name='L160'></a><a href='#L160'>160</a>
<a name='L161'></a><a href='#L161'>161</a>
<a name='L162'></a><a href='#L162'>162</a>
<a name='L163'></a><a href='#L163'>163</a>
<a name='L164'></a><a href='#L164'>164</a>
<a name='L165'></a><a href='#L165'>165</a>
<a name='L166'></a><a href='#L166'>166</a>
<a name='L167'></a><a href='#L167'>167</a>
<a name='L168'></a><a href='#L168'>168</a>
<a name='L169'></a><a href='#L169'>169</a>
<a name='L170'></a><a href='#L170'>170</a>
<a name='L171'></a><a href='#L171'>171</a>
<a name='L172'></a><a href='#L172'>172</a>
<a name='L173'></a><a href='#L173'>173</a>
<a name='L174'></a><a href='#L174'>174</a>
<a name='L175'></a><a href='#L175'>175</a>
<a name='L176'></a><a href='#L176'>176</a>
<a name='L177'></a><a href='#L177'>177</a>
<a name='L178'></a><a href='#L178'>178</a>
<a name='L179'></a><a href='#L179'>179</a>
<a name='L180'></a><a href='#L180'>180</a>
<a name='L181'></a><a href='#L181'>181</a>
<a name='L182'></a><a href='#L182'>182</a>
<a name='L183'></a><a href='#L183'>183</a>
<a name='L184'></a><a href='#L184'>184</a>
<a name='L185'></a><a href='#L185'>185</a>
<a name='L186'></a><a href='#L186'>186</a>
<a name='L187'></a><a href='#L187'>187</a>
<a name='L188'></a><a href='#L188'>188</a>
<a name='L189'></a><a href='#L189'>189</a>
<a name='L190'></a><a href='#L190'>190</a>
<a name='L191'></a><a href='#L191'>191</a>
<a name='L192'></a><a href='#L192'>192</a>
<a name='L193'></a><a href='#L193'>193</a>
<a name='L194'></a><a href='#L194'>194</a>
<a name='L195'></a><a href='#L195'>195</a>
<a name='L196'></a><a href='#L196'>196</a>
<a name='L197'></a><a href='#L197'>197</a>
<a name='L198'></a><a href='#L198'>198</a>
<a name='L199'></a><a href='#L199'>199</a>
<a name='L200'></a><a href='#L200'>200</a>
<a name='L201'></a><a href='#L201'>201</a>
<a name='L202'></a><a href='#L202'>202</a>
<a name='L203'></a><a href='#L203'>203</a>
<a name='L204'></a><a href='#L204'>204</a>
<a name='L205'></a><a href='#L205'>205</a>
<a name='L206'></a><a href='#L206'>206</a>
<a name='L207'></a><a href='#L207'>207</a>
<a name='L208'></a><a href='#L208'>208</a>
<a name='L209'></a><a href='#L209'>209</a>
<a name='L210'></a><a href='#L210'>210</a>
<a name='L211'></a><a href='#L211'>211</a>
<a name='L212'></a><a href='#L212'>212</a>
<a name='L213'></a><a href='#L213'>213</a>
<a name='L214'></a><a href='#L214'>214</a>
<a name='L215'></a><a href='#L215'>215</a>
<a name='L216'></a><a href='#L216'>216</a>
<a name='L217'></a><a href='#L217'>217</a>
<a name='L218'></a><a href='#L218'>218</a>
<a name='L219'></a><a href='#L219'>219</a>
<a name='L220'></a><a href='#L220'>220</a>
<a name='L221'></a><a href='#L221'>221</a>
<a name='L222'></a><a href='#L222'>222</a>
<a name='L223'></a><a href='#L223'>223</a>
<a name='L224'></a><a href='#L224'>224</a>
<a name='L225'></a><a href='#L225'>225</a>
<a name='L226'></a><a href='#L226'>226</a>
<a name='L227'></a><a href='#L227'>227</a>
<a name='L228'></a><a href='#L228'>228</a>
<a name='L229'></a><a href='#L229'>229</a>
<a name='L230'></a><a href='#L230'>230</a>
<a name='L231'></a><a href='#L231'>231</a>
<a name='L232'></a><a href='#L232'>232</a>
<a name='L233'></a><a href='#L233'>233</a>
<a name='L234'></a><a href='#L234'>234</a>
<a name='L235'></a><a href='#L235'>235</a>
<a name='L236'></a><a href='#L236'>236</a>
<a name='L237'></a><a href='#L237'>237</a>
<a name='L238'></a><a href='#L238'>238</a>
<a name='L239'></a><a href='#L239'>239</a>
<a name='L240'></a><a href='#L240'>240</a>
<a name='L241'></a><a href='#L241'>241</a>
<a name='L242'></a><a href='#L242'>242</a>
<a name='L243'></a><a href='#L243'>243</a>
<a name='L244'></a><a href='#L244'>244</a>
<a name='L245'></a><a href='#L245'>245</a>
<a name='L246'></a><a href='#L246'>246</a>
<a name='L247'></a><a href='#L247'>247</a>
<a name='L248'></a><a href='#L248'>248</a>
<a name='L249'></a><a href='#L249'>249</a>
<a name='L250'></a><a href='#L250'>250</a>
<a name='L251'></a><a href='#L251'>251</a>
<a name='L252'></a><a href='#L252'>252</a>
<a name='L253'></a><a href='#L253'>253</a>
<a name='L254'></a><a href='#L254'>254</a>
<a name='L255'></a><a href='#L255'>255</a>
<a name='L256'></a><a href='#L256'>256</a>
<a name='L257'></a><a href='#L257'>257</a>
<a name='L258'></a><a href='#L258'>258</a>
<a name='L259'></a><a href='#L259'>259</a>
<a name='L260'></a><a href='#L260'>260</a>
<a name='L261'></a><a href='#L261'>261</a>
<a name='L262'></a><a href='#L262'>262</a>
<a name='L263'></a><a href='#L263'>263</a>
<a name='L264'></a><a href='#L264'>264</a>
<a name='L265'></a><a href='#L265'>265</a>
<a name='L266'></a><a href='#L266'>266</a>
<a name='L267'></a><a href='#L267'>267</a>
<a name='L268'></a><a href='#L268'>268</a>
<a name='L269'></a><a href='#L269'>269</a>
<a name='L270'></a><a href='#L270'>270</a>
<a name='L271'></a><a href='#L271'>271</a>
<a name='L272'></a><a href='#L272'>272</a>
<a name='L273'></a><a href='#L273'>273</a>
<a name='L274'></a><a href='#L274'>274</a>
<a name='L275'></a><a href='#L275'>275</a>
<a name='L276'></a><a href='#L276'>276</a>
<a name='L277'></a><a href='#L277'>277</a>
<a name='L278'></a><a href='#L278'>278</a>
<a name='L279'></a><a href='#L279'>279</a>
<a name='L280'></a><a href='#L280'>280</a>
<a name='L281'></a><a href='#L281'>281</a>
<a name='L282'></a><a href='#L282'>282</a>
<a name='L283'></a><a href='#L283'>283</a>
<a name='L284'></a><a href='#L284'>284</a>
<a name='L285'></a><a href='#L285'>285</a>
<a name='L286'></a><a href='#L286'>286</a>
<a name='L287'></a><a href='#L287'>287</a>
<a name='L288'></a><a href='#L288'>288</a>
<a name='L289'></a><a href='#L289'>289</a>
<a name='L290'></a><a href='#L290'>290</a>
<a name='L291'></a><a href='#L291'>291</a>
<a name='L292'></a><a href='#L292'>292</a>
<a name='L293'></a><a href='#L293'>293</a>
<a name='L294'></a><a href='#L294'>294</a>
<a name='L295'></a><a href='#L295'>295</a>
<a name='L296'></a><a href='#L296'>296</a>
<a name='L297'></a><a href='#L297'>297</a>
<a name='L298'></a><a href='#L298'>298</a>
<a name='L299'></a><a href='#L299'>299</a>
<a name='L300'></a><a href='#L300'>300</a>
<a name='L301'></a><a href='#L301'>301</a>
<a name='L302'></a><a href='#L302'>302</a>
<a name='L303'></a><a href='#L303'>303</a>
<a name='L304'></a><a href='#L304'>304</a>
<a name='L305'></a><a href='#L305'>305</a>
<a name='L306'></a><a href='#L306'>306</a>
<a name='L307'></a><a href='#L307'>307</a>
<a name='L308'></a><a href='#L308'>308</a>
<a name='L309'></a><a href='#L309'>309</a>
<a name='L310'></a><a href='#L310'>310</a>
<a name='L311'></a><a href='#L311'>311</a>
<a name='L312'></a><a href='#L312'>312</a>
<a name='L313'></a><a href='#L313'>313</a>
<a name='L314'></a><a href='#L314'>314</a>
<a name='L315'></a><a href='#L315'>315</a>
<a name='L316'></a><a href='#L316'>316</a>
<a name='L317'></a><a href='#L317'>317</a>
<a name='L318'></a><a href='#L318'>318</a>
<a name='L319'></a><a href='#L319'>319</a>
<a name='L320'></a><a href='#L320'>320</a>
<a name='L321'></a><a href='#L321'>321</a>
<a name='L322'></a><a href='#L322'>322</a>
<a name='L323'></a><a href='#L323'>323</a>
<a name='L324'></a><a href='#L324'>324</a>
<a name='L325'></a><a href='#L325'>325</a>
<a name='L326'></a><a href='#L326'>326</a>
<a name='L327'></a><a href='#L327'>327</a>
<a name='L328'></a><a href='#L328'>328</a>
<a name='L329'></a><a href='#L329'>329</a>
<a name='L330'></a><a href='#L330'>330</a>
<a name='L331'></a><a href='#L331'>331</a>
<a name='L332'></a><a href='#L332'>332</a>
<a name='L333'></a><a href='#L333'>333</a>
<a name='L334'></a><a href='#L334'>334</a>
<a name='L335'></a><a href='#L335'>335</a>
<a name='L336'></a><a href='#L336'>336</a>
<a name='L337'></a><a href='#L337'>337</a>
<a name='L338'></a><a href='#L338'>338</a>
<a name='L339'></a><a href='#L339'>339</a>
<a name='L340'></a><a href='#L340'>340</a>
<a name='L341'></a><a href='#L341'>341</a>
<a name='L342'></a><a href='#L342'>342</a>
<a name='L343'></a><a href='#L343'>343</a>
<a name='L344'></a><a href='#L344'>344</a>
<a name='L345'></a><a href='#L345'>345</a>
<a name='L346'></a><a href='#L346'>346</a>
<a name='L347'></a><a href='#L347'>347</a>
<a name='L348'></a><a href='#L348'>348</a>
<a name='L349'></a><a href='#L349'>349</a>
<a name='L350'></a><a href='#L350'>350</a>
<a name='L351'></a><a href='#L351'>351</a>
<a name='L352'></a><a href='#L352'>352</a>
<a name='L353'></a><a href='#L353'>353</a>
<a name='L354'></a><a href='#L354'>354</a>
<a name='L355'></a><a href='#L355'>355</a>
<a name='L356'></a><a href='#L356'>356</a>
<a name='L357'></a><a href='#L357'>357</a>
<a name='L358'></a><a href='#L358'>358</a>
<a name='L359'></a><a href='#L359'>359</a>
<a name='L360'></a><a href='#L360'>360</a>
<a name='L361'></a><a href='#L361'>361</a>
<a name='L362'></a><a href='#L362'>362</a>
<a name='L363'></a><a href='#L363'>363</a>
<a name='L364'></a><a href='#L364'>364</a>
<a name='L365'></a><a href='#L365'>365</a>
<a name='L366'></a><a href='#L366'>366</a>
<a name='L367'></a><a href='#L367'>367</a>
<a name='L368'></a><a href='#L368'>368</a>
<a name='L369'></a><a href='#L369'>369</a>
<a name='L370'></a><a href='#L370'>370</a>
<a name='L371'></a><a href='#L371'>371</a>
<a name='L372'></a><a href='#L372'>372</a>
<a name='L373'></a><a href='#L373'>373</a>
<a name='L374'></a><a href='#L374'>374</a>
<a name='L375'></a><a href='#L375'>375</a>
<a name='L376'></a><a href='#L376'>376</a>
<a name='L377'></a><a href='#L377'>377</a>
<a name='L378'></a><a href='#L378'>378</a>
<a name='L379'></a><a href='#L379'>379</a>
<a name='L380'></a><a href='#L380'>380</a>
<a name='L381'></a><a href='#L381'>381</a>
<a name='L382'></a><a href='#L382'>382</a>
<a name='L383'></a><a href='#L383'>383</a>
<a name='L384'></a><a href='#L384'>384</a>
<a name='L385'></a><a href='#L385'>385</a>
<a name='L386'></a><a href='#L386'>386</a>
<a name='L387'></a><a href='#L387'>387</a>
<a name='L388'></a><a href='#L388'>388</a>
<a name='L389'></a><a href='#L389'>389</a>
<a name='L390'></a><a href='#L390'>390</a>
<a name='L391'></a><a href='#L391'>391</a>
<a name='L392'></a><a href='#L392'>392</a>
<a name='L393'></a><a href='#L393'>393</a>
<a name='L394'></a><a href='#L394'>394</a>
<a name='L395'></a><a href='#L395'>395</a>
<a name='L396'></a><a href='#L396'>396</a>
<a name='L397'></a><a href='#L397'>397</a>
<a name='L398'></a><a href='#L398'>398</a>
<a name='L399'></a><a href='#L399'>399</a>
<a name='L400'></a><a href='#L400'>400</a>
<a name='L401'></a><a href='#L401'>401</a>
<a name='L402'></a><a href='#L402'>402</a>
<a name='L403'></a><a href='#L403'>403</a>
<a name='L404'></a><a href='#L404'>404</a>
<a name='L405'></a><a href='#L405'>405</a>
<a name='L406'></a><a href='#L406'>406</a>
<a name='L407'></a><a href='#L407'>407</a>
<a name='L408'></a><a href='#L408'>408</a>
<a name='L409'></a><a href='#L409'>409</a>
<a name='L410'></a><a href='#L410'>410</a>
<a name='L411'></a><a href='#L411'>411</a>
<a name='L412'></a><a href='#L412'>412</a>
<a name='L413'></a><a href='#L413'>413</a>
<a name='L414'></a><a href='#L414'>414</a>
<a name='L415'></a><a href='#L415'>415</a>
<a name='L416'></a><a href='#L416'>416</a>
<a name='L417'></a><a href='#L417'>417</a>
<a name='L418'></a><a href='#L418'>418</a>
<a name='L419'></a><a href='#L419'>419</a>
<a name='L420'></a><a href='#L420'>420</a>
<a name='L421'></a><a href='#L421'>421</a>
<a name='L422'></a><a href='#L422'>422</a>
<a name='L423'></a><a href='#L423'>423</a>
<a name='L424'></a><a href='#L424'>424</a>
<a name='L425'></a><a href='#L425'>425</a>
<a name='L426'></a><a href='#L426'>426</a>
<a name='L427'></a><a href='#L427'>427</a>
<a name='L428'></a><a href='#L428'>428</a>
<a name='L429'></a><a href='#L429'>429</a>
<a name='L430'></a><a href='#L430'>430</a>
<a name='L431'></a><a href='#L431'>431</a>
<a name='L432'></a><a href='#L432'>432</a>
<a name='L433'></a><a href='#L433'>433</a>
<a name='L434'></a><a href='#L434'>434</a>
<a name='L435'></a><a href='#L435'>435</a>
<a name='L436'></a><a href='#L436'>436</a>
<a name='L437'></a><a href='#L437'>437</a>
<a name='L438'></a><a href='#L438'>438</a>
<a name='L439'></a><a href='#L439'>439</a>
<a name='L440'></a><a href='#L440'>440</a>
<a name='L441'></a><a href='#L441'>441</a>
<a name='L442'></a><a href='#L442'>442</a>
<a name='L443'></a><a href='#L443'>443</a>
<a name='L444'></a><a href='#L444'>444</a>
<a name='L445'></a><a href='#L445'>445</a>
<a name='L446'></a><a href='#L446'>446</a>
<a name='L447'></a><a href='#L447'>447</a>
<a name='L448'></a><a href='#L448'>448</a>
<a name='L449'></a><a href='#L449'>449</a>
<a name='L450'></a><a href='#L450'>450</a>
<a name='L451'></a><a href='#L451'>451</a>
<a name='L452'></a><a href='#L452'>452</a>
<a name='L453'></a><a href='#L453'>453</a>
<a name='L454'></a><a href='#L454'>454</a>
<a name='L455'></a><a href='#L455'>455</a>
<a name='L456'></a><a href='#L456'>456</a>
<a name='L457'></a><a href='#L457'>457</a>
<a name='L458'></a><a href='#L458'>458</a>
<a name='L459'></a><a href='#L459'>459</a>
<a name='L460'></a><a href='#L460'>460</a>
<a name='L461'></a><a href='#L461'>461</a>
<a name='L462'></a><a href='#L462'>462</a>
<a name='L463'></a><a href='#L463'>463</a>
<a name='L464'></a><a href='#L464'>464</a>
<a name='L465'></a><a href='#L465'>465</a>
<a name='L466'></a><a href='#L466'>466</a>
<a name='L467'></a><a href='#L467'>467</a>
<a name='L468'></a><a href='#L468'>468</a>
<a name='L469'></a><a href='#L469'>469</a>
<a name='L470'></a><a href='#L470'>470</a>
<a name='L471'></a><a href='#L471'>471</a>
<a name='L472'></a><a href='#L472'>472</a>
<a name='L473'></a><a href='#L473'>473</a>
<a name='L474'></a><a href='#L474'>474</a>
<a name='L475'></a><a href='#L475'>475</a>
<a name='L476'></a><a href='#L476'>476</a>
<a name='L477'></a><a href='#L477'>477</a>
<a name='L478'></a><a href='#L478'>478</a>
<a name='L479'></a><a href='#L479'>479</a>
<a name='L480'></a><a href='#L480'>480</a>
<a name='L481'></a><a href='#L481'>481</a>
<a name='L482'></a><a href='#L482'>482</a>
<a name='L483'></a><a href='#L483'>483</a>
<a name='L484'></a><a href='#L484'>484</a>
<a name='L485'></a><a href='#L485'>485</a>
<a name='L486'></a><a href='#L486'>486</a>
<a name='L487'></a><a href='#L487'>487</a>
<a name='L488'></a><a href='#L488'>488</a>
<a name='L489'></a><a href='#L489'>489</a>
<a name='L490'></a><a href='#L490'>490</a>
<a name='L491'></a><a href='#L491'>491</a>
<a name='L492'></a><a href='#L492'>492</a>
<a name='L493'></a><a href='#L493'>493</a>
<a name='L494'></a><a href='#L494'>494</a>
<a name='L495'></a><a href='#L495'>495</a>
<a name='L496'></a><a href='#L496'>496</a>
<a name='L497'></a><a href='#L497'>497</a>
<a name='L498'></a><a href='#L498'>498</a>
<a name='L499'></a><a href='#L499'>499</a>
<a name='L500'></a><a href='#L500'>500</a>
<a name='L501'></a><a href='#L501'>501</a>
<a name='L502'></a><a href='#L502'>502</a>
<a name='L503'></a><a href='#L503'>503</a>
<a name='L504'></a><a href='#L504'>504</a>
<a name='L505'></a><a href='#L505'>505</a>
<a name='L506'></a><a href='#L506'>506</a>
<a name='L507'></a><a href='#L507'>507</a>
<a name='L508'></a><a href='#L508'>508</a>
<a name='L509'></a><a href='#L509'>509</a>
<a name='L510'></a><a href='#L510'>510</a>
<a name='L511'></a><a href='#L511'>511</a>
<a name='L512'></a><a href='#L512'>512</a>
<a name='L513'></a><a href='#L513'>513</a>
<a name='L514'></a><a href='#L514'>514</a>
<a name='L515'></a><a href='#L515'>515</a>
<a name='L516'></a><a href='#L516'>516</a>
<a name='L517'></a><a href='#L517'>517</a>
<a name='L518'></a><a href='#L518'>518</a>
<a name='L519'></a><a href='#L519'>519</a>
<a name='L520'></a><a href='#L520'>520</a>
<a name='L521'></a><a href='#L521'>521</a>
<a name='L522'></a><a href='#L522'>522</a>
<a name='L523'></a><a href='#L523'>523</a>
<a name='L524'></a><a href='#L524'>524</a>
<a name='L525'></a><a href='#L525'>525</a>
<a name='L526'></a><a href='#L526'>526</a>
<a name='L527'></a><a href='#L527'>527</a>
<a name='L528'></a><a href='#L528'>528</a>
<a name='L529'></a><a href='#L529'>529</a>
<a name='L530'></a><a href='#L530'>530</a>
<a name='L531'></a><a href='#L531'>531</a>
<a name='L532'></a><a href='#L532'>532</a>
<a name='L533'></a><a href='#L533'>533</a>
<a name='L534'></a><a href='#L534'>534</a>
<a name='L535'></a><a href='#L535'>535</a>
<a name='L536'></a><a href='#L536'>536</a>
<a name='L537'></a><a href='#L537'>537</a>
<a name='L538'></a><a href='#L538'>538</a>
<a name='L539'></a><a href='#L539'>539</a>
<a name='L540'></a><a href='#L540'>540</a>
<a name='L541'></a><a href='#L541'>541</a>
<a name='L542'></a><a href='#L542'>542</a>
<a name='L543'></a><a href='#L543'>543</a>
<a name='L544'></a><a href='#L544'>544</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">16x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">250x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">16x</span>
<span class="cline-any cline-yes">118x</span>
<span class="cline-any cline-yes">118x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">116x</span>
<span class="cline-any cline-yes">116x</span>
<span class="cline-any cline-yes">116x</span>
<span class="cline-any cline-yes">114x</span>
<span class="cline-any cline-yes">114x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">116x</span>
<span class="cline-any cline-yes">108x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">16x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">12x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
import axios from "axios";
&nbsp;
// Local
import { SessionKey } from "./Keys";
import { logApiError, logApiInfo } from "./Logging";
import { Message } from './Message';
import { Embedding } from "./Embedding";
import { Persona } from './Persona';
import { EIcon } from './Icons';
import { EConfigNumbers, EConfigStrings } from './ConfigStrings';
import { throwIfUndefined } from './Asserts';
import { AssertionFailedError } from "./Errors";
import { KeyRetriever } from "./KeyRetriever";
import { Environment, EEnvironment } from "./Environment";
import { IEmbeddingRepository, kDefaultSearchChunkCount, kDefaultMinimumCosineSimilarity} from "./IEmbeddingRepository";
import { getEmbeddingRepository } from "./IEmbeddingRepositoryFactory";
import { getDefaultKeyGenerator } from "./IKeyGeneratorFactory";
import { parse } from "path";
&nbsp;
// We allow for the equivalent of 10 minutes of chat. 10 mins * 60 words = 600 words = 2400 tokens. 
const kMaxTokens : number= 4096;
&nbsp;
export class AIMessageElement {
   role: string;
   content: string;
}
&nbsp;
export class AIConnection {
&nbsp;
   private _activeCallCount: number;
   private _aiKey: string;  
   private _embeddings: IEmbeddingRepository;
&nbsp;
   /**
    * Create an AIConnection object 
    */
   constructor(aiKey_: string, sessionKey_: SessionKey) {
&nbsp;
      this._activeCallCount = 0;
      this._aiKey = aiKey_;
      this._embeddings = getEmbeddingRepository (sessionKey_);
   }  
&nbsp;
   // Makes an Axios call to call web endpoint
   // Make two queries - one to get the anser to the direct question, another to ask for a reference summary. 
   // The reference summary is then used to look up good articles to add to the response.  
   async makeEnrichedCall  (responseShell: Message, allMessages: Array&lt;AIMessageElement&gt;) : Promise&lt;Message&gt; {
          
      let enrichedQuery = this.buildEnrichmentQuery (allMessages);      
&nbsp;
      const [directResponse, enrichedResponse] = await Promise.all ([this.makeSingleStreamedCall (allMessages, responseShell), 
                                                                     this.makeSingleCallInternal (enrichedQuery)]);
      logApiInfo ("Enriched question for lookup:", enrichedResponse);    
      
      <span class="missing-if-branch" title="else path not taken" >E</span>if (!enrichedResponse.includes (EConfigStrings.kResponseNotRelevantMarker)
      &amp;&amp;  !enrichedResponse.includes (EConfigStrings.kResponseDontKnowMarker)) {
&nbsp;
         let embedding = await this.createEmbedding (enrichedResponse);
&nbsp;
         let enriched = await this._embeddings.lookupMostSimilar (embedding, undefined, kDefaultMinimumCosineSimilarity, kDefaultSearchChunkCount);
                              
         responseShell.text = directResponse;
&nbsp;
         await this.streamEnrichment (responseShell, enriched.chunks);
          
         return responseShell;          
      }  
      else {
<span class="cstat-no" title="statement not covered" >         responseShell.text = directResponse;   </span>
<span class="cstat-no" title="statement not covered" >         return responseShell;     </span>
      }                                                                  
   }    
&nbsp;
   // Asks the LLM for a question that relates to the context  
<span class="fstat-no" title="function not covered" >   async </span>makeFollowUpCall  (context: string) : Promise&lt;Message&gt; {
      
      let followUpQuery = <span class="cstat-no" title="statement not covered" >this.buildFollowUpQuery (context);      </span>
&nbsp;
      const [enrichedResponse] = <span class="cstat-no" title="statement not covered" >await Promise.all ([this.makeSingleCallInternal (followUpQuery)]);</span>
                              
      let keyGenerator = <span class="cstat-no" title="statement not covered" >getDefaultKeyGenerator();</span>
<span class="cstat-no" title="statement not covered" >      return new Message (keyGenerator.generateKey(), EConfigStrings.kLLMGuid, undefined, </span>
                          enrichedResponse, new Date());                                                                        
   } 
&nbsp;
   // Asks the LLM for a question that relates to the context  
   async makeSingleCall  (input: Array&lt;AIMessageElement&gt;, output: Message) : Promise&lt;Message&gt; {            
   
      const [response] = await Promise.all ([this.makeSingleCallInternal (input)]);
                                 
      let keyGenerator = getDefaultKeyGenerator();
      output.text = response;  
                          
      return output;
   } 
&nbsp;
   // Makes an Axios call to call web endpoint using the streaming API
   async makeSingleStreamedCall  (input: Array&lt;AIMessageElement&gt;, output: Message) : Promise&lt;string&gt; {
      
      let self = this;
      self._activeCallCount++;
&nbsp;
      output.isStreaming = true;
&nbsp;
      let inBrowser = (typeof Blob !== "undefined");
      inBrowser = true; // Force use of Fetch as it works on Browser and in Node. 
            
      let done = new Promise&lt;string&gt;(async function(resolve, reject) {
   
         function parseData (data: any ) : void {
&nbsp;
            const lines = data
               ?.toString()
               ?.split("\n")
               .filter((line: string) =&gt; line.trim() !== "");
   
               for (const line of lines) {
                  const text = line.replace(/^data: /, "");
                  if (text === "[DONE]") {
                     output.liveAppendText ("", false);  
                     self._activeCallCount--;                                             
                     resolve (output.text);
                  } else {
                     let token = undefined;
                     try {
                        let parsed = JSON.parse(text);
                        let choice = parsed &amp;&amp; parsed.choices ? parsed.choices[0] : <span class="branch-1 cbranch-no" title="branch not covered" >undefined</span>
                        token = choice &amp;&amp; choice.delta &amp;&amp; choice.delta.content ? choice.delta.content : undefined;
                     } catch {
                        console.error (text);
                     }
                     if (token) {                       
                        output.liveAppendText (token, true);
                    }
                 }
              }
         }           
   
         <span class="missing-if-branch" title="else path not taken" >E</span>if (true) {           
&nbsp;
            const response = await fetch('https://braidlms.openai.azure.com/openai/deployments/braidlms/chat/completions?api-version=2024-02-01', {
               method: 'POST',
               headers: {
                  'Content-Type': 'application/json',
                  'api-key': self._aiKey
               },
               body: JSON.stringify({
                  messages: input,
                  stream: true
               }),
             });
&nbsp;
             const reader = response.body?.pipeThrough(new TextDecoderStream()).getReader();
             throwIfUndefined(reader);
&nbsp;
             while (true) {
               const { value, done } = await reader.read();
               if (done) {
                  self._activeCallCount--;                     
                  break;
               }
&nbsp;
               parseData (value);
            }
         }
         else {
&nbsp;
            const completion = <span class="cstat-no" title="statement not covered" >await axios.post('https://braidlms.openai.azure.com/openai/deployments/braidlms/chat/completions?api-version=2024-02-01', {</span>
               messages: input,
               stream: true
            },
            {   
               responseType: "stream",
               headers: {
                  'Content-Type': 'application/json',
                  'api-key': self._aiKey
               }
            });
   
<span class="cstat-no" title="statement not covered" >            completion.data.on("data", <span class="fstat-no" title="function not covered" >(d</span>ata: string) =&gt; {</span>
   
<span class="cstat-no" title="statement not covered" >               parseData (data);</span>
            })
            .on ("error", <span class="fstat-no" title="function not covered" >(d</span>ata: string) =&gt; {
<span class="cstat-no" title="statement not covered" >               self._activeCallCount--;            </span>
<span class="cstat-no" title="statement not covered" >               output.liveAppendText ("", false);              </span>
<span class="cstat-no" title="statement not covered" >               reject();               </span>
            });
         }
      });
&nbsp;
      return done;
   } 
&nbsp;
   async streamEnrichment  (responseShell: Message, embeddings: Array&lt;Embedding&gt;) : Promise&lt;Message&gt; {
&nbsp;
      let done = new Promise&lt;Message&gt;(async function(resolve, reject) {
&nbsp;
         let shellEmbeddings = new Array&lt;Embedding&gt;();
         shellEmbeddings.length = embeddings.length;
&nbsp;
         for (let i = 0; i &lt; embeddings.length; i++) {
            let shellEmbed = new Embedding (embeddings[i].url, "", embeddings[i].ada_v2, embeddings[i].timeStamp, embeddings[i].relevance);
            shellEmbeddings[i] = shellEmbed;
         }
&nbsp;
         responseShell.chunks = shellEmbeddings;
         let index = 0;
         let maxIndex = 4; 
&nbsp;
         <span class="missing-if-branch" title="else path not taken" >E</span>if (shellEmbeddings.length &gt; 0) {
            let interval = setInterval ( () =&gt; {
&nbsp;
               switch (index) {
                  case 0:
                     <span class="missing-if-branch" title="else path not taken" >E</span>if (embeddings.length &gt; 0)
                        shellEmbeddings[0].summary = embeddings[0].summary.slice (0, embeddings[0].summary.length / 2);
                     break;
                  case 1:
                     <span class="missing-if-branch" title="else path not taken" >E</span>if (embeddings.length &gt; 1)                  
                        shellEmbeddings[1].summary = embeddings[1].summary.slice (0, embeddings[0].summary.length / 2);                  
                     break;  
                  case 2:
                     <span class="missing-if-branch" title="else path not taken" >E</span>if (embeddings.length &gt; 0)                  
                        shellEmbeddings[0].summary = embeddings[0].summary;                  
                     break;   
                  case 3:
                     <span class="missing-if-branch" title="else path not taken" >E</span>if (embeddings.length &gt; 1)                  
                        shellEmbeddings[1].summary = embeddings[1].summary;                       
                     break;         
<span class="branch-4 cbranch-no" title="branch not covered" >                  default:</span>
<span class="cstat-no" title="statement not covered" >                     break;                                                 </span>
               }
&nbsp;
               responseShell.liveAppendChunks (shellEmbeddings, index == 3? false: true);
&nbsp;
               index++;
               if (index === maxIndex) {
                  resolve (responseShell);
                  clearInterval(interval);
               }
            }, 100);
         } 
         else {
<span class="cstat-no" title="statement not covered" >            resolve (responseShell);            </span>
         }
      });
&nbsp;
      return done;
   }
&nbsp;
      // Makes an Axios call to call web endpoint
   async createEmbedding  (input: string) : Promise&lt;Array&lt;number&gt;&gt; {
      
      let self = this;
      self._activeCallCount++;
   
      let done = new Promise&lt;Array&lt;number&gt;&gt;(function(resolve, reject) {
&nbsp;
         // AZURE POST https://{your-resource-name}.openai.azure.com/openai/deployments/{deployment-id}/embeddings?api-version={api-version}
         // OPENAI POST 'https://api.openai.com/v1/embeddings'
&nbsp;
         axios.post('https://braidlms.openai.azure.com/openai/deployments/braidlmse/embeddings?api-version=2024-02-01', {
            input: input,
            // OPENAI model: "text-embedding-ada-002",       
         },
         {
            headers: {
               'Content-Type': 'application/json',
               // OpenAI - 'Authorization': `Bearer ${this._key}`
               'api-key': self._aiKey           
            }
         })
         .then((resp : any) =&gt; {
   
            self._activeCallCount--;               
            resolve (resp.data.data[0].embedding as Array&lt;number&gt;);      
         })
         .catch(<span class="fstat-no" title="function not covered" >(e</span>rror: any) =&gt; {
   
<span class="cstat-no" title="statement not covered" >            self._activeCallCount--;     </span>
<span class="cstat-no" title="statement not covered" >            logApiError (EConfigStrings.kErrorConnectingToAiAPI, error);</span>
<span class="cstat-no" title="statement not covered" >            reject();</span>
         });
      });
&nbsp;
      return done;
   } 
&nbsp;
<span class="fstat-no" title="function not covered" >   isBusy </span>() {
<span class="cstat-no" title="statement not covered" >      return this._activeCallCount !== 0;</span>
   }
&nbsp;
   buildDirectQuery (messages: Array&lt;Message&gt;, authors: Map&lt;string, Persona&gt;): Array&lt;AIMessageElement&gt; {
&nbsp;
      let builtQuery = new Array&lt;AIMessageElement&gt; ();
&nbsp;
      let prompt = { role: 'system', content: EConfigStrings.kOpenAiPersonaPrompt };
      builtQuery.push (prompt);      
&nbsp;
      var start = this.findEarliestMessageIndexWithinTokenLimit(messages, authors);
&nbsp;
      for (let i = start; i &lt; messages.length; i++) {
&nbsp;
         let message = messages[i];
&nbsp;
         if (AIConnection.isRequestForLLM(message, authors)) {
&nbsp;
            if (i === messages.length -1) {
               // Remove the name of our LLM
               let edited = message.text.replace (EConfigStrings.kLLMRequestSignature, "");   
               
               // Expand 'LLM' to Large Language Model (LLM) as that seems to make a big difference to document hits 
               // This includes some common typos
               let lookFor = [EConfigStrings.kPromptLookFor1, EConfigStrings.kPromptLookFor2, ,
                  EConfigStrings.kPromptLookFor4, EConfigStrings.kPromptLookFor5, EConfigStrings.kPromptLookFor6
               ] as Array&lt;string&gt;;
&nbsp;
               let replaceWith = [EConfigStrings.kPromptReplaceWith1, EConfigStrings.kPromptReplaceWith2, EConfigStrings.kPromptReplaceWith3,
                  EConfigStrings.kPromptReplaceWith4, EConfigStrings.kPromptReplaceWith5, EConfigStrings.kPromptReplaceWith6
               ] as Array&lt;string&gt;;
&nbsp;
               for (let i = 0; i &lt; lookFor.length; i++) {
                  <span class="missing-if-branch" title="if path not taken" >I</span>if (edited.includes (lookFor[i])) 
<span class="cstat-no" title="statement not covered" >                     edited = edited.replace (lookFor[i], replaceWith[i]);</span>
               }             
&nbsp;
               let engineeredQuestion = EConfigStrings.kInitialQuestionPrompt + EConfigStrings.kEnrichmentQuestionPrefix + edited;      
               let entry = { role: 'user', content: engineeredQuestion };
               builtQuery.push (entry);
            } 
            else {
&nbsp;
               let edited = message.text.replace (EConfigStrings.kLLMRequestSignature, "");
               let entry = { role: 'user', content: edited };
               builtQuery.push (entry);
            }
         }
&nbsp;
         if (AIConnection.isFromLLM(message, authors)) {
            
            let entry = { role: 'assistant', content: message.text };
            builtQuery.push (entry);     
&nbsp;
            for (let j = 0; j &lt; message.chunks.length; j++) {
               let entry = { role: 'assistant', content: message.chunks[j].summary };
               builtQuery.push (entry);
            }                   
         }         
&nbsp;
      }
      return builtQuery; 
   }   
&nbsp;
   buildQueryForQuestionPrompt (messages: Array&lt;Message&gt;, authors: Map&lt;string, Persona&gt;): Array&lt;AIMessageElement&gt; {
&nbsp;
      let builtQuery = new Array&lt;AIMessageElement&gt; ();
&nbsp;
      let prompt = { role: 'system', content: EConfigStrings.kOpenAiPersonaPrompt };
      builtQuery.push (prompt);      
&nbsp;
      var start = this.findEarliestMessageIndexWithinTokenLimit(messages, authors);
&nbsp;
      for (let i = start; i &lt; messages.length; i++) {
&nbsp;
         let message = messages[i];
&nbsp;
         <span class="missing-if-branch" title="if path not taken" >I</span>if (AIConnection.isFromLLM(message, authors)) {
            
            let entry = <span class="cstat-no" title="statement not covered" >{ role: 'assistant', content: message.text };</span>
<span class="cstat-no" title="statement not covered" >            builtQuery.push (entry);     </span>
&nbsp;
<span class="cstat-no" title="statement not covered" >            for (let j = <span class="cstat-no" title="statement not covered" >0;</span> j &lt; message.chunks.length; j++) {</span>
               let entry = <span class="cstat-no" title="statement not covered" >{ role: 'assistant', content: message.chunks[j].summary };</span>
<span class="cstat-no" title="statement not covered" >               builtQuery.push (entry);</span>
            }                   
         }            
         else {
               let edited = message.text.replace (EConfigStrings.kLLMRequestSignature, "");
               let entry = { role: 'user', content: edited };
               builtQuery.push (entry);
         }      
      }
&nbsp;
      let engineeredQuestion = EConfigStrings.kGenerateAQuestionPrompt;      
      let entry = { role: 'user', content: engineeredQuestion };
      builtQuery.push (entry);
&nbsp;
      return builtQuery; 
   }   
&nbsp;
&nbsp;
   buildEnrichmentQuery (messages: Array&lt;AIMessageElement&gt;): Array&lt;AIMessageElement&gt; {
&nbsp;
      let builtQuery = new Array&lt;AIMessageElement&gt; ();
      
      let engineeredPrompt = EConfigStrings.kEnrichmentPrompt;
      let prompt = { role: 'system', content: engineeredPrompt };
      builtQuery.push (prompt);        
&nbsp;
      let lastMessage = messages[messages.length -1].content;
      let engineeredQuestion = EConfigStrings.kEnrichmentQuestionPrefix + lastMessage;      
      let entry = { role: 'user', content: engineeredQuestion };
      builtQuery.push (entry);
&nbsp;
      return builtQuery; 
   } 
&nbsp;
<span class="fstat-no" title="function not covered" >   buildFollowUpQuery </span>(context: string): Array&lt;AIMessageElement&gt; {
&nbsp;
      let builtQuery = <span class="cstat-no" title="statement not covered" >new Array&lt;AIMessageElement&gt; ();</span>
      
      let engineeredPrompt = <span class="cstat-no" title="statement not covered" >EConfigStrings.kFollowUpPrompt;</span>
      let prompt = <span class="cstat-no" title="statement not covered" >{ role: 'system', content: engineeredPrompt };</span>
<span class="cstat-no" title="statement not covered" >      builtQuery.push (prompt);        </span>
&nbsp;
      let engineeredQuestion = <span class="cstat-no" title="statement not covered" >EConfigStrings.kFollowUpPrefix + context;      </span>
      let entry = <span class="cstat-no" title="statement not covered" >{ role: 'user', content: engineeredQuestion };</span>
<span class="cstat-no" title="statement not covered" >      builtQuery.push (entry);</span>
&nbsp;
<span class="cstat-no" title="statement not covered" >      return builtQuery; </span>
   } 
&nbsp;
   // Makes an Axios call to call web endpoint
   private async makeSingleCallInternal  (input: Array&lt;AIMessageElement&gt;) : Promise&lt;string&gt; {
      
      let self = this;
      self._activeCallCount++;
&nbsp;
      let done = new Promise&lt;string&gt;(function(resolve, reject) {
&nbsp;
         // OPENAI POST ('https://api.openai.com/v1/chat/completions', {
         // AZURE POST https://{your-resource-name}.openai.azure.com/openai/deployments/{deployment-id}/chat/completions?api-version={api-version}
&nbsp;
         axios.post('https://braidlms.openai.azure.com/openai/deployments/braidlms/chat/completions?api-version=2024-02-01', {
            messages: input,
            // OPENAI model: "gpt-3.5-turbo"
            // OPENAI prompt: allMessages
         },
         {
            headers: {
               'Content-Type': 'application/json',
               // OpenAI - 'Authorization': `Bearer ${this._key}`
               'api-key': self._aiKey
            }
         })
         .then((resp : any) =&gt; {
            
            self._activeCallCount--;   
            resolve (resp.data.choices[0].message.content);   
         })
         .catch(<span class="fstat-no" title="function not covered" >(e</span>rror: any) =&gt; {
&nbsp;
<span class="cstat-no" title="statement not covered" >            self._activeCallCount--;     </span>
&nbsp;
<span class="cstat-no" title="statement not covered" >            logApiError (EConfigStrings.kErrorConnectingToAiAPI, error);</span>
<span class="cstat-no" title="statement not covered" >            reject();</span>
         });
      });
   
      return done;
   }      
&nbsp;
   private findEarliestMessageIndexWithinTokenLimit (messages: Array&lt;Message&gt;, authors: Map&lt;string, Persona&gt;) : number {
&nbsp;
      <span class="missing-if-branch" title="if path not taken" >I</span>if (messages.length == 0)      
<span class="cstat-no" title="statement not covered" >         throw new AssertionFailedError ("Message array is zero length.");</span>
      <span class="missing-if-branch" title="if path not taken" >I</span>if (messages.length == 1)
<span class="cstat-no" title="statement not covered" >         return 0;</span>
&nbsp;
      let tokenAccumulator = 0;
      let iLowest = 0;
      let lowestIndex = Math.max (0, messages.length - EConfigNumbers.kMaxMessagesBack)
&nbsp;
      for (let i = messages.length - 1; i &gt;= lowestIndex &amp;&amp; tokenAccumulator &lt; kMaxTokens; i--) {
&nbsp;
         tokenAccumulator += messages[i].tokens;
&nbsp;
         if (tokenAccumulator &lt; kMaxTokens)
            iLowest = i;
      }      
      return iLowest;
   }
&nbsp;
   /**
    * is a message from the LLM - look at the author ID
    */
   static isFromLLM (message: Message, authors: Map&lt;string, Persona&gt;) : boolean {
&nbsp;
      let author = Persona.safeAuthorLookup (authors, message.authorId);
      throwIfUndefined (author);
&nbsp;
      return (author.icon === EIcon.kLLMPersona);
   }
&nbsp;
&nbsp;
   /**
    * is a message invoking the LLM - look at the author, and if the message contains the LLM name 
    */
   static isRequestForLLM (message: Message, authors: Map&lt;string, Persona&gt;) : boolean {
&nbsp;
      let author = Persona.safeAuthorLookup (authors, message.authorId);
      throwIfUndefined (author);
&nbsp;
      return (author.icon === EIcon.kPersonPersona) &amp;&amp; 
      (message.text.includes (EConfigStrings.kLLMRequestSignature) || message.text.includes (EConfigStrings.kLLMRequestSignatureLowerCase));
   }
&nbsp;
  /**
    * is a message an attempt to invoke the LLM - look at the author, and if the message contains miss-spellings of LLM name 
    */
   static mightBeMissTypedRequestForLLM (message: Message, authors: Map&lt;string, Persona&gt;) : boolean {
&nbsp;
      if (this.isRequestForLLM (message, authors))
         return false;
&nbsp;
      let author = Persona.safeAuthorLookup (authors, message.authorId);
      throwIfUndefined (author);
&nbsp;
      return (author.icon === EIcon.kPersonPersona) &amp;&amp; 
         (message.text.includes (EConfigStrings.kLLMNearRequestSignature) || <span class="branch-2 cbranch-no" title="branch not covered" >message.text.includes (EConfigStrings.kLLMNearRequestSignatureLowerCase))</span>;
   }   
}
&nbsp;
export class AIConnector {
   
   static async connect (sessionKey_: SessionKey) : Promise&lt;AIConnection&gt; {
&nbsp;
      let retriever = new KeyRetriever ();
      var url: string;
&nbsp;
      if (Environment.environment() === EEnvironment.kLocal)
         url = EConfigStrings.kRequestLocalAiKeyUrl;
      else
         url = EConfigStrings.kRequestAiKeyUrl;
&nbsp;
      let aiKey = await retriever.requestKey (url, 
                                       EConfigStrings.kSessionParamName, 
                                       sessionKey_);
&nbsp;
      return new AIConnection (aiKey, sessionKey_);
   }
}</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\Asserts.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for Asserts.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> Asserts.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">77.77% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>7/9</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">50% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>2/4</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">50% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>1/2</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">80% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>4/5</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line medium'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">143x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
&nbsp;
import { AssertionFailedError} from './Errors';
&nbsp;
export const throwIfUndefined: &lt;T, &gt;(x: T | undefined) =&gt; asserts x is T = x =&gt; {
   if (typeof x === "undefined") throw new AssertionFailedError ("Object is undefined.");
}
&nbsp;
export const throwIfNull: &lt;T, &gt;(x: T | null) =&gt; asserts x is T = <span class="fstat-no" title="function not covered" >x </span>=&gt; {
<span class="cstat-no" title="statement not covered" >   if (x === null) <span class="cstat-no" title="statement not covered" >throw new AssertionFailedError ("Object is null.");</span></span>
}
&nbsp;
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\base.css
****************************************
body, html {
  margin:0; padding: 0;
  height: 100%;
}
body {
    font-family: Helvetica Neue, Helvetica, Arial;
    font-size: 14px;
    color:#333;
}
.small { font-size: 12px; }
*, *:after, *:before {
  -webkit-box-sizing:border-box;
     -moz-box-sizing:border-box;
          box-sizing:border-box;
  }
h1 { font-size: 20px; margin: 0;}
h2 { font-size: 14px; }
pre {
    font: 12px/1.4 Consolas, "Liberation Mono", Menlo, Courier, monospace;
    margin: 0;
    padding: 0;
    -moz-tab-size: 2;
    -o-tab-size:  2;
    tab-size: 2;
}
a { color:#0074D9; text-decoration:none; }
a:hover { text-decoration:underline; }
.strong { font-weight: bold; }
.space-top1 { padding: 10px 0 0 0; }
.pad2y { padding: 20px 0; }
.pad1y { padding: 10px 0; }
.pad2x { padding: 0 20px; }
.pad2 { padding: 20px; }
.pad1 { padding: 10px; }
.space-left2 { padding-left:55px; }
.space-right2 { padding-right:20px; }
.center { text-align:center; }
.clearfix { display:block; }
.clearfix:after {
  content:'';
  display:block;
  height:0;
  clear:both;
  visibility:hidden;
  }
.fl { float: left; }
@media only screen and (max-width:640px) {
  .col3 { width:100%; max-width:100%; }
  .hide-mobile { display:none!important; }
}

.quiet {
  color: #7f7f7f;
  color: rgba(0,0,0,0.5);
}
.quiet a { opacity: 0.7; }

.fraction {
  font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace;
  font-size: 10px;
  color: #555;
  background: #E8E8E8;
  padding: 4px 5px;
  border-radius: 3px;
  vertical-align: middle;
}

div.path a:link, div.path a:visited { color: #333; }
table.coverage {
  border-collapse: collapse;
  margin: 10px 0 0 0;
  padding: 0;
}

table.coverage td {
  margin: 0;
  padding: 0;
  vertical-align: top;
}
table.coverage td.line-count {
    text-align: right;
    padding: 0 5px 0 20px;
}
table.coverage td.line-coverage {
    text-align: right;
    padding-right: 10px;
    min-width:20px;
}

table.coverage td span.cline-any {
    display: inline-block;
    padding: 0 5px;
    width: 100%;
}
.missing-if-branch {
    display: inline-block;
    margin-right: 5px;
    border-radius: 3px;
    position: relative;
    padding: 0 4px;
    background: #333;
    color: yellow;
}

.skip-if-branch {
    display: none;
    margin-right: 10px;
    position: relative;
    padding: 0 4px;
    background: #ccc;
    color: white;
}
.missing-if-branch .typ, .skip-if-branch .typ {
    color: inherit !important;
}
.coverage-summary {
  border-collapse: collapse;
  width: 100%;
}
.coverage-summary tr { border-bottom: 1px solid #bbb; }
.keyline-all { border: 1px solid #ddd; }
.coverage-summary td, .coverage-summary th { padding: 10px; }
.coverage-summary tbody { border: 1px solid #bbb; }
.coverage-summary td { border-right: 1px solid #bbb; }
.coverage-summary td:last-child { border-right: none; }
.coverage-summary th {
  text-align: left;
  font-weight: normal;
  white-space: nowrap;
}
.coverage-summary th.file { border-right: none !important; }
.coverage-summary th.pct { }
.coverage-summary th.pic,
.coverage-summary th.abs,
.coverage-summary td.pct,
.coverage-summary td.abs { text-align: right; }
.coverage-summary td.file { white-space: nowrap;  }
.coverage-summary td.pic { min-width: 120px !important;  }
.coverage-summary tfoot td { }

.coverage-summary .sorter {
    height: 10px;
    width: 7px;
    display: inline-block;
    margin-left: 0.5em;
    background: url(sort-arrow-sprite.png) no-repeat scroll 0 0 transparent;
}
.coverage-summary .sorted .sorter {
    background-position: 0 -20px;
}
.coverage-summary .sorted-desc .sorter {
    background-position: 0 -10px;
}
.status-line {  height: 10px; }
/* yellow */
.cbranch-no { background: yellow !important; color: #111; }
/* dark red */
.red.solid, .status-line.low, .low .cover-fill { background:#C21F39 }
.low .chart { border:1px solid #C21F39 }
.highlighted,
.highlighted .cstat-no, .highlighted .fstat-no, .highlighted .cbranch-no{
  background: #C21F39 !important;
}
/* medium red */
.cstat-no, .fstat-no, .cbranch-no, .cbranch-no { background:#F6C6CE }
/* light red */
.low, .cline-no { background:#FCE1E5 }
/* light green */
.high, .cline-yes { background:rgb(230,245,208) }
/* medium green */
.cstat-yes { background:rgb(161,215,106) }
/* dark green */
.status-line.high, .high .cover-fill { background:rgb(77,146,33) }
.high .chart { border:1px solid rgb(77,146,33) }
/* dark yellow (gold) */
.status-line.medium, .medium .cover-fill { background: #f9cd0b; }
.medium .chart { border:1px solid #f9cd0b; }
/* light yellow */
.medium { background: #fff4c2; }

.cstat-skip { background: #ddd; color: #111; }
.fstat-skip { background: #ddd; color: #111 !important; }
.cbranch-skip { background: #ddd !important; color: #111; }

span.cline-neutral { background: #eaeaea; }

.coverage-summary td.empty {
    opacity: .5;
    padding-top: 4px;
    padding-bottom: 4px;
    line-height: 1;
    color: #888;
}

.cover-fill, .cover-empty {
  display:inline-block;
  height: 12px;
}
.chart {
  line-height: 0;
}
.cover-empty {
    background: white;
}
.cover-full {
    border-right: none !important;
}
pre.prettyprint {
    border: none !important;
    padding: 0 !important;
    margin: 0 !important;
}
.com { color: #999 !important; }
.ignore-none { color: #999; font-weight: normal; }

.wrapper {
  min-height: 100%;
  height: auto !important;
  height: 100%;
  margin: 0 auto -48px;
}
.footer, .push {
  height: 48px;
}
****************************************

****************************************
Boxer\coverage\BraidFluidConnection.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for BraidFluidConnection.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> BraidFluidConnection.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">65.75% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>48/73</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">33.33% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>8/24</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">76.92% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>10/13</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">65.71% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>46/70</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line medium'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a>
<a name='L94'></a><a href='#L94'>94</a>
<a name='L95'></a><a href='#L95'>95</a>
<a name='L96'></a><a href='#L96'>96</a>
<a name='L97'></a><a href='#L97'>97</a>
<a name='L98'></a><a href='#L98'>98</a>
<a name='L99'></a><a href='#L99'>99</a>
<a name='L100'></a><a href='#L100'>100</a>
<a name='L101'></a><a href='#L101'>101</a>
<a name='L102'></a><a href='#L102'>102</a>
<a name='L103'></a><a href='#L103'>103</a>
<a name='L104'></a><a href='#L104'>104</a>
<a name='L105'></a><a href='#L105'>105</a>
<a name='L106'></a><a href='#L106'>106</a>
<a name='L107'></a><a href='#L107'>107</a>
<a name='L108'></a><a href='#L108'>108</a>
<a name='L109'></a><a href='#L109'>109</a>
<a name='L110'></a><a href='#L110'>110</a>
<a name='L111'></a><a href='#L111'>111</a>
<a name='L112'></a><a href='#L112'>112</a>
<a name='L113'></a><a href='#L113'>113</a>
<a name='L114'></a><a href='#L114'>114</a>
<a name='L115'></a><a href='#L115'>115</a>
<a name='L116'></a><a href='#L116'>116</a>
<a name='L117'></a><a href='#L117'>117</a>
<a name='L118'></a><a href='#L118'>118</a>
<a name='L119'></a><a href='#L119'>119</a>
<a name='L120'></a><a href='#L120'>120</a>
<a name='L121'></a><a href='#L121'>121</a>
<a name='L122'></a><a href='#L122'>122</a>
<a name='L123'></a><a href='#L123'>123</a>
<a name='L124'></a><a href='#L124'>124</a>
<a name='L125'></a><a href='#L125'>125</a>
<a name='L126'></a><a href='#L126'>126</a>
<a name='L127'></a><a href='#L127'>127</a>
<a name='L128'></a><a href='#L128'>128</a>
<a name='L129'></a><a href='#L129'>129</a>
<a name='L130'></a><a href='#L130'>130</a>
<a name='L131'></a><a href='#L131'>131</a>
<a name='L132'></a><a href='#L132'>132</a>
<a name='L133'></a><a href='#L133'>133</a>
<a name='L134'></a><a href='#L134'>134</a>
<a name='L135'></a><a href='#L135'>135</a>
<a name='L136'></a><a href='#L136'>136</a>
<a name='L137'></a><a href='#L137'>137</a>
<a name='L138'></a><a href='#L138'>138</a>
<a name='L139'></a><a href='#L139'>139</a>
<a name='L140'></a><a href='#L140'>140</a>
<a name='L141'></a><a href='#L141'>141</a>
<a name='L142'></a><a href='#L142'>142</a>
<a name='L143'></a><a href='#L143'>143</a>
<a name='L144'></a><a href='#L144'>144</a>
<a name='L145'></a><a href='#L145'>145</a>
<a name='L146'></a><a href='#L146'>146</a>
<a name='L147'></a><a href='#L147'>147</a>
<a name='L148'></a><a href='#L148'>148</a>
<a name='L149'></a><a href='#L149'>149</a>
<a name='L150'></a><a href='#L150'>150</a>
<a name='L151'></a><a href='#L151'>151</a>
<a name='L152'></a><a href='#L152'>152</a>
<a name='L153'></a><a href='#L153'>153</a>
<a name='L154'></a><a href='#L154'>154</a>
<a name='L155'></a><a href='#L155'>155</a>
<a name='L156'></a><a href='#L156'>156</a>
<a name='L157'></a><a href='#L157'>157</a>
<a name='L158'></a><a href='#L158'>158</a>
<a name='L159'></a><a href='#L159'>159</a>
<a name='L160'></a><a href='#L160'>160</a>
<a name='L161'></a><a href='#L161'>161</a>
<a name='L162'></a><a href='#L162'>162</a>
<a name='L163'></a><a href='#L163'>163</a>
<a name='L164'></a><a href='#L164'>164</a>
<a name='L165'></a><a href='#L165'>165</a>
<a name='L166'></a><a href='#L166'>166</a>
<a name='L167'></a><a href='#L167'>167</a>
<a name='L168'></a><a href='#L168'>168</a>
<a name='L169'></a><a href='#L169'>169</a>
<a name='L170'></a><a href='#L170'>170</a>
<a name='L171'></a><a href='#L171'>171</a>
<a name='L172'></a><a href='#L172'>172</a>
<a name='L173'></a><a href='#L173'>173</a>
<a name='L174'></a><a href='#L174'>174</a>
<a name='L175'></a><a href='#L175'>175</a>
<a name='L176'></a><a href='#L176'>176</a>
<a name='L177'></a><a href='#L177'>177</a>
<a name='L178'></a><a href='#L178'>178</a>
<a name='L179'></a><a href='#L179'>179</a>
<a name='L180'></a><a href='#L180'>180</a>
<a name='L181'></a><a href='#L181'>181</a>
<a name='L182'></a><a href='#L182'>182</a>
<a name='L183'></a><a href='#L183'>183</a></td><td class="line-coverage quiet"><span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">499502x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">7x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">7x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">import { SharedMap } from "fluid-framework";import { Persona } from './Persona';
import { Message } from './Message';
import { SharedEmbedding } from "./SharedEmbedding";
import { IConnectionProps, FluidConnection } from './FluidConnection';
import { CaucusOf } from './CaucusFramework';
import { throwIfUndefined } from './Asserts'; 
import { EConfigStrings } from "./ConfigStrings";
import { EIcon } from "./Icons";
&nbsp;
&nbsp;
&nbsp;
const containerSchema = {
   initialObjects: {
      participantMap: SharedMap,
      messageMap: SharedMap,
      sharedEmbeddingMap: SharedMap,
      configuration: SharedMap
   }
};
&nbsp;
// MessageBotFluidConnection - concrete derived class of FluidConnection
// connects the fluid connection to two local caucuses - one for participants, another for messages
export class BraidFluidConnection extends FluidConnection {
&nbsp;
   _initialObjects: any;
   _localUser: Persona;
   _participantCaucus: CaucusOf&lt;Persona&gt; | undefined;
   _messageCaucus: CaucusOf&lt;Message&gt; | undefined;
   _sharedEmbeddingCaucus: CaucusOf&lt;SharedEmbedding&gt; | undefined;
   _interval: NodeJS.Timeout | undefined;
&nbsp;
   constructor(props: IConnectionProps, localUser_: Persona) {
&nbsp;
      super(props);
&nbsp;
      this._initialObjects = undefined;
      this._participantCaucus = undefined;
      this._messageCaucus = undefined;   
      this._sharedEmbeddingCaucus = undefined;
      this._localUser = localUser_; 
      this._interval = undefined;
   }
&nbsp;
   schema() : any {
      return containerSchema;
   }
&nbsp;
   // This menas the list of Messages is ordered by send time ascending
   compareFn (a: Message, b: Message) : number {
      return a.sentAt.getTime() - b.sentAt.getTime();
   }
&nbsp;
   setupLocalCaucuses (initialObjects_: any) : void {
&nbsp;
      this._initialObjects = initialObjects_;
&nbsp;
      // Create caucuses so they exist when observers are notified of connection
      this._participantCaucus = new CaucusOf&lt;Persona&gt;(initialObjects_.participantMap as SharedMap);
      this._messageCaucus = new CaucusOf&lt;Message&gt;(initialObjects_.messageMap as SharedMap, this.compareFn);  
      this._sharedEmbeddingCaucus = new CaucusOf&lt;SharedEmbedding&gt; (initialObjects_.sharedEmbeddingMap as SharedMap)
      
      this.setInitialValues(this._participantCaucus, this._messageCaucus);
&nbsp;
      let self = this;
&nbsp;
      this._interval = setInterval(() =&gt; {
         throwIfUndefined(self._participantCaucus);
         throwIfUndefined(self._messageCaucus);         
         checkAddAddSelfToAudience(self._participantCaucus, self._messageCaucus, self._localUser);
       }, 10000);
   }
&nbsp;
   disconnectLocalCaucuses () : void {
      clearInterval (this._interval);
   }
&nbsp;
   participantCaucus(): CaucusOf&lt;Persona&gt; {
      throwIfUndefined (this._participantCaucus);
      return this._participantCaucus;
   }
&nbsp;
   messageCaucus(): CaucusOf&lt;Message&gt; {
      throwIfUndefined (this._messageCaucus);
      return this._messageCaucus;
   }    
&nbsp;
<span class="fstat-no" title="function not covered" >   sharedEmbeddingCaucus(</span>): CaucusOf&lt;SharedEmbedding&gt; {
<span class="cstat-no" title="statement not covered" >      throwIfUndefined (this._sharedEmbeddingCaucus);</span>
<span class="cstat-no" title="statement not covered" >      return this._sharedEmbeddingCaucus;</span>
   } 
&nbsp;
<span class="fstat-no" title="function not covered" >   resetMessages </span>() : void {
&nbsp;
<span class="cstat-no" title="statement not covered" >      throwIfUndefined (this._messageCaucus);      </span>
<span class="cstat-no" title="statement not covered" >      this._messageCaucus.removeAll ();    </span>
      
<span class="cstat-no" title="statement not covered" >      throwIfUndefined (this._participantCaucus);  </span>
<span class="cstat-no" title="statement not covered" >      this._participantCaucus.removeAll ();</span>
&nbsp;
<span class="cstat-no" title="statement not covered" >      throwIfUndefined (this._sharedEmbeddingCaucus);  </span>
<span class="cstat-no" title="statement not covered" >      this._sharedEmbeddingCaucus.removeAll ();      </span>
&nbsp;
<span class="cstat-no" title="statement not covered" >      this.setInitialValues (this._participantCaucus, </span>
                             this._messageCaucus);
   }
&nbsp;
   private setInitialValues (participantCaucus: CaucusOf&lt;Persona&gt;,  
                             messageCaucus: CaucusOf&lt;Message&gt;): void {
    
      checkAddAddSelfToAudience (participantCaucus, messageCaucus, this._localUser);
&nbsp;
      // Add the Bot persona if its not already there
      let isStored = participantCaucus.has(EConfigStrings.kLLMGuid);
&nbsp;
      <span class="missing-if-branch" title="else path not taken" >E</span>if (! isStored ) {
&nbsp;
         let botPersona = new Persona (EConfigStrings.kLLMGuid, EConfigStrings.kLLMName, EConfigStrings.kLLMName, EIcon.kLLMPersona, undefined, new Date());
         participantCaucus.add (botPersona.id, botPersona);            
      }
   } 
}
&nbsp;
// Glare is when two drivers point their headlights at each other. 
// The Glare check is a way to resolve priority - in this case we let the id that is lexically lowe 'win'
function <span class="fstat-no" title="function not covered" >localWinsGlareCheck </span>(idMe: string, idOther: string) {
<span class="cstat-no" title="statement not covered" >   if (idMe &lt; idOther) </span>
<span class="cstat-no" title="statement not covered" >      return true;</span>
<span class="cstat-no" title="statement not covered" >   return false;</span>
}  
&nbsp;
function checkAddAddSelfToAudience (participantCaucus: CaucusOf&lt;Persona&gt;, 
   messageCaucus: CaucusOf&lt;Message&gt;,
   localUser: Persona): void {
&nbsp;
   let isStored = participantCaucus.has(localUser.id);
&nbsp;
   if (! isStored ) {      
      
      // We look at all participants looking for someine with the same email as us. 
      // If we find one, we do a 'glare' comparison to consistently pick a winner, and the loser of the
      // 'glare' comparison sets their details to those of the winner. 
      let currentParticipants = participantCaucus.currentAsArray();
      let found = false;
&nbsp;
      for (let i = 0; i &lt; currentParticipants.length &amp;&amp; <span class="branch-1 cbranch-no" title="branch not covered" >!found;</span> i++) {        
<span class="cstat-no" title="statement not covered" >         if ((localUser.email === currentParticipants[i].email ) &amp;&amp; </span>
            (!localWinsGlareCheck (localUser.id, currentParticipants[i].id))) { 
            
            // last case is a backwards compatibility hack - we added participants with no name but low UUIDs that keep winning the glare test                     
<span class="cstat-no" title="statement not covered" >            if ((currentParticipants[i].name === undefined) || (currentParticipants[i].name.length === 0)) {</span>
<span class="cstat-no" title="statement not covered" >               currentParticipants[i].name = localUser.name;</span>
<span class="cstat-no" title="statement not covered" >               participantCaucus.amend (currentParticipants[i].id, currentParticipants[i]);</span>
            }
<span class="cstat-no" title="statement not covered" >            found = true;</span>
&nbsp;
            // Any messages which had us as the auther - need to reset Author ID
            let currentMessages = <span class="cstat-no" title="statement not covered" >messageCaucus.currentAsArray();</span>
   
<span class="cstat-no" title="statement not covered" >            for (let j = <span class="cstat-no" title="statement not covered" >0;</span> j &lt; currentMessages.length; j++) {    </span>
<span class="cstat-no" title="statement not covered" >               if (currentMessages[j].authorId === localUser.id) {</span>
<span class="cstat-no" title="statement not covered" >                  currentMessages[i].authorId = currentParticipants[i].id;</span>
<span class="cstat-no" title="statement not covered" >                  messageCaucus.amend (currentMessages[i].id, currentMessages[j]);                     </span>
               }
            }
<span class="cstat-no" title="statement not covered" >            localUser.id = currentParticipants[i].id; </span>// Need to push the new ID back into our local copy
         }
      }
&nbsp;
      <span class="missing-if-branch" title="else path not taken" >E</span>if (!found) {
         // Connect our own user ID to the participant caucus if we are not already in it (or our email is)
         participantCaucus.add (localUser.id, localUser);             
      }
   } 
   else {
      // Check the right name is stored - name changes when the user logs in 
      let stored = participantCaucus.get(localUser.id);         
      <span class="missing-if-branch" title="if path not taken" >I</span>if ((stored.name !== localUser.name) || (stored.email !== localUser.email)) {
<span class="cstat-no" title="statement not covered" >         participantCaucus.add (localUser.id, localUser);                 </span>
      }        
   }
}   
&nbsp;
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\CaucusFramework.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for CaucusFramework.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> CaucusFramework.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">75.92% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>82/108</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">48.48% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>16/33</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">95.23% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>20/21</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">75.92% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>82/108</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line medium'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a>
<a name='L94'></a><a href='#L94'>94</a>
<a name='L95'></a><a href='#L95'>95</a>
<a name='L96'></a><a href='#L96'>96</a>
<a name='L97'></a><a href='#L97'>97</a>
<a name='L98'></a><a href='#L98'>98</a>
<a name='L99'></a><a href='#L99'>99</a>
<a name='L100'></a><a href='#L100'>100</a>
<a name='L101'></a><a href='#L101'>101</a>
<a name='L102'></a><a href='#L102'>102</a>
<a name='L103'></a><a href='#L103'>103</a>
<a name='L104'></a><a href='#L104'>104</a>
<a name='L105'></a><a href='#L105'>105</a>
<a name='L106'></a><a href='#L106'>106</a>
<a name='L107'></a><a href='#L107'>107</a>
<a name='L108'></a><a href='#L108'>108</a>
<a name='L109'></a><a href='#L109'>109</a>
<a name='L110'></a><a href='#L110'>110</a>
<a name='L111'></a><a href='#L111'>111</a>
<a name='L112'></a><a href='#L112'>112</a>
<a name='L113'></a><a href='#L113'>113</a>
<a name='L114'></a><a href='#L114'>114</a>
<a name='L115'></a><a href='#L115'>115</a>
<a name='L116'></a><a href='#L116'>116</a>
<a name='L117'></a><a href='#L117'>117</a>
<a name='L118'></a><a href='#L118'>118</a>
<a name='L119'></a><a href='#L119'>119</a>
<a name='L120'></a><a href='#L120'>120</a>
<a name='L121'></a><a href='#L121'>121</a>
<a name='L122'></a><a href='#L122'>122</a>
<a name='L123'></a><a href='#L123'>123</a>
<a name='L124'></a><a href='#L124'>124</a>
<a name='L125'></a><a href='#L125'>125</a>
<a name='L126'></a><a href='#L126'>126</a>
<a name='L127'></a><a href='#L127'>127</a>
<a name='L128'></a><a href='#L128'>128</a>
<a name='L129'></a><a href='#L129'>129</a>
<a name='L130'></a><a href='#L130'>130</a>
<a name='L131'></a><a href='#L131'>131</a>
<a name='L132'></a><a href='#L132'>132</a>
<a name='L133'></a><a href='#L133'>133</a>
<a name='L134'></a><a href='#L134'>134</a>
<a name='L135'></a><a href='#L135'>135</a>
<a name='L136'></a><a href='#L136'>136</a>
<a name='L137'></a><a href='#L137'>137</a>
<a name='L138'></a><a href='#L138'>138</a>
<a name='L139'></a><a href='#L139'>139</a>
<a name='L140'></a><a href='#L140'>140</a>
<a name='L141'></a><a href='#L141'>141</a>
<a name='L142'></a><a href='#L142'>142</a>
<a name='L143'></a><a href='#L143'>143</a>
<a name='L144'></a><a href='#L144'>144</a>
<a name='L145'></a><a href='#L145'>145</a>
<a name='L146'></a><a href='#L146'>146</a>
<a name='L147'></a><a href='#L147'>147</a>
<a name='L148'></a><a href='#L148'>148</a>
<a name='L149'></a><a href='#L149'>149</a>
<a name='L150'></a><a href='#L150'>150</a>
<a name='L151'></a><a href='#L151'>151</a>
<a name='L152'></a><a href='#L152'>152</a>
<a name='L153'></a><a href='#L153'>153</a>
<a name='L154'></a><a href='#L154'>154</a>
<a name='L155'></a><a href='#L155'>155</a>
<a name='L156'></a><a href='#L156'>156</a>
<a name='L157'></a><a href='#L157'>157</a>
<a name='L158'></a><a href='#L158'>158</a>
<a name='L159'></a><a href='#L159'>159</a>
<a name='L160'></a><a href='#L160'>160</a>
<a name='L161'></a><a href='#L161'>161</a>
<a name='L162'></a><a href='#L162'>162</a>
<a name='L163'></a><a href='#L163'>163</a>
<a name='L164'></a><a href='#L164'>164</a>
<a name='L165'></a><a href='#L165'>165</a>
<a name='L166'></a><a href='#L166'>166</a>
<a name='L167'></a><a href='#L167'>167</a>
<a name='L168'></a><a href='#L168'>168</a>
<a name='L169'></a><a href='#L169'>169</a>
<a name='L170'></a><a href='#L170'>170</a>
<a name='L171'></a><a href='#L171'>171</a>
<a name='L172'></a><a href='#L172'>172</a>
<a name='L173'></a><a href='#L173'>173</a>
<a name='L174'></a><a href='#L174'>174</a>
<a name='L175'></a><a href='#L175'>175</a>
<a name='L176'></a><a href='#L176'>176</a>
<a name='L177'></a><a href='#L177'>177</a>
<a name='L178'></a><a href='#L178'>178</a>
<a name='L179'></a><a href='#L179'>179</a>
<a name='L180'></a><a href='#L180'>180</a>
<a name='L181'></a><a href='#L181'>181</a>
<a name='L182'></a><a href='#L182'>182</a>
<a name='L183'></a><a href='#L183'>183</a>
<a name='L184'></a><a href='#L184'>184</a>
<a name='L185'></a><a href='#L185'>185</a>
<a name='L186'></a><a href='#L186'>186</a>
<a name='L187'></a><a href='#L187'>187</a>
<a name='L188'></a><a href='#L188'>188</a>
<a name='L189'></a><a href='#L189'>189</a>
<a name='L190'></a><a href='#L190'>190</a>
<a name='L191'></a><a href='#L191'>191</a>
<a name='L192'></a><a href='#L192'>192</a>
<a name='L193'></a><a href='#L193'>193</a>
<a name='L194'></a><a href='#L194'>194</a>
<a name='L195'></a><a href='#L195'>195</a>
<a name='L196'></a><a href='#L196'>196</a>
<a name='L197'></a><a href='#L197'>197</a>
<a name='L198'></a><a href='#L198'>198</a>
<a name='L199'></a><a href='#L199'>199</a>
<a name='L200'></a><a href='#L200'>200</a>
<a name='L201'></a><a href='#L201'>201</a>
<a name='L202'></a><a href='#L202'>202</a>
<a name='L203'></a><a href='#L203'>203</a>
<a name='L204'></a><a href='#L204'>204</a>
<a name='L205'></a><a href='#L205'>205</a>
<a name='L206'></a><a href='#L206'>206</a>
<a name='L207'></a><a href='#L207'>207</a>
<a name='L208'></a><a href='#L208'>208</a>
<a name='L209'></a><a href='#L209'>209</a>
<a name='L210'></a><a href='#L210'>210</a>
<a name='L211'></a><a href='#L211'>211</a>
<a name='L212'></a><a href='#L212'>212</a>
<a name='L213'></a><a href='#L213'>213</a>
<a name='L214'></a><a href='#L214'>214</a>
<a name='L215'></a><a href='#L215'>215</a>
<a name='L216'></a><a href='#L216'>216</a>
<a name='L217'></a><a href='#L217'>217</a>
<a name='L218'></a><a href='#L218'>218</a>
<a name='L219'></a><a href='#L219'>219</a>
<a name='L220'></a><a href='#L220'>220</a>
<a name='L221'></a><a href='#L221'>221</a>
<a name='L222'></a><a href='#L222'>222</a>
<a name='L223'></a><a href='#L223'>223</a>
<a name='L224'></a><a href='#L224'>224</a>
<a name='L225'></a><a href='#L225'>225</a>
<a name='L226'></a><a href='#L226'>226</a>
<a name='L227'></a><a href='#L227'>227</a>
<a name='L228'></a><a href='#L228'>228</a>
<a name='L229'></a><a href='#L229'>229</a>
<a name='L230'></a><a href='#L230'>230</a>
<a name='L231'></a><a href='#L231'>231</a>
<a name='L232'></a><a href='#L232'>232</a>
<a name='L233'></a><a href='#L233'>233</a>
<a name='L234'></a><a href='#L234'>234</a>
<a name='L235'></a><a href='#L235'>235</a>
<a name='L236'></a><a href='#L236'>236</a>
<a name='L237'></a><a href='#L237'>237</a>
<a name='L238'></a><a href='#L238'>238</a>
<a name='L239'></a><a href='#L239'>239</a>
<a name='L240'></a><a href='#L240'>240</a>
<a name='L241'></a><a href='#L241'>241</a>
<a name='L242'></a><a href='#L242'>242</a>
<a name='L243'></a><a href='#L243'>243</a>
<a name='L244'></a><a href='#L244'>244</a>
<a name='L245'></a><a href='#L245'>245</a>
<a name='L246'></a><a href='#L246'>246</a>
<a name='L247'></a><a href='#L247'>247</a>
<a name='L248'></a><a href='#L248'>248</a>
<a name='L249'></a><a href='#L249'>249</a>
<a name='L250'></a><a href='#L250'>250</a>
<a name='L251'></a><a href='#L251'>251</a>
<a name='L252'></a><a href='#L252'>252</a>
<a name='L253'></a><a href='#L253'>253</a>
<a name='L254'></a><a href='#L254'>254</a>
<a name='L255'></a><a href='#L255'>255</a>
<a name='L256'></a><a href='#L256'>256</a>
<a name='L257'></a><a href='#L257'>257</a>
<a name='L258'></a><a href='#L258'>258</a>
<a name='L259'></a><a href='#L259'>259</a>
<a name='L260'></a><a href='#L260'>260</a>
<a name='L261'></a><a href='#L261'>261</a>
<a name='L262'></a><a href='#L262'>262</a>
<a name='L263'></a><a href='#L263'>263</a>
<a name='L264'></a><a href='#L264'>264</a>
<a name='L265'></a><a href='#L265'>265</a>
<a name='L266'></a><a href='#L266'>266</a>
<a name='L267'></a><a href='#L267'>267</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1026x</span>
<span class="cline-any cline-yes">1026x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">19x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">19x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">19x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1019x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1019x</span>
<span class="cline-any cline-yes">1019x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">7x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">7x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2010x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1009x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1009x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">500506x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">500506x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1009x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1009x</span>
<span class="cline-any cline-yes">499503x</span>
<span class="cline-any cline-yes">499502x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1009x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2010x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
import { SharedMap, IValueChanged } from "fluid-framework";
&nbsp;
import { debounce } from './Debounce';
import { MDynamicStreamable } from './StreamingFramework';
import { Interest, NotificationFor, Notifier } from './NotificationFramework';
import { throwIfUndefined } from "./Asserts";
&nbsp;
export type compareFn&lt;T&gt; = (left: T, right: T) =&gt; number;
&nbsp;
export class CaucusOf&lt;AType extends MDynamicStreamable&gt; extends Notifier {
&nbsp;
   public static caucusMemberAddedNotificationId = "caucusMemberAdded";
   public static caucusMemberAddedInterest = new Interest(CaucusOf.caucusMemberAddedNotificationId);
&nbsp;
   public static caucusMemberChangedNotificationId = "caucusMemberChanged";
   public static caucusMemberChangedInterest = new Interest(CaucusOf.caucusMemberChangedNotificationId);
&nbsp;
   public static caucusMemberRemovedNotificationId = "caucusMemberRemoved";
   public static caucusMemberRemovedInterest = new Interest(CaucusOf.caucusMemberRemovedNotificationId);
&nbsp;
   private _localMap: Map&lt;string, AType&gt;;
   private _localArray: Array&lt;AType&gt;;
   private _shared: SharedMap;
   private _comparator: compareFn&lt;AType&gt; | null;
   private _isCachedArrayDirty: boolean;
&nbsp;
   constructor(shared_: SharedMap, comparator_: compareFn&lt;AType&gt; | null = null) {
      super();
&nbsp;
      this._shared = shared_;
      this._localMap = new Map&lt;string, AType&gt;();
      this._localArray = new Array&lt;AType&gt;;
      this._comparator = comparator_;
      this._isCachedArrayDirty = true;
&nbsp;
      (this._shared as any).on("valueChanged", (changed: IValueChanged, local: boolean, target: SharedMap) =&gt; {
&nbsp;
         <span class="missing-if-branch" title="else path not taken" >E</span>if (local) { 
            return;
         }
&nbsp;
<span class="cstat-no" title="statement not covered" >         this.doNotification(changed.previousValue !== undefined, target.has(changed.key), changed.key);</span>
&nbsp;
      });
&nbsp;
      // This functions as a kickstarter for initail load - changes made by other parties before we were connected are not classed as 'remote'
      // so we have to kick the UI
      function kickStart() {
         this.doNotification(false, false, undefined);
      }
      const kickStarted = debounce(kickStart.bind(this), 250);
      kickStarted();
   }
&nbsp;
   private doNotification(hadPrevious_: boolean, hasTarget_: boolean, key_: string | undefined): void {
&nbsp;
      <span class="missing-if-branch" title="if path not taken" >I</span>if (hadPrevious_) {
&nbsp;
<span class="cstat-no" title="statement not covered" >         if (hasTarget_) {</span>
&nbsp;
<span class="cstat-no" title="statement not covered" >            this.notifyObservers(CaucusOf.caucusMemberChangedInterest, </span>
               new NotificationFor&lt;string&gt;(CaucusOf.caucusMemberChangedInterest, 
                  key_ as string));
&nbsp;
<span class="cstat-no" title="statement not covered" >            if (key_) {</span>
               let element = <span class="cstat-no" title="statement not covered" >this._shared.get(key_);      </span>
<span class="cstat-no" title="statement not covered" >               throwIfUndefined (element);</span>
            
               let object = <span class="cstat-no" title="statement not covered" >MDynamicStreamable.resurrect(element) as AType;                  </span>
<span class="cstat-no" title="statement not covered" >               this.updateCache (object); </span>
            }
            else {
<span class="cstat-no" title="statement not covered" >               this._isCachedArrayDirty = true;   </span>
            }
         }
         else {
&nbsp;
<span class="cstat-no" title="statement not covered" >            this.notifyObservers(CaucusOf.caucusMemberRemovedInterest, </span>
               new NotificationFor&lt;string&gt;(CaucusOf.caucusMemberRemovedInterest, 
                  key_ as string));
&nbsp;
<span class="cstat-no" title="statement not covered" >            this._isCachedArrayDirty = true;                   </span>
         }
      } else {
&nbsp;
         this.notifyObservers(CaucusOf.caucusMemberAddedInterest, 
            new NotificationFor&lt;string&gt;(CaucusOf.caucusMemberAddedInterest, 
               key_ as string));
&nbsp;
         this._isCachedArrayDirty = true;                
      }
   }
&nbsp;
   has(key_: string): boolean {
&nbsp;
      return this._shared.has(key_);
   }
&nbsp;
   add(key_: string, element_: AType): void {
&nbsp;
      let stream = element_.flatten ();
&nbsp;
      this._shared.set(key_, stream);   
      this._isCachedArrayDirty = true;         
   }
&nbsp;
   remove (key_: string): boolean {
&nbsp;
      let result = this._shared.delete(key_);
      <span class="missing-if-branch" title="else path not taken" >E</span>if (result)
         this._isCachedArrayDirty = true;  
      return result;    
   }
&nbsp;
   amend(key: string, element: AType) {
&nbsp;
      let stream = element.flatten();
&nbsp;
      this._shared.set(key, stream);
&nbsp;
      this.updateCache (element);    
   }
&nbsp;
   get (key_: string) : AType {
&nbsp;
      let element = this._shared.get(key_);
      
      throwIfUndefined (element);
&nbsp;
      let object = MDynamicStreamable.resurrect(element) as AType;
&nbsp;
      return object;
   }
&nbsp;
   removeAll (): void {
      
      this._shared.clear();
      this._localMap.clear();
      this._localArray = new Array&lt;AType&gt;();
      this._isCachedArrayDirty = true;      
&nbsp;
      this.doNotification(false, false, undefined);   
   }
&nbsp;
   current(): Map&lt;string, AType&gt; {
&nbsp;
      this._localMap.clear();
&nbsp;
      this._shared.forEach((value: any, key: string, map: Map&lt;string, any&gt;) =&gt; {
&nbsp;
         let object = MDynamicStreamable.resurrect(value) as AType;
&nbsp;
         this._localMap.set(key, object);
      }); 
&nbsp;
      return this._localMap;
   }
&nbsp;
   currentAsArray(): Array&lt;AType&gt; {
&nbsp;
      if (this._isCachedArrayDirty) {
&nbsp;
         // Truncate the array, then refill from the shared map.
         this._localArray.length = 0;
&nbsp;
         this._shared.forEach((value: any, key: string, map: Map&lt;string, any&gt;) =&gt; {
&nbsp;
            let object = MDynamicStreamable.resurrect(value) as AType;
&nbsp;
            this._localArray.push(object);
         }); 
&nbsp;
         // Sort it if a comparison function is present
         let comparator = this._comparator;
&nbsp;
         this._localArray.sort((a, b) =&gt; {
            if (comparator)
               return comparator (a, b);
            else 
               return 0;
         });
&nbsp;
         this._isCachedArrayDirty = false;
      }
&nbsp;
      return this._localArray;
   }
&nbsp;
   synchFrom ( map_: Map&lt;string, AType&gt;) : void {
&nbsp;
      var deleteSet: Array&lt;string&gt; = new Array&lt;string&gt;();
&nbsp;
      // accumulate a list of things to delete, dont delete as we go bcs it messes up iteration
      this._shared.forEach((value: any, key: string) =&gt; {
         if (!map_.get (key)) {
            deleteSet.push(key);
         }
      });
&nbsp;
      // delete them once we have completed iteration
      deleteSet.forEach((id: string, index: number) =&gt; {
         this._shared.delete(id);
      });
&nbsp;
      // Now update items in the shared map that are different in the input map 
      map_.forEach((value: any, key: string) =&gt; {
&nbsp;
         let elementShared: string | undefined = this._shared.get(key);
&nbsp;
         let elementNew: string = value.flatten();
&nbsp;
         if (!elementShared) {
            this.add (key, value);
         }
         else
         <span class="missing-if-branch" title="else path not taken" >E</span>if (elementShared !== elementNew) {
            this.amend(key, value);
         }
      });
&nbsp;
      this._isCachedArrayDirty = true;
   }
&nbsp;
   private updateCache (item: AType): Array&lt;AType&gt; {
&nbsp;
      let found = false;
&nbsp;
      <span class="missing-if-branch" title="if path not taken" >I</span>if (this._comparator &amp;&amp; <span class="branch-1 cbranch-no" title="branch not covered" >this._localArray)</span> {
         let i = <span class="cstat-no" title="statement not covered" >this.binarySearch (this._localArray, item, this._comparator);</span>
<span class="cstat-no" title="statement not covered" >         if (i !== -1) {</span>
<span class="cstat-no" title="statement not covered" >            this._localArray[i] = item;</span>
<span class="cstat-no" title="statement not covered" >            found = true;</span>
         }
      }
&nbsp;
      <span class="missing-if-branch" title="else path not taken" >E</span>if (!found) {
         this._isCachedArrayDirty = true;
      }
&nbsp;
      return this.currentAsArray();
   }
&nbsp;
<span class="fstat-no" title="function not covered" >   binarySearch(</span>arr: Array&lt;AType&gt;, element: AType, compare_fn: compareFn&lt;AType&gt;) : number {
&nbsp;
      let m = <span class="cstat-no" title="statement not covered" >0;</span>
      let n = <span class="cstat-no" title="statement not covered" >arr.length - 1;</span>
      
<span class="cstat-no" title="statement not covered" >      while (m &lt;= n) {</span>
          let k = <span class="cstat-no" title="statement not covered" >(n + m) &gt;&gt; 1;</span>
          let cmp = <span class="cstat-no" title="statement not covered" >compare_fn(element, arr[k]);</span>
<span class="cstat-no" title="statement not covered" >          if (cmp &gt; 0) {</span>
<span class="cstat-no" title="statement not covered" >             m = k + 1;</span>
          } 
          else 
<span class="cstat-no" title="statement not covered" >          if (cmp &lt; 0) {</span>
<span class="cstat-no" title="statement not covered" >             n = k - 1;</span>
          } 
          else {
<span class="cstat-no" title="statement not covered" >             return k;</span>
          }
      }
<span class="cstat-no" title="statement not covered" >      return -1;</span>
   }   
}
&nbsp;
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\ConfigStrings.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for ConfigStrings.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> ConfigStrings.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>77/77</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>4/4</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>2/2</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>77/77</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a>
<a name='L94'></a><a href='#L94'>94</a>
<a name='L95'></a><a href='#L95'>95</a>
<a name='L96'></a><a href='#L96'>96</a>
<a name='L97'></a><a href='#L97'>97</a>
<a name='L98'></a><a href='#L98'>98</a>
<a name='L99'></a><a href='#L99'>99</a>
<a name='L100'></a><a href='#L100'>100</a>
<a name='L101'></a><a href='#L101'>101</a>
<a name='L102'></a><a href='#L102'>102</a>
<a name='L103'></a><a href='#L103'>103</a>
<a name='L104'></a><a href='#L104'>104</a>
<a name='L105'></a><a href='#L105'>105</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
&nbsp;
export enum EConfigStrings {
&nbsp;
   kCoreLogCategory = "Core",
   kApiLogCategory = "API",
   kDbLogCategory = "DB",   
&nbsp;
   kFontNameForTextWrapCalculation = "12pt Segoe UI",
&nbsp;
   kRequestSessionKeyUrl = "https://braidapps.io/api/joinkey",
   kRequestAiKeyUrl = "https://braidapps.io/api/aikey",   
   kRequestMongoDbKeyUrl = "https://braidapps.io/api/mdbkey",
   kRequestCosmosDbKeyUrl = "https://braidapps.io/api/cdbkey",   
   kRequestLocalSessionKeyUrl = "http://localhost:1337/api/joinkey",
   kRequestLocalAiKeyUrl = "http://localhost:1337/api/aikey",  
   kRequestLocalMongoDbKeyUrl = "http://localhost:1337/api/mdbkey",    
   kRequestLocalCosmosDbKeyUrl = "http://localhost:1337/api/cdbkey",       
   kLoginRelativeUrl= "/api/login",
   kHomeRelativeUrl= "/aibot.html",   
   
   kAzureTenantId = "45155576-770f-47cc-92dc-9d3328dbf837",
   kAzureProductionFluidHost = "https://eu.fluidrelay.azure.com",
   kAzureLocalFluidHost = "http://localhost:7070",
&nbsp;
   kLLMName = 'Braid',
   kLLMNameLowerCase = 'braid',   
   kLLMGuid = "313aafdb-a05c-4dc7-98d0-4db7f28f122f",
   kLLMRequestSignature = '@Braid',
   kLLMRequestSignatureLowerCase = '@braid',
   kLLMNearRequestSignature = 'Braid',
   kLLMNearRequestSignatureLowerCase = 'braid',   
   kOpenAiPersonaPrompt = "You are an AI assistant helping an application developer understand generative AI. You explain complex concepts in simple language, using Python examples if it helps. You limit replies to 50 words or less. If you don't know the answer, say 'I don't know'. If the question is not related to building AI applications, Python, or Large Language Models (LLMs),, say 'That doesn't seem to be about AI'.",
   kInitialQuestionPrompt = "You are an AI assistant helping an application developer understand generative AI. You will be presented with a question. Answer the question in a few sentences, using language a technical graduate student will understand. Limit your reply to 50 words or less. If you don't know the answer, say 'I don't know'. If the question is not related to building AI applications, Python, or Large Language Models (LLMs), say 'That doesn't seem to be about AI'.\n",
   kEnrichmentPrompt = "You will be provided with a question about building applications that use generative AI technology. Write a 50 word summary of an article that would be a great answer to the question. Consider enriching the question with additional topics that the question asker might want to understand. Write the summary in the present tense, as though the article exists. If the question is not related to building AI applications, Python, or Large Language Models (LLMs), say 'That doesn't seem to be about AI'.\n",
   kFollowUpPrompt = "You will be provided with a summary of an article about building applications that use generative AI technology. Write a question of no more than 10 words that a reader might ask as a follow up to reading the article.",
   kEnrichmentQuestionPrefix = "Question: ",
   kFollowUpPrefix = "Article summary: ",
   kGenerateAQuestionPrompt = "You are an AI assistant helping an application developer understand generative AI. Based on the dialog presented as context, generate a 10 word question that is relevant to the subjects being discussed.\n",
   
   // These are applied serially - watch out for adding terms in early edits that then get replaced again later on
   // Spaces are significant
   kPromptLookFor1 = "an LLM",
   kPromptReplaceWith1 = "a Large Language Model (LLM)",
   kPromptLookFor2 = "LLMs",
   kPromptReplaceWith2 = "Large Language Models (LLMs)",   
   kPromptLookFor3 = " LLM ",
   kPromptReplaceWith3 = " Large Language Model (LLM) ",   
   kPromptLookFor4 = " LLm ",
   kPromptReplaceWith4 = " Large Language Model (LLM) ", 
   kPromptLookFor5 = " lLM ",
   kPromptReplaceWith5 = " Large Language Model (LLM) ",
   kPromptLookFor6 = " LlM ",
   kPromptReplaceWith6 = " Large Language Model (LLM) ",
&nbsp;
   // Use these to detect questions where we are not relevant
   kResponseNotRelevantMarker = "That doesn't seem to be about AI",
   kResponseDontKnowMarker = "I don't know",   
&nbsp;
   kErrorConnectingToKeyAPI = "Error connecting to Braid server.",
   kErrorConnectingToAiAPI = "Error connecting to AI server.",
&nbsp;
   kSessionParamName = "session",
   kConversationParamName = "conversation",   
   kEmailParamName = "email",
   kNameParamName = "name",
&nbsp;
   kCohort1ConversationKey = "0665752f-45f1-4c00-820d-63abfdfe47c3",
   kCohort1Team1ConversationKey = "2da0520e-0d7d-42e3-98ec-119379078565",   
   kCohort1Team2ConversationKey = "a7be59c6-82b0-4f35-884f-0a29b0832407",
   kCohort1Team3ConversationKey = "f1464b64-e487-4929-a51a-fcacdb0256bf",   
   kCohort1Team4ConversationKey = "21f34669-134d-44fb-a0ad-5f7ef6e2f185",     
   kDemoConversationKey = "8cf7e424-fea8-45d7-b8f6-1e7dd694f939",
   kBraidPlatformConversationKey = "63c88ddc-956c-49a4-be38-bbc62aa562f5",
&nbsp;
   kEmbeddingFileUrlLocal = 'http://localhost:1337/embeddings_lite.json',
   kEmbeddingFileUrlProduction = 'https://braidapps.io/embeddings_lite.json',
&nbsp;
   kAdminUserNames = "Jon Verrier" // Comma seperated list of names, at run time we just check if the user name is included in this list. 
};
&nbsp;
export enum EConfigNumbers {
   kInitialHelpfulPromptDelayMsecs = 1000,
   kBraidChattinessMessageCount = 20,
   kMaximumLinkTextlength = 40,
   kMaximumLinkTextlengthMobile = 30,   
   kHelpfulPromptMinimumGapMins = 10, // At least 10 minutes between AI suggestions
   kMessagePrompt2VBorder = 24,       // How much to allow for top + bottom inset
   kMessagePrompt2HBorder = 24,       // How much to allow for left &amp; right inset
   kMessagePromptLineSpace = 8,       // How much to allow between lines
   kMessagePromptMaxCharacters = 2048,
   kMaxDownloadWaitSeconds = 30,
   kMaxMessagesBack = 20,          // Go up to 20 messages back for context to send to the LLM
   kMaxChatLevel = 4 // 0-4 to set how chatty the AI is
}
&nbsp;
// This is used for local running only, as in browser we cannot access environment variables
// NEVER PUT PRODUCTION SECRETS IN HERE
let KStubEnvironmentVariables = {
   SessionKey : "49b65194-26e1-4041-ab11-4078229f478a",
   ConversationKey : "abcde"
};
&nbsp;
export {KStubEnvironmentVariables};
   </pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\Debounce.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for Debounce.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> Debounce.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>9/9</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>2/2</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>3/3</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>9/9</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">20x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">20x</span>
<span class="cline-any cline-yes">21x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">21x</span>
<span class="cline-any cline-yes">20x</span>
<span class="cline-any cline-yes">20x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
&nbsp;
export function debounce(fn_ : Function, ms_: number) {
&nbsp;
   var timer: NodeJS.Timeout | null = null;
&nbsp;
   return () =&gt; {
      if (timer) {
         clearTimeout(timer);
         timer = null;
      }
&nbsp;
      timer = setTimeout(() =&gt; {
         timer = null;
         fn_.apply(this, arguments)
      }, ms_);
   };
}</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\Embedding.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for Embedding.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> Embedding.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">92.24% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>119/129</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">81.52% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>75/92</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>26/26</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">92.06% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>116/126</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a>
<a name='L94'></a><a href='#L94'>94</a>
<a name='L95'></a><a href='#L95'>95</a>
<a name='L96'></a><a href='#L96'>96</a>
<a name='L97'></a><a href='#L97'>97</a>
<a name='L98'></a><a href='#L98'>98</a>
<a name='L99'></a><a href='#L99'>99</a>
<a name='L100'></a><a href='#L100'>100</a>
<a name='L101'></a><a href='#L101'>101</a>
<a name='L102'></a><a href='#L102'>102</a>
<a name='L103'></a><a href='#L103'>103</a>
<a name='L104'></a><a href='#L104'>104</a>
<a name='L105'></a><a href='#L105'>105</a>
<a name='L106'></a><a href='#L106'>106</a>
<a name='L107'></a><a href='#L107'>107</a>
<a name='L108'></a><a href='#L108'>108</a>
<a name='L109'></a><a href='#L109'>109</a>
<a name='L110'></a><a href='#L110'>110</a>
<a name='L111'></a><a href='#L111'>111</a>
<a name='L112'></a><a href='#L112'>112</a>
<a name='L113'></a><a href='#L113'>113</a>
<a name='L114'></a><a href='#L114'>114</a>
<a name='L115'></a><a href='#L115'>115</a>
<a name='L116'></a><a href='#L116'>116</a>
<a name='L117'></a><a href='#L117'>117</a>
<a name='L118'></a><a href='#L118'>118</a>
<a name='L119'></a><a href='#L119'>119</a>
<a name='L120'></a><a href='#L120'>120</a>
<a name='L121'></a><a href='#L121'>121</a>
<a name='L122'></a><a href='#L122'>122</a>
<a name='L123'></a><a href='#L123'>123</a>
<a name='L124'></a><a href='#L124'>124</a>
<a name='L125'></a><a href='#L125'>125</a>
<a name='L126'></a><a href='#L126'>126</a>
<a name='L127'></a><a href='#L127'>127</a>
<a name='L128'></a><a href='#L128'>128</a>
<a name='L129'></a><a href='#L129'>129</a>
<a name='L130'></a><a href='#L130'>130</a>
<a name='L131'></a><a href='#L131'>131</a>
<a name='L132'></a><a href='#L132'>132</a>
<a name='L133'></a><a href='#L133'>133</a>
<a name='L134'></a><a href='#L134'>134</a>
<a name='L135'></a><a href='#L135'>135</a>
<a name='L136'></a><a href='#L136'>136</a>
<a name='L137'></a><a href='#L137'>137</a>
<a name='L138'></a><a href='#L138'>138</a>
<a name='L139'></a><a href='#L139'>139</a>
<a name='L140'></a><a href='#L140'>140</a>
<a name='L141'></a><a href='#L141'>141</a>
<a name='L142'></a><a href='#L142'>142</a>
<a name='L143'></a><a href='#L143'>143</a>
<a name='L144'></a><a href='#L144'>144</a>
<a name='L145'></a><a href='#L145'>145</a>
<a name='L146'></a><a href='#L146'>146</a>
<a name='L147'></a><a href='#L147'>147</a>
<a name='L148'></a><a href='#L148'>148</a>
<a name='L149'></a><a href='#L149'>149</a>
<a name='L150'></a><a href='#L150'>150</a>
<a name='L151'></a><a href='#L151'>151</a>
<a name='L152'></a><a href='#L152'>152</a>
<a name='L153'></a><a href='#L153'>153</a>
<a name='L154'></a><a href='#L154'>154</a>
<a name='L155'></a><a href='#L155'>155</a>
<a name='L156'></a><a href='#L156'>156</a>
<a name='L157'></a><a href='#L157'>157</a>
<a name='L158'></a><a href='#L158'>158</a>
<a name='L159'></a><a href='#L159'>159</a>
<a name='L160'></a><a href='#L160'>160</a>
<a name='L161'></a><a href='#L161'>161</a>
<a name='L162'></a><a href='#L162'>162</a>
<a name='L163'></a><a href='#L163'>163</a>
<a name='L164'></a><a href='#L164'>164</a>
<a name='L165'></a><a href='#L165'>165</a>
<a name='L166'></a><a href='#L166'>166</a>
<a name='L167'></a><a href='#L167'>167</a>
<a name='L168'></a><a href='#L168'>168</a>
<a name='L169'></a><a href='#L169'>169</a>
<a name='L170'></a><a href='#L170'>170</a>
<a name='L171'></a><a href='#L171'>171</a>
<a name='L172'></a><a href='#L172'>172</a>
<a name='L173'></a><a href='#L173'>173</a>
<a name='L174'></a><a href='#L174'>174</a>
<a name='L175'></a><a href='#L175'>175</a>
<a name='L176'></a><a href='#L176'>176</a>
<a name='L177'></a><a href='#L177'>177</a>
<a name='L178'></a><a href='#L178'>178</a>
<a name='L179'></a><a href='#L179'>179</a>
<a name='L180'></a><a href='#L180'>180</a>
<a name='L181'></a><a href='#L181'>181</a>
<a name='L182'></a><a href='#L182'>182</a>
<a name='L183'></a><a href='#L183'>183</a>
<a name='L184'></a><a href='#L184'>184</a>
<a name='L185'></a><a href='#L185'>185</a>
<a name='L186'></a><a href='#L186'>186</a>
<a name='L187'></a><a href='#L187'>187</a>
<a name='L188'></a><a href='#L188'>188</a>
<a name='L189'></a><a href='#L189'>189</a>
<a name='L190'></a><a href='#L190'>190</a>
<a name='L191'></a><a href='#L191'>191</a>
<a name='L192'></a><a href='#L192'>192</a>
<a name='L193'></a><a href='#L193'>193</a>
<a name='L194'></a><a href='#L194'>194</a>
<a name='L195'></a><a href='#L195'>195</a>
<a name='L196'></a><a href='#L196'>196</a>
<a name='L197'></a><a href='#L197'>197</a>
<a name='L198'></a><a href='#L198'>198</a>
<a name='L199'></a><a href='#L199'>199</a>
<a name='L200'></a><a href='#L200'>200</a>
<a name='L201'></a><a href='#L201'>201</a>
<a name='L202'></a><a href='#L202'>202</a>
<a name='L203'></a><a href='#L203'>203</a>
<a name='L204'></a><a href='#L204'>204</a>
<a name='L205'></a><a href='#L205'>205</a>
<a name='L206'></a><a href='#L206'>206</a>
<a name='L207'></a><a href='#L207'>207</a>
<a name='L208'></a><a href='#L208'>208</a>
<a name='L209'></a><a href='#L209'>209</a>
<a name='L210'></a><a href='#L210'>210</a>
<a name='L211'></a><a href='#L211'>211</a>
<a name='L212'></a><a href='#L212'>212</a>
<a name='L213'></a><a href='#L213'>213</a>
<a name='L214'></a><a href='#L214'>214</a>
<a name='L215'></a><a href='#L215'>215</a>
<a name='L216'></a><a href='#L216'>216</a>
<a name='L217'></a><a href='#L217'>217</a>
<a name='L218'></a><a href='#L218'>218</a>
<a name='L219'></a><a href='#L219'>219</a>
<a name='L220'></a><a href='#L220'>220</a>
<a name='L221'></a><a href='#L221'>221</a>
<a name='L222'></a><a href='#L222'>222</a>
<a name='L223'></a><a href='#L223'>223</a>
<a name='L224'></a><a href='#L224'>224</a>
<a name='L225'></a><a href='#L225'>225</a>
<a name='L226'></a><a href='#L226'>226</a>
<a name='L227'></a><a href='#L227'>227</a>
<a name='L228'></a><a href='#L228'>228</a>
<a name='L229'></a><a href='#L229'>229</a>
<a name='L230'></a><a href='#L230'>230</a>
<a name='L231'></a><a href='#L231'>231</a>
<a name='L232'></a><a href='#L232'>232</a>
<a name='L233'></a><a href='#L233'>233</a>
<a name='L234'></a><a href='#L234'>234</a>
<a name='L235'></a><a href='#L235'>235</a>
<a name='L236'></a><a href='#L236'>236</a>
<a name='L237'></a><a href='#L237'>237</a>
<a name='L238'></a><a href='#L238'>238</a>
<a name='L239'></a><a href='#L239'>239</a>
<a name='L240'></a><a href='#L240'>240</a>
<a name='L241'></a><a href='#L241'>241</a>
<a name='L242'></a><a href='#L242'>242</a>
<a name='L243'></a><a href='#L243'>243</a>
<a name='L244'></a><a href='#L244'>244</a>
<a name='L245'></a><a href='#L245'>245</a>
<a name='L246'></a><a href='#L246'>246</a>
<a name='L247'></a><a href='#L247'>247</a>
<a name='L248'></a><a href='#L248'>248</a>
<a name='L249'></a><a href='#L249'>249</a>
<a name='L250'></a><a href='#L250'>250</a>
<a name='L251'></a><a href='#L251'>251</a>
<a name='L252'></a><a href='#L252'>252</a>
<a name='L253'></a><a href='#L253'>253</a>
<a name='L254'></a><a href='#L254'>254</a>
<a name='L255'></a><a href='#L255'>255</a>
<a name='L256'></a><a href='#L256'>256</a>
<a name='L257'></a><a href='#L257'>257</a>
<a name='L258'></a><a href='#L258'>258</a>
<a name='L259'></a><a href='#L259'>259</a>
<a name='L260'></a><a href='#L260'>260</a>
<a name='L261'></a><a href='#L261'>261</a>
<a name='L262'></a><a href='#L262'>262</a>
<a name='L263'></a><a href='#L263'>263</a>
<a name='L264'></a><a href='#L264'>264</a>
<a name='L265'></a><a href='#L265'>265</a>
<a name='L266'></a><a href='#L266'>266</a>
<a name='L267'></a><a href='#L267'>267</a>
<a name='L268'></a><a href='#L268'>268</a>
<a name='L269'></a><a href='#L269'>269</a>
<a name='L270'></a><a href='#L270'>270</a>
<a name='L271'></a><a href='#L271'>271</a>
<a name='L272'></a><a href='#L272'>272</a>
<a name='L273'></a><a href='#L273'>273</a>
<a name='L274'></a><a href='#L274'>274</a>
<a name='L275'></a><a href='#L275'>275</a>
<a name='L276'></a><a href='#L276'>276</a>
<a name='L277'></a><a href='#L277'>277</a>
<a name='L278'></a><a href='#L278'>278</a>
<a name='L279'></a><a href='#L279'>279</a>
<a name='L280'></a><a href='#L280'>280</a>
<a name='L281'></a><a href='#L281'>281</a>
<a name='L282'></a><a href='#L282'>282</a>
<a name='L283'></a><a href='#L283'>283</a>
<a name='L284'></a><a href='#L284'>284</a>
<a name='L285'></a><a href='#L285'>285</a>
<a name='L286'></a><a href='#L286'>286</a>
<a name='L287'></a><a href='#L287'>287</a>
<a name='L288'></a><a href='#L288'>288</a>
<a name='L289'></a><a href='#L289'>289</a>
<a name='L290'></a><a href='#L290'>290</a>
<a name='L291'></a><a href='#L291'>291</a>
<a name='L292'></a><a href='#L292'>292</a>
<a name='L293'></a><a href='#L293'>293</a>
<a name='L294'></a><a href='#L294'>294</a>
<a name='L295'></a><a href='#L295'>295</a>
<a name='L296'></a><a href='#L296'>296</a>
<a name='L297'></a><a href='#L297'>297</a>
<a name='L298'></a><a href='#L298'>298</a>
<a name='L299'></a><a href='#L299'>299</a>
<a name='L300'></a><a href='#L300'>300</a>
<a name='L301'></a><a href='#L301'>301</a>
<a name='L302'></a><a href='#L302'>302</a>
<a name='L303'></a><a href='#L303'>303</a>
<a name='L304'></a><a href='#L304'>304</a>
<a name='L305'></a><a href='#L305'>305</a>
<a name='L306'></a><a href='#L306'>306</a>
<a name='L307'></a><a href='#L307'>307</a>
<a name='L308'></a><a href='#L308'>308</a>
<a name='L309'></a><a href='#L309'>309</a>
<a name='L310'></a><a href='#L310'>310</a>
<a name='L311'></a><a href='#L311'>311</a>
<a name='L312'></a><a href='#L312'>312</a>
<a name='L313'></a><a href='#L313'>313</a>
<a name='L314'></a><a href='#L314'>314</a>
<a name='L315'></a><a href='#L315'>315</a>
<a name='L316'></a><a href='#L316'>316</a>
<a name='L317'></a><a href='#L317'>317</a>
<a name='L318'></a><a href='#L318'>318</a>
<a name='L319'></a><a href='#L319'>319</a>
<a name='L320'></a><a href='#L320'>320</a>
<a name='L321'></a><a href='#L321'>321</a>
<a name='L322'></a><a href='#L322'>322</a>
<a name='L323'></a><a href='#L323'>323</a>
<a name='L324'></a><a href='#L324'>324</a>
<a name='L325'></a><a href='#L325'>325</a>
<a name='L326'></a><a href='#L326'>326</a>
<a name='L327'></a><a href='#L327'>327</a>
<a name='L328'></a><a href='#L328'>328</a>
<a name='L329'></a><a href='#L329'>329</a>
<a name='L330'></a><a href='#L330'>330</a>
<a name='L331'></a><a href='#L331'>331</a>
<a name='L332'></a><a href='#L332'>332</a>
<a name='L333'></a><a href='#L333'>333</a>
<a name='L334'></a><a href='#L334'>334</a>
<a name='L335'></a><a href='#L335'>335</a>
<a name='L336'></a><a href='#L336'>336</a>
<a name='L337'></a><a href='#L337'>337</a>
<a name='L338'></a><a href='#L338'>338</a>
<a name='L339'></a><a href='#L339'>339</a>
<a name='L340'></a><a href='#L340'>340</a>
<a name='L341'></a><a href='#L341'>341</a>
<a name='L342'></a><a href='#L342'>342</a>
<a name='L343'></a><a href='#L343'>343</a>
<a name='L344'></a><a href='#L344'>344</a>
<a name='L345'></a><a href='#L345'>345</a>
<a name='L346'></a><a href='#L346'>346</a>
<a name='L347'></a><a href='#L347'>347</a>
<a name='L348'></a><a href='#L348'>348</a>
<a name='L349'></a><a href='#L349'>349</a>
<a name='L350'></a><a href='#L350'>350</a>
<a name='L351'></a><a href='#L351'>351</a>
<a name='L352'></a><a href='#L352'>352</a>
<a name='L353'></a><a href='#L353'>353</a>
<a name='L354'></a><a href='#L354'>354</a>
<a name='L355'></a><a href='#L355'>355</a>
<a name='L356'></a><a href='#L356'>356</a>
<a name='L357'></a><a href='#L357'>357</a>
<a name='L358'></a><a href='#L358'>358</a>
<a name='L359'></a><a href='#L359'>359</a>
<a name='L360'></a><a href='#L360'>360</a>
<a name='L361'></a><a href='#L361'>361</a>
<a name='L362'></a><a href='#L362'>362</a>
<a name='L363'></a><a href='#L363'>363</a>
<a name='L364'></a><a href='#L364'>364</a>
<a name='L365'></a><a href='#L365'>365</a>
<a name='L366'></a><a href='#L366'>366</a>
<a name='L367'></a><a href='#L367'>367</a>
<a name='L368'></a><a href='#L368'>368</a>
<a name='L369'></a><a href='#L369'>369</a>
<a name='L370'></a><a href='#L370'>370</a>
<a name='L371'></a><a href='#L371'>371</a>
<a name='L372'></a><a href='#L372'>372</a>
<a name='L373'></a><a href='#L373'>373</a>
<a name='L374'></a><a href='#L374'>374</a>
<a name='L375'></a><a href='#L375'>375</a>
<a name='L376'></a><a href='#L376'>376</a>
<a name='L377'></a><a href='#L377'>377</a>
<a name='L378'></a><a href='#L378'>378</a>
<a name='L379'></a><a href='#L379'>379</a>
<a name='L380'></a><a href='#L380'>380</a>
<a name='L381'></a><a href='#L381'>381</a>
<a name='L382'></a><a href='#L382'>382</a>
<a name='L383'></a><a href='#L383'>383</a>
<a name='L384'></a><a href='#L384'>384</a>
<a name='L385'></a><a href='#L385'>385</a>
<a name='L386'></a><a href='#L386'>386</a>
<a name='L387'></a><a href='#L387'>387</a>
<a name='L388'></a><a href='#L388'>388</a>
<a name='L389'></a><a href='#L389'>389</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">10983x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">10983x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">35323x</span>
<span class="cline-any cline-yes">35323x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">35323x</span>
<span class="cline-any cline-yes">10241x</span>
<span class="cline-any cline-yes">10241x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">10241x</span>
<span class="cline-any cline-yes">111x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">10130x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">25082x</span>
<span class="cline-any cline-yes">25082x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">25082x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1049x</span>
<span class="cline-any cline-yes">530x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">519x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">24033x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1618x</span>
<span class="cline-any cline-yes">666x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">952x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">22415x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">10983x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">10983x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">10982x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">10979x</span>
<span class="cline-any cline-yes">10979x</span>
<span class="cline-any cline-yes">10979x</span>
<span class="cline-any cline-yes">10979x</span>
<span class="cline-any cline-yes">10979x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">10982x</span>
<span class="cline-any cline-yes">10982x</span>
<span class="cline-any cline-yes">10982x</span>
<span class="cline-any cline-yes">10982x</span>
<span class="cline-any cline-yes">10982x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">63675x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">21x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">13x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">7x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">54379x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">9x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">16x</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">16x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">8734x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">8734x</span>
<span class="cline-any cline-yes">8734x</span>
<span class="cline-any cline-yes">8734x</span>
<span class="cline-any cline-yes">8734x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">8734x</span>
<span class="cline-any cline-yes">8734x</span>
<span class="cline-any cline-yes">8734x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">8734x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">8734x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">8734x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">8734x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">8734x</span>
<span class="cline-any cline-yes">3557x</span>
<span class="cline-any cline-yes">3557x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">8734x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">10956x</span>
<span class="cline-any cline-yes">169x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">10787x</span>
<span class="cline-any cline-yes">19613x</span>
<span class="cline-any cline-yes">1136x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">9651x</span>
<span class="cline-any cline-yes">917x</span>
<span class="cline-any cline-yes">22x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">917x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">8734x</span>
<span class="cline-any cline-yes">8734x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">8734x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">8734x</span>
<span class="cline-any cline-yes">75x</span>
<span class="cline-any cline-yes">75x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">8659x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
 
import { MStreamable } from "./StreamingFramework";
import { areSameDate, areSameShallowArray, areSameDeepArray} from './Utilities';
import { InvalidParameterError } from "./Errors";
&nbsp;
function copyTimeStamp (stamp: Date | undefined) : Date | undefined {
   return (typeof stamp === 'undefined') ? undefined : new Date(stamp);
}
&nbsp;
function copyRelevance (relevance: number | undefined) : number | undefined {
   return (typeof relevance === 'undefined') ? undefined : relevance;
}
&nbsp;
const youTubeHostname = "www.youtube.com";
const gitHubHostname = "github.com";
&nbsp;
export function lookLikeSameSource (url1: string, url2: string ) : boolean {
&nbsp;
   const URLLeft = new URL (url1);
   const URLRight = new URL (url2);
&nbsp;
   // Youtube format URL
   // https://www.youtube.com/watch?v=l5mG4z343qg&amp;t=00h00m00s
   // To compare two YouTube URLs we look at the ?v= parameter for the video ID
   if (URLLeft.hostname === (youTubeHostname) &amp;&amp; URLRight.hostname === (youTubeHostname)) {
      const videoLeft = URLLeft.searchParams.get('v');
      const videoRight = URLRight.searchParams.get('v');  
      
      if (videoLeft === videoRight)
         return true;
      else
         return false;
&nbsp;
   }
&nbsp;
   // GitHub format URL
   // https://github.com/organisation/repo/...
   // To compare two GitHub URLs we look at the first two path paramters   
   const pathLeft = URLLeft.pathname.split('/').slice (1);
   const pathRight = URLRight.pathname.split('/').slice(1);
&nbsp;
   if (URLLeft.hostname === (gitHubHostname) &amp;&amp; URLRight.hostname === (gitHubHostname) 
      &amp;&amp; (pathLeft.length &gt;= 2) &amp;&amp; (pathRight.length &gt;= 2)) {
&nbsp;
      if (pathLeft[0] === pathRight[0] &amp;&amp; pathLeft[1] === pathRight[1])
         return true;
      else
         return false;
   }
&nbsp;
   // To compare two Web URLs we look at the first path paramters  
   if ((URLLeft.hostname === URLRight.hostname) &amp;&amp; 
       (pathLeft.length &gt;= 1) &amp;&amp; (pathRight.length &gt;= 1)) {
&nbsp;
         if (pathLeft[0] === pathRight[0])
            return true;
         else
            return false;
   }
&nbsp;
   return false;
}
&nbsp;
/**
 * Embeddeding object
 * @param url - link to source on the web.
 * @param summary - text summary (50 words)
 * @param ada_v2: embedding value array. Note this is copied by value to avoid duplicating large arrays.
 * @param timeStamp - when the item is dated from - can be undefined if not known
 * @param relevance - cosine relevance score to a query - can be undefined if the source reference has not been compared yet
 */
export class Embedding extends MStreamable {
   private _url: string;
   private _summary: string;
   private _ada_v2: Array&lt;number&gt;;
   private _timeStamp: Date | undefined;   
   private _relevance: number | undefined;
&nbsp;
   /**
    * Create an empty Embeddeding object - required for particiation in serialisation framework
    */
   public constructor();
&nbsp;
   /**
    * Create a Embedding object
    * @param url_ - link to source on the web.
    * @param summary_ - text summary (50 words)
    * @param ada_v2_: embedding value array. Note this is copied by value to avoid duplicating large arrays.
    * @param timeStamp_ - when the item is dated from - can be undefined if not known
    * @param relevance_ - cosine relevance score to a query - can be undefined if the source reference has not been compared yet
    */
   public constructor(url_: string, summary_: string, ada_v2_: Array&lt;number&gt;, 
                      timeStamp_: Date | undefined, relevance_: number | undefined);
&nbsp;
   /**
    * Create a Embedding object
    * @param source - object to copy from - should work for JSON format and for real constructed objects
    */
   public constructor(source: Embedding);
&nbsp;
   public constructor(...arr: any[])
   {
&nbsp;
      super();
&nbsp;
      if (arr.length === 0) {
         this._url = ""; 
         this._summary = "";     
         this._ada_v2 = new Array&lt;number&gt; ();                  
         this._timeStamp = undefined;
         this._relevance = undefined;         
         return;
      }
&nbsp;
      var localUrl: string;
      var localSummary: string;
      var localAda: Array&lt;number&gt;;
      var localTimeStamp: Date | undefined;      
      var localRelevance: number | undefined;
&nbsp;
      if (arr.length === 1) {
         localUrl = arr[0]._url
         localSummary = arr[0]._summary;
         localAda = arr[0]._ada_v2;
         localTimeStamp = copyTimeStamp (arr[0]._timeStamp);
         localRelevance = copyRelevance (arr[0]._relevance);         
      }
      else { 
         localUrl = arr[0];
         localSummary = arr[1]; 
         localAda = arr[2];              
         localTimeStamp = copyTimeStamp (arr[3]);
         localRelevance = copyRelevance (arr[4]);           
      }
&nbsp;
      this._url = localUrl;
      this._summary = localSummary;
      this._ada_v2 = localAda;
      this._timeStamp = localTimeStamp;      
      this._relevance = localRelevance;
   }
&nbsp;
   streamOut(): string {
&nbsp;
      return JSON.stringify({ url: this._url, summary: this._summary, ada_v2: this._ada_v2, timeStamp: this._timeStamp, relevance: this._relevance});
   }
&nbsp;
   streamIn(stream: string): void {
&nbsp;
      const obj = JSON.parse(stream);
&nbsp;
      this.assign(new Embedding (obj.url, obj.summary, obj.ada_v2, obj.timeStamp, obj.relevance));   
   }
&nbsp;
   /**
   * set of 'getters' for private variables
   */
   get url(): string {
      return this._url;
   }
   get summary(): string {
      return this._summary;
   }
   get ada_v2(): Array&lt;number&gt; {
      return this._ada_v2;
   }   
   get timeStamp(): Date | undefined {
      return this._timeStamp;
   }
   get relevance(): number | undefined {
      return this._relevance;
   }
&nbsp;
   /**
   * set of 'setters' for private variables
   */
   set url(url_: string) {
&nbsp;
      this._url = url_;
   }
&nbsp;
   set summary(summary_: string) {
&nbsp;
      this._summary = summary_;
   }
&nbsp;
   set ada_v2(ada_v2_: Array&lt;number&gt;) {
&nbsp;
      this._ada_v2 = ada_v2_;
   }   
&nbsp;
   set timeStamp(timeStamp_: Date) {
&nbsp;
      this._timeStamp = timeStamp_;
   }
&nbsp;
   set relevance (relevance_: number) {
&nbsp;
      this._relevance = relevance_;
   }
&nbsp;
   /**
    * test for equality - checks all fields are the same. 
    * Uses field values, not identity bcs if objects are streamed to/from JSON, field identities will be different. 
    * @param rhs - the object to compare this one to.  
    */
   equals(rhs: Embedding): boolean {
&nbsp;
      return ((this._url === rhs._url) &amp;&amp;
         (this._summary === rhs._summary) &amp;&amp;
         (areSameShallowArray (this._ada_v2, rhs._ada_v2)) &amp;&amp;         
         (areSameDate (this._timeStamp, rhs._timeStamp)) &amp;&amp;         
         ((this._relevance === undefined &amp;&amp; rhs._relevance === undefined) || (this._relevance === rhs._relevance)));
   }
&nbsp;
   /**
    * assignment operator 
    * @param rhs - the object to assign this one from.  
    */
   assign(rhs: Embedding): Embedding {
&nbsp;
      this._url = rhs._url;
      this._summary = rhs._summary;
      this._ada_v2 = rhs._ada_v2;
      this._timeStamp = copyTimeStamp (rhs._timeStamp);      
      this._relevance = copyRelevance (rhs._relevance);
&nbsp;
      return this;
   }
}
&nbsp;
/**
 * EmbeddingMatchAccumulator object
 * @param similarityThresholdLo_: Lowest cosine similarity to allow
 * @param howMany_: how many segments to collect
 * Conceptually this class acts a 'bag' - keeps the top N sources in an unordererd array, only sorts them when requested at the end,
 * which avoids lots of re-sorting while searching for the top N. Should be OK performance wise as the loest value will climb up quite quickly. 
 */
export class EmbeddingMatchAccumulator {
&nbsp;
   private _chunks: Array&lt;Embedding&gt;;
   private _similarityThresholdLo: number;
   private _howMany : number;
&nbsp;
   /**
    * Create a EmbeddingMatchAccumulator object
    * @param similarityThresholdLo_ - lowest bar for similarity
    * @param howMany_ - how many items to retrieve 
    */
   public constructor(similarityThresholdLo_: number, howMany_: number) {
&nbsp;
      <span class="missing-if-branch" title="if path not taken" >I</span>if (similarityThresholdLo_ &lt; -1 || similarityThresholdLo_ &gt; 1)
<span class="cstat-no" title="statement not covered" >         throw new InvalidParameterError ("Cosine similarity must be between -1 and 1.");</span>
&nbsp;
      this._chunks = new Array&lt;Embedding&gt; ();  
      this._similarityThresholdLo = similarityThresholdLo_;
      this._howMany = howMany_;            
   }
&nbsp;
   /**
   * set of 'getters' for private variables
   */
   get similarityThreshold (): number {
      return this._similarityThresholdLo;
   }   
   get howMany (): number {
      return this._howMany;
   }        
   get chunks (): Array&lt;Embedding&gt; {
      this._chunks.sort ((a: Embedding, b: Embedding) : number =&gt; {
          <span class="missing-if-branch" title="if path not taken" >I</span>if (!a.relevance || !b.relevance)
<span class="cstat-no" title="statement not covered" >             return 0;</span>
          return b.relevance - a.relevance;
      });
      return this._chunks;
   }   
&nbsp;
   /**
    * test for equality - checks all fields are the same. 
    * Uses field values, not identity bcs if objects are streamed to/from JSON, field identities will be different. 
    * @param rhs - the object to compare this one to.  
    */
   equals(rhs: EmbeddingMatchAccumulator): boolean {
&nbsp;
      return (this._howMany == rhs._howMany 
         &amp;&amp; this._similarityThresholdLo == rhs._similarityThresholdLo 
         &amp;&amp; areSameDeepArray (this._chunks, rhs._chunks));
   }
&nbsp;
   /**
    * searches current most relevant results to see if the new one should be included.  
    * @param urlIn - the URL of a reference source, may be undefined. If it is defined, we are looking for similar atcitcles. 
    */
   private lowestOfCurrent (urlIn: string | undefined): number {
&nbsp;
      <span class="missing-if-branch" title="if path not taken" >I</span>if (this._chunks.length === 0)
<span class="cstat-no" title="statement not covered" >         return -1;</span>
&nbsp;
      let lowestRelevance = this._chunks[0].relevance;
      let lowestIndex = 0;
      let sameSource = false;
      let sameIndex = -1;
&nbsp;
      <span class="missing-if-branch" title="else path not taken" >E</span>if (urlIn) {
         for (let i = 1; i &lt; this._chunks.length; i++) {
            <span class="missing-if-branch" title="if path not taken" >I</span>if (lookLikeSameSource (urlIn, this._chunks[i].url)) {
<span class="cstat-no" title="statement not covered" >               sameSource = true;</span>
<span class="cstat-no" title="statement not covered" >               sameIndex = i;</span>
            }
         }
      }
&nbsp;
      <span class="missing-if-branch" title="if path not taken" >I</span>if (sameSource) {
         // If we have an entry from the same source, replace if the new one looks better
         let comp = <span class="cstat-no" title="statement not covered" >this._chunks[sameIndex].relevance;</span>
&nbsp;
<span class="cstat-no" title="statement not covered" >         if (typeof comp !== 'undefined' &amp;&amp; typeof lowestRelevance !== 'undefined') {</span>
          
            let current = <span class="cstat-no" title="statement not covered" >this._chunks[sameIndex].relevance;</span>
&nbsp;
<span class="cstat-no" title="statement not covered" >            if ((typeof comp !== 'undefined' &amp;&amp; typeof current !== 'undefined') </span>
               &amp;&amp; (comp &lt; current )) {
<span class="cstat-no" title="statement not covered" >               lowestIndex = sameIndex;</span>
            }
         }
      }
      else {
         // Else replace the lowest relevance entry
         for (let i = 1; i &lt; this._chunks.length; i++) {
&nbsp;
            let comp = this._chunks[i].relevance;
&nbsp;
            <span class="missing-if-branch" title="else path not taken" >E</span>if (typeof comp !== 'undefined' &amp;&amp; typeof lowestRelevance !== 'undefined') {
          
               if (comp &lt; lowestRelevance) {
                  lowestRelevance = comp;
                  lowestIndex = i;
               }
            }
         }
      }
&nbsp;
      return lowestIndex;
   }   
&nbsp;
   /**
    * searches current most relevant results to see if the new one should be included.  
    * @param candidate - the object to test  
    * @param url - optionally, the URL of the source we started with. Use this to avoid picking duplicates. 
    */
   replaceIfBeatsCurrent (candidate: Embedding, urlIn: string | undefined): boolean {
&nbsp;
      // If we have a reference source, check if its just the same source as our reference e.g. different chunk of a Youtube video
      // If it is, we bail 
      if (urlIn &amp;&amp; lookLikeSameSource (candidate.url, urlIn)) {
         return false;
      }
&nbsp;
      // Now check we are not piling up multiple references to the same source
      // If it is, we bail 
      for (let i = 0; i &lt; this._chunks.length; i++) {
         if (lookLikeSameSource (candidate.url, this._chunks[i].url))
            return false;         
      }
            
      // If the array can grow we just add the new candidate
      if (this._chunks.length &lt; this._howMany) {
         if (typeof candidate.relevance !== 'undefined' &amp;&amp; candidate.relevance &gt;= this._similarityThresholdLo) {
            this._chunks.push (candidate);
         }
         return true;
      }
&nbsp;
      // Else we do a search and insert the new one if it is better than a current candidate
      let lowestIndex = this.lowestOfCurrent(candidate.url);
      let currentLowest = this._chunks[lowestIndex];
&nbsp;
      <span class="missing-if-branch" title="else path not taken" >E</span>if (typeof currentLowest.relevance !== 'undefined' 
      &amp;&amp; typeof candidate.relevance !== 'undefined') {
         if (currentLowest.relevance &lt; candidate.relevance &amp;&amp; candidate.relevance &gt;= this._similarityThresholdLo) {
            this._chunks[lowestIndex] = candidate;
            return true;
         }
      }
&nbsp;
      return false;
   }    
}</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\EmbeddingRepositoryFile.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for EmbeddingRepositoryFile.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> EmbeddingRepositoryFile.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">87.87% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>87/99</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">61.53% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>16/26</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">87.5% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>14/16</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">87.23% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>82/94</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a>
<a name='L94'></a><a href='#L94'>94</a>
<a name='L95'></a><a href='#L95'>95</a>
<a name='L96'></a><a href='#L96'>96</a>
<a name='L97'></a><a href='#L97'>97</a>
<a name='L98'></a><a href='#L98'>98</a>
<a name='L99'></a><a href='#L99'>99</a>
<a name='L100'></a><a href='#L100'>100</a>
<a name='L101'></a><a href='#L101'>101</a>
<a name='L102'></a><a href='#L102'>102</a>
<a name='L103'></a><a href='#L103'>103</a>
<a name='L104'></a><a href='#L104'>104</a>
<a name='L105'></a><a href='#L105'>105</a>
<a name='L106'></a><a href='#L106'>106</a>
<a name='L107'></a><a href='#L107'>107</a>
<a name='L108'></a><a href='#L108'>108</a>
<a name='L109'></a><a href='#L109'>109</a>
<a name='L110'></a><a href='#L110'>110</a>
<a name='L111'></a><a href='#L111'>111</a>
<a name='L112'></a><a href='#L112'>112</a>
<a name='L113'></a><a href='#L113'>113</a>
<a name='L114'></a><a href='#L114'>114</a>
<a name='L115'></a><a href='#L115'>115</a>
<a name='L116'></a><a href='#L116'>116</a>
<a name='L117'></a><a href='#L117'>117</a>
<a name='L118'></a><a href='#L118'>118</a>
<a name='L119'></a><a href='#L119'>119</a>
<a name='L120'></a><a href='#L120'>120</a>
<a name='L121'></a><a href='#L121'>121</a>
<a name='L122'></a><a href='#L122'>122</a>
<a name='L123'></a><a href='#L123'>123</a>
<a name='L124'></a><a href='#L124'>124</a>
<a name='L125'></a><a href='#L125'>125</a>
<a name='L126'></a><a href='#L126'>126</a>
<a name='L127'></a><a href='#L127'>127</a>
<a name='L128'></a><a href='#L128'>128</a>
<a name='L129'></a><a href='#L129'>129</a>
<a name='L130'></a><a href='#L130'>130</a>
<a name='L131'></a><a href='#L131'>131</a>
<a name='L132'></a><a href='#L132'>132</a>
<a name='L133'></a><a href='#L133'>133</a>
<a name='L134'></a><a href='#L134'>134</a>
<a name='L135'></a><a href='#L135'>135</a>
<a name='L136'></a><a href='#L136'>136</a>
<a name='L137'></a><a href='#L137'>137</a>
<a name='L138'></a><a href='#L138'>138</a>
<a name='L139'></a><a href='#L139'>139</a>
<a name='L140'></a><a href='#L140'>140</a>
<a name='L141'></a><a href='#L141'>141</a>
<a name='L142'></a><a href='#L142'>142</a>
<a name='L143'></a><a href='#L143'>143</a>
<a name='L144'></a><a href='#L144'>144</a>
<a name='L145'></a><a href='#L145'>145</a>
<a name='L146'></a><a href='#L146'>146</a>
<a name='L147'></a><a href='#L147'>147</a>
<a name='L148'></a><a href='#L148'>148</a>
<a name='L149'></a><a href='#L149'>149</a>
<a name='L150'></a><a href='#L150'>150</a>
<a name='L151'></a><a href='#L151'>151</a>
<a name='L152'></a><a href='#L152'>152</a>
<a name='L153'></a><a href='#L153'>153</a>
<a name='L154'></a><a href='#L154'>154</a>
<a name='L155'></a><a href='#L155'>155</a>
<a name='L156'></a><a href='#L156'>156</a>
<a name='L157'></a><a href='#L157'>157</a>
<a name='L158'></a><a href='#L158'>158</a>
<a name='L159'></a><a href='#L159'>159</a>
<a name='L160'></a><a href='#L160'>160</a>
<a name='L161'></a><a href='#L161'>161</a>
<a name='L162'></a><a href='#L162'>162</a>
<a name='L163'></a><a href='#L163'>163</a>
<a name='L164'></a><a href='#L164'>164</a>
<a name='L165'></a><a href='#L165'>165</a>
<a name='L166'></a><a href='#L166'>166</a>
<a name='L167'></a><a href='#L167'>167</a>
<a name='L168'></a><a href='#L168'>168</a>
<a name='L169'></a><a href='#L169'>169</a>
<a name='L170'></a><a href='#L170'>170</a>
<a name='L171'></a><a href='#L171'>171</a>
<a name='L172'></a><a href='#L172'>172</a>
<a name='L173'></a><a href='#L173'>173</a>
<a name='L174'></a><a href='#L174'>174</a>
<a name='L175'></a><a href='#L175'>175</a>
<a name='L176'></a><a href='#L176'>176</a>
<a name='L177'></a><a href='#L177'>177</a>
<a name='L178'></a><a href='#L178'>178</a>
<a name='L179'></a><a href='#L179'>179</a>
<a name='L180'></a><a href='#L180'>180</a>
<a name='L181'></a><a href='#L181'>181</a>
<a name='L182'></a><a href='#L182'>182</a>
<a name='L183'></a><a href='#L183'>183</a>
<a name='L184'></a><a href='#L184'>184</a>
<a name='L185'></a><a href='#L185'>185</a>
<a name='L186'></a><a href='#L186'>186</a>
<a name='L187'></a><a href='#L187'>187</a>
<a name='L188'></a><a href='#L188'>188</a>
<a name='L189'></a><a href='#L189'>189</a>
<a name='L190'></a><a href='#L190'>190</a>
<a name='L191'></a><a href='#L191'>191</a>
<a name='L192'></a><a href='#L192'>192</a>
<a name='L193'></a><a href='#L193'>193</a>
<a name='L194'></a><a href='#L194'>194</a>
<a name='L195'></a><a href='#L195'>195</a>
<a name='L196'></a><a href='#L196'>196</a>
<a name='L197'></a><a href='#L197'>197</a>
<a name='L198'></a><a href='#L198'>198</a>
<a name='L199'></a><a href='#L199'>199</a>
<a name='L200'></a><a href='#L200'>200</a>
<a name='L201'></a><a href='#L201'>201</a>
<a name='L202'></a><a href='#L202'>202</a>
<a name='L203'></a><a href='#L203'>203</a>
<a name='L204'></a><a href='#L204'>204</a>
<a name='L205'></a><a href='#L205'>205</a>
<a name='L206'></a><a href='#L206'>206</a>
<a name='L207'></a><a href='#L207'>207</a>
<a name='L208'></a><a href='#L208'>208</a>
<a name='L209'></a><a href='#L209'>209</a>
<a name='L210'></a><a href='#L210'>210</a>
<a name='L211'></a><a href='#L211'>211</a>
<a name='L212'></a><a href='#L212'>212</a>
<a name='L213'></a><a href='#L213'>213</a>
<a name='L214'></a><a href='#L214'>214</a>
<a name='L215'></a><a href='#L215'>215</a>
<a name='L216'></a><a href='#L216'>216</a>
<a name='L217'></a><a href='#L217'>217</a>
<a name='L218'></a><a href='#L218'>218</a>
<a name='L219'></a><a href='#L219'>219</a>
<a name='L220'></a><a href='#L220'>220</a>
<a name='L221'></a><a href='#L221'>221</a>
<a name='L222'></a><a href='#L222'>222</a>
<a name='L223'></a><a href='#L223'>223</a>
<a name='L224'></a><a href='#L224'>224</a>
<a name='L225'></a><a href='#L225'>225</a>
<a name='L226'></a><a href='#L226'>226</a>
<a name='L227'></a><a href='#L227'>227</a>
<a name='L228'></a><a href='#L228'>228</a>
<a name='L229'></a><a href='#L229'>229</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">10956x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">16828416x</span>
<span class="cline-any cline-yes">16828416x</span>
<span class="cline-any cline-yes">16828416x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">10956x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">10956x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">10956x</span>
<span class="cline-any cline-yes">10956x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">10956x</span>
<span class="cline-any cline-yes">10956x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2702x</span>
<span class="cline-any cline-yes">2702x</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">11x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
 
import { IEmbeddingRepository, kDefaultMinimumCosineSimilarity, kDefaultSearchChunkCount } from "./IEmbeddingRepository";
import { Embedding, EmbeddingMatchAccumulator } from "./Embedding";
import { LiteEmbedding } from "./EmbeddingFormats";
import { Message } from "./Message";
import { EConfigStrings, EConfigNumbers } from "./ConfigStrings";
import { Environment, EEnvironment } from "./Environment";
import { ConnectionError } from "./Errors";
import { logApiInfo } from "./Logging";
&nbsp;
let embeddings = new Array&lt;LiteEmbedding&gt; ();
&nbsp;
/**
 * Calculates the cosine similarity between two vectors.
 * @param vector1 The first vector.
 * @param vector2 The second vector.
 * @returns The cosine similarity score.
 */
export function cosineSimilarity(vector1: number[], vector2: number[]): number {
   <span class="missing-if-branch" title="if path not taken" >I</span>if (vector1.length !== vector2.length) {
<span class="cstat-no" title="statement not covered" >       throw new Error("Vector dimensions must match for cosine similarity calculation.");</span>
   }
&nbsp;
   const dotProduct = vector1.reduce((acc, val, index) =&gt; acc + val * vector2[index], 0);
   const magnitude1 = Math.sqrt(vector1.reduce((acc, val) =&gt; acc + val ** 2, 0));
   const magnitude2 = Math.sqrt(vector2.reduce((acc, val) =&gt; acc + val ** 2, 0));
&nbsp;
   <span class="missing-if-branch" title="if path not taken" >I</span>if (magnitude1 === 0 || magnitude2 === 0) {
<span class="cstat-no" title="statement not covered" >       throw new Error("Magnitude of a vector must be non-zero for cosine similarity calculation.");</span>
   }
&nbsp;
   return dotProduct / (magnitude1 * magnitude2);
}
&nbsp;
function lookupMostSimilar (repository: Array&lt;LiteEmbedding&gt;, 
   embedding: Array&lt;number&gt;, urlIn: string | undefined, 
   builder: EmbeddingMatchAccumulator): void {
&nbsp;
      for (let i = 0; i &lt; repository.length; i++) {
&nbsp;
         let url = repository[i].url; 
         let relevance = Number (cosineSimilarity (embedding, repository[i].ada_v2).toPrecision(2));
&nbsp;
         let candidate = new Embedding (url, repository[i].summary, repository[i].ada_v2, undefined, relevance);
         let changed = builder.replaceIfBeatsCurrent (candidate, urlIn);
      }         
}
&nbsp;
function lookupUrl (repository: Array&lt;LiteEmbedding&gt;, 
   urlIn: string | undefined): Embedding | undefined {
&nbsp;
      for (let i = 0; i &lt; repository.length; i++) {
&nbsp;
         let url = repository[i].url; 
         if (url === urlIn) {
            let candidate = new Embedding (url, repository[i].summary, repository[i].ada_v2, undefined, undefined);
            return candidate;
         }
      }   
&nbsp;
<span class="cstat-no" title="statement not covered" >      return undefined;     </span>
}
&nbsp;
export class EmbeddingRepositoryFile implements IEmbeddingRepository {
&nbsp;
   async lookupMostSimilar (embedding: Array&lt;number&gt;, url: string | undefined, 
      similarityThresholdLo: number, howMany: number) : Promise&lt;EmbeddingMatchAccumulator&gt; {
&nbsp;
      await waitforEmbeddedingLoad();
&nbsp;
      let chunks = new EmbeddingMatchAccumulator (similarityThresholdLo, howMany);
&nbsp;
      lookupMostSimilar (embeddings as Array&lt;LiteEmbedding&gt;, embedding, url, chunks);
&nbsp;
      return chunks;
   }   
&nbsp;
   /**
    * lookUpSimilarfromUrl 
    * look to see of we have similar content from other sources
    */   
   async lookupSimilarfromUrl (url: string, similarityThresholdLo: number, howMany: number) : Promise&lt;EmbeddingMatchAccumulator&gt; {
      
      await waitforEmbeddedingLoad();
&nbsp;
      let chunkIn = lookupUrl (embeddings as Array&lt;LiteEmbedding&gt;, url);
&nbsp;
      <span class="missing-if-branch" title="else path not taken" >E</span>if (chunkIn) {
         return this.lookupMostSimilar (chunkIn.ada_v2, url, 
                                        similarityThresholdLo, howMany);
      }
&nbsp;
<span class="cstat-no" title="statement not covered" >      return new EmbeddingMatchAccumulator(similarityThresholdLo, howMany);</span>
   }
&nbsp;
   /**
    * lookupUrlSummary 
    * looks for summary given a URL
    */      
<span class="fstat-no" title="function not covered" >   async </span>lookupUrlSummary (url: string) : Promise&lt;string | undefined&gt; {
&nbsp;
<span class="cstat-no" title="statement not covered" >      await waitforEmbeddedingLoad();</span>
&nbsp;
      let chunkIn = <span class="cstat-no" title="statement not covered" >lookupUrl (embeddings as Array&lt;LiteEmbedding&gt;, url);</span>
&nbsp;
<span class="cstat-no" title="statement not covered" >      return chunkIn ? chunkIn.summary : undefined;</span>
   }
&nbsp;
   async lookForRelatedContent (url_: string | undefined, messageText: string) : Promise&lt;Message | undefined&gt; {
&nbsp;
      let candidateChunk : Embedding | undefined = undefined;
      let haveUrl = true;
&nbsp;
      await waitforEmbeddedingLoad();
&nbsp;
      // If we do not have a history, provide a helpful start point 
      if (!url_) {
         haveUrl = false;
         url_ = "https://github.com/microsoft/generative-ai-for-beginners/blob/main/01-introduction-to-genai/README.md";         
         candidateChunk = lookupUrl (embeddings as Array&lt;LiteEmbedding&gt;, url_);
      }
      else {
         let finder = await this.lookupSimilarfromUrl (url_, kDefaultMinimumCosineSimilarity, kDefaultSearchChunkCount);         
         <span class="missing-if-branch" title="else path not taken" >E</span>if (finder.chunks.length &gt; 0)
            candidateChunk = finder.chunks[0];
      }
&nbsp;
      <span class="missing-if-branch" title="else path not taken" >E</span>if (candidateChunk) {
&nbsp;
         let suggested = new Message();
         suggested.authorId = EConfigStrings.kLLMGuid;
         suggested.text = messageText; 
         suggested.sentAt = new Date();
&nbsp;
         let chunks = new Array&lt;Embedding&gt; ();         
         chunks.push (candidateChunk);
&nbsp;
         suggested.chunks = chunks;
&nbsp;
         return suggested;
      }
      
<span class="cstat-no" title="statement not covered" >      return undefined;   </span>
   }
}
&nbsp;
let haveLoaded: boolean = false;
let started = false;
&nbsp;
async function startEmbeddingFileDownload () : Promise&lt;boolean&gt; {
   
   if (started)
      return false;
&nbsp;
   started = true;
&nbsp;
   let environment = Environment.environment();
   let url = "";
&nbsp;
   <span class="missing-if-branch" title="else path not taken" >E</span>if (environment === EEnvironment.kLocal) {
      url = EConfigStrings.kEmbeddingFileUrlLocal;
   }
   else {
<span class="cstat-no" title="statement not covered" >      url = EConfigStrings.kEmbeddingFileUrlProduction;</span>
   }
&nbsp;
   let startTime = new Date();
&nbsp;
   const response : Response = await fetch(url, {
      method: "GET", 
      mode: "same-origin",  
      cache: "default",    
      credentials: "same-origin", 
      headers: {
         "Content-Type": "application/json",
      },
      redirect: "follow", 
      referrerPolicy: "no-referrer", 
   });
&nbsp;
   response.json().then ((data: any) =&gt; {
       embeddings = data;
       haveLoaded = true;
       let endTime = new Date();   
       
       logApiInfo ("Embedding file loadtime: ", endTime.getTime() - startTime.getTime())
       return true;
&nbsp;
   }).catch (<span class="fstat-no" title="function not covered" >(e</span>rr) =&gt; {
<span class="cstat-no" title="statement not covered" >       throw new ConnectionError (err.toString());      </span>
   })
&nbsp;
   // Cant actualy get here but compiler complains
   return started;
}
&nbsp;
 async function waitforEmbeddedingLoad () : Promise&lt;boolean&gt; {
&nbsp;
   startEmbeddingFileDownload();
&nbsp;
   let maxTries = 4 * EConfigNumbers.kMaxDownloadWaitSeconds; // The '4' must move on cencert with the '250' msecs below
                                                              // i.e 4 * 250 msecs = target max delay in seconds
   let done = new Promise&lt;boolean&gt; (function(resolve, reject) {
     
      function inner () {
&nbsp;
         maxTries--;
&nbsp;
         <span class="missing-if-branch" title="else path not taken" >E</span>if (haveLoaded) {
            resolve (true);
            clearInterval(timeoutID);
         }
&nbsp;
         <span class="missing-if-branch" title="if path not taken" >I</span>if (maxTries === 0) {
<span class="cstat-no" title="statement not covered" >            reject();</span>
<span class="cstat-no" title="statement not covered" >            clearInterval(timeoutID);               </span>
         }
&nbsp;
      }
&nbsp;
      let timeoutID = setInterval(inner, 250);     
   });
&nbsp;
   return done; 
}
&nbsp;
// Get download started on module load
startEmbeddingFileDownload();</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\Environment.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for Environment.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> Environment.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>10/10</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>2/2</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>3/3</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>10/10</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">30x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">24x</span>
<span class="cline-any cline-yes">24x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">24x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
&nbsp;
export enum EEnvironment {
&nbsp;
   kLocal = "Local", 
   kStaging = "Staging", 
   kProduction = "Production"
   
};
&nbsp;
let environment = EEnvironment.kLocal;
&nbsp;
export class Environment {
&nbsp;
   // returns the environment type.
   // code lines are different for each environment
   static environment  () : EEnvironment {
      return environment;
   }
&nbsp;
   static override (newEnvironment: EEnvironment): EEnvironment {
&nbsp;
      let prev = environment;
      environment = newEnvironment;
&nbsp;
      return  prev;
   }
&nbsp;
}</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\Errors.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for Errors.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> Errors.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>31/31</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">50% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>12/24</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>6/6</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>31/31</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a>
<a name='L94'></a><a href='#L94'>94</a>
<a name='L95'></a><a href='#L95'>95</a>
<a name='L96'></a><a href='#L96'>96</a>
<a name='L97'></a><a href='#L97'>97</a>
<a name='L98'></a><a href='#L98'>98</a>
<a name='L99'></a><a href='#L99'>99</a>
<a name='L100'></a><a href='#L100'>100</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">25x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">25x</span>
<span class="cline-any cline-yes">25x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">25x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
&nbsp;
import { logApiError, logCoreError } from "./Logging";
&nbsp;
export class InvalidParameterError extends Error {
   constructor(message?: string) {
      super(message);
      // see: typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html
      Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
      this.name = InvalidParameterError.name; // stack traces display correctly now
&nbsp;
      logCoreError ("InvalidParameterError:" + (message ? message : <span class="branch-1 cbranch-no" title="branch not covered" >"")</span>, this.cause ? <span class="branch-0 cbranch-no" title="branch not covered" >this.cause:</span> "");
   }
}
&nbsp;
export class InvalidOperationError extends Error {
   constructor(message?: string) {
      super(message);
      // see: typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html
      Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
      this.name = InvalidOperationError.name; // stack traces display correctly now
&nbsp;
      logCoreError ("InvalidOperationError:" + (message ? message : <span class="branch-1 cbranch-no" title="branch not covered" >"")</span>, this.cause ? <span class="branch-0 cbranch-no" title="branch not covered" >this.cause:</span> "");      
   }
}
&nbsp;
export class InvalidStateError extends Error {
   constructor(message?: string) {
      super(message);
      // see: typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html
      Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
      this.name = InvalidStateError.name; // stack traces display correctly now
&nbsp;
      logCoreError ("InvalidStateError:" + (message ? message : <span class="branch-1 cbranch-no" title="branch not covered" >"")</span>, this.cause ? <span class="branch-0 cbranch-no" title="branch not covered" >this.cause:</span> "");      
   }
}
&nbsp;
export class ConnectionError extends Error {
   constructor(message?: string) {
      super(message);
      // see: typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html
      Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
      this.name = ConnectionError.name; // stack traces display correctly now
&nbsp;
      logApiError ("ConnectionError:" + (message ? message : <span class="branch-1 cbranch-no" title="branch not covered" >"")</span>, this.cause ? <span class="branch-0 cbranch-no" title="branch not covered" >this.cause:</span> "");      
   }
}
&nbsp;
export class EnvironmentError extends Error {
   constructor(message?: string) {
      super(message);
      // see: typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html
      Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
      this.name = EnvironmentError.name; // stack traces display correctly now
&nbsp;
      logCoreError ("EnvironmentError:" + (message ? message : <span class="branch-1 cbranch-no" title="branch not covered" >"")</span>, this.cause ? <span class="branch-0 cbranch-no" title="branch not covered" >this.cause:</span> "");       
   }
}
&nbsp;
export class AssertionFailedError extends Error {
   constructor(message?: string) {
      super(message);
      // see: typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html
      Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
      this.name = AssertionFailedError.name; // stack traces display correctly now
&nbsp;
      logCoreError ("AssertionFailedError:" + (message ? message : <span class="branch-1 cbranch-no" title="branch not covered" >"")</span>, this.cause ? <span class="branch-0 cbranch-no" title="branch not covered" >this.cause:</span> "");       
   }
}
&nbsp;
/*
 
export class InvalidUnitError extends Error {
   constructor(message?: string) {
      super(message);
      // see: typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html
      Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
      this.name = InvalidUnitError.name; // stack traces display correctly now
   }
}
&nbsp;
export class InvalidFormatError extends Error {
   constructor(message?: string) {
      super(message);
      // see: typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html
      Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
      this.name = InvalidFormatError.name; // stack traces display correctly now
   }
}
&nbsp;
export class InvalidServerResponseError extends Error {
   constructor(message?: string) {
      super(message);
      // see: typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html
      Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
      this.name = InvalidServerResponseError.name; // stack traces display correctly now
   }
}
&nbsp;
*/</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\FluidConnection.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for FluidConnection.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> FluidConnection.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">69.64% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>39/56</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">35.71% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>5/14</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">72.72% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>8/11</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">69.64% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>39/56</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line medium'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a>
<a name='L94'></a><a href='#L94'>94</a>
<a name='L95'></a><a href='#L95'>95</a>
<a name='L96'></a><a href='#L96'>96</a>
<a name='L97'></a><a href='#L97'>97</a>
<a name='L98'></a><a href='#L98'>98</a>
<a name='L99'></a><a href='#L99'>99</a>
<a name='L100'></a><a href='#L100'>100</a>
<a name='L101'></a><a href='#L101'>101</a>
<a name='L102'></a><a href='#L102'>102</a>
<a name='L103'></a><a href='#L103'>103</a>
<a name='L104'></a><a href='#L104'>104</a>
<a name='L105'></a><a href='#L105'>105</a>
<a name='L106'></a><a href='#L106'>106</a>
<a name='L107'></a><a href='#L107'>107</a>
<a name='L108'></a><a href='#L108'>108</a>
<a name='L109'></a><a href='#L109'>109</a>
<a name='L110'></a><a href='#L110'>110</a>
<a name='L111'></a><a href='#L111'>111</a>
<a name='L112'></a><a href='#L112'>112</a>
<a name='L113'></a><a href='#L113'>113</a>
<a name='L114'></a><a href='#L114'>114</a>
<a name='L115'></a><a href='#L115'>115</a>
<a name='L116'></a><a href='#L116'>116</a>
<a name='L117'></a><a href='#L117'>117</a>
<a name='L118'></a><a href='#L118'>118</a>
<a name='L119'></a><a href='#L119'>119</a>
<a name='L120'></a><a href='#L120'>120</a>
<a name='L121'></a><a href='#L121'>121</a>
<a name='L122'></a><a href='#L122'>122</a>
<a name='L123'></a><a href='#L123'>123</a>
<a name='L124'></a><a href='#L124'>124</a>
<a name='L125'></a><a href='#L125'>125</a>
<a name='L126'></a><a href='#L126'>126</a>
<a name='L127'></a><a href='#L127'>127</a>
<a name='L128'></a><a href='#L128'>128</a>
<a name='L129'></a><a href='#L129'>129</a>
<a name='L130'></a><a href='#L130'>130</a>
<a name='L131'></a><a href='#L131'>131</a>
<a name='L132'></a><a href='#L132'>132</a>
<a name='L133'></a><a href='#L133'>133</a>
<a name='L134'></a><a href='#L134'>134</a>
<a name='L135'></a><a href='#L135'>135</a>
<a name='L136'></a><a href='#L136'>136</a>
<a name='L137'></a><a href='#L137'>137</a>
<a name='L138'></a><a href='#L138'>138</a>
<a name='L139'></a><a href='#L139'>139</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
import { IFluidContainer, ConnectionState } from "fluid-framework";
import { AzureClient } from "@fluidframework/azure-client";
&nbsp;
import { throwIfUndefined } from "./Asserts";
import { logApiError } from "./Logging";
import { ConnectionError, InvalidOperationError, InvalidStateError} from './Errors';
import { Interest, NotificationFor, Notifier } from './NotificationFramework';
import { SessionKey, ConversationKey } from "./Keys";
import { ClientProps } from './FluidConnectionProps';
&nbsp;
export interface IConnectionProps {
}
&nbsp;
export abstract class FluidConnection {
&nbsp;
   public static connectedNotificationId = "connected";
   public static connectedInterest = new Interest(FluidConnection.connectedNotificationId);
&nbsp;
   _props: IConnectionProps;
   _client: AzureClient | undefined;
   _container: IFluidContainer | undefined;
&nbsp;
   constructor(props: IConnectionProps) {
&nbsp;
      this._client = undefined;
      this._props = props;
      this._container = undefined;
   }
&nbsp;
   async createNew(sessionKey_: SessionKey): Promise&lt;ConversationKey&gt; {
&nbsp;
      try {
         await this.setupBeforeConnection (sessionKey_);
&nbsp;
         throwIfUndefined (this._client);
         const { container, services } = await this._client.createContainer(this.schema());
         this._container = container;
&nbsp;
         let self = this;
&nbsp;
         return new Promise&lt;ConversationKey&gt;((resolve, reject) =&gt; {
            // Attach _container to service and return assigned ID
            const containerIdPromise = container.attach();
&nbsp;
            containerIdPromise.then((containerId) =&gt; {
               <span class="missing-if-branch" title="else path not taken" >E</span>if (this._container) {
                  self.setupAfterConnection(this._container);
               }
               else {
<span class="cstat-no" title="statement not covered" >                  logApiError ("FluidConnection is in inconsistent internal state.", null);</span>
<span class="cstat-no" title="statement not covered" >                  throw new InvalidStateError("FluidConnection is in inconsistent internal state.");</span>
               }
&nbsp;
               resolve (new ConversationKey (containerId));
            }).catch(<span class="fstat-no" title="function not covered" >(e</span>: any) =&gt; {
<span class="cstat-no" title="statement not covered" >               logApiError ("Error connecting to conversation: ", e);               </span>
<span class="cstat-no" title="statement not covered" >               reject ();</span>
            });
         });
      }
      catch (e: any) {
<span class="cstat-no" title="statement not covered" >         throw new ConnectionError("Error connecting new container to remote data service: " + e ? e.message : "(no details found)");</span>
      }
   }
&nbsp;
<span class="fstat-no" title="function not covered" >   async </span>attachToExisting(sessionKey_: SessionKey, conversationKey_: ConversationKey): Promise&lt;ConversationKey&gt; {
&nbsp;
<span class="cstat-no" title="statement not covered" >      try {</span>
<span class="cstat-no" title="statement not covered" >         await this.setupBeforeConnection (sessionKey_);</span>
&nbsp;
<span class="cstat-no" title="statement not covered" >         throwIfUndefined (this._client);</span>
         const { container, services } = <span class="cstat-no" title="statement not covered" >await this._client.getContainer(conversationKey_.toString(), this.schema());</span>
<span class="cstat-no" title="statement not covered" >         this._container = container;</span>
&nbsp;
<span class="cstat-no" title="statement not covered" >         this.setupAfterConnection(this._container);</span>
&nbsp;
<span class="cstat-no" title="statement not covered" >         return conversationKey_;</span>
      }
      catch (e: any) {
<span class="cstat-no" title="statement not covered" >         throw new ConnectionError("Error attaching existing container to remote data service: " + e ? e.message : "(no details found)")</span>
      }
   }
&nbsp;
   canDisconnect(): boolean {
&nbsp;
      <span class="missing-if-branch" title="if path not taken" >I</span>if (!this._container)
<span class="cstat-no" title="statement not covered" >         return false;</span>
&nbsp;
      var state = this._container.connectionState;
      <span class="missing-if-branch" title="if path not taken" >I</span>if (state !== ConnectionState.Connected)
<span class="cstat-no" title="statement not covered" >         return false;</span>
&nbsp;
      return true;
   }
&nbsp;
<span class="fstat-no" title="function not covered" >   isConnected </span>(): boolean {
&nbsp;
<span class="cstat-no" title="statement not covered" >      return this.canDisconnect();</span>
   }
&nbsp;
   async disconnect(): Promise&lt;boolean&gt; {
&nbsp;
      <span class="missing-if-branch" title="else path not taken" >E</span>if (this.canDisconnect()) {
         <span class="missing-if-branch" title="else path not taken" >E</span>if (this._container) {
            await this._container.disconnect();
            this.disconnectLocalCaucuses();
         }
&nbsp;
         return true;
      }
      else {
<span class="cstat-no" title="statement not covered" >         throw new InvalidOperationError("The remote data service is not connected.")</span>
      }
   }
&nbsp;
   // local function to cut down duplication between createNew() and AttachToExisting())
   private async setupBeforeConnection(sessionKey_: SessionKey): Promise&lt;void&gt; {
&nbsp;
      var clientProps: ClientProps = new ClientProps();
      await clientProps.connection.makeTokenProvider(sessionKey_);
      this._client = new AzureClient(clientProps);
   }
&nbsp;
   // local function to cut down duplication between createNew() and AttachToExisting())
   private setupAfterConnection(container: IFluidContainer): void {
&nbsp;
      // Create caucuses so they exist when observers are notified of connection
      this.setupLocalCaucuses (container.initialObjects);
   }
&nbsp;
   abstract schema() : any;
   abstract setupLocalCaucuses(initialObjects: any) : void;
   abstract disconnectLocalCaucuses () : void;
}
&nbsp;
&nbsp;
&nbsp;
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\FluidConnectionProps.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for FluidConnectionProps.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> FluidConnectionProps.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">69.56% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>16/23</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">50% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>1/2</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>3/3</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">69.56% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>16/23</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line medium'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
&nbsp;
// This is a separate file to simplify branching between local &amp; remote operation
&nbsp;
import { InsecureTokenProvider } from "@fluidframework/test-client-utils";
import { AzureRemoteConnectionConfig, AzureClientProps, ITokenProvider } from "@fluidframework/azure-client";
&nbsp;
import { EEnvironment, Environment } from "./Environment";
import { KeyRetriever } from "./KeyRetriever";
import { EConfigStrings } from "./ConfigStrings";
import { SessionKey } from "./Keys";
&nbsp;
var documentUuid: string = "b03724b3-4be0-4491-b0fa-43b01ab80d50";
&nbsp;
export class ConnectionConfig implements AzureRemoteConnectionConfig {
&nbsp;
   tokenProvider: ITokenProvider; 
   endpoint: string;
   type: any;
   tenantId: string;
   documentId: string;
&nbsp;
   constructor() {
      this.documentId = documentUuid;
&nbsp;
   }
&nbsp;
   async makeTokenProvider(sessionKey: SessionKey): Promise&lt;ITokenProvider&gt; {
&nbsp;
      var user: any = { id: documentUuid, name: "@Braid Chat" };
&nbsp;
      <span class="missing-if-branch" title="else path not taken" >E</span>if (Environment.environment() == EEnvironment.kLocal) {
&nbsp;
         this.tenantId = EConfigStrings.kAzureTenantId;
         this.endpoint = EConfigStrings.kAzureLocalFluidHost;
         this.type = "local";
         this.tokenProvider = new InsecureTokenProvider('testKey', user);
&nbsp;
         return (this.tokenProvider);
      }
      else {
&nbsp;
<span class="cstat-no" title="statement not covered" >         this.tenantId = EConfigStrings.kAzureTenantId;</span>
<span class="cstat-no" title="statement not covered" >         this.endpoint = EConfigStrings.kAzureProductionFluidHost;</span>
<span class="cstat-no" title="statement not covered" >         this.type = "remote";</span>
&nbsp;
         let retriever = <span class="cstat-no" title="statement not covered" >new KeyRetriever ()</span>
         var key = <span class="cstat-no" title="statement not covered" >await retriever.requestKey (EConfigStrings.kRequestSessionKeyUrl, </span>
                                               EConfigStrings.kSessionParamName, 
                                               sessionKey);
&nbsp;
<span class="cstat-no" title="statement not covered" >         this.tokenProvider = new InsecureTokenProvider(key, user);</span>
         
<span class="cstat-no" title="statement not covered" >         return (this.tokenProvider);</span>
      }
   }
};
&nbsp;
export class ClientProps implements AzureClientProps {
   connection: ConnectionConfig;
&nbsp;
   constructor() {
      this.connection = new ConnectionConfig();
   }
};
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************

****************************************
Boxer\coverage\IActivityRepositoryFactory.ts.html
****************************************

<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for IActivityRepositoryFactory.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> IActivityRepositoryFactory.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>3/3</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>0/0</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>1/1</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>3/3</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input oninput="onInput()" type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">// Copyright (c) 2024 Braid Technologies Ltd
&nbsp;
// Internal imports
import { SessionKey } from "./Keys";
import { IActivityRepository } from "./IActivityRepository";
import { ActivityRepositoryMongo } from "./ActivityRepositoryMongo";
import { ActivityRepositoryCosmos } from "./ActivityRepositoryCosmos";
&nbsp;
export function getRecordRepository (sessionKey_: SessionKey) : IActivityRepository {
   return new ActivityRepositoryCosmos(sessionKey_);   
}
&nbsp;
&nbsp;
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2024-07-01T20:13:43.110Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>
****************************************
